"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/framer-motion";
exports.ids = ["vendor-chunks/framer-motion"];
exports.modules = {

/***/ "(ssr)/./node_modules/framer-motion/dist/cjs/index-legacy-c80d64bf.js":
/*!**********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/cjs/index-legacy-c80d64bf.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nconst isBrowser = typeof document !== \"undefined\";\n/**\n * Convert camelCase to dash-case properties.\n */ const camelToDash = (str)=>str.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\nconst optimizedAppearDataId = \"framerAppearId\";\nconst optimizedAppearDataAttribute = \"data-\" + camelToDash(optimizedAppearDataId);\nfunction isRefObject(ref) {\n    return typeof ref === \"object\" && Object.prototype.hasOwnProperty.call(ref, \"current\");\n}\n/**\n * Decides if the supplied variable is variant label\n */ function isVariantLabel(v) {\n    return typeof v === \"string\" || Array.isArray(v);\n}\nfunction isAnimationControls(v) {\n    return typeof v === \"object\" && typeof v.start === \"function\";\n}\nconst variantPriorityOrder = [\n    \"animate\",\n    \"whileInView\",\n    \"whileFocus\",\n    \"whileHover\",\n    \"whileTap\",\n    \"whileDrag\",\n    \"exit\"\n];\nconst variantProps = [\n    \"initial\",\n    ...variantPriorityOrder\n];\nfunction isControllingVariants(props) {\n    return isAnimationControls(props.animate) || variantProps.some((name)=>isVariantLabel(props[name]));\n}\nfunction isVariantNode(props) {\n    return Boolean(isControllingVariants(props) || props.variants);\n}\nconst featureProps = {\n    animation: [\n        \"animate\",\n        \"variants\",\n        \"whileHover\",\n        \"whileTap\",\n        \"exit\",\n        \"whileInView\",\n        \"whileFocus\",\n        \"whileDrag\"\n    ],\n    exit: [\n        \"exit\"\n    ],\n    drag: [\n        \"drag\",\n        \"dragControls\"\n    ],\n    focus: [\n        \"whileFocus\"\n    ],\n    hover: [\n        \"whileHover\",\n        \"onHoverStart\",\n        \"onHoverEnd\"\n    ],\n    tap: [\n        \"whileTap\",\n        \"onTap\",\n        \"onTapStart\",\n        \"onTapCancel\"\n    ],\n    pan: [\n        \"onPan\",\n        \"onPanStart\",\n        \"onPanSessionStart\",\n        \"onPanEnd\"\n    ],\n    inView: [\n        \"whileInView\",\n        \"onViewportEnter\",\n        \"onViewportLeave\"\n    ],\n    layout: [\n        \"layout\",\n        \"layoutId\"\n    ]\n};\nconst featureDefinitions = {};\nfor(const key in featureProps){\n    featureDefinitions[key] = {\n        isEnabled: (props)=>featureProps[key].some((name)=>!!props[name])\n    };\n}\nconst scaleCorrectors = {};\nfunction addScaleCorrector(correctors) {\n    Object.assign(scaleCorrectors, correctors);\n}\n/**\n * Generate a list of every possible transform key.\n */ const transformPropOrder = [\n    \"transformPerspective\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"translateX\",\n    \"translateY\",\n    \"translateZ\",\n    \"scale\",\n    \"scaleX\",\n    \"scaleY\",\n    \"rotate\",\n    \"rotateX\",\n    \"rotateY\",\n    \"rotateZ\",\n    \"skew\",\n    \"skewX\",\n    \"skewY\"\n];\n/**\n * A quick lookup for transform props.\n */ const transformProps = new Set(transformPropOrder);\nfunction isForcedMotionValue(key, { layout, layoutId }) {\n    return transformProps.has(key) || key.startsWith(\"origin\") || (layout || layoutId !== undefined) && (!!scaleCorrectors[key] || key === \"opacity\");\n}\nconst isMotionValue = (value)=>Boolean(value && value.getVelocity);\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\"\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */ function buildTransform(transform, { enableHardwareAcceleration = true, allowTransformNone = true }, transformIsDefault, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */ for(let i = 0; i < numTransforms; i++){\n        const key = transformPropOrder[i];\n        if (transform[key] !== undefined) {\n            const transformName = translateAlias[key] || key;\n            transformString += `${transformName}(${transform[key]}) `;\n        }\n    }\n    if (enableHardwareAcceleration && !transform.z) {\n        transformString += \"translateZ(0)\";\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    } else if (allowTransformNone && transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\nconst checkStringStartsWith = (token)=>(key)=>typeof key === \"string\" && key.startsWith(token);\nconst isCSSVariableName = checkStringStartsWith(\"--\");\nconst isCSSVariableToken = checkStringStartsWith(\"var(--\");\nconst cssVariableRegex = /var\\s*\\(\\s*--[\\w-]+(\\s*,\\s*(?:(?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)+)?\\s*\\)/g;\n/**\n * Provided a value and a ValueType, returns the value as that value type.\n */ const getValueAsType = (value, type)=>{\n    return type && typeof value === \"number\" ? type.transform(value) : value;\n};\nconst clamp = (min, max, v)=>Math.min(Math.max(v, min), max);\nconst number = {\n    test: (v)=>typeof v === \"number\",\n    parse: parseFloat,\n    transform: (v)=>v\n};\nconst alpha = {\n    ...number,\n    transform: (v)=>clamp(0, 1, v)\n};\nconst scale = {\n    ...number,\n    default: 1\n};\n/**\n * TODO: When we move from string as a source of truth to data models\n * everything in this folder should probably be referred to as models vs types\n */ // If this number is a decimal, make it just five decimal places\n// to avoid exponents\nconst sanitize = (v)=>Math.round(v * 100000) / 100000;\nconst floatRegex = /(-)?([\\d]*\\.?[\\d])+/g;\nconst colorRegex = /(#[0-9a-f]{3,8}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2}(-?[\\d\\.]+%?)\\s*[\\,\\/]?\\s*[\\d\\.]*%?\\))/gi;\nconst singleColorRegex = /^(#[0-9a-f]{3,8}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2}(-?[\\d\\.]+%?)\\s*[\\,\\/]?\\s*[\\d\\.]*%?\\))$/i;\nfunction isString(v) {\n    return typeof v === \"string\";\n}\nconst createUnitType = (unit)=>({\n        test: (v)=>isString(v) && v.endsWith(unit) && v.split(\" \").length === 1,\n        parse: parseFloat,\n        transform: (v)=>`${v}${unit}`\n    });\nconst degrees = createUnitType(\"deg\");\nconst percent = createUnitType(\"%\");\nconst px = createUnitType(\"px\");\nconst vh = createUnitType(\"vh\");\nconst vw = createUnitType(\"vw\");\nconst progressPercentage = {\n    ...percent,\n    parse: (v)=>percent.parse(v) / 100,\n    transform: (v)=>percent.transform(v * 100)\n};\nconst int = {\n    ...number,\n    transform: Math.round\n};\nconst numberValueTypes = {\n    // Border props\n    borderWidth: px,\n    borderTopWidth: px,\n    borderRightWidth: px,\n    borderBottomWidth: px,\n    borderLeftWidth: px,\n    borderRadius: px,\n    radius: px,\n    borderTopLeftRadius: px,\n    borderTopRightRadius: px,\n    borderBottomRightRadius: px,\n    borderBottomLeftRadius: px,\n    // Positioning props\n    width: px,\n    maxWidth: px,\n    height: px,\n    maxHeight: px,\n    size: px,\n    top: px,\n    right: px,\n    bottom: px,\n    left: px,\n    // Spacing props\n    padding: px,\n    paddingTop: px,\n    paddingRight: px,\n    paddingBottom: px,\n    paddingLeft: px,\n    margin: px,\n    marginTop: px,\n    marginRight: px,\n    marginBottom: px,\n    marginLeft: px,\n    // Transform props\n    rotate: degrees,\n    rotateX: degrees,\n    rotateY: degrees,\n    rotateZ: degrees,\n    scale,\n    scaleX: scale,\n    scaleY: scale,\n    scaleZ: scale,\n    skew: degrees,\n    skewX: degrees,\n    skewY: degrees,\n    distance: px,\n    translateX: px,\n    translateY: px,\n    translateZ: px,\n    x: px,\n    y: px,\n    z: px,\n    perspective: px,\n    transformPerspective: px,\n    opacity: alpha,\n    originX: progressPercentage,\n    originY: progressPercentage,\n    originZ: px,\n    // Misc\n    zIndex: int,\n    // SVG\n    fillOpacity: alpha,\n    strokeOpacity: alpha,\n    numOctaves: int\n};\nfunction buildHTMLStyles(state, latestValues, options, transformTemplate) {\n    const { style, vars, transform, transformOrigin } = state;\n    // Track whether we encounter any transform or transformOrigin values.\n    let hasTransform = false;\n    let hasTransformOrigin = false;\n    // Does the calculated transform essentially equal \"none\"?\n    let transformIsNone = true;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept seperately for further processing.\n     */ for(const key in latestValues){\n        const value = latestValues[key];\n        /**\n         * If this is a CSS variable we don't do any further processing.\n         */ if (isCSSVariableName(key)) {\n            vars[key] = value;\n            continue;\n        }\n        // Convert the value to its default value type, ie 0 -> \"0px\"\n        const valueType = numberValueTypes[key];\n        const valueAsType = getValueAsType(value, valueType);\n        if (transformProps.has(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            transform[key] = valueAsType;\n            // If we already know we have a non-default transform, early return\n            if (!transformIsNone) continue;\n            // Otherwise check to see if this is a default transform\n            if (value !== (valueType.default || 0)) transformIsNone = false;\n        } else if (key.startsWith(\"origin\")) {\n            // If this is a transform origin, flag and enable further transform-origin processing\n            hasTransformOrigin = true;\n            transformOrigin[key] = valueAsType;\n        } else {\n            style[key] = valueAsType;\n        }\n    }\n    if (!latestValues.transform) {\n        if (hasTransform || transformTemplate) {\n            style.transform = buildTransform(state.transform, options, transformIsNone, transformTemplate);\n        } else if (style.transform) {\n            /**\n             * If we have previously created a transform but currently don't have any,\n             * reset transform style to none.\n             */ style.transform = \"none\";\n        }\n    }\n    /**\n     * Build a transformOrigin style. Uses the same defaults as the browser for\n     * undefined origins.\n     */ if (hasTransformOrigin) {\n        const { originX = \"50%\", originY = \"50%\", originZ = 0 } = transformOrigin;\n        style.transformOrigin = `${originX} ${originY} ${originZ}`;\n    }\n}\nfunction calcOrigin(origin, offset, size) {\n    return typeof origin === \"string\" ? origin : px.transform(offset + size * origin);\n}\n/**\n * The SVG transform origin defaults are different to CSS and is less intuitive,\n * so we use the measured dimensions of the SVG to reconcile these.\n */ function calcSVGTransformOrigin(dimensions, originX, originY) {\n    const pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);\n    const pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);\n    return `${pxOriginX} ${pxOriginY}`;\n}\nconst dashKeys = {\n    offset: \"stroke-dashoffset\",\n    array: \"stroke-dasharray\"\n};\nconst camelKeys = {\n    offset: \"strokeDashoffset\",\n    array: \"strokeDasharray\"\n};\n/**\n * Build SVG path properties. Uses the path's measured length to convert\n * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset\n * and stroke-dasharray attributes.\n *\n * This function is mutative to reduce per-frame GC.\n */ function buildSVGPath(attrs, length, spacing = 1, offset = 0, useDashCase = true) {\n    // Normalise path length by setting SVG attribute pathLength to 1\n    attrs.pathLength = 1;\n    // We use dash case when setting attributes directly to the DOM node and camel case\n    // when defining props on a React component.\n    const keys = useDashCase ? dashKeys : camelKeys;\n    // Build the dash offset\n    attrs[keys.offset] = px.transform(-offset);\n    // Build the dash array\n    const pathLength = px.transform(length);\n    const pathSpacing = px.transform(spacing);\n    attrs[keys.array] = `${pathLength} ${pathSpacing}`;\n}\n/**\n * Build SVG visual attrbutes, like cx and style.transform\n */ function buildSVGAttrs(state, { attrX, attrY, attrScale, originX, originY, pathLength, pathSpacing = 1, pathOffset = 0, // This is object creation, which we try to avoid per-frame.\n...latest }, options, isSVGTag, transformTemplate) {\n    buildHTMLStyles(state, latest, options, transformTemplate);\n    /**\n     * For svg tags we just want to make sure viewBox is animatable and treat all the styles\n     * as normal HTML tags.\n     */ if (isSVGTag) {\n        if (state.style.viewBox) {\n            state.attrs.viewBox = state.style.viewBox;\n        }\n        return;\n    }\n    state.attrs = state.style;\n    state.style = {};\n    const { attrs, style, dimensions } = state;\n    /**\n     * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs\n     * and copy it into style.\n     */ if (attrs.transform) {\n        if (dimensions) style.transform = attrs.transform;\n        delete attrs.transform;\n    }\n    // Parse transformOrigin\n    if (dimensions && (originX !== undefined || originY !== undefined || style.transform)) {\n        style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);\n    }\n    // Render attrX/attrY/attrScale as attributes\n    if (attrX !== undefined) attrs.x = attrX;\n    if (attrY !== undefined) attrs.y = attrY;\n    if (attrScale !== undefined) attrs.scale = attrScale;\n    // Build SVG path if one has been defined\n    if (pathLength !== undefined) {\n        buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n    }\n}\nconst isSVGTag = (tag)=>typeof tag === \"string\" && tag.toLowerCase() === \"svg\";\nfunction renderHTML(element, { style, vars }, styleProp, projection) {\n    Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));\n    // Loop over any CSS variables and assign those.\n    for(const key in vars){\n        element.style.setProperty(key, vars[key]);\n    }\n}\n/**\n * A set of attribute names that are always read/written as camel case.\n */ const camelCaseAttributes = new Set([\n    \"baseFrequency\",\n    \"diffuseConstant\",\n    \"kernelMatrix\",\n    \"kernelUnitLength\",\n    \"keySplines\",\n    \"keyTimes\",\n    \"limitingConeAngle\",\n    \"markerHeight\",\n    \"markerWidth\",\n    \"numOctaves\",\n    \"targetX\",\n    \"targetY\",\n    \"surfaceScale\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"stdDeviation\",\n    \"tableValues\",\n    \"viewBox\",\n    \"gradientTransform\",\n    \"pathLength\",\n    \"startOffset\",\n    \"textLength\",\n    \"lengthAdjust\"\n]);\nfunction renderSVG(element, renderState, _styleProp, projection) {\n    renderHTML(element, renderState, undefined, projection);\n    for(const key in renderState.attrs){\n        element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);\n    }\n}\nfunction scrapeMotionValuesFromProps$1(props, prevProps) {\n    const { style } = props;\n    const newValues = {};\n    for(const key in style){\n        if (isMotionValue(style[key]) || prevProps.style && isMotionValue(prevProps.style[key]) || isForcedMotionValue(key, props)) {\n            newValues[key] = style[key];\n        }\n    }\n    return newValues;\n}\nfunction scrapeMotionValuesFromProps(props, prevProps) {\n    const newValues = scrapeMotionValuesFromProps$1(props, prevProps);\n    for(const key in props){\n        if (isMotionValue(props[key]) || isMotionValue(prevProps[key])) {\n            const targetKey = transformPropOrder.indexOf(key) !== -1 ? \"attr\" + key.charAt(0).toUpperCase() + key.substring(1) : key;\n            newValues[targetKey] = props[key];\n        }\n    }\n    return newValues;\n}\nfunction resolveVariantFromProps(props, definition, custom, currentValues = {}, currentVelocity = {}) {\n    /**\n     * If the variant definition is a function, resolve.\n     */ if (typeof definition === \"function\") {\n        definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);\n    }\n    /**\n     * If the variant definition is a variant label, or\n     * the function returned a variant label, resolve.\n     */ if (typeof definition === \"string\") {\n        definition = props.variants && props.variants[definition];\n    }\n    /**\n     * At this point we've resolved both functions and variant labels,\n     * but the resolved variant label might itself have been a function.\n     * If so, resolve. This can only have returned a valid target object.\n     */ if (typeof definition === \"function\") {\n        definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);\n    }\n    return definition;\n}\nconst isKeyframesTarget = (v)=>{\n    return Array.isArray(v);\n};\nconst isCustomValue = (v)=>{\n    return Boolean(v && typeof v === \"object\" && v.mix && v.toValue);\n};\nconst resolveFinalValueInKeyframes = (v)=>{\n    // TODO maybe throw if v.length - 1 is placeholder token?\n    return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;\n};\nconst noop = (any)=>any;\nclass Queue {\n    constructor(){\n        this.order = [];\n        this.scheduled = new Set();\n    }\n    add(process) {\n        if (!this.scheduled.has(process)) {\n            this.scheduled.add(process);\n            this.order.push(process);\n            return true;\n        }\n    }\n    remove(process) {\n        const index = this.order.indexOf(process);\n        if (index !== -1) {\n            this.order.splice(index, 1);\n            this.scheduled.delete(process);\n        }\n    }\n    clear() {\n        this.order.length = 0;\n        this.scheduled.clear();\n    }\n}\nfunction createRenderStep(runNextFrame) {\n    /**\n     * We create and reuse two queues, one to queue jobs for the current frame\n     * and one for the next. We reuse to avoid triggering GC after x frames.\n     */ let thisFrame = new Queue();\n    let nextFrame = new Queue();\n    let numToRun = 0;\n    /**\n     * Track whether we're currently processing jobs in this step. This way\n     * we can decide whether to schedule new jobs for this frame or next.\n     */ let isProcessing = false;\n    let flushNextFrame = false;\n    /**\n     * A set of processes which were marked keepAlive when scheduled.\n     */ const toKeepAlive = new WeakSet();\n    const step = {\n        /**\n         * Schedule a process to run on the next frame.\n         */ schedule: (callback, keepAlive = false, immediate = false)=>{\n            const addToCurrentFrame = immediate && isProcessing;\n            const queue = addToCurrentFrame ? thisFrame : nextFrame;\n            if (keepAlive) toKeepAlive.add(callback);\n            if (queue.add(callback) && addToCurrentFrame && isProcessing) {\n                // If we're adding it to the currently running queue, update its measured size\n                numToRun = thisFrame.order.length;\n            }\n            return callback;\n        },\n        /**\n         * Cancel the provided callback from running on the next frame.\n         */ cancel: (callback)=>{\n            nextFrame.remove(callback);\n            toKeepAlive.delete(callback);\n        },\n        /**\n         * Execute all schedule callbacks.\n         */ process: (frameData)=>{\n            /**\n             * If we're already processing we've probably been triggered by a flushSync\n             * inside an existing process. Instead of executing, mark flushNextFrame\n             * as true and ensure we flush the following frame at the end of this one.\n             */ if (isProcessing) {\n                flushNextFrame = true;\n                return;\n            }\n            isProcessing = true;\n            [thisFrame, nextFrame] = [\n                nextFrame,\n                thisFrame\n            ];\n            // Clear the next frame queue\n            nextFrame.clear();\n            // Execute this frame\n            numToRun = thisFrame.order.length;\n            if (numToRun) {\n                for(let i = 0; i < numToRun; i++){\n                    const callback = thisFrame.order[i];\n                    callback(frameData);\n                    if (toKeepAlive.has(callback)) {\n                        step.schedule(callback);\n                        runNextFrame();\n                    }\n                }\n            }\n            isProcessing = false;\n            if (flushNextFrame) {\n                flushNextFrame = false;\n                step.process(frameData);\n            }\n        }\n    };\n    return step;\n}\nconst stepsOrder = [\n    \"prepare\",\n    \"read\",\n    \"update\",\n    \"preRender\",\n    \"render\",\n    \"postRender\"\n];\nconst maxElapsed$1 = 40;\nfunction createRenderBatcher(scheduleNextBatch, allowKeepAlive) {\n    let runNextFrame = false;\n    let useDefaultElapsed = true;\n    const state = {\n        delta: 0,\n        timestamp: 0,\n        isProcessing: false\n    };\n    const steps = stepsOrder.reduce((acc, key)=>{\n        acc[key] = createRenderStep(()=>runNextFrame = true);\n        return acc;\n    }, {});\n    const processStep = (stepId)=>steps[stepId].process(state);\n    const processBatch = ()=>{\n        const timestamp = performance.now();\n        runNextFrame = false;\n        state.delta = useDefaultElapsed ? 1000 / 60 : Math.max(Math.min(timestamp - state.timestamp, maxElapsed$1), 1);\n        state.timestamp = timestamp;\n        state.isProcessing = true;\n        stepsOrder.forEach(processStep);\n        state.isProcessing = false;\n        if (runNextFrame && allowKeepAlive) {\n            useDefaultElapsed = false;\n            scheduleNextBatch(processBatch);\n        }\n    };\n    const wake = ()=>{\n        runNextFrame = true;\n        useDefaultElapsed = true;\n        if (!state.isProcessing) {\n            scheduleNextBatch(processBatch);\n        }\n    };\n    const schedule = stepsOrder.reduce((acc, key)=>{\n        const step = steps[key];\n        acc[key] = (process, keepAlive = false, immediate = false)=>{\n            if (!runNextFrame) wake();\n            return step.schedule(process, keepAlive, immediate);\n        };\n        return acc;\n    }, {});\n    const cancel = (process)=>stepsOrder.forEach((key)=>steps[key].cancel(process));\n    return {\n        schedule,\n        cancel,\n        state,\n        steps\n    };\n}\nconst { schedule: frame, cancel: cancelFrame, state: frameData, steps } = createRenderBatcher(typeof requestAnimationFrame !== \"undefined\" ? requestAnimationFrame : noop, true);\n/**\n * Pipe\n * Compose other transformers to run linearily\n * pipe(min(20), max(40))\n * @param  {...functions} transformers\n * @return {function}\n */ const combineFunctions = (a, b)=>(v)=>b(a(v));\nconst pipe = (...transformers)=>transformers.reduce(combineFunctions);\n/**\n * Creates an object containing the latest state of every MotionValue on a VisualElement\n */ function getCurrent(visualElement) {\n    const current = {};\n    visualElement.values.forEach((value, key)=>current[key] = value.get());\n    return current;\n}\n/**\n * Creates an object containing the latest velocity of every MotionValue on a VisualElement\n */ function getVelocity(visualElement) {\n    const velocity = {};\n    visualElement.values.forEach((value, key)=>velocity[key] = value.getVelocity());\n    return velocity;\n}\nfunction resolveVariant(visualElement, definition, custom) {\n    const props = visualElement.getProps();\n    return resolveVariantFromProps(props, definition, custom !== undefined ? custom : props.custom, getCurrent(visualElement), getVelocity(visualElement));\n}\nexports.warning = noop;\nexports.invariant = noop;\nif (true) {\n    exports.warning = (check, message)=>{\n        if (!check && typeof console !== \"undefined\") {\n            console.warn(message);\n        }\n    };\n    exports.invariant = (check, message)=>{\n        if (!check) {\n            throw new Error(message);\n        }\n    };\n}\n/**\n * Converts seconds to milliseconds\n *\n * @param seconds - Time in seconds.\n * @return milliseconds - Converted time in milliseconds.\n */ const secondsToMilliseconds = (seconds)=>seconds * 1000;\nconst millisecondsToSeconds = (milliseconds)=>milliseconds / 1000;\nconst instantAnimationState = {\n    current: false\n};\nconst isBezierDefinition = (easing)=>Array.isArray(easing) && typeof easing[0] === \"number\";\nfunction isWaapiSupportedEasing(easing) {\n    return Boolean(!easing || typeof easing === \"string\" && supportedWaapiEasing[easing] || isBezierDefinition(easing) || Array.isArray(easing) && easing.every(isWaapiSupportedEasing));\n}\nconst cubicBezierAsString = ([a, b, c, d])=>`cubic-bezier(${a}, ${b}, ${c}, ${d})`;\nconst supportedWaapiEasing = {\n    linear: \"linear\",\n    ease: \"ease\",\n    easeIn: \"ease-in\",\n    easeOut: \"ease-out\",\n    easeInOut: \"ease-in-out\",\n    circIn: cubicBezierAsString([\n        0,\n        0.65,\n        0.55,\n        1\n    ]),\n    circOut: cubicBezierAsString([\n        0.55,\n        0,\n        1,\n        0.45\n    ]),\n    backIn: cubicBezierAsString([\n        0.31,\n        0.01,\n        0.66,\n        -0.59\n    ]),\n    backOut: cubicBezierAsString([\n        0.33,\n        1.53,\n        0.69,\n        0.99\n    ])\n};\nfunction mapEasingToNativeEasing(easing) {\n    if (!easing) return undefined;\n    return isBezierDefinition(easing) ? cubicBezierAsString(easing) : Array.isArray(easing) ? easing.map(mapEasingToNativeEasing) : supportedWaapiEasing[easing];\n}\nfunction animateStyle(element, valueName, keyframes, { delay = 0, duration, repeat = 0, repeatType = \"loop\", ease, times } = {}) {\n    const keyframeOptions = {\n        [valueName]: keyframes\n    };\n    if (times) keyframeOptions.offset = times;\n    const easing = mapEasingToNativeEasing(ease);\n    /**\n     * If this is an easing array, apply to keyframes, not animation as a whole\n     */ if (Array.isArray(easing)) keyframeOptions.easing = easing;\n    return element.animate(keyframeOptions, {\n        delay,\n        duration,\n        easing: !Array.isArray(easing) ? easing : \"linear\",\n        fill: \"both\",\n        iterations: repeat + 1,\n        direction: repeatType === \"reverse\" ? \"alternate\" : \"normal\"\n    });\n}\nfunction getFinalKeyframe(keyframes, { repeat, repeatType = \"loop\" }) {\n    const index = repeat && repeatType !== \"loop\" && repeat % 2 === 1 ? 0 : keyframes.length - 1;\n    return keyframes[index];\n}\n/*\n  Bezier function generator\n  This has been modified from Gaëtan Renaudeau's BezierEasing\n  https://github.com/gre/bezier-easing/blob/master/src/index.js\n  https://github.com/gre/bezier-easing/blob/master/LICENSE\n  \n  I've removed the newtonRaphsonIterate algo because in benchmarking it\n  wasn't noticiably faster than binarySubdivision, indeed removing it\n  usually improved times, depending on the curve.\n  I also removed the lookup table, as for the added bundle size and loop we're\n  only cutting ~4 or so subdivision iterations. I bumped the max iterations up\n  to 12 to compensate and this still tended to be faster for no perceivable\n  loss in accuracy.\n  Usage\n    const easeOut = cubicBezier(.17,.67,.83,.67);\n    const x = easeOut(0.5); // returns 0.627...\n*/ // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nconst calcBezier = (t, a1, a2)=>(((1.0 - 3.0 * a2 + 3.0 * a1) * t + (3.0 * a2 - 6.0 * a1)) * t + 3.0 * a1) * t;\nconst subdivisionPrecision = 0.0000001;\nconst subdivisionMaxIterations = 12;\nfunction binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {\n    let currentX;\n    let currentT;\n    let i = 0;\n    do {\n        currentT = lowerBound + (upperBound - lowerBound) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - x;\n        if (currentX > 0.0) {\n            upperBound = currentT;\n        } else {\n            lowerBound = currentT;\n        }\n    }while (Math.abs(currentX) > subdivisionPrecision && ++i < subdivisionMaxIterations);\n    return currentT;\n}\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n    // If this is a linear gradient, return linear easing\n    if (mX1 === mY1 && mX2 === mY2) return noop;\n    const getTForX = (aX)=>binarySubdivide(aX, 0, 1, mX1, mX2);\n    // If animation is at start/end, return t without easing\n    return (t)=>t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);\n}\nconst easeIn = cubicBezier(0.42, 0, 1, 1);\nconst easeOut = cubicBezier(0, 0, 0.58, 1);\nconst easeInOut = cubicBezier(0.42, 0, 0.58, 1);\nconst isEasingArray = (ease)=>{\n    return Array.isArray(ease) && typeof ease[0] !== \"number\";\n};\n// Accepts an easing function and returns a new one that outputs mirrored values for\n// the second half of the animation. Turns easeIn into easeInOut.\nconst mirrorEasing = (easing)=>(p)=>p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;\n// Accepts an easing function and returns a new one that outputs reversed values.\n// Turns easeIn into easeOut.\nconst reverseEasing = (easing)=>(p)=>1 - easing(1 - p);\nconst circIn = (p)=>1 - Math.sin(Math.acos(p));\nconst circOut = reverseEasing(circIn);\nconst circInOut = mirrorEasing(circIn);\nconst backOut = cubicBezier(0.33, 1.53, 0.69, 0.99);\nconst backIn = reverseEasing(backOut);\nconst backInOut = mirrorEasing(backIn);\nconst anticipate = (p)=>(p *= 2) < 1 ? 0.5 * backIn(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\nconst easingLookup = {\n    linear: noop,\n    easeIn,\n    easeInOut,\n    easeOut,\n    circIn,\n    circInOut,\n    circOut,\n    backIn,\n    backInOut,\n    backOut,\n    anticipate\n};\nconst easingDefinitionToFunction = (definition)=>{\n    if (Array.isArray(definition)) {\n        // If cubic bezier definition, create bezier curve\n        exports.invariant(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);\n        const [x1, y1, x2, y2] = definition;\n        return cubicBezier(x1, y1, x2, y2);\n    } else if (typeof definition === \"string\") {\n        // Else lookup from table\n        exports.invariant(easingLookup[definition] !== undefined, `Invalid easing type '${definition}'`);\n        return easingLookup[definition];\n    }\n    return definition;\n};\n/**\n * Returns true if the provided string is a color, ie rgba(0,0,0,0) or #000,\n * but false if a number or multiple colors\n */ const isColorString = (type, testProp)=>(v)=>{\n        return Boolean(isString(v) && singleColorRegex.test(v) && v.startsWith(type) || testProp && Object.prototype.hasOwnProperty.call(v, testProp));\n    };\nconst splitColor = (aName, bName, cName)=>(v)=>{\n        if (!isString(v)) return v;\n        const [a, b, c, alpha] = v.match(floatRegex);\n        return {\n            [aName]: parseFloat(a),\n            [bName]: parseFloat(b),\n            [cName]: parseFloat(c),\n            alpha: alpha !== undefined ? parseFloat(alpha) : 1\n        };\n    };\nconst clampRgbUnit = (v)=>clamp(0, 255, v);\nconst rgbUnit = {\n    ...number,\n    transform: (v)=>Math.round(clampRgbUnit(v))\n};\nconst rgba = {\n    test: isColorString(\"rgb\", \"red\"),\n    parse: splitColor(\"red\", \"green\", \"blue\"),\n    transform: ({ red, green, blue, alpha: alpha$1 = 1 })=>\"rgba(\" + rgbUnit.transform(red) + \", \" + rgbUnit.transform(green) + \", \" + rgbUnit.transform(blue) + \", \" + sanitize(alpha.transform(alpha$1)) + \")\"\n};\nfunction parseHex(v) {\n    let r = \"\";\n    let g = \"\";\n    let b = \"\";\n    let a = \"\";\n    // If we have 6 characters, ie #FF0000\n    if (v.length > 5) {\n        r = v.substring(1, 3);\n        g = v.substring(3, 5);\n        b = v.substring(5, 7);\n        a = v.substring(7, 9);\n    // Or we have 3 characters, ie #F00\n    } else {\n        r = v.substring(1, 2);\n        g = v.substring(2, 3);\n        b = v.substring(3, 4);\n        a = v.substring(4, 5);\n        r += r;\n        g += g;\n        b += b;\n        a += a;\n    }\n    return {\n        red: parseInt(r, 16),\n        green: parseInt(g, 16),\n        blue: parseInt(b, 16),\n        alpha: a ? parseInt(a, 16) / 255 : 1\n    };\n}\nconst hex = {\n    test: isColorString(\"#\"),\n    parse: parseHex,\n    transform: rgba.transform\n};\nconst hsla = {\n    test: isColorString(\"hsl\", \"hue\"),\n    parse: splitColor(\"hue\", \"saturation\", \"lightness\"),\n    transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 })=>{\n        return \"hsla(\" + Math.round(hue) + \", \" + percent.transform(sanitize(saturation)) + \", \" + percent.transform(sanitize(lightness)) + \", \" + sanitize(alpha.transform(alpha$1)) + \")\";\n    }\n};\nconst color = {\n    test: (v)=>rgba.test(v) || hex.test(v) || hsla.test(v),\n    parse: (v)=>{\n        if (rgba.test(v)) {\n            return rgba.parse(v);\n        } else if (hsla.test(v)) {\n            return hsla.parse(v);\n        } else {\n            return hex.parse(v);\n        }\n    },\n    transform: (v)=>{\n        return isString(v) ? v : v.hasOwnProperty(\"red\") ? rgba.transform(v) : hsla.transform(v);\n    }\n};\n/*\n  Value in range from progress\n\n  Given a lower limit and an upper limit, we return the value within\n  that range as expressed by progress (usually a number from 0 to 1)\n\n  So progress = 0.5 would change\n\n  from -------- to\n\n  to\n\n  from ---- to\n\n  E.g. from = 10, to = 20, progress = 0.5 => 15\n\n  @param [number]: Lower limit of range\n  @param [number]: Upper limit of range\n  @param [number]: The progress between lower and upper limits expressed 0-1\n  @return [number]: Value as calculated from progress within range (not limited within range)\n*/ const mix = (from, to, progress)=>-progress * from + progress * to + from;\n// Adapted from https://gist.github.com/mjackson/5311256\nfunction hueToRgb(p, q, t) {\n    if (t < 0) t += 1;\n    if (t > 1) t -= 1;\n    if (t < 1 / 6) return p + (q - p) * 6 * t;\n    if (t < 1 / 2) return q;\n    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n}\nfunction hslaToRgba({ hue, saturation, lightness, alpha }) {\n    hue /= 360;\n    saturation /= 100;\n    lightness /= 100;\n    let red = 0;\n    let green = 0;\n    let blue = 0;\n    if (!saturation) {\n        red = green = blue = lightness;\n    } else {\n        const q = lightness < 0.5 ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation;\n        const p = 2 * lightness - q;\n        red = hueToRgb(p, q, hue + 1 / 3);\n        green = hueToRgb(p, q, hue);\n        blue = hueToRgb(p, q, hue - 1 / 3);\n    }\n    return {\n        red: Math.round(red * 255),\n        green: Math.round(green * 255),\n        blue: Math.round(blue * 255),\n        alpha\n    };\n}\n// Linear color space blending\n// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw\n// Demonstrated http://codepen.io/osublake/pen/xGVVaN\nconst mixLinearColor = (from, to, v)=>{\n    const fromExpo = from * from;\n    return Math.sqrt(Math.max(0, v * (to * to - fromExpo) + fromExpo));\n};\nconst colorTypes = [\n    hex,\n    rgba,\n    hsla\n];\nconst getColorType = (v)=>colorTypes.find((type)=>type.test(v));\nfunction asRGBA(color) {\n    const type = getColorType(color);\n    exports.invariant(Boolean(type), `'${color}' is not an animatable color. Use the equivalent color code instead.`);\n    let model = type.parse(color);\n    if (type === hsla) {\n        // TODO Remove this cast - needed since Framer Motion's stricter typing\n        model = hslaToRgba(model);\n    }\n    return model;\n}\nconst mixColor = (from, to)=>{\n    const fromRGBA = asRGBA(from);\n    const toRGBA = asRGBA(to);\n    const blended = {\n        ...fromRGBA\n    };\n    return (v)=>{\n        blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);\n        blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);\n        blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);\n        blended.alpha = mix(fromRGBA.alpha, toRGBA.alpha, v);\n        return rgba.transform(blended);\n    };\n};\nfunction test(v) {\n    var _a, _b;\n    return isNaN(v) && isString(v) && (((_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) + (((_b = v.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) > 0;\n}\nconst cssVarTokeniser = {\n    regex: cssVariableRegex,\n    countKey: \"Vars\",\n    token: \"${v}\",\n    parse: noop\n};\nconst colorTokeniser = {\n    regex: colorRegex,\n    countKey: \"Colors\",\n    token: \"${c}\",\n    parse: color.parse\n};\nconst numberTokeniser = {\n    regex: floatRegex,\n    countKey: \"Numbers\",\n    token: \"${n}\",\n    parse: number.parse\n};\nfunction tokenise(info, { regex, countKey, token, parse }) {\n    const matches = info.tokenised.match(regex);\n    if (!matches) return;\n    info[\"num\" + countKey] = matches.length;\n    info.tokenised = info.tokenised.replace(regex, token);\n    info.values.push(...matches.map(parse));\n}\nfunction analyseComplexValue(value) {\n    const originalValue = value.toString();\n    const info = {\n        value: originalValue,\n        tokenised: originalValue,\n        values: [],\n        numVars: 0,\n        numColors: 0,\n        numNumbers: 0\n    };\n    if (info.value.includes(\"var(--\")) tokenise(info, cssVarTokeniser);\n    tokenise(info, colorTokeniser);\n    tokenise(info, numberTokeniser);\n    return info;\n}\nfunction parseComplexValue(v) {\n    return analyseComplexValue(v).values;\n}\nfunction createTransformer(source) {\n    const { values, numColors, numVars, tokenised } = analyseComplexValue(source);\n    const numValues = values.length;\n    return (v)=>{\n        let output = tokenised;\n        for(let i = 0; i < numValues; i++){\n            if (i < numVars) {\n                output = output.replace(cssVarTokeniser.token, v[i]);\n            } else if (i < numVars + numColors) {\n                output = output.replace(colorTokeniser.token, color.transform(v[i]));\n            } else {\n                output = output.replace(numberTokeniser.token, sanitize(v[i]));\n            }\n        }\n        return output;\n    };\n}\nconst convertNumbersToZero = (v)=>typeof v === \"number\" ? 0 : v;\nfunction getAnimatableNone$1(v) {\n    const parsed = parseComplexValue(v);\n    const transformer = createTransformer(v);\n    return transformer(parsed.map(convertNumbersToZero));\n}\nconst complex = {\n    test,\n    parse: parseComplexValue,\n    createTransformer,\n    getAnimatableNone: getAnimatableNone$1\n};\nconst mixImmediate = (origin, target)=>(p)=>`${p > 0 ? target : origin}`;\nfunction getMixer$1(origin, target) {\n    if (typeof origin === \"number\") {\n        return (v)=>mix(origin, target, v);\n    } else if (color.test(origin)) {\n        return mixColor(origin, target);\n    } else {\n        return origin.startsWith(\"var(\") ? mixImmediate(origin, target) : mixComplex(origin, target);\n    }\n}\nconst mixArray = (from, to)=>{\n    const output = [\n        ...from\n    ];\n    const numValues = output.length;\n    const blendValue = from.map((fromThis, i)=>getMixer$1(fromThis, to[i]));\n    return (v)=>{\n        for(let i = 0; i < numValues; i++){\n            output[i] = blendValue[i](v);\n        }\n        return output;\n    };\n};\nconst mixObject = (origin, target)=>{\n    const output = {\n        ...origin,\n        ...target\n    };\n    const blendValue = {};\n    for(const key in output){\n        if (origin[key] !== undefined && target[key] !== undefined) {\n            blendValue[key] = getMixer$1(origin[key], target[key]);\n        }\n    }\n    return (v)=>{\n        for(const key in blendValue){\n            output[key] = blendValue[key](v);\n        }\n        return output;\n    };\n};\nconst mixComplex = (origin, target)=>{\n    const template = complex.createTransformer(target);\n    const originStats = analyseComplexValue(origin);\n    const targetStats = analyseComplexValue(target);\n    const canInterpolate = originStats.numVars === targetStats.numVars && originStats.numColors === targetStats.numColors && originStats.numNumbers >= targetStats.numNumbers;\n    if (canInterpolate) {\n        return pipe(mixArray(originStats.values, targetStats.values), template);\n    } else {\n        exports.warning(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);\n        return mixImmediate(origin, target);\n    }\n};\n/*\n  Progress within given range\n\n  Given a lower limit and an upper limit, we return the progress\n  (expressed as a number 0-1) represented by the given value, and\n  limit that progress to within 0-1.\n\n  @param [number]: Lower limit\n  @param [number]: Upper limit\n  @param [number]: Value to find progress within given range\n  @return [number]: Progress of value within range as expressed 0-1\n*/ const progress = (from, to, value)=>{\n    const toFromDifference = to - from;\n    return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;\n};\nconst mixNumber = (from, to)=>(p)=>mix(from, to, p);\nfunction detectMixerFactory(v) {\n    if (typeof v === \"number\") {\n        return mixNumber;\n    } else if (typeof v === \"string\") {\n        return color.test(v) ? mixColor : mixComplex;\n    } else if (Array.isArray(v)) {\n        return mixArray;\n    } else if (typeof v === \"object\") {\n        return mixObject;\n    }\n    return mixNumber;\n}\nfunction createMixers(output, ease, customMixer) {\n    const mixers = [];\n    const mixerFactory = customMixer || detectMixerFactory(output[0]);\n    const numMixers = output.length - 1;\n    for(let i = 0; i < numMixers; i++){\n        let mixer = mixerFactory(output[i], output[i + 1]);\n        if (ease) {\n            const easingFunction = Array.isArray(ease) ? ease[i] || noop : ease;\n            mixer = pipe(easingFunction, mixer);\n        }\n        mixers.push(mixer);\n    }\n    return mixers;\n}\n/**\n * Create a function that maps from a numerical input array to a generic output array.\n *\n * Accepts:\n *   - Numbers\n *   - Colors (hex, hsl, hsla, rgb, rgba)\n *   - Complex (combinations of one or more numbers or strings)\n *\n * ```jsx\n * const mixColor = interpolate([0, 1], ['#fff', '#000'])\n *\n * mixColor(0.5) // 'rgba(128, 128, 128, 1)'\n * ```\n *\n * TODO Revist this approach once we've moved to data models for values,\n * probably not needed to pregenerate mixer functions.\n *\n * @public\n */ function interpolate(input, output, { clamp: isClamp = true, ease, mixer } = {}) {\n    const inputLength = input.length;\n    exports.invariant(inputLength === output.length, \"Both input and output ranges must be the same length\");\n    /**\n     * If we're only provided a single input, we can just make a function\n     * that returns the output.\n     */ if (inputLength === 1) return ()=>output[0];\n    // If input runs highest -> lowest, reverse both arrays\n    if (input[0] > input[inputLength - 1]) {\n        input = [\n            ...input\n        ].reverse();\n        output = [\n            ...output\n        ].reverse();\n    }\n    const mixers = createMixers(output, ease, mixer);\n    const numMixers = mixers.length;\n    const interpolator = (v)=>{\n        let i = 0;\n        if (numMixers > 1) {\n            for(; i < input.length - 2; i++){\n                if (v < input[i + 1]) break;\n            }\n        }\n        const progressInRange = progress(input[i], input[i + 1], v);\n        return mixers[i](progressInRange);\n    };\n    return isClamp ? (v)=>interpolator(clamp(input[0], input[inputLength - 1], v)) : interpolator;\n}\nfunction fillOffset(offset, remaining) {\n    const min = offset[offset.length - 1];\n    for(let i = 1; i <= remaining; i++){\n        const offsetProgress = progress(0, remaining, i);\n        offset.push(mix(min, 1, offsetProgress));\n    }\n}\nfunction defaultOffset$1(arr) {\n    const offset = [\n        0\n    ];\n    fillOffset(offset, arr.length - 1);\n    return offset;\n}\nfunction convertOffsetToTimes(offset, duration) {\n    return offset.map((o)=>o * duration);\n}\nfunction defaultEasing(values, easing) {\n    return values.map(()=>easing || easeInOut).splice(0, values.length - 1);\n}\nfunction keyframes({ duration = 300, keyframes: keyframeValues, times, ease = \"easeInOut\" }) {\n    /**\n     * Easing functions can be externally defined as strings. Here we convert them\n     * into actual functions.\n     */ const easingFunctions = isEasingArray(ease) ? ease.map(easingDefinitionToFunction) : easingDefinitionToFunction(ease);\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */ const state = {\n        done: false,\n        value: keyframeValues[0]\n    };\n    /**\n     * Create a times array based on the provided 0-1 offsets\n     */ const absoluteTimes = convertOffsetToTimes(// Only use the provided offsets if they're the correct length\n    // TODO Maybe we should warn here if there's a length mismatch\n    times && times.length === keyframeValues.length ? times : defaultOffset$1(keyframeValues), duration);\n    const mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {\n        ease: Array.isArray(easingFunctions) ? easingFunctions : defaultEasing(keyframeValues, easingFunctions)\n    });\n    return {\n        calculatedDuration: duration,\n        next: (t)=>{\n            state.value = mapTimeToKeyframe(t);\n            state.done = t >= duration;\n            return state;\n        }\n    };\n}\n/*\n  Convert velocity into velocity per second\n\n  @param [number]: Unit per frame\n  @param [number]: Frame duration in ms\n*/ function velocityPerSecond(velocity, frameDuration) {\n    return frameDuration ? velocity * (1000 / frameDuration) : 0;\n}\nconst velocitySampleDuration = 5; // ms\nfunction calcGeneratorVelocity(resolveValue, t, current) {\n    const prevT = Math.max(t - velocitySampleDuration, 0);\n    return velocityPerSecond(current - resolveValue(prevT), t - prevT);\n}\nconst safeMin = 0.001;\nconst minDuration = 0.01;\nconst maxDuration$1 = 10.0;\nconst minDamping = 0.05;\nconst maxDamping = 1;\nfunction findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1 }) {\n    let envelope;\n    let derivative;\n    exports.warning(duration <= secondsToMilliseconds(maxDuration$1), \"Spring duration must be 10 seconds or less\");\n    let dampingRatio = 1 - bounce;\n    /**\n     * Restrict dampingRatio and duration to within acceptable ranges.\n     */ dampingRatio = clamp(minDamping, maxDamping, dampingRatio);\n    duration = clamp(minDuration, maxDuration$1, millisecondsToSeconds(duration));\n    if (dampingRatio < 1) {\n        /**\n         * Underdamped spring\n         */ envelope = (undampedFreq)=>{\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const a = exponentialDecay - velocity;\n            const b = calcAngularFreq(undampedFreq, dampingRatio);\n            const c = Math.exp(-delta);\n            return safeMin - a / b * c;\n        };\n        derivative = (undampedFreq)=>{\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const d = delta * velocity + velocity;\n            const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;\n            const f = Math.exp(-delta);\n            const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);\n            const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;\n            return factor * ((d - e) * f) / g;\n        };\n    } else {\n        /**\n         * Critically-damped spring\n         */ envelope = (undampedFreq)=>{\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (undampedFreq - velocity) * duration + 1;\n            return -safeMin + a * b;\n        };\n        derivative = (undampedFreq)=>{\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (velocity - undampedFreq) * (duration * duration);\n            return a * b;\n        };\n    }\n    const initialGuess = 5 / duration;\n    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);\n    duration = secondsToMilliseconds(duration);\n    if (isNaN(undampedFreq)) {\n        return {\n            stiffness: 100,\n            damping: 10,\n            duration\n        };\n    } else {\n        const stiffness = Math.pow(undampedFreq, 2) * mass;\n        return {\n            stiffness,\n            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),\n            duration\n        };\n    }\n}\nconst rootIterations = 12;\nfunction approximateRoot(envelope, derivative, initialGuess) {\n    let result = initialGuess;\n    for(let i = 1; i < rootIterations; i++){\n        result = result - envelope(result) / derivative(result);\n    }\n    return result;\n}\nfunction calcAngularFreq(undampedFreq, dampingRatio) {\n    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n}\nconst durationKeys = [\n    \"duration\",\n    \"bounce\"\n];\nconst physicsKeys = [\n    \"stiffness\",\n    \"damping\",\n    \"mass\"\n];\nfunction isSpringType(options, keys) {\n    return keys.some((key)=>options[key] !== undefined);\n}\nfunction getSpringOptions(options) {\n    let springOptions = {\n        velocity: 0.0,\n        stiffness: 100,\n        damping: 10,\n        mass: 1.0,\n        isResolvedFromDuration: false,\n        ...options\n    };\n    // stiffness/damping/mass overrides duration/bounce\n    if (!isSpringType(options, physicsKeys) && isSpringType(options, durationKeys)) {\n        const derived = findSpring(options);\n        springOptions = {\n            ...springOptions,\n            ...derived,\n            velocity: 0.0,\n            mass: 1.0\n        };\n        springOptions.isResolvedFromDuration = true;\n    }\n    return springOptions;\n}\nfunction spring({ keyframes, restDelta, restSpeed, ...options }) {\n    const origin = keyframes[0];\n    const target = keyframes[keyframes.length - 1];\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */ const state = {\n        done: false,\n        value: origin\n    };\n    const { stiffness, damping, mass, velocity, duration, isResolvedFromDuration } = getSpringOptions(options);\n    const initialVelocity = velocity ? -millisecondsToSeconds(velocity) : 0.0;\n    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n    const initialDelta = target - origin;\n    const undampedAngularFreq = millisecondsToSeconds(Math.sqrt(stiffness / mass));\n    /**\n     * If we're working on a granular scale, use smaller defaults for determining\n     * when the spring is finished.\n     *\n     * These defaults have been selected emprically based on what strikes a good\n     * ratio between feeling good and finishing as soon as changes are imperceptible.\n     */ const isGranularScale = Math.abs(initialDelta) < 5;\n    restSpeed || (restSpeed = isGranularScale ? 0.01 : 2);\n    restDelta || (restDelta = isGranularScale ? 0.005 : 0.5);\n    let resolveSpring;\n    if (dampingRatio < 1) {\n        const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);\n        // Underdamped spring\n        resolveSpring = (t)=>{\n            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n            return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t) + initialDelta * Math.cos(angularFreq * t));\n        };\n    } else if (dampingRatio === 1) {\n        // Critically damped spring\n        resolveSpring = (t)=>target - Math.exp(-undampedAngularFreq * t) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t);\n    } else {\n        // Overdamped spring\n        const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n        resolveSpring = (t)=>{\n            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n            // When performing sinh or cosh values can hit Infinity so we cap them here\n            const freqForT = Math.min(dampedAngularFreq * t, 300);\n            return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq;\n        };\n    }\n    return {\n        calculatedDuration: isResolvedFromDuration ? duration || null : null,\n        next: (t)=>{\n            const current = resolveSpring(t);\n            if (!isResolvedFromDuration) {\n                let currentVelocity = initialVelocity;\n                if (t !== 0) {\n                    /**\n                     * We only need to calculate velocity for under-damped springs\n                     * as over- and critically-damped springs can't overshoot, so\n                     * checking only for displacement is enough.\n                     */ if (dampingRatio < 1) {\n                        currentVelocity = calcGeneratorVelocity(resolveSpring, t, current);\n                    } else {\n                        currentVelocity = 0;\n                    }\n                }\n                const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n                const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;\n                state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;\n            } else {\n                state.done = t >= duration;\n            }\n            state.value = state.done ? target : current;\n            return state;\n        }\n    };\n}\nfunction inertia({ keyframes, velocity = 0.0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min, max, restDelta = 0.5, restSpeed }) {\n    const origin = keyframes[0];\n    const state = {\n        done: false,\n        value: origin\n    };\n    const isOutOfBounds = (v)=>min !== undefined && v < min || max !== undefined && v > max;\n    const nearestBoundary = (v)=>{\n        if (min === undefined) return max;\n        if (max === undefined) return min;\n        return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n    };\n    let amplitude = power * velocity;\n    const ideal = origin + amplitude;\n    const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);\n    /**\n     * If the target has changed we need to re-calculate the amplitude, otherwise\n     * the animation will start from the wrong position.\n     */ if (target !== ideal) amplitude = target - origin;\n    const calcDelta = (t)=>-amplitude * Math.exp(-t / timeConstant);\n    const calcLatest = (t)=>target + calcDelta(t);\n    const applyFriction = (t)=>{\n        const delta = calcDelta(t);\n        const latest = calcLatest(t);\n        state.done = Math.abs(delta) <= restDelta;\n        state.value = state.done ? target : latest;\n    };\n    /**\n     * Ideally this would resolve for t in a stateless way, we could\n     * do that by always precalculating the animation but as we know\n     * this will be done anyway we can assume that spring will\n     * be discovered during that.\n     */ let timeReachedBoundary;\n    let spring$1;\n    const checkCatchBoundary = (t)=>{\n        if (!isOutOfBounds(state.value)) return;\n        timeReachedBoundary = t;\n        spring$1 = spring({\n            keyframes: [\n                state.value,\n                nearestBoundary(state.value)\n            ],\n            velocity: calcGeneratorVelocity(calcLatest, t, state.value),\n            damping: bounceDamping,\n            stiffness: bounceStiffness,\n            restDelta,\n            restSpeed\n        });\n    };\n    checkCatchBoundary(0);\n    return {\n        calculatedDuration: null,\n        next: (t)=>{\n            /**\n             * We need to resolve the friction to figure out if we need a\n             * spring but we don't want to do this twice per frame. So here\n             * we flag if we updated for this frame and later if we did\n             * we can skip doing it again.\n             */ let hasUpdatedFrame = false;\n            if (!spring$1 && timeReachedBoundary === undefined) {\n                hasUpdatedFrame = true;\n                applyFriction(t);\n                checkCatchBoundary(t);\n            }\n            /**\n             * If we have a spring and the provided t is beyond the moment the friction\n             * animation crossed the min/max boundary, use the spring.\n             */ if (timeReachedBoundary !== undefined && t > timeReachedBoundary) {\n                return spring$1.next(t - timeReachedBoundary);\n            } else {\n                !hasUpdatedFrame && applyFriction(t);\n                return state;\n            }\n        }\n    };\n}\nconst frameloopDriver = (update)=>{\n    const passTimestamp = ({ timestamp })=>update(timestamp);\n    return {\n        start: ()=>frame.update(passTimestamp, true),\n        stop: ()=>cancelFrame(passTimestamp),\n        /**\n         * If we're processing this frame we can use the\n         * framelocked timestamp to keep things in sync.\n         */ now: ()=>frameData.isProcessing ? frameData.timestamp : performance.now()\n    };\n};\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */ const maxGeneratorDuration = 20000;\nfunction calcGeneratorDuration(generator) {\n    let duration = 0;\n    const timeStep = 50;\n    let state = generator.next(duration);\n    while(!state.done && duration < maxGeneratorDuration){\n        duration += timeStep;\n        state = generator.next(duration);\n    }\n    return duration >= maxGeneratorDuration ? Infinity : duration;\n}\nconst types = {\n    decay: inertia,\n    inertia,\n    tween: keyframes,\n    keyframes: keyframes,\n    spring\n};\n/**\n * Animate a single value on the main thread.\n *\n * This function is written, where functionality overlaps,\n * to be largely spec-compliant with WAAPI to allow fungibility\n * between the two.\n */ function animateValue({ autoplay = true, delay = 0, driver = frameloopDriver, keyframes: keyframes$1, type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType = \"loop\", onPlay, onStop, onComplete, onUpdate, ...options }) {\n    let speed = 1;\n    let hasStopped = false;\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Resolve the current Promise every time we enter the\n     * finished state. This is WAAPI-compatible behaviour.\n     */ const updateFinishedPromise = ()=>{\n        currentFinishedPromise = new Promise((resolve)=>{\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let animationDriver;\n    const generatorFactory = types[type] || keyframes;\n    /**\n     * If this isn't the keyframes generator and we've been provided\n     * strings as keyframes, we need to interpolate these.\n     * TODO: Support velocity for units and complex value types/\n     */ let mapNumbersToKeyframes;\n    if (generatorFactory !== keyframes && typeof keyframes$1[0] !== \"number\") {\n        mapNumbersToKeyframes = interpolate([\n            0,\n            100\n        ], keyframes$1, {\n            clamp: false\n        });\n        keyframes$1 = [\n            0,\n            100\n        ];\n    }\n    const generator = generatorFactory({\n        ...options,\n        keyframes: keyframes$1\n    });\n    let mirroredGenerator;\n    if (repeatType === \"mirror\") {\n        mirroredGenerator = generatorFactory({\n            ...options,\n            keyframes: [\n                ...keyframes$1\n            ].reverse(),\n            velocity: -(options.velocity || 0)\n        });\n    }\n    let playState = \"idle\";\n    let holdTime = null;\n    let startTime = null;\n    let cancelTime = null;\n    /**\n     * If duration is undefined and we have repeat options,\n     * we need to calculate a duration from the generator.\n     *\n     * We set it to the generator itself to cache the duration.\n     * Any timeline resolver will need to have already precalculated\n     * the duration by this step.\n     */ if (generator.calculatedDuration === null && repeat) {\n        generator.calculatedDuration = calcGeneratorDuration(generator);\n    }\n    const { calculatedDuration } = generator;\n    let resolvedDuration = Infinity;\n    let totalDuration = Infinity;\n    if (calculatedDuration !== null) {\n        resolvedDuration = calculatedDuration + repeatDelay;\n        totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\n    }\n    let currentTime = 0;\n    const tick = (timestamp)=>{\n        if (startTime === null) return;\n        /**\n         * requestAnimationFrame timestamps can come through as lower than\n         * the startTime as set by performance.now(). Here we prevent this,\n         * though in the future it could be possible to make setting startTime\n         * a pending operation that gets resolved here.\n         */ if (speed > 0) startTime = Math.min(startTime, timestamp);\n        if (speed < 0) startTime = Math.min(timestamp - totalDuration / speed, startTime);\n        if (holdTime !== null) {\n            currentTime = holdTime;\n        } else {\n            // Rounding the time because floating point arithmetic is not always accurate, e.g. 3000.367 - 1000.367 =\n            // 2000.0000000000002. This is a problem when we are comparing the currentTime with the duration, for\n            // example.\n            currentTime = Math.round(timestamp - startTime) * speed;\n        }\n        // Rebase on delay\n        const timeWithoutDelay = currentTime - delay * (speed >= 0 ? 1 : -1);\n        const isInDelayPhase = speed >= 0 ? timeWithoutDelay < 0 : timeWithoutDelay > totalDuration;\n        currentTime = Math.max(timeWithoutDelay, 0);\n        /**\n         * If this animation has finished, set the current time\n         * to the total duration.\n         */ if (playState === \"finished\" && holdTime === null) {\n            currentTime = totalDuration;\n        }\n        let elapsed = currentTime;\n        let frameGenerator = generator;\n        if (repeat) {\n            /**\n             * Get the current progress (0-1) of the animation. If t is >\n             * than duration we'll get values like 2.5 (midway through the\n             * third iteration)\n             */ const progress = currentTime / resolvedDuration;\n            /**\n             * Get the current iteration (0 indexed). For instance the floor of\n             * 2.5 is 2.\n             */ let currentIteration = Math.floor(progress);\n            /**\n             * Get the current progress of the iteration by taking the remainder\n             * so 2.5 is 0.5 through iteration 2\n             */ let iterationProgress = progress % 1.0;\n            /**\n             * If iteration progress is 1 we count that as the end\n             * of the previous iteration.\n             */ if (!iterationProgress && progress >= 1) {\n                iterationProgress = 1;\n            }\n            iterationProgress === 1 && currentIteration--;\n            currentIteration = Math.min(currentIteration, repeat + 1);\n            /**\n             * Reverse progress if we're not running in \"normal\" direction\n             */ const iterationIsOdd = Boolean(currentIteration % 2);\n            if (iterationIsOdd) {\n                if (repeatType === \"reverse\") {\n                    iterationProgress = 1 - iterationProgress;\n                    if (repeatDelay) {\n                        iterationProgress -= repeatDelay / resolvedDuration;\n                    }\n                } else if (repeatType === \"mirror\") {\n                    frameGenerator = mirroredGenerator;\n                }\n            }\n            let p = clamp(0, 1, iterationProgress);\n            if (currentTime > totalDuration) {\n                p = repeatType === \"reverse\" && iterationIsOdd ? 1 : 0;\n            }\n            elapsed = p * resolvedDuration;\n        }\n        /**\n         * If we're in negative time, set state as the initial keyframe.\n         * This prevents delay: x, duration: 0 animations from finishing\n         * instantly.\n         */ const state = isInDelayPhase ? {\n            done: false,\n            value: keyframes$1[0]\n        } : frameGenerator.next(elapsed);\n        if (mapNumbersToKeyframes) {\n            state.value = mapNumbersToKeyframes(state.value);\n        }\n        let { done } = state;\n        if (!isInDelayPhase && calculatedDuration !== null) {\n            done = speed >= 0 ? currentTime >= totalDuration : currentTime <= 0;\n        }\n        const isAnimationFinished = holdTime === null && (playState === \"finished\" || playState === \"running\" && done);\n        if (onUpdate) {\n            onUpdate(state.value);\n        }\n        if (isAnimationFinished) {\n            finish();\n        }\n        return state;\n    };\n    const stopAnimationDriver = ()=>{\n        animationDriver && animationDriver.stop();\n        animationDriver = undefined;\n    };\n    const cancel = ()=>{\n        playState = \"idle\";\n        stopAnimationDriver();\n        resolveFinishedPromise();\n        updateFinishedPromise();\n        startTime = cancelTime = null;\n    };\n    const finish = ()=>{\n        playState = \"finished\";\n        onComplete && onComplete();\n        stopAnimationDriver();\n        resolveFinishedPromise();\n    };\n    const play = ()=>{\n        if (hasStopped) return;\n        if (!animationDriver) animationDriver = driver(tick);\n        const now = animationDriver.now();\n        onPlay && onPlay();\n        if (holdTime !== null) {\n            startTime = now - holdTime;\n        } else if (!startTime || playState === \"finished\") {\n            startTime = now;\n        }\n        if (playState === \"finished\") {\n            updateFinishedPromise();\n        }\n        cancelTime = startTime;\n        holdTime = null;\n        /**\n         * Set playState to running only after we've used it in\n         * the previous logic.\n         */ playState = \"running\";\n        animationDriver.start();\n    };\n    if (autoplay) {\n        play();\n    }\n    const controls = {\n        then (resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        get time () {\n            return millisecondsToSeconds(currentTime);\n        },\n        set time (newTime){\n            newTime = secondsToMilliseconds(newTime);\n            currentTime = newTime;\n            if (holdTime !== null || !animationDriver || speed === 0) {\n                holdTime = newTime;\n            } else {\n                startTime = animationDriver.now() - newTime / speed;\n            }\n        },\n        get duration () {\n            const duration = generator.calculatedDuration === null ? calcGeneratorDuration(generator) : generator.calculatedDuration;\n            return millisecondsToSeconds(duration);\n        },\n        get speed () {\n            return speed;\n        },\n        set speed (newSpeed){\n            if (newSpeed === speed || !animationDriver) return;\n            speed = newSpeed;\n            controls.time = millisecondsToSeconds(currentTime);\n        },\n        get state () {\n            return playState;\n        },\n        play,\n        pause: ()=>{\n            playState = \"paused\";\n            holdTime = currentTime;\n        },\n        stop: ()=>{\n            hasStopped = true;\n            if (playState === \"idle\") return;\n            playState = \"idle\";\n            onStop && onStop();\n            cancel();\n        },\n        cancel: ()=>{\n            if (cancelTime !== null) tick(cancelTime);\n            cancel();\n        },\n        complete: ()=>{\n            playState = \"finished\";\n        },\n        sample: (elapsed)=>{\n            startTime = 0;\n            return tick(elapsed);\n        }\n    };\n    return controls;\n}\nfunction memo(callback) {\n    let result;\n    return ()=>{\n        if (result === undefined) result = callback();\n        return result;\n    };\n}\nconst supportsWaapi = memo(()=>Object.hasOwnProperty.call(Element.prototype, \"animate\"));\n/**\n * A list of values that can be hardware-accelerated.\n */ const acceleratedValues = new Set([\n    \"opacity\",\n    \"clipPath\",\n    \"filter\",\n    \"transform\",\n    \"backgroundColor\"\n]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */ const sampleDelta = 10; //ms\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */ const maxDuration = 20000;\nconst requiresPregeneratedKeyframes = (valueName, options)=>options.type === \"spring\" || valueName === \"backgroundColor\" || !isWaapiSupportedEasing(options.ease);\nfunction createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {\n    const canAccelerateAnimation = supportsWaapi() && acceleratedValues.has(valueName) && !options.repeatDelay && options.repeatType !== \"mirror\" && options.damping !== 0 && options.type !== \"inertia\";\n    if (!canAccelerateAnimation) return false;\n    /**\n     * TODO: Unify with js/index\n     */ let hasStopped = false;\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Resolve the current Promise every time we enter the\n     * finished state. This is WAAPI-compatible behaviour.\n     */ const updateFinishedPromise = ()=>{\n        currentFinishedPromise = new Promise((resolve)=>{\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let { keyframes, duration = 300, ease, times } = options;\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */ if (requiresPregeneratedKeyframes(valueName, options)) {\n        const sampleAnimation = animateValue({\n            ...options,\n            repeat: 0,\n            delay: 0\n        });\n        let state = {\n            done: false,\n            value: keyframes[0]\n        };\n        const pregeneratedKeyframes = [];\n        /**\n         * Bail after 20 seconds of pre-generated keyframes as it's likely\n         * we're heading for an infinite loop.\n         */ let t = 0;\n        while(!state.done && t < maxDuration){\n            state = sampleAnimation.sample(t);\n            pregeneratedKeyframes.push(state.value);\n            t += sampleDelta;\n        }\n        times = undefined;\n        keyframes = pregeneratedKeyframes;\n        duration = t - sampleDelta;\n        ease = \"linear\";\n    }\n    const animation = animateStyle(value.owner.current, valueName, keyframes, {\n        ...options,\n        duration,\n        /**\n         * This function is currently not called if ease is provided\n         * as a function so the cast is safe.\n         *\n         * However it would be possible for a future refinement to port\n         * in easing pregeneration from Motion One for browsers that\n         * support the upcoming `linear()` easing function.\n         */ ease: ease,\n        times\n    });\n    const cancelAnimation = ()=>animation.cancel();\n    const safeCancel = ()=>{\n        frame.update(cancelAnimation);\n        resolveFinishedPromise();\n        updateFinishedPromise();\n    };\n    /**\n     * Prefer the `onfinish` prop as it's more widely supported than\n     * the `finished` promise.\n     *\n     * Here, we synchronously set the provided MotionValue to the end\n     * keyframe. If we didn't, when the WAAPI animation is finished it would\n     * be removed from the element which would then revert to its old styles.\n     */ animation.onfinish = ()=>{\n        value.set(getFinalKeyframe(keyframes, options));\n        onComplete && onComplete();\n        safeCancel();\n    };\n    /**\n     * Animation interrupt callback.\n     */ const controls = {\n        then (resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        attachTimeline (timeline) {\n            animation.timeline = timeline;\n            animation.onfinish = null;\n            return noop;\n        },\n        get time () {\n            return millisecondsToSeconds(animation.currentTime || 0);\n        },\n        set time (newTime){\n            animation.currentTime = secondsToMilliseconds(newTime);\n        },\n        get speed () {\n            return animation.playbackRate;\n        },\n        set speed (newSpeed){\n            animation.playbackRate = newSpeed;\n        },\n        get duration () {\n            return millisecondsToSeconds(duration);\n        },\n        play: ()=>{\n            if (hasStopped) return;\n            animation.play();\n            /**\n             * Cancel any pending cancel tasks\n             */ cancelFrame(cancelAnimation);\n        },\n        pause: ()=>animation.pause(),\n        stop: ()=>{\n            hasStopped = true;\n            if (animation.playState === \"idle\") return;\n            /**\n             * WAAPI doesn't natively have any interruption capabilities.\n             *\n             * Rather than read commited styles back out of the DOM, we can\n             * create a renderless JS animation and sample it twice to calculate\n             * its current value, \"previous\" value, and therefore allow\n             * Motion to calculate velocity for any subsequent animation.\n             */ const { currentTime } = animation;\n            if (currentTime) {\n                const sampleAnimation = animateValue({\n                    ...options,\n                    autoplay: false\n                });\n                value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n            }\n            safeCancel();\n        },\n        complete: ()=>animation.finish(),\n        cancel: safeCancel\n    };\n    return controls;\n}\nfunction createInstantAnimation({ keyframes, delay, onUpdate, onComplete }) {\n    const setValue = ()=>{\n        onUpdate && onUpdate(keyframes[keyframes.length - 1]);\n        onComplete && onComplete();\n        /**\n         * TODO: As this API grows it could make sense to always return\n         * animateValue. This will be a bigger project as animateValue\n         * is frame-locked whereas this function resolves instantly.\n         * This is a behavioural change and also has ramifications regarding\n         * assumptions within tests.\n         */ return {\n            time: 0,\n            speed: 1,\n            duration: 0,\n            play: noop,\n            pause: noop,\n            stop: noop,\n            then: (resolve)=>{\n                resolve();\n                return Promise.resolve();\n            },\n            cancel: noop,\n            complete: noop\n        };\n    };\n    return delay ? animateValue({\n        keyframes: [\n            0,\n            1\n        ],\n        duration: 0,\n        delay,\n        onComplete: setValue\n    }) : setValue();\n}\nconst underDampedSpring = {\n    type: \"spring\",\n    stiffness: 500,\n    damping: 25,\n    restSpeed: 10\n};\nconst criticallyDampedSpring = (target)=>({\n        type: \"spring\",\n        stiffness: 550,\n        damping: target === 0 ? 2 * Math.sqrt(550) : 30,\n        restSpeed: 10\n    });\nconst keyframesTransition = {\n    type: \"keyframes\",\n    duration: 0.8\n};\n/**\n * Default easing curve is a slightly shallower version of\n * the default browser easing curve.\n */ const ease = {\n    type: \"keyframes\",\n    ease: [\n        0.25,\n        0.1,\n        0.35,\n        1\n    ],\n    duration: 0.3\n};\nconst getDefaultTransition = (valueKey, { keyframes })=>{\n    if (keyframes.length > 2) {\n        return keyframesTransition;\n    } else if (transformProps.has(valueKey)) {\n        return valueKey.startsWith(\"scale\") ? criticallyDampedSpring(keyframes[1]) : underDampedSpring;\n    }\n    return ease;\n};\n/**\n * Check if a value is animatable. Examples:\n *\n * ✅: 100, \"100px\", \"#fff\"\n * ❌: \"block\", \"url(2.jpg)\"\n * @param value\n *\n * @internal\n */ const isAnimatable = (key, value)=>{\n    // If the list of keys tat might be non-animatable grows, replace with Set\n    if (key === \"zIndex\") return false;\n    // If it's a number or a keyframes array, we can animate it. We might at some point\n    // need to do a deep isAnimatable check of keyframes, or let Popmotion handle this,\n    // but for now lets leave it like this for performance reasons\n    if (typeof value === \"number\" || Array.isArray(value)) return true;\n    if (typeof value === \"string\" && // It's animatable if we have a string\n    (complex.test(value) || value === \"0\") && // And it contains numbers and/or colors\n    !value.startsWith(\"url(\") // Unless it starts with \"url(\"\n    ) {\n        return true;\n    }\n    return false;\n};\n/**\n * Properties that should default to 1 or 100%\n */ const maxDefaults = new Set([\n    \"brightness\",\n    \"contrast\",\n    \"saturate\",\n    \"opacity\"\n]);\nfunction applyDefaultFilter(v) {\n    const [name, value] = v.slice(0, -1).split(\"(\");\n    if (name === \"drop-shadow\") return v;\n    const [number] = value.match(floatRegex) || [];\n    if (!number) return v;\n    const unit = value.replace(number, \"\");\n    let defaultValue = maxDefaults.has(name) ? 1 : 0;\n    if (number !== value) defaultValue *= 100;\n    return name + \"(\" + defaultValue + unit + \")\";\n}\nconst functionRegex = /([a-z-]*)\\(.*?\\)/g;\nconst filter = {\n    ...complex,\n    getAnimatableNone: (v)=>{\n        const functions = v.match(functionRegex);\n        return functions ? functions.map(applyDefaultFilter).join(\" \") : v;\n    }\n};\n/**\n * A map of default value types for common values\n */ const defaultValueTypes = {\n    ...numberValueTypes,\n    // Color props\n    color,\n    backgroundColor: color,\n    outlineColor: color,\n    fill: color,\n    stroke: color,\n    // Border props\n    borderColor: color,\n    borderTopColor: color,\n    borderRightColor: color,\n    borderBottomColor: color,\n    borderLeftColor: color,\n    filter,\n    WebkitFilter: filter\n};\n/**\n * Gets the default ValueType for the provided value key\n */ const getDefaultValueType = (key)=>defaultValueTypes[key];\nfunction getAnimatableNone(key, value) {\n    let defaultValueType = getDefaultValueType(key);\n    if (defaultValueType !== filter) defaultValueType = complex;\n    // If value is not recognised as animatable, ie \"none\", create an animatable version origin based on the target\n    return defaultValueType.getAnimatableNone ? defaultValueType.getAnimatableNone(value) : undefined;\n}\n/**\n * Check if the value is a zero value string like \"0px\" or \"0%\"\n */ const isZeroValueString = (v)=>/^0[^.\\s]+$/.test(v);\nfunction isNone(value) {\n    if (typeof value === \"number\") {\n        return value === 0;\n    } else if (value !== null) {\n        return value === \"none\" || value === \"0\" || isZeroValueString(value);\n    }\n}\nfunction getKeyframes(value, valueName, target, transition) {\n    const isTargetAnimatable = isAnimatable(valueName, target);\n    let keyframes;\n    if (Array.isArray(target)) {\n        keyframes = [\n            ...target\n        ];\n    } else {\n        keyframes = [\n            null,\n            target\n        ];\n    }\n    const defaultOrigin = transition.from !== undefined ? transition.from : value.get();\n    let animatableTemplateValue = undefined;\n    const noneKeyframeIndexes = [];\n    for(let i = 0; i < keyframes.length; i++){\n        /**\n         * Fill null/wildcard keyframes\n         */ if (keyframes[i] === null) {\n            keyframes[i] = i === 0 ? defaultOrigin : keyframes[i - 1];\n        }\n        if (isNone(keyframes[i])) {\n            noneKeyframeIndexes.push(i);\n        }\n        // TODO: Clean this conditional, it works for now\n        if (typeof keyframes[i] === \"string\" && keyframes[i] !== \"none\" && keyframes[i] !== \"0\") {\n            animatableTemplateValue = keyframes[i];\n        }\n    }\n    if (isTargetAnimatable && noneKeyframeIndexes.length && animatableTemplateValue) {\n        for(let i = 0; i < noneKeyframeIndexes.length; i++){\n            const index = noneKeyframeIndexes[i];\n            keyframes[index] = getAnimatableNone(valueName, animatableTemplateValue);\n        }\n    }\n    return keyframes;\n}\n/**\n * Decide whether a transition is defined on a given Transition.\n * This filters out orchestration options and returns true\n * if any options are left.\n */ function isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed, ...transition }) {\n    return !!Object.keys(transition).length;\n}\nfunction getValueTransition$1(transition, key) {\n    return transition[key] || transition[\"default\"] || transition;\n}\nconst animateMotionValue = (valueName, value, target, transition = {})=>{\n    return (onComplete)=>{\n        const valueTransition = getValueTransition$1(transition, valueName) || {};\n        /**\n         * Most transition values are currently completely overwritten by value-specific\n         * transitions. In the future it'd be nicer to blend these transitions. But for now\n         * delay actually does inherit from the root transition if not value-specific.\n         */ const delay = valueTransition.delay || transition.delay || 0;\n        /**\n         * Elapsed isn't a public transition option but can be passed through from\n         * optimized appear effects in milliseconds.\n         */ let { elapsed = 0 } = transition;\n        elapsed = elapsed - secondsToMilliseconds(delay);\n        const keyframes = getKeyframes(value, valueName, target, valueTransition);\n        /**\n         * Check if we're able to animate between the start and end keyframes,\n         * and throw a warning if we're attempting to animate between one that's\n         * animatable and another that isn't.\n         */ const originKeyframe = keyframes[0];\n        const targetKeyframe = keyframes[keyframes.length - 1];\n        const isOriginAnimatable = isAnimatable(valueName, originKeyframe);\n        const isTargetAnimatable = isAnimatable(valueName, targetKeyframe);\n        exports.warning(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${valueName} from \"${originKeyframe}\" to \"${targetKeyframe}\". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \\`style\\` property.`);\n        let options = {\n            keyframes,\n            velocity: value.getVelocity(),\n            ease: \"easeOut\",\n            ...valueTransition,\n            delay: -elapsed,\n            onUpdate: (v)=>{\n                value.set(v);\n                valueTransition.onUpdate && valueTransition.onUpdate(v);\n            },\n            onComplete: ()=>{\n                onComplete();\n                valueTransition.onComplete && valueTransition.onComplete();\n            }\n        };\n        /**\n         * If there's no transition defined for this value, we can generate\n         * unqiue transition settings for this value.\n         */ if (!isTransitionDefined(valueTransition)) {\n            options = {\n                ...options,\n                ...getDefaultTransition(valueName, options)\n            };\n        }\n        /**\n         * Both WAAPI and our internal animation functions use durations\n         * as defined by milliseconds, while our external API defines them\n         * as seconds.\n         */ if (options.duration) {\n            options.duration = secondsToMilliseconds(options.duration);\n        }\n        if (options.repeatDelay) {\n            options.repeatDelay = secondsToMilliseconds(options.repeatDelay);\n        }\n        if (!isOriginAnimatable || !isTargetAnimatable || instantAnimationState.current || valueTransition.type === false) {\n            /**\n             * If we can't animate this value, or the global instant animation flag is set,\n             * or this is simply defined as an instant transition, return an instant transition.\n             */ return createInstantAnimation(instantAnimationState.current ? {\n                ...options,\n                delay: 0\n            } : options);\n        }\n        /**\n         * Animate via WAAPI if possible.\n         */ if (/**\n         * If this is a handoff animation, the optimised animation will be running via\n         * WAAPI. Therefore, this animation must be JS to ensure it runs \"under\" the\n         * optimised animation.\n         */ !transition.isHandoff && value.owner && value.owner.current instanceof HTMLElement && /**\n             * If we're outputting values to onUpdate then we can't use WAAPI as there's\n             * no way to read the value from WAAPI every frame.\n             */ !value.owner.getProps().onUpdate) {\n            const acceleratedAnimation = createAcceleratedAnimation(value, valueName, options);\n            if (acceleratedAnimation) return acceleratedAnimation;\n        }\n        /**\n         * If we didn't create an accelerated animation, create a JS animation\n         */ return animateValue(options);\n    };\n};\nfunction isWillChangeMotionValue(value) {\n    return Boolean(isMotionValue(value) && value.add);\n}\n/**\n * Check if value is a numerical string, ie a string that is purely a number eg \"100\" or \"-100.1\"\n */ const isNumericalString = (v)=>/^\\-?\\d*\\.?\\d+$/.test(v);\nfunction addUniqueItem(arr, item) {\n    if (arr.indexOf(item) === -1) arr.push(item);\n}\nfunction removeItem(arr, item) {\n    const index = arr.indexOf(item);\n    if (index > -1) arr.splice(index, 1);\n}\n// Adapted from array-move\nfunction moveItem([...arr], fromIndex, toIndex) {\n    const startIndex = fromIndex < 0 ? arr.length + fromIndex : fromIndex;\n    if (startIndex >= 0 && startIndex < arr.length) {\n        const endIndex = toIndex < 0 ? arr.length + toIndex : toIndex;\n        const [item] = arr.splice(fromIndex, 1);\n        arr.splice(endIndex, 0, item);\n    }\n    return arr;\n}\nclass SubscriptionManager {\n    constructor(){\n        this.subscriptions = [];\n    }\n    add(handler) {\n        addUniqueItem(this.subscriptions, handler);\n        return ()=>removeItem(this.subscriptions, handler);\n    }\n    notify(a, b, c) {\n        const numSubscriptions = this.subscriptions.length;\n        if (!numSubscriptions) return;\n        if (numSubscriptions === 1) {\n            /**\n             * If there's only a single handler we can just call it without invoking a loop.\n             */ this.subscriptions[0](a, b, c);\n        } else {\n            for(let i = 0; i < numSubscriptions; i++){\n                /**\n                 * Check whether the handler exists before firing as it's possible\n                 * the subscriptions were modified during this loop running.\n                 */ const handler = this.subscriptions[i];\n                handler && handler(a, b, c);\n            }\n        }\n    }\n    getSize() {\n        return this.subscriptions.length;\n    }\n    clear() {\n        this.subscriptions.length = 0;\n    }\n}\nconst warned = new Set();\nfunction warnOnce(condition, message, element) {\n    if (condition || warned.has(message)) return;\n    console.warn(message);\n    if (element) console.warn(element);\n    warned.add(message);\n}\nconst isFloat = (value)=>{\n    return !isNaN(parseFloat(value));\n};\nconst collectMotionValues = {\n    current: undefined\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */ class MotionValue {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     *\n     * @internal\n     */ constructor(init, options = {}){\n        /**\n         * This will be replaced by the build step with the latest version number.\n         * When MotionValues are provided to motion components, warn if versions are mixed.\n         */ this.version = \"10.16.16\";\n        /**\n         * Duration, in milliseconds, since last updating frame.\n         *\n         * @internal\n         */ this.timeDelta = 0;\n        /**\n         * Timestamp of the last time this `MotionValue` was updated.\n         *\n         * @internal\n         */ this.lastUpdated = 0;\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */ this.canTrackVelocity = false;\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */ this.events = {};\n        this.updateAndNotify = (v, render = true)=>{\n            this.prev = this.current;\n            this.current = v;\n            // Update timestamp\n            const { delta, timestamp } = frameData;\n            if (this.lastUpdated !== timestamp) {\n                this.timeDelta = delta;\n                this.lastUpdated = timestamp;\n                frame.postRender(this.scheduleVelocityCheck);\n            }\n            // Update update subscribers\n            if (this.prev !== this.current && this.events.change) {\n                this.events.change.notify(this.current);\n            }\n            // Update velocity subscribers\n            if (this.events.velocityChange) {\n                this.events.velocityChange.notify(this.getVelocity());\n            }\n            // Update render subscribers\n            if (render && this.events.renderRequest) {\n                this.events.renderRequest.notify(this.current);\n            }\n        };\n        /**\n         * Schedule a velocity check for the next frame.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */ this.scheduleVelocityCheck = ()=>frame.postRender(this.velocityCheck);\n        /**\n         * Updates `prev` with `current` if the value hasn't been updated this frame.\n         * This ensures velocity calculations return `0`.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */ this.velocityCheck = ({ timestamp })=>{\n            if (timestamp !== this.lastUpdated) {\n                this.prev = this.current;\n                if (this.events.velocityChange) {\n                    this.events.velocityChange.notify(this.getVelocity());\n                }\n            }\n        };\n        this.hasAnimated = false;\n        this.prev = this.current = init;\n        this.canTrackVelocity = isFloat(this.current);\n        this.owner = options.owner;\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @deprecated\n     */ onChange(subscription) {\n        if (true) {\n            warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on(\"change\", callback).`);\n        }\n        return this.on(\"change\", subscription);\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        const unsubscribe = this.events[eventName].add(callback);\n        if (eventName === \"change\") {\n            return ()=>{\n                unsubscribe();\n                /**\n                 * If we have no more change listeners by the start\n                 * of the next frame, stop active animations.\n                 */ frame.read(()=>{\n                    if (!this.events.change.getSize()) {\n                        this.stop();\n                    }\n                });\n            };\n        }\n        return unsubscribe;\n    }\n    clearListeners() {\n        for(const eventManagers in this.events){\n            this.events[eventManagers].clear();\n        }\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */ attach(passiveEffect, stopPassiveEffect) {\n        this.passiveEffect = passiveEffect;\n        this.stopPassiveEffect = stopPassiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */ set(v, render = true) {\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        } else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    }\n    setWithVelocity(prev, current, delta) {\n        this.set(current);\n        this.prev = prev;\n        this.timeDelta = delta;\n    }\n    /**\n     * Set the state of the `MotionValue`, stopping any active animations,\n     * effects, and resets velocity to `0`.\n     */ jump(v) {\n        this.updateAndNotify(v);\n        this.prev = v;\n        this.stop();\n        if (this.stopPassiveEffect) this.stopPassiveEffect();\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */ get() {\n        if (collectMotionValues.current) {\n            collectMotionValues.current.push(this);\n        }\n        return this.current;\n    }\n    /**\n     * @public\n     */ getPrevious() {\n        return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */ getVelocity() {\n        // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\n        return this.canTrackVelocity ? velocityPerSecond(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta) : 0;\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */ start(startAnimation) {\n        this.stop();\n        return new Promise((resolve)=>{\n            this.hasAnimated = true;\n            this.animation = startAnimation(resolve);\n            if (this.events.animationStart) {\n                this.events.animationStart.notify();\n            }\n        }).then(()=>{\n            if (this.events.animationComplete) {\n                this.events.animationComplete.notify();\n            }\n            this.clearAnimation();\n        });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */ stop() {\n        if (this.animation) {\n            this.animation.stop();\n            if (this.events.animationCancel) {\n                this.events.animationCancel.notify();\n            }\n        }\n        this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */ isAnimating() {\n        return !!this.animation;\n    }\n    clearAnimation() {\n        delete this.animation;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */ destroy() {\n        this.clearListeners();\n        this.stop();\n        if (this.stopPassiveEffect) {\n            this.stopPassiveEffect();\n        }\n    }\n}\nfunction motionValue(init, options) {\n    return new MotionValue(init, options);\n}\n/**\n * Tests a provided value against a ValueType\n */ const testValueType = (v)=>(type)=>type.test(v);\n/**\n * ValueType for \"auto\"\n */ const auto = {\n    test: (v)=>v === \"auto\",\n    parse: (v)=>v\n};\n/**\n * A list of value types commonly used for dimensions\n */ const dimensionValueTypes = [\n    number,\n    px,\n    percent,\n    degrees,\n    vw,\n    vh,\n    auto\n];\n/**\n * Tests a dimensional value against the list of dimension ValueTypes\n */ const findDimensionValueType = (v)=>dimensionValueTypes.find(testValueType(v));\n/**\n * A list of all ValueTypes\n */ const valueTypes = [\n    ...dimensionValueTypes,\n    color,\n    complex\n];\n/**\n * Tests a value against the list of ValueTypes\n */ const findValueType = (v)=>valueTypes.find(testValueType(v));\n/**\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\n * it doesn't exist.\n */ function setMotionValue(visualElement, key, value) {\n    if (visualElement.hasValue(key)) {\n        visualElement.getValue(key).set(value);\n    } else {\n        visualElement.addValue(key, motionValue(value));\n    }\n}\nfunction setTarget(visualElement, definition) {\n    const resolved = resolveVariant(visualElement, definition);\n    let { transitionEnd = {}, transition = {}, ...target } = resolved ? visualElement.makeTargetAnimatable(resolved, false) : {};\n    target = {\n        ...target,\n        ...transitionEnd\n    };\n    for(const key in target){\n        const value = resolveFinalValueInKeyframes(target[key]);\n        setMotionValue(visualElement, key, value);\n    }\n}\nfunction setVariants(visualElement, variantLabels) {\n    const reversedLabels = [\n        ...variantLabels\n    ].reverse();\n    reversedLabels.forEach((key)=>{\n        const variant = visualElement.getVariant(key);\n        variant && setTarget(visualElement, variant);\n        if (visualElement.variantChildren) {\n            visualElement.variantChildren.forEach((child)=>{\n                setVariants(child, variantLabels);\n            });\n        }\n    });\n}\nfunction setValues(visualElement, definition) {\n    if (Array.isArray(definition)) {\n        return setVariants(visualElement, definition);\n    } else if (typeof definition === \"string\") {\n        return setVariants(visualElement, [\n            definition\n        ]);\n    } else {\n        setTarget(visualElement, definition);\n    }\n}\nfunction checkTargetForNewValues(visualElement, target, origin) {\n    var _a, _b;\n    const newValueKeys = Object.keys(target).filter((key)=>!visualElement.hasValue(key));\n    const numNewValues = newValueKeys.length;\n    if (!numNewValues) return;\n    for(let i = 0; i < numNewValues; i++){\n        const key = newValueKeys[i];\n        const targetValue = target[key];\n        let value = null;\n        /**\n         * If the target is a series of keyframes, we can use the first value\n         * in the array. If this first value is null, we'll still need to read from the DOM.\n         */ if (Array.isArray(targetValue)) {\n            value = targetValue[0];\n        }\n        /**\n         * If the target isn't keyframes, or the first keyframe was null, we need to\n         * first check if an origin value was explicitly defined in the transition as \"from\",\n         * if not read the value from the DOM. As an absolute fallback, take the defined target value.\n         */ if (value === null) {\n            value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement.readValue(key)) !== null && _b !== void 0 ? _b : target[key];\n        }\n        /**\n         * If value is still undefined or null, ignore it. Preferably this would throw,\n         * but this was causing issues in Framer.\n         */ if (value === undefined || value === null) continue;\n        if (typeof value === \"string\" && (isNumericalString(value) || isZeroValueString(value))) {\n            // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n            value = parseFloat(value);\n        } else if (!findValueType(value) && complex.test(targetValue)) {\n            value = getAnimatableNone(key, targetValue);\n        }\n        visualElement.addValue(key, motionValue(value, {\n            owner: visualElement\n        }));\n        if (origin[key] === undefined) {\n            origin[key] = value;\n        }\n        if (value !== null) visualElement.setBaseTarget(key, value);\n    }\n}\nfunction getOriginFromTransition(key, transition) {\n    if (!transition) return;\n    const valueTransition = transition[key] || transition[\"default\"] || transition;\n    return valueTransition.from;\n}\nfunction getOrigin(target, transition, visualElement) {\n    const origin = {};\n    for(const key in target){\n        const transitionOrigin = getOriginFromTransition(key, transition);\n        if (transitionOrigin !== undefined) {\n            origin[key] = transitionOrigin;\n        } else {\n            const value = visualElement.getValue(key);\n            if (value) {\n                origin[key] = value.get();\n            }\n        }\n    }\n    return origin;\n}\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */ function shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction hasKeyframesChanged(value, target) {\n    const current = value.get();\n    if (Array.isArray(target)) {\n        for(let i = 0; i < target.length; i++){\n            if (target[i] !== current) return true;\n        }\n    } else {\n        return current !== target;\n    }\n}\nfunction animateTarget(visualElement, definition, { delay = 0, transitionOverride, type } = {}) {\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);\n    const willChange = visualElement.getValue(\"willChange\");\n    if (transitionOverride) transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];\n    for(const key in target){\n        const value = visualElement.getValue(key);\n        const valueTarget = target[key];\n        if (!value || valueTarget === undefined || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {\n            continue;\n        }\n        const valueTransition = {\n            delay,\n            elapsed: 0,\n            ...getValueTransition$1(transition || {}, key)\n        };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */ if (window.HandoffAppearAnimations) {\n            const appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n            if (appearId) {\n                const elapsed = window.HandoffAppearAnimations(appearId, key, value, frame);\n                if (elapsed !== null) {\n                    valueTransition.elapsed = elapsed;\n                    valueTransition.isHandoff = true;\n                }\n            }\n        }\n        let canSkip = !valueTransition.isHandoff && !hasKeyframesChanged(value, valueTarget);\n        if (valueTransition.type === \"spring\" && (value.getVelocity() || valueTransition.velocity)) {\n            canSkip = false;\n        }\n        /**\n         * Temporarily disable skipping animations if there's an animation in\n         * progress. Better would be to track the current target of a value\n         * and compare that against valueTarget.\n         */ if (value.animation) {\n            canSkip = false;\n        }\n        if (canSkip) continue;\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key) ? {\n            type: false\n        } : valueTransition));\n        const animation = value.animation;\n        if (isWillChangeMotionValue(willChange)) {\n            willChange.add(key);\n            animation.then(()=>willChange.remove(key));\n        }\n        animations.push(animation);\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(()=>{\n            transitionEnd && setTarget(visualElement, transitionEnd);\n        });\n    }\n    return animations;\n}\nconst distance = (a, b)=>Math.abs(a - b);\nfunction distance2D(a, b) {\n    // Multi-dimensional\n    const xDelta = distance(a.x, b.x);\n    const yDelta = distance(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n}\nconst createAxisDelta = ()=>({\n        translate: 0,\n        scale: 1,\n        origin: 0,\n        originPoint: 0\n    });\nconst createDelta = ()=>({\n        x: createAxisDelta(),\n        y: createAxisDelta()\n    });\nconst createAxis = ()=>({\n        min: 0,\n        max: 0\n    });\nconst createBox = ()=>({\n        x: createAxis(),\n        y: createAxis()\n    });\n/**\n * Bounding boxes tend to be defined as top, left, right, bottom. For various operations\n * it's easier to consider each axis individually. This function returns a bounding box\n * as a map of single-axis min/max values.\n */ function convertBoundingBoxToBox({ top, left, right, bottom }) {\n    return {\n        x: {\n            min: left,\n            max: right\n        },\n        y: {\n            min: top,\n            max: bottom\n        }\n    };\n}\nfunction convertBoxToBoundingBox({ x, y }) {\n    return {\n        top: y.min,\n        right: x.max,\n        bottom: y.max,\n        left: x.min\n    };\n}\n/**\n * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function\n * provided by Framer to allow measured points to be corrected for device scaling. This is used\n * when measuring DOM elements and DOM event points.\n */ function transformBoxPoints(point, transformPoint) {\n    if (!transformPoint) return point;\n    const topLeft = transformPoint({\n        x: point.left,\n        y: point.top\n    });\n    const bottomRight = transformPoint({\n        x: point.right,\n        y: point.bottom\n    });\n    return {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x\n    };\n}\nfunction isIdentityScale(scale) {\n    return scale === undefined || scale === 1;\n}\nfunction hasScale({ scale, scaleX, scaleY }) {\n    return !isIdentityScale(scale) || !isIdentityScale(scaleX) || !isIdentityScale(scaleY);\n}\nfunction hasTransform(values) {\n    return hasScale(values) || has2DTranslate(values) || values.z || values.rotate || values.rotateX || values.rotateY;\n}\nfunction has2DTranslate(values) {\n    return is2DTranslate(values.x) || is2DTranslate(values.y);\n}\nfunction is2DTranslate(value) {\n    return value && value !== \"0%\";\n}\n/**\n * Scales a point based on a factor and an originPoint\n */ function scalePoint(point, scale, originPoint) {\n    const distanceFromOrigin = point - originPoint;\n    const scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */ function applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */ function applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */ function applyBoxDelta(box, { x, y }) {\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */ function applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {\n    const treeLength = treePath.length;\n    if (!treeLength) return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    let node;\n    let delta;\n    for(let i = 0; i < treeLength; i++){\n        node = treePath[i];\n        delta = node.projectionDelta;\n        /**\n         * TODO: Prefer to remove this, but currently we have motion components with\n         * display: contents in Framer.\n         */ const instance = node.instance;\n        if (instance && instance.style && instance.style.display === \"contents\") {\n            continue;\n        }\n        if (isSharedTransition && node.options.layoutScroll && node.scroll && node !== node.root) {\n            transformBox(box, {\n                x: -node.scroll.offset.x,\n                y: -node.scroll.offset.y\n            });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && hasTransform(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n    /**\n     * Snap tree scale back to 1 if it's within a non-perceivable threshold.\n     * This will help reduce useless scales getting rendered.\n     */ treeScale.x = snapToDefault(treeScale.x);\n    treeScale.y = snapToDefault(treeScale.y);\n}\nfunction snapToDefault(scale) {\n    if (Number.isInteger(scale)) return scale;\n    return scale > 1.0000000000001 || scale < 0.999999999999 ? scale : 1;\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */ function transformAxis(axis, transforms, [key, scaleKey, originKey]) {\n    const axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;\n    const originPoint = mix(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */ const xKeys = [\n    \"x\",\n    \"scaleX\",\n    \"originX\"\n];\nconst yKeys = [\n    \"y\",\n    \"scaleY\",\n    \"originY\"\n];\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */ function transformBox(box, transform) {\n    transformAxis(box.x, transform, xKeys);\n    transformAxis(box.y, transform, yKeys);\n}\nfunction measureViewportBox(instance, transformPoint) {\n    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));\n}\nfunction measurePageBox(element, rootProjectionNode, transformPagePoint) {\n    const viewportBox = measureViewportBox(element, transformPagePoint);\n    const { scroll } = rootProjectionNode;\n    if (scroll) {\n        translateAxis(viewportBox.x, scroll.offset.x);\n        translateAxis(viewportBox.y, scroll.offset.y);\n    }\n    return viewportBox;\n}\n/**\n * Timeout defined in ms\n */ function delay(callback, timeout) {\n    const start = performance.now();\n    const checkElapsed = ({ timestamp })=>{\n        const elapsed = timestamp - start;\n        if (elapsed >= timeout) {\n            cancelFrame(checkElapsed);\n            callback(elapsed - timeout);\n        }\n    };\n    frame.read(checkElapsed, true);\n    return ()=>cancelFrame(checkElapsed);\n}\nfunction resolveElements(elements, scope, selectorCache) {\n    var _a;\n    if (typeof elements === \"string\") {\n        let root = document;\n        if (scope) {\n            exports.invariant(Boolean(scope.current), \"Scope provided, but no element detected.\");\n            root = scope.current;\n        }\n        if (selectorCache) {\n            (_a = selectorCache[elements]) !== null && _a !== void 0 ? _a : selectorCache[elements] = root.querySelectorAll(elements);\n            elements = selectorCache[elements];\n        } else {\n            elements = root.querySelectorAll(elements);\n        }\n    } else if (elements instanceof Element) {\n        elements = [\n            elements\n        ];\n    }\n    /**\n     * Return an empty array\n     */ return Array.from(elements || []);\n}\nconst visualElementStore = new WeakMap();\nfunction observeTimeline(update, timeline) {\n    let prevProgress;\n    const onFrame = ()=>{\n        const { currentTime } = timeline;\n        const percentage = currentTime === null ? 0 : currentTime.value;\n        const progress = percentage / 100;\n        if (prevProgress !== progress) {\n            update(progress);\n        }\n        prevProgress = progress;\n    };\n    frame.update(onFrame, true);\n    return ()=>cancelFrame(onFrame);\n}\nconst supportsScrollTimeline = memo(()=>window.ScrollTimeline !== undefined);\nclass GroupPlaybackControls {\n    constructor(animations){\n        this.animations = animations.filter(Boolean);\n    }\n    then(onResolve, onReject) {\n        return Promise.all(this.animations).then(onResolve).catch(onReject);\n    }\n    /**\n     * TODO: Filter out cancelled or stopped animations before returning\n     */ getAll(propName) {\n        return this.animations[0][propName];\n    }\n    setAll(propName, newValue) {\n        for(let i = 0; i < this.animations.length; i++){\n            this.animations[i][propName] = newValue;\n        }\n    }\n    attachTimeline(timeline) {\n        const cancelAll = this.animations.map((animation)=>{\n            if (supportsScrollTimeline() && animation.attachTimeline) {\n                animation.attachTimeline(timeline);\n            } else {\n                animation.pause();\n                return observeTimeline((progress)=>{\n                    animation.time = animation.duration * progress;\n                }, timeline);\n            }\n        });\n        return ()=>{\n            cancelAll.forEach((cancelTimeline, i)=>{\n                if (cancelTimeline) cancelTimeline();\n                this.animations[i].stop();\n            });\n        };\n    }\n    get time() {\n        return this.getAll(\"time\");\n    }\n    set time(time) {\n        this.setAll(\"time\", time);\n    }\n    get speed() {\n        return this.getAll(\"speed\");\n    }\n    set speed(speed) {\n        this.setAll(\"speed\", speed);\n    }\n    get duration() {\n        let max = 0;\n        for(let i = 0; i < this.animations.length; i++){\n            max = Math.max(max, this.animations[i].duration);\n        }\n        return max;\n    }\n    runAll(methodName) {\n        this.animations.forEach((controls)=>controls[methodName]());\n    }\n    play() {\n        this.runAll(\"play\");\n    }\n    pause() {\n        this.runAll(\"pause\");\n    }\n    stop() {\n        this.runAll(\"stop\");\n    }\n    cancel() {\n        this.runAll(\"cancel\");\n    }\n    complete() {\n        this.runAll(\"complete\");\n    }\n}\nfunction isDOMKeyframes(keyframes) {\n    return typeof keyframes === \"object\" && !Array.isArray(keyframes);\n}\nfunction isSVGElement(element) {\n    return element instanceof SVGElement && element.tagName !== \"svg\";\n}\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */ const splitCSSVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\nfunction parseCSSVariable(current) {\n    const match = splitCSSVariableRegex.exec(current);\n    if (!match) return [\n        , \n    ];\n    const [, token, fallback] = match;\n    return [\n        token,\n        fallback\n    ];\n}\nconst maxDepth = 4;\nfunction getVariableValue(current, element, depth = 1) {\n    exports.invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property \"${current}\". This may indicate a circular fallback dependency.`);\n    const [token, fallback] = parseCSSVariable(current);\n    // No CSS variable detected\n    if (!token) return;\n    // Attempt to read this CSS variable off the element\n    const resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        const trimmed = resolved.trim();\n        return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;\n    } else if (isCSSVariableToken(fallback)) {\n        // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.\n        return getVariableValue(fallback, element, depth + 1);\n    } else {\n        return fallback;\n    }\n}\n/**\n * Resolve CSS variables from\n *\n * @internal\n */ function resolveCSSVariables(visualElement, { ...target }, transitionEnd) {\n    const element = visualElement.current;\n    if (!(element instanceof Element)) return {\n        target,\n        transitionEnd\n    };\n    // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`\n    // only if they change but I think this reads clearer and this isn't a performance-critical path.\n    if (transitionEnd) {\n        transitionEnd = {\n            ...transitionEnd\n        };\n    }\n    // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved\n    visualElement.values.forEach((value)=>{\n        const current = value.get();\n        if (!isCSSVariableToken(current)) return;\n        const resolved = getVariableValue(current, element);\n        if (resolved) value.set(resolved);\n    });\n    // Cycle through every target property and resolve CSS variables. Currently\n    // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`\n    for(const key in target){\n        const current = target[key];\n        if (!isCSSVariableToken(current)) continue;\n        const resolved = getVariableValue(current, element);\n        if (!resolved) continue;\n        // Clone target if it hasn't already been\n        target[key] = resolved;\n        if (!transitionEnd) transitionEnd = {};\n        // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved\n        // CSS variable. This will ensure that after the animation the component will reflect\n        // changes in the value of the CSS variable.\n        if (transitionEnd[key] === undefined) {\n            transitionEnd[key] = current;\n        }\n    }\n    return {\n        target,\n        transitionEnd\n    };\n}\nconst positionalKeys = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\",\n    \"translateX\",\n    \"translateY\"\n]);\nconst isPositionalKey = (key)=>positionalKeys.has(key);\nconst hasPositionalKey = (target)=>{\n    return Object.keys(target).some(isPositionalKey);\n};\nconst isNumOrPxType = (v)=>v === number || v === px;\nconst getPosFromMatrix = (matrix, pos)=>parseFloat(matrix.split(\", \")[pos]);\nconst getTranslateFromMatrix = (pos2, pos3)=>(_bbox, { transform })=>{\n        if (transform === \"none\" || !transform) return 0;\n        const matrix3d = transform.match(/^matrix3d\\((.+)\\)$/);\n        if (matrix3d) {\n            return getPosFromMatrix(matrix3d[1], pos3);\n        } else {\n            const matrix = transform.match(/^matrix\\((.+)\\)$/);\n            if (matrix) {\n                return getPosFromMatrix(matrix[1], pos2);\n            } else {\n                return 0;\n            }\n        }\n    };\nconst transformKeys = new Set([\n    \"x\",\n    \"y\",\n    \"z\"\n]);\nconst nonTranslationalTransformKeys = transformPropOrder.filter((key)=>!transformKeys.has(key));\nfunction removeNonTranslationalTransform(visualElement) {\n    const removedTransforms = [];\n    nonTranslationalTransformKeys.forEach((key)=>{\n        const value = visualElement.getValue(key);\n        if (value !== undefined) {\n            removedTransforms.push([\n                key,\n                value.get()\n            ]);\n            value.set(key.startsWith(\"scale\") ? 1 : 0);\n        }\n    });\n    // Apply changes to element before measurement\n    if (removedTransforms.length) visualElement.render();\n    return removedTransforms;\n}\nconst positionalValues = {\n    // Dimensions\n    width: ({ x }, { paddingLeft = \"0\", paddingRight = \"0\" })=>x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),\n    height: ({ y }, { paddingTop = \"0\", paddingBottom = \"0\" })=>y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),\n    top: (_bbox, { top })=>parseFloat(top),\n    left: (_bbox, { left })=>parseFloat(left),\n    bottom: ({ y }, { top })=>parseFloat(top) + (y.max - y.min),\n    right: ({ x }, { left })=>parseFloat(left) + (x.max - x.min),\n    // Transform\n    x: getTranslateFromMatrix(4, 13),\n    y: getTranslateFromMatrix(5, 14)\n};\n// Alias translate longform names\npositionalValues.translateX = positionalValues.x;\npositionalValues.translateY = positionalValues.y;\nconst convertChangedValueTypes = (target, visualElement, changedKeys)=>{\n    const originBbox = visualElement.measureViewportBox();\n    const element = visualElement.current;\n    const elementComputedStyle = getComputedStyle(element);\n    const { display } = elementComputedStyle;\n    const origin = {};\n    // If the element is currently set to display: \"none\", make it visible before\n    // measuring the target bounding box\n    if (display === \"none\") {\n        visualElement.setStaticValue(\"display\", target.display || \"block\");\n    }\n    /**\n     * Record origins before we render and update styles\n     */ changedKeys.forEach((key)=>{\n        origin[key] = positionalValues[key](originBbox, elementComputedStyle);\n    });\n    // Apply the latest values (as set in checkAndConvertChangedValueTypes)\n    visualElement.render();\n    const targetBbox = visualElement.measureViewportBox();\n    changedKeys.forEach((key)=>{\n        // Restore styles to their **calculated computed style**, not their actual\n        // originally set style. This allows us to animate between equivalent pixel units.\n        const value = visualElement.getValue(key);\n        value && value.jump(origin[key]);\n        target[key] = positionalValues[key](targetBbox, elementComputedStyle);\n    });\n    return target;\n};\nconst checkAndConvertChangedValueTypes = (visualElement, target, origin = {}, transitionEnd = {})=>{\n    target = {\n        ...target\n    };\n    transitionEnd = {\n        ...transitionEnd\n    };\n    const targetPositionalKeys = Object.keys(target).filter(isPositionalKey);\n    // We want to remove any transform values that could affect the element's bounding box before\n    // it's measured. We'll reapply these later.\n    let removedTransformValues = [];\n    let hasAttemptedToRemoveTransformValues = false;\n    const changedValueTypeKeys = [];\n    targetPositionalKeys.forEach((key)=>{\n        const value = visualElement.getValue(key);\n        if (!visualElement.hasValue(key)) return;\n        let from = origin[key];\n        let fromType = findDimensionValueType(from);\n        const to = target[key];\n        let toType;\n        // TODO: The current implementation of this basically throws an error\n        // if you try and do value conversion via keyframes. There's probably\n        // a way of doing this but the performance implications would need greater scrutiny,\n        // as it'd be doing multiple resize-remeasure operations.\n        if (isKeyframesTarget(to)) {\n            const numKeyframes = to.length;\n            const fromIndex = to[0] === null ? 1 : 0;\n            from = to[fromIndex];\n            fromType = findDimensionValueType(from);\n            for(let i = fromIndex; i < numKeyframes; i++){\n                /**\n                 * Don't allow wildcard keyframes to be used to detect\n                 * a difference in value types.\n                 */ if (to[i] === null) break;\n                if (!toType) {\n                    toType = findDimensionValueType(to[i]);\n                    exports.invariant(toType === fromType || isNumOrPxType(fromType) && isNumOrPxType(toType), \"Keyframes must be of the same dimension as the current value\");\n                } else {\n                    exports.invariant(findDimensionValueType(to[i]) === toType, \"All keyframes must be of the same type\");\n                }\n            }\n        } else {\n            toType = findDimensionValueType(to);\n        }\n        if (fromType !== toType) {\n            // If they're both just number or px, convert them both to numbers rather than\n            // relying on resize/remeasure to convert (which is wasteful in this situation)\n            if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {\n                const current = value.get();\n                if (typeof current === \"string\") {\n                    value.set(parseFloat(current));\n                }\n                if (typeof to === \"string\") {\n                    target[key] = parseFloat(to);\n                } else if (Array.isArray(to) && toType === px) {\n                    target[key] = to.map(parseFloat);\n                }\n            } else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) && (toType === null || toType === void 0 ? void 0 : toType.transform) && (from === 0 || to === 0)) {\n                // If one or the other value is 0, it's safe to coerce it to the\n                // type of the other without measurement\n                if (from === 0) {\n                    value.set(toType.transform(from));\n                } else {\n                    target[key] = fromType.transform(to);\n                }\n            } else {\n                // If we're going to do value conversion via DOM measurements, we first\n                // need to remove non-positional transform values that could affect the bbox measurements.\n                if (!hasAttemptedToRemoveTransformValues) {\n                    removedTransformValues = removeNonTranslationalTransform(visualElement);\n                    hasAttemptedToRemoveTransformValues = true;\n                }\n                changedValueTypeKeys.push(key);\n                transitionEnd[key] = transitionEnd[key] !== undefined ? transitionEnd[key] : target[key];\n                value.jump(to);\n            }\n        }\n    });\n    if (changedValueTypeKeys.length) {\n        const scrollY = changedValueTypeKeys.indexOf(\"height\") >= 0 ? window.pageYOffset : null;\n        const convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);\n        // If we removed transform values, reapply them before the next render\n        if (removedTransformValues.length) {\n            removedTransformValues.forEach(([key, value])=>{\n                visualElement.getValue(key).set(value);\n            });\n        }\n        // Reapply original values\n        visualElement.render();\n        // Restore scroll position\n        if (isBrowser && scrollY !== null) {\n            window.scrollTo({\n                top: scrollY\n            });\n        }\n        return {\n            target: convertedTarget,\n            transitionEnd\n        };\n    } else {\n        return {\n            target,\n            transitionEnd\n        };\n    }\n};\n/**\n * Convert value types for x/y/width/height/top/left/bottom/right\n *\n * Allows animation between `'auto'` -> `'100%'` or `0` -> `'calc(50% - 10vw)'`\n *\n * @internal\n */ function unitConversion(visualElement, target, origin, transitionEnd) {\n    return hasPositionalKey(target) ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd) : {\n        target,\n        transitionEnd\n    };\n}\n/**\n * Parse a DOM variant to make it animatable. This involves resolving CSS variables\n * and ensuring animations like \"20%\" => \"calc(50vw)\" are performed in pixels.\n */ const parseDomVariant = (visualElement, target, origin, transitionEnd)=>{\n    const resolved = resolveCSSVariables(visualElement, target, transitionEnd);\n    target = resolved.target;\n    transitionEnd = resolved.transitionEnd;\n    return unitConversion(visualElement, target, origin, transitionEnd);\n};\n// Does this device prefer reduced motion? Returns `null` server-side.\nconst prefersReducedMotion = {\n    current: null\n};\nconst hasReducedMotionListener = {\n    current: false\n};\nfunction initPrefersReducedMotion() {\n    hasReducedMotionListener.current = true;\n    if (!isBrowser) return;\n    if (window.matchMedia) {\n        const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n        const setReducedMotionPreferences = ()=>prefersReducedMotion.current = motionMediaQuery.matches;\n        motionMediaQuery.addListener(setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    } else {\n        prefersReducedMotion.current = false;\n    }\n}\nfunction updateMotionValuesFromProps(element, next, prev) {\n    const { willChange } = next;\n    for(const key in next){\n        const nextValue = next[key];\n        const prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */ element.addValue(key, nextValue);\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.add(key);\n            }\n            /**\n             * Check the version of the incoming motion value with this version\n             * and warn against mismatches.\n             */ if (true) {\n                warnOnce(nextValue.version === \"10.16.16\", `Attempting to mix Framer Motion versions ${nextValue.version} with 10.16.16 may not work as expected.`);\n            }\n        } else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping from a motion value to a static value,\n             * create a new motion value from that\n             */ element.addValue(key, motionValue(nextValue, {\n                owner: element\n            }));\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.remove(key);\n            }\n        } else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */ if (element.hasValue(key)) {\n                const existingValue = element.getValue(key);\n                // TODO: Only update values that aren't being animated or even looked at\n                !existingValue.hasAnimated && existingValue.set(nextValue);\n            } else {\n                const latestValue = element.getStaticValue(key);\n                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue, {\n                    owner: element\n                }));\n            }\n        }\n    }\n    // Handle removed values\n    for(const key in prev){\n        if (next[key] === undefined) element.removeValue(key);\n    }\n    return next;\n}\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\"\n];\nconst numVariantProps = variantProps.length;\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */ class VisualElement {\n    constructor({ parent, props, presenceContext, reducedMotionConfig, visualState }, options = {}){\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */ this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */ this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */ this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */ this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */ this.values = new Map();\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */ this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */ this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */ this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */ this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */ this.propEventSubscriptions = {};\n        this.notifyUpdate = ()=>this.notify(\"Update\", this.latestValues);\n        this.render = ()=>{\n            if (!this.current) return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.scheduleRender = ()=>frame.render(this.render, false, true);\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = {\n            ...latestValues\n        };\n        this.initialValues = props.initial ? {\n            ...latestValues\n        } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */ const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {});\n        for(const key in initialMotionValues){\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n                if (isWillChangeMotionValue(willChange)) {\n                    willChange.add(key);\n                }\n            }\n        }\n    }\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */ scrapeMotionValuesFromProps(_props, _prevProps) {\n        return {};\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection && !this.projection.instance) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key)=>this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion = this.reducedMotionConfig === \"never\" ? false : this.reducedMotionConfig === \"always\" ? true : prefersReducedMotion.current;\n        if (true) {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent) this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        visualElementStore.delete(this.current);\n        this.projection && this.projection.unmount();\n        cancelFrame(this.notifyUpdate);\n        cancelFrame(this.render);\n        this.valueSubscriptions.forEach((remove)=>remove());\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for(const key in this.events){\n            this.events[key].clear();\n        }\n        for(const key in this.features){\n            this.features[key].unmount();\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue)=>{\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate && frame.update(this.notifyUpdate, false, true);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        this.valueSubscriptions.set(key, ()=>{\n            removeOnChange();\n            removeOnRenderRequest();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */ if (!this.current || !this.sortInstanceNodePosition || this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    loadFeatures({ children, ...renderedProps }, isStrict, preloadedFeatures, initialLayoutGroupConfig) {\n        let ProjectionNodeConstructor;\n        let MeasureLayout;\n        /**\n         * If we're in development mode, check to make sure we're not rendering a motion component\n         * as a child of LazyMotion, as this will break the file-size benefits of using it.\n         */ if ( true && preloadedFeatures && isStrict) {\n            const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n            renderedProps.ignoreStrict ? exports.warning(false, strictMessage) : exports.invariant(false, strictMessage);\n        }\n        for(let i = 0; i < numFeatures; i++){\n            const name = featureNames[i];\n            const { isEnabled, Feature: FeatureConstructor, ProjectionNode, MeasureLayout: MeasureLayoutComponent } = featureDefinitions[name];\n            if (ProjectionNode) ProjectionNodeConstructor = ProjectionNode;\n            if (isEnabled(renderedProps)) {\n                if (!this.features[name] && FeatureConstructor) {\n                    this.features[name] = new FeatureConstructor(this);\n                }\n                if (MeasureLayoutComponent) {\n                    MeasureLayout = MeasureLayoutComponent;\n                }\n            }\n        }\n        if (!this.projection && ProjectionNodeConstructor) {\n            this.projection = new ProjectionNodeConstructor(this.latestValues, this.parent && this.parent.projection);\n            const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot } = renderedProps;\n            this.projection.setOptions({\n                layoutId,\n                layout,\n                alwaysMeasureLayout: Boolean(drag) || dragConstraints && isRefObject(dragConstraints),\n                visualElement: this,\n                scheduleRender: ()=>this.scheduleRender(),\n                /**\n                 * TODO: Update options in an effect. This could be tricky as it'll be too late\n                 * to update by the time layout animations run.\n                 * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n                 * ensuring it gets called if there's no potential layout animations.\n                 *\n                 */ animationType: typeof layout === \"string\" ? layout : \"both\",\n                initialPromotionConfig: initialLayoutGroupConfig,\n                layoutScroll,\n                layoutRoot\n            });\n        }\n        return MeasureLayout;\n    }\n    updateFeatures() {\n        for(const key in this.features){\n            const feature = this.features[key];\n            if (feature.isMounted) {\n                feature.update();\n            } else {\n                feature.mount();\n                feature.isMounted = true;\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.options, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */ measureViewportBox() {\n        return this.current ? this.measureInstanceViewportBox(this.current, this.props) : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Make a target animatable by Popmotion. For instance, if we're\n     * trying to animate width from 100px to 100vw we need to measure 100vw\n     * in pixels to determine what we really need to animate to. This is also\n     * pluggable to support Framer's custom value types like Color,\n     * and CSS variables.\n     */ makeTargetAnimatable(target, canMutate = true) {\n        return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */ update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */ for(let i = 0; i < propEventHandlers.length; i++){\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listener = props[\"on\" + key];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */ getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */ getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : undefined;\n    }\n    getVariantContext(startAtParent = false) {\n        if (startAtParent) {\n            return this.parent ? this.parent.getVariantContext() : undefined;\n        }\n        if (!this.isControllingVariants) {\n            const context = this.parent ? this.parent.getVariantContext() || {} : {};\n            if (this.props.initial !== undefined) {\n                context.initial = this.props.initial;\n            }\n            return context;\n        }\n        const context = {};\n        for(let i = 0; i < numVariantProps; i++){\n            const name = variantProps[i];\n            const prop = this.props[name];\n            if (isVariantLabel(prop) || prop === false) {\n                context[name] = prop;\n            }\n        }\n        return context;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */ addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren && closestVariantNode.variantChildren.add(child);\n            return ()=>closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */ addValue(key, value) {\n        // Remove existing value if it exists\n        if (value !== this.values.get(key)) {\n            this.removeValue(key);\n            this.bindToMotionValue(key, value);\n        }\n        this.values.set(key, value);\n        this.latestValues[key] = value.get();\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */ removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */ hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue, {\n                owner: this\n            });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */ readValue(key) {\n        var _a;\n        return this.latestValues[key] !== undefined || !this.current ? this.latestValues[key] : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */ setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */ getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\" ? (_a = resolveVariantFromProps(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key] : undefined;\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */ if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */ const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target)) return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */ return this.initialValues[key] !== undefined && valueFromInitial === undefined ? undefined : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\nclass DOMVisualElement extends VisualElement {\n    sortInstanceNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */ return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props.style ? props.style[key] : undefined;\n    }\n    removeValueFromRenderState(key, { vars, style }) {\n        delete vars[key];\n        delete style[key];\n    }\n    makeTargetAnimatableFromInstance({ transition, transitionEnd, ...target }, { transformValues }, isMounted) {\n        let origin = getOrigin(target, transition || {}, this);\n        /**\n         * If Framer has provided a function to convert `Color` etc value types, convert them\n         */ if (transformValues) {\n            if (transitionEnd) transitionEnd = transformValues(transitionEnd);\n            if (target) target = transformValues(target);\n            if (origin) origin = transformValues(origin);\n        }\n        if (isMounted) {\n            checkTargetForNewValues(this, target, origin);\n            const parsed = parseDomVariant(this, target, origin, transitionEnd);\n            transitionEnd = parsed.transitionEnd;\n            target = parsed.target;\n        }\n        return {\n            transition,\n            transitionEnd,\n            ...target\n        };\n    }\n}\nclass SVGVisualElement extends DOMVisualElement {\n    constructor(){\n        super(...arguments);\n        this.isSVGTag = false;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props[key];\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return instance.getAttribute(key);\n    }\n    measureInstanceViewportBox() {\n        return createBox();\n    }\n    scrapeMotionValuesFromProps(props, prevProps) {\n        return scrapeMotionValuesFromProps(props, prevProps);\n    }\n    build(renderState, latestValues, options, props) {\n        buildSVGAttrs(renderState, latestValues, options, this.isSVGTag, props.transformTemplate);\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderSVG(instance, renderState, styleProp, projection);\n    }\n    mount(instance) {\n        this.isSVGTag = isSVGTag(instance.tagName);\n        super.mount(instance);\n    }\n}\nfunction getComputedStyle$1(element) {\n    return window.getComputedStyle(element);\n}\nclass HTMLVisualElement extends DOMVisualElement {\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        } else {\n            const computedStyle = getComputedStyle$1(instance);\n            const value = (isCSSVariableName(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;\n            return typeof value === \"string\" ? value.trim() : value;\n        }\n    }\n    measureInstanceViewportBox(instance, { transformPagePoint }) {\n        return measureViewportBox(instance, transformPagePoint);\n    }\n    build(renderState, latestValues, options, props) {\n        buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);\n    }\n    scrapeMotionValuesFromProps(props, prevProps) {\n        return scrapeMotionValuesFromProps$1(props, prevProps);\n    }\n    handleChildMotionValue() {\n        if (this.childSubscription) {\n            this.childSubscription();\n            delete this.childSubscription;\n        }\n        const { children } = this.props;\n        if (isMotionValue(children)) {\n            this.childSubscription = children.on(\"change\", (latest)=>{\n                if (this.current) this.current.textContent = `${latest}`;\n            });\n        }\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderHTML(instance, renderState, styleProp, projection);\n    }\n}\nfunction createVisualElement(element) {\n    const options = {\n        presenceContext: null,\n        props: {},\n        visualState: {\n            renderState: {\n                transform: {},\n                transformOrigin: {},\n                style: {},\n                vars: {},\n                attrs: {}\n            },\n            latestValues: {}\n        }\n    };\n    const node = isSVGElement(element) ? new SVGVisualElement(options, {\n        enableHardwareAcceleration: false\n    }) : new HTMLVisualElement(options, {\n        enableHardwareAcceleration: true\n    });\n    node.mount(element);\n    visualElementStore.set(element, node);\n}\nfunction animateSingleValue(value, keyframes, options) {\n    const motionValue$1 = isMotionValue(value) ? value : motionValue(value);\n    motionValue$1.start(animateMotionValue(\"\", motionValue$1, keyframes, options));\n    return motionValue$1.animation;\n}\n/**\n * Create a progress => progress easing function from a generator.\n */ function createGeneratorEasing(options, scale = 100) {\n    const generator = spring({\n        keyframes: [\n            0,\n            scale\n        ],\n        ...options\n    });\n    const duration = Math.min(calcGeneratorDuration(generator), maxGeneratorDuration);\n    return {\n        type: \"keyframes\",\n        ease: (progress)=>generator.next(duration * progress).value / scale,\n        duration: millisecondsToSeconds(duration)\n    };\n}\n/**\n * Given a absolute or relative time definition and current/prev time state of the sequence,\n * calculate an absolute time for the next keyframes.\n */ function calcNextTime(current, next, prev, labels) {\n    var _a;\n    if (typeof next === \"number\") {\n        return next;\n    } else if (next.startsWith(\"-\") || next.startsWith(\"+\")) {\n        return Math.max(0, current + parseFloat(next));\n    } else if (next === \"<\") {\n        return prev;\n    } else {\n        return (_a = labels.get(next)) !== null && _a !== void 0 ? _a : current;\n    }\n}\nconst wrap = (min, max, v)=>{\n    const rangeSize = max - min;\n    return ((v - min) % rangeSize + rangeSize) % rangeSize + min;\n};\nfunction getEasingForSegment(easing, i) {\n    return isEasingArray(easing) ? easing[wrap(0, easing.length, i)] : easing;\n}\nfunction eraseKeyframes(sequence, startTime, endTime) {\n    for(let i = 0; i < sequence.length; i++){\n        const keyframe = sequence[i];\n        if (keyframe.at > startTime && keyframe.at < endTime) {\n            removeItem(sequence, keyframe);\n            // If we remove this item we have to push the pointer back one\n            i--;\n        }\n    }\n}\nfunction addKeyframes(sequence, keyframes, easing, offset, startTime, endTime) {\n    /**\n     * Erase every existing value between currentTime and targetTime,\n     * this will essentially splice this timeline into any currently\n     * defined ones.\n     */ eraseKeyframes(sequence, startTime, endTime);\n    for(let i = 0; i < keyframes.length; i++){\n        sequence.push({\n            value: keyframes[i],\n            at: mix(startTime, endTime, offset[i]),\n            easing: getEasingForSegment(easing, i)\n        });\n    }\n}\nfunction compareByTime(a, b) {\n    if (a.at === b.at) {\n        if (a.value === null) return 1;\n        if (b.value === null) return -1;\n        return 0;\n    } else {\n        return a.at - b.at;\n    }\n}\nconst defaultSegmentEasing = \"easeInOut\";\nfunction createAnimationsFromSequence(sequence, { defaultTransition = {}, ...sequenceTransition } = {}, scope) {\n    const defaultDuration = defaultTransition.duration || 0.3;\n    const animationDefinitions = new Map();\n    const sequences = new Map();\n    const elementCache = {};\n    const timeLabels = new Map();\n    let prevTime = 0;\n    let currentTime = 0;\n    let totalDuration = 0;\n    /**\n     * Build the timeline by mapping over the sequence array and converting\n     * the definitions into keyframes and offsets with absolute time values.\n     * These will later get converted into relative offsets in a second pass.\n     */ for(let i = 0; i < sequence.length; i++){\n        const segment = sequence[i];\n        /**\n         * If this is a timeline label, mark it and skip the rest of this iteration.\n         */ if (typeof segment === \"string\") {\n            timeLabels.set(segment, currentTime);\n            continue;\n        } else if (!Array.isArray(segment)) {\n            timeLabels.set(segment.name, calcNextTime(currentTime, segment.at, prevTime, timeLabels));\n            continue;\n        }\n        let [subject, keyframes, transition = {}] = segment;\n        /**\n         * If a relative or absolute time value has been specified we need to resolve\n         * it in relation to the currentTime.\n         */ if (transition.at !== undefined) {\n            currentTime = calcNextTime(currentTime, transition.at, prevTime, timeLabels);\n        }\n        /**\n         * Keep track of the maximum duration in this definition. This will be\n         * applied to currentTime once the definition has been parsed.\n         */ let maxDuration = 0;\n        const resolveValueSequence = (valueKeyframes, valueTransition, valueSequence, elementIndex = 0, numElements = 0)=>{\n            const valueKeyframesAsList = keyframesAsList(valueKeyframes);\n            const { delay = 0, times = defaultOffset$1(valueKeyframesAsList), type = \"keyframes\", ...remainingTransition } = valueTransition;\n            let { ease = defaultTransition.ease || \"easeOut\", duration } = valueTransition;\n            /**\n             * Resolve stagger() if defined.\n             */ const calculatedDelay = typeof delay === \"function\" ? delay(elementIndex, numElements) : delay;\n            /**\n             * If this animation should and can use a spring, generate a spring easing function.\n             */ const numKeyframes = valueKeyframesAsList.length;\n            if (numKeyframes <= 2 && type === \"spring\") {\n                /**\n                 * As we're creating an easing function from a spring,\n                 * ideally we want to generate it using the real distance\n                 * between the two keyframes. However this isn't always\n                 * possible - in these situations we use 0-100.\n                 */ let absoluteDelta = 100;\n                if (numKeyframes === 2 && isNumberKeyframesArray(valueKeyframesAsList)) {\n                    const delta = valueKeyframesAsList[1] - valueKeyframesAsList[0];\n                    absoluteDelta = Math.abs(delta);\n                }\n                const springTransition = {\n                    ...remainingTransition\n                };\n                if (duration !== undefined) {\n                    springTransition.duration = secondsToMilliseconds(duration);\n                }\n                const springEasing = createGeneratorEasing(springTransition, absoluteDelta);\n                ease = springEasing.ease;\n                duration = springEasing.duration;\n            }\n            duration !== null && duration !== void 0 ? duration : duration = defaultDuration;\n            const startTime = currentTime + calculatedDelay;\n            const targetTime = startTime + duration;\n            /**\n             * If there's only one time offset of 0, fill in a second with length 1\n             */ if (times.length === 1 && times[0] === 0) {\n                times[1] = 1;\n            }\n            /**\n             * Fill out if offset if fewer offsets than keyframes\n             */ const remainder = times.length - valueKeyframesAsList.length;\n            remainder > 0 && fillOffset(times, remainder);\n            /**\n             * If only one value has been set, ie [1], push a null to the start of\n             * the keyframe array. This will let us mark a keyframe at this point\n             * that will later be hydrated with the previous value.\n             */ valueKeyframesAsList.length === 1 && valueKeyframesAsList.unshift(null);\n            /**\n             * Add keyframes, mapping offsets to absolute time.\n             */ addKeyframes(valueSequence, valueKeyframesAsList, ease, times, startTime, targetTime);\n            maxDuration = Math.max(calculatedDelay + duration, maxDuration);\n            totalDuration = Math.max(targetTime, totalDuration);\n        };\n        if (isMotionValue(subject)) {\n            const subjectSequence = getSubjectSequence(subject, sequences);\n            resolveValueSequence(keyframes, transition, getValueSequence(\"default\", subjectSequence));\n        } else {\n            /**\n             * Find all the elements specified in the definition and parse value\n             * keyframes from their timeline definitions.\n             */ const elements = resolveElements(subject, scope, elementCache);\n            const numElements = elements.length;\n            /**\n             * For every element in this segment, process the defined values.\n             */ for(let elementIndex = 0; elementIndex < numElements; elementIndex++){\n                /**\n                 * Cast necessary, but we know these are of this type\n                 */ keyframes = keyframes;\n                transition = transition;\n                const element = elements[elementIndex];\n                const subjectSequence = getSubjectSequence(element, sequences);\n                for(const key in keyframes){\n                    resolveValueSequence(keyframes[key], getValueTransition(transition, key), getValueSequence(key, subjectSequence), elementIndex, numElements);\n                }\n            }\n            prevTime = currentTime;\n            currentTime += maxDuration;\n        }\n    }\n    /**\n     * For every element and value combination create a new animation.\n     */ sequences.forEach((valueSequences, element)=>{\n        for(const key in valueSequences){\n            const valueSequence = valueSequences[key];\n            /**\n             * Arrange all the keyframes in ascending time order.\n             */ valueSequence.sort(compareByTime);\n            const keyframes = [];\n            const valueOffset = [];\n            const valueEasing = [];\n            /**\n             * For each keyframe, translate absolute times into\n             * relative offsets based on the total duration of the timeline.\n             */ for(let i = 0; i < valueSequence.length; i++){\n                const { at, value, easing } = valueSequence[i];\n                keyframes.push(value);\n                valueOffset.push(progress(0, totalDuration, at));\n                valueEasing.push(easing || \"easeOut\");\n            }\n            /**\n             * If the first keyframe doesn't land on offset: 0\n             * provide one by duplicating the initial keyframe. This ensures\n             * it snaps to the first keyframe when the animation starts.\n             */ if (valueOffset[0] !== 0) {\n                valueOffset.unshift(0);\n                keyframes.unshift(keyframes[0]);\n                valueEasing.unshift(defaultSegmentEasing);\n            }\n            /**\n             * If the last keyframe doesn't land on offset: 1\n             * provide one with a null wildcard value. This will ensure it\n             * stays static until the end of the animation.\n             */ if (valueOffset[valueOffset.length - 1] !== 1) {\n                valueOffset.push(1);\n                keyframes.push(null);\n            }\n            if (!animationDefinitions.has(element)) {\n                animationDefinitions.set(element, {\n                    keyframes: {},\n                    transition: {}\n                });\n            }\n            const definition = animationDefinitions.get(element);\n            definition.keyframes[key] = keyframes;\n            definition.transition[key] = {\n                ...defaultTransition,\n                duration: totalDuration,\n                ease: valueEasing,\n                times: valueOffset,\n                ...sequenceTransition\n            };\n        }\n    });\n    return animationDefinitions;\n}\nfunction getSubjectSequence(subject, sequences) {\n    !sequences.has(subject) && sequences.set(subject, {});\n    return sequences.get(subject);\n}\nfunction getValueSequence(name, sequences) {\n    if (!sequences[name]) sequences[name] = [];\n    return sequences[name];\n}\nfunction keyframesAsList(keyframes) {\n    return Array.isArray(keyframes) ? keyframes : [\n        keyframes\n    ];\n}\nfunction getValueTransition(transition, key) {\n    return transition[key] ? {\n        ...transition,\n        ...transition[key]\n    } : {\n        ...transition\n    };\n}\nconst isNumber = (keyframe)=>typeof keyframe === \"number\";\nconst isNumberKeyframesArray = (keyframes)=>keyframes.every(isNumber);\nfunction animateElements(elementOrSelector, keyframes, options, scope) {\n    const elements = resolveElements(elementOrSelector, scope);\n    const numElements = elements.length;\n    exports.invariant(Boolean(numElements), \"No valid element provided.\");\n    const animations = [];\n    for(let i = 0; i < numElements; i++){\n        const element = elements[i];\n        /**\n         * Check each element for an associated VisualElement. If none exists,\n         * we need to create one.\n         */ if (!visualElementStore.has(element)) {\n            /**\n             * TODO: We only need render-specific parts of the VisualElement.\n             * With some additional work the size of the animate() function\n             * could be reduced significantly.\n             */ createVisualElement(element);\n        }\n        const visualElement = visualElementStore.get(element);\n        const transition = {\n            ...options\n        };\n        /**\n         * Resolve stagger function if provided.\n         */ if (typeof transition.delay === \"function\") {\n            transition.delay = transition.delay(i, numElements);\n        }\n        animations.push(...animateTarget(visualElement, {\n            ...keyframes,\n            transition\n        }, {}));\n    }\n    return new GroupPlaybackControls(animations);\n}\nconst isSequence = (value)=>Array.isArray(value) && Array.isArray(value[0]);\nfunction animateSequence(sequence, options, scope) {\n    const animations = [];\n    const animationDefinitions = createAnimationsFromSequence(sequence, options, scope);\n    animationDefinitions.forEach(({ keyframes, transition }, subject)=>{\n        let animation;\n        if (isMotionValue(subject)) {\n            animation = animateSingleValue(subject, keyframes.default, transition.default);\n        } else {\n            animation = animateElements(subject, keyframes, transition);\n        }\n        animations.push(animation);\n    });\n    return new GroupPlaybackControls(animations);\n}\nconst createScopedAnimate = (scope)=>{\n    /**\n     * Implementation\n     */ function scopedAnimate(valueOrElementOrSequence, keyframes, options) {\n        let animation;\n        if (isSequence(valueOrElementOrSequence)) {\n            animation = animateSequence(valueOrElementOrSequence, keyframes, scope);\n        } else if (isDOMKeyframes(keyframes)) {\n            animation = animateElements(valueOrElementOrSequence, keyframes, options, scope);\n        } else {\n            animation = animateSingleValue(valueOrElementOrSequence, keyframes, options);\n        }\n        if (scope) {\n            scope.animations.push(animation);\n        }\n        return animation;\n    }\n    return scopedAnimate;\n};\nconst animate = createScopedAnimate();\nconst resizeHandlers = new WeakMap();\nlet observer;\nfunction getElementSize(target, borderBoxSize) {\n    if (borderBoxSize) {\n        const { inlineSize, blockSize } = borderBoxSize[0];\n        return {\n            width: inlineSize,\n            height: blockSize\n        };\n    } else if (target instanceof SVGElement && \"getBBox\" in target) {\n        return target.getBBox();\n    } else {\n        return {\n            width: target.offsetWidth,\n            height: target.offsetHeight\n        };\n    }\n}\nfunction notifyTarget({ target, contentRect, borderBoxSize }) {\n    var _a;\n    (_a = resizeHandlers.get(target)) === null || _a === void 0 ? void 0 : _a.forEach((handler)=>{\n        handler({\n            target,\n            contentSize: contentRect,\n            get size () {\n                return getElementSize(target, borderBoxSize);\n            }\n        });\n    });\n}\nfunction notifyAll(entries) {\n    entries.forEach(notifyTarget);\n}\nfunction createResizeObserver() {\n    if (typeof ResizeObserver === \"undefined\") return;\n    observer = new ResizeObserver(notifyAll);\n}\nfunction resizeElement(target, handler) {\n    if (!observer) createResizeObserver();\n    const elements = resolveElements(target);\n    elements.forEach((element)=>{\n        let elementHandlers = resizeHandlers.get(element);\n        if (!elementHandlers) {\n            elementHandlers = new Set();\n            resizeHandlers.set(element, elementHandlers);\n        }\n        elementHandlers.add(handler);\n        observer === null || observer === void 0 ? void 0 : observer.observe(element);\n    });\n    return ()=>{\n        elements.forEach((element)=>{\n            const elementHandlers = resizeHandlers.get(element);\n            elementHandlers === null || elementHandlers === void 0 ? void 0 : elementHandlers.delete(handler);\n            if (!(elementHandlers === null || elementHandlers === void 0 ? void 0 : elementHandlers.size)) {\n                observer === null || observer === void 0 ? void 0 : observer.unobserve(element);\n            }\n        });\n    };\n}\nconst windowCallbacks = new Set();\nlet windowResizeHandler;\nfunction createWindowResizeHandler() {\n    windowResizeHandler = ()=>{\n        const size = {\n            width: window.innerWidth,\n            height: window.innerHeight\n        };\n        const info = {\n            target: window,\n            size,\n            contentSize: size\n        };\n        windowCallbacks.forEach((callback)=>callback(info));\n    };\n    window.addEventListener(\"resize\", windowResizeHandler);\n}\nfunction resizeWindow(callback) {\n    windowCallbacks.add(callback);\n    if (!windowResizeHandler) createWindowResizeHandler();\n    return ()=>{\n        windowCallbacks.delete(callback);\n        if (!windowCallbacks.size && windowResizeHandler) {\n            windowResizeHandler = undefined;\n        }\n    };\n}\nfunction resize(a, b) {\n    return typeof a === \"function\" ? resizeWindow(a) : resizeElement(a, b);\n}\n/**\n * A time in milliseconds, beyond which we consider the scroll velocity to be 0.\n */ const maxElapsed = 50;\nconst createAxisInfo = ()=>({\n        current: 0,\n        offset: [],\n        progress: 0,\n        scrollLength: 0,\n        targetOffset: 0,\n        targetLength: 0,\n        containerLength: 0,\n        velocity: 0\n    });\nconst createScrollInfo = ()=>({\n        time: 0,\n        x: createAxisInfo(),\n        y: createAxisInfo()\n    });\nconst keys = {\n    x: {\n        length: \"Width\",\n        position: \"Left\"\n    },\n    y: {\n        length: \"Height\",\n        position: \"Top\"\n    }\n};\nfunction updateAxisInfo(element, axisName, info, time) {\n    const axis = info[axisName];\n    const { length, position } = keys[axisName];\n    const prev = axis.current;\n    const prevTime = info.time;\n    axis.current = element[\"scroll\" + position];\n    axis.scrollLength = element[\"scroll\" + length] - element[\"client\" + length];\n    axis.offset.length = 0;\n    axis.offset[0] = 0;\n    axis.offset[1] = axis.scrollLength;\n    axis.progress = progress(0, axis.scrollLength, axis.current);\n    const elapsed = time - prevTime;\n    axis.velocity = elapsed > maxElapsed ? 0 : velocityPerSecond(axis.current - prev, elapsed);\n}\nfunction updateScrollInfo(element, info, time) {\n    updateAxisInfo(element, \"x\", info, time);\n    updateAxisInfo(element, \"y\", info, time);\n    info.time = time;\n}\nfunction calcInset(element, container) {\n    const inset = {\n        x: 0,\n        y: 0\n    };\n    let current = element;\n    while(current && current !== container){\n        if (current instanceof HTMLElement) {\n            inset.x += current.offsetLeft;\n            inset.y += current.offsetTop;\n            current = current.offsetParent;\n        } else if (current.tagName === \"svg\") {\n            /**\n             * This isn't an ideal approach to measuring the offset of <svg /> tags.\n             * It would be preferable, given they behave like HTMLElements in most ways\n             * to use offsetLeft/Top. But these don't exist on <svg />. Likewise we\n             * can't use .getBBox() like most SVG elements as these provide the offset\n             * relative to the SVG itself, which for <svg /> is usually 0x0.\n             */ const svgBoundingBox = current.getBoundingClientRect();\n            current = current.parentElement;\n            const parentBoundingBox = current.getBoundingClientRect();\n            inset.x += svgBoundingBox.left - parentBoundingBox.left;\n            inset.y += svgBoundingBox.top - parentBoundingBox.top;\n        } else if (current instanceof SVGGraphicsElement) {\n            const { x, y } = current.getBBox();\n            inset.x += x;\n            inset.y += y;\n            let svg = null;\n            let parent = current.parentNode;\n            while(!svg){\n                if (parent.tagName === \"svg\") {\n                    svg = parent;\n                }\n                parent = current.parentNode;\n            }\n            current = svg;\n        } else {\n            break;\n        }\n    }\n    return inset;\n}\nconst ScrollOffset = {\n    Enter: [\n        [\n            0,\n            1\n        ],\n        [\n            1,\n            1\n        ]\n    ],\n    Exit: [\n        [\n            0,\n            0\n        ],\n        [\n            1,\n            0\n        ]\n    ],\n    Any: [\n        [\n            1,\n            0\n        ],\n        [\n            0,\n            1\n        ]\n    ],\n    All: [\n        [\n            0,\n            0\n        ],\n        [\n            1,\n            1\n        ]\n    ]\n};\nconst namedEdges = {\n    start: 0,\n    center: 0.5,\n    end: 1\n};\nfunction resolveEdge(edge, length, inset = 0) {\n    let delta = 0;\n    /**\n     * If we have this edge defined as a preset, replace the definition\n     * with the numerical value.\n     */ if (namedEdges[edge] !== undefined) {\n        edge = namedEdges[edge];\n    }\n    /**\n     * Handle unit values\n     */ if (typeof edge === \"string\") {\n        const asNumber = parseFloat(edge);\n        if (edge.endsWith(\"px\")) {\n            delta = asNumber;\n        } else if (edge.endsWith(\"%\")) {\n            edge = asNumber / 100;\n        } else if (edge.endsWith(\"vw\")) {\n            delta = asNumber / 100 * document.documentElement.clientWidth;\n        } else if (edge.endsWith(\"vh\")) {\n            delta = asNumber / 100 * document.documentElement.clientHeight;\n        } else {\n            edge = asNumber;\n        }\n    }\n    /**\n     * If the edge is defined as a number, handle as a progress value.\n     */ if (typeof edge === \"number\") {\n        delta = length * edge;\n    }\n    return inset + delta;\n}\nconst defaultOffset = [\n    0,\n    0\n];\nfunction resolveOffset(offset, containerLength, targetLength, targetInset) {\n    let offsetDefinition = Array.isArray(offset) ? offset : defaultOffset;\n    let targetPoint = 0;\n    let containerPoint = 0;\n    if (typeof offset === \"number\") {\n        /**\n         * If we're provided offset: [0, 0.5, 1] then each number x should become\n         * [x, x], so we default to the behaviour of mapping 0 => 0 of both target\n         * and container etc.\n         */ offsetDefinition = [\n            offset,\n            offset\n        ];\n    } else if (typeof offset === \"string\") {\n        offset = offset.trim();\n        if (offset.includes(\" \")) {\n            offsetDefinition = offset.split(\" \");\n        } else {\n            /**\n             * If we're provided a definition like \"100px\" then we want to apply\n             * that only to the top of the target point, leaving the container at 0.\n             * Whereas a named offset like \"end\" should be applied to both.\n             */ offsetDefinition = [\n                offset,\n                namedEdges[offset] ? offset : `0`\n            ];\n        }\n    }\n    targetPoint = resolveEdge(offsetDefinition[0], targetLength, targetInset);\n    containerPoint = resolveEdge(offsetDefinition[1], containerLength);\n    return targetPoint - containerPoint;\n}\nconst point = {\n    x: 0,\n    y: 0\n};\nfunction getTargetSize(target) {\n    return \"getBBox\" in target && target.tagName !== \"svg\" ? target.getBBox() : {\n        width: target.clientWidth,\n        height: target.clientHeight\n    };\n}\nfunction resolveOffsets(container, info, options) {\n    let { offset: offsetDefinition = ScrollOffset.All } = options;\n    const { target = container, axis = \"y\" } = options;\n    const lengthLabel = axis === \"y\" ? \"height\" : \"width\";\n    const inset = target !== container ? calcInset(target, container) : point;\n    /**\n     * Measure the target and container. If they're the same thing then we\n     * use the container's scrollWidth/Height as the target, from there\n     * all other calculations can remain the same.\n     */ const targetSize = target === container ? {\n        width: container.scrollWidth,\n        height: container.scrollHeight\n    } : getTargetSize(target);\n    const containerSize = {\n        width: container.clientWidth,\n        height: container.clientHeight\n    };\n    /**\n     * Reset the length of the resolved offset array rather than creating a new one.\n     * TODO: More reusable data structures for targetSize/containerSize would also be good.\n     */ info[axis].offset.length = 0;\n    /**\n     * Populate the offset array by resolving the user's offset definition into\n     * a list of pixel scroll offets.\n     */ let hasChanged = !info[axis].interpolate;\n    const numOffsets = offsetDefinition.length;\n    for(let i = 0; i < numOffsets; i++){\n        const offset = resolveOffset(offsetDefinition[i], containerSize[lengthLabel], targetSize[lengthLabel], inset[axis]);\n        if (!hasChanged && offset !== info[axis].interpolatorOffsets[i]) {\n            hasChanged = true;\n        }\n        info[axis].offset[i] = offset;\n    }\n    /**\n     * If the pixel scroll offsets have changed, create a new interpolator function\n     * to map scroll value into a progress.\n     */ if (hasChanged) {\n        info[axis].interpolate = interpolate(info[axis].offset, defaultOffset$1(offsetDefinition));\n        info[axis].interpolatorOffsets = [\n            ...info[axis].offset\n        ];\n    }\n    info[axis].progress = info[axis].interpolate(info[axis].current);\n}\nfunction measure(container, target = container, info) {\n    /**\n     * Find inset of target within scrollable container\n     */ info.x.targetOffset = 0;\n    info.y.targetOffset = 0;\n    if (target !== container) {\n        let node = target;\n        while(node && node !== container){\n            info.x.targetOffset += node.offsetLeft;\n            info.y.targetOffset += node.offsetTop;\n            node = node.offsetParent;\n        }\n    }\n    info.x.targetLength = target === container ? target.scrollWidth : target.clientWidth;\n    info.y.targetLength = target === container ? target.scrollHeight : target.clientHeight;\n    info.x.containerLength = container.clientWidth;\n    info.y.containerLength = container.clientHeight;\n}\nfunction createOnScrollHandler(element, onScroll, info, options = {}) {\n    return {\n        measure: ()=>measure(element, options.target, info),\n        update: (time)=>{\n            updateScrollInfo(element, info, time);\n            if (options.offset || options.target) {\n                resolveOffsets(element, info, options);\n            }\n        },\n        notify: ()=>onScroll(info)\n    };\n}\nconst scrollListeners = new WeakMap();\nconst resizeListeners = new WeakMap();\nconst onScrollHandlers = new WeakMap();\nconst getEventTarget = (element)=>element === document.documentElement ? window : element;\nfunction scrollInfo(onScroll, { container = document.documentElement, ...options } = {}) {\n    let containerHandlers = onScrollHandlers.get(container);\n    /**\n     * Get the onScroll handlers for this container.\n     * If one isn't found, create a new one.\n     */ if (!containerHandlers) {\n        containerHandlers = new Set();\n        onScrollHandlers.set(container, containerHandlers);\n    }\n    /**\n     * Create a new onScroll handler for the provided callback.\n     */ const info = createScrollInfo();\n    const containerHandler = createOnScrollHandler(container, onScroll, info, options);\n    containerHandlers.add(containerHandler);\n    /**\n     * Check if there's a scroll event listener for this container.\n     * If not, create one.\n     */ if (!scrollListeners.has(container)) {\n        const measureAll = ()=>{\n            for (const handler of containerHandlers)handler.measure();\n        };\n        const updateAll = ()=>{\n            for (const handler of containerHandlers){\n                handler.update(frameData.timestamp);\n            }\n        };\n        const notifyAll = ()=>{\n            for (const handler of containerHandlers)handler.notify();\n        };\n        const listener = ()=>{\n            frame.read(measureAll, false, true);\n            frame.update(updateAll, false, true);\n            frame.update(notifyAll, false, true);\n        };\n        scrollListeners.set(container, listener);\n        const target = getEventTarget(container);\n        window.addEventListener(\"resize\", listener, {\n            passive: true\n        });\n        if (container !== document.documentElement) {\n            resizeListeners.set(container, resize(container, listener));\n        }\n        target.addEventListener(\"scroll\", listener, {\n            passive: true\n        });\n    }\n    const listener = scrollListeners.get(container);\n    frame.read(listener, false, true);\n    return ()=>{\n        var _a;\n        cancelFrame(listener);\n        /**\n         * Check if we even have any handlers for this container.\n         */ const currentHandlers = onScrollHandlers.get(container);\n        if (!currentHandlers) return;\n        currentHandlers.delete(containerHandler);\n        if (currentHandlers.size) return;\n        /**\n         * If no more handlers, remove the scroll listener too.\n         */ const scrollListener = scrollListeners.get(container);\n        scrollListeners.delete(container);\n        if (scrollListener) {\n            getEventTarget(container).removeEventListener(\"scroll\", scrollListener);\n            (_a = resizeListeners.get(container)) === null || _a === void 0 ? void 0 : _a();\n            window.removeEventListener(\"resize\", scrollListener);\n        }\n    };\n}\nfunction scrollTimelineFallback({ source, axis = \"y\" }) {\n    // ScrollTimeline records progress as a percentage CSSUnitValue\n    const currentTime = {\n        value: 0\n    };\n    const cancel = scrollInfo((info)=>{\n        currentTime.value = info[axis].progress * 100;\n    }, {\n        container: source,\n        axis\n    });\n    return {\n        currentTime,\n        cancel\n    };\n}\nconst timelineCache = new Map();\nfunction getTimeline({ source = document.documentElement, axis = \"y\" } = {}) {\n    if (!timelineCache.has(source)) {\n        timelineCache.set(source, {});\n    }\n    const elementCache = timelineCache.get(source);\n    if (!elementCache[axis]) {\n        elementCache[axis] = supportsScrollTimeline() ? new ScrollTimeline({\n            source,\n            axis\n        }) : scrollTimelineFallback({\n            source,\n            axis\n        });\n    }\n    return elementCache[axis];\n}\nfunction scroll(onScroll, options) {\n    const timeline = getTimeline(options);\n    if (typeof onScroll === \"function\") {\n        return observeTimeline(onScroll, timeline);\n    } else {\n        return onScroll.attachTimeline(timeline);\n    }\n}\nconst thresholds = {\n    some: 0,\n    all: 1\n};\nfunction inView(elementOrSelector, onStart, { root, margin: rootMargin, amount = \"some\" } = {}) {\n    const elements = resolveElements(elementOrSelector);\n    const activeIntersections = new WeakMap();\n    const onIntersectionChange = (entries)=>{\n        entries.forEach((entry)=>{\n            const onEnd = activeIntersections.get(entry.target);\n            /**\n             * If there's no change to the intersection, we don't need to\n             * do anything here.\n             */ if (entry.isIntersecting === Boolean(onEnd)) return;\n            if (entry.isIntersecting) {\n                const newOnEnd = onStart(entry);\n                if (typeof newOnEnd === \"function\") {\n                    activeIntersections.set(entry.target, newOnEnd);\n                } else {\n                    observer.unobserve(entry.target);\n                }\n            } else if (onEnd) {\n                onEnd(entry);\n                activeIntersections.delete(entry.target);\n            }\n        });\n    };\n    const observer = new IntersectionObserver(onIntersectionChange, {\n        root,\n        rootMargin,\n        threshold: typeof amount === \"number\" ? amount : thresholds[amount]\n    });\n    elements.forEach((element)=>observer.observe(element));\n    return ()=>observer.disconnect();\n}\nfunction getOriginIndex(from, total) {\n    if (from === \"first\") {\n        return 0;\n    } else {\n        const lastIndex = total - 1;\n        return from === \"last\" ? lastIndex : lastIndex / 2;\n    }\n}\nfunction stagger(duration = 0.1, { startDelay = 0, from = 0, ease } = {}) {\n    return (i, total)=>{\n        const fromIndex = typeof from === \"number\" ? from : getOriginIndex(from, total);\n        const distance = Math.abs(fromIndex - i);\n        let delay = duration * distance;\n        if (ease) {\n            const maxDelay = total * duration;\n            const easingFunction = easingDefinitionToFunction(ease);\n            delay = easingFunction(delay / maxDelay) * maxDelay;\n        }\n        return startDelay + delay;\n    };\n}\nconst isCustomValueType = (v)=>{\n    return typeof v === \"object\" && v.mix;\n};\nconst getMixer = (v)=>isCustomValueType(v) ? v.mix : undefined;\nfunction transform(...args) {\n    const useImmediate = !Array.isArray(args[0]);\n    const argOffset = useImmediate ? 0 : -1;\n    const inputValue = args[0 + argOffset];\n    const inputRange = args[1 + argOffset];\n    const outputRange = args[2 + argOffset];\n    const options = args[3 + argOffset];\n    const interpolator = interpolate(inputRange, outputRange, {\n        mixer: getMixer(outputRange[0]),\n        ...options\n    });\n    return useImmediate ? interpolator(inputValue) : interpolator;\n}\n/**\n * @deprecated\n *\n * Import as `frame` instead.\n */ const sync = frame;\n/**\n * @deprecated\n *\n * Use cancelFrame(callback) instead.\n */ const cancelSync = stepsOrder.reduce((acc, key)=>{\n    acc[key] = (process)=>cancelFrame(process);\n    return acc;\n}, {});\nexports.HTMLVisualElement = HTMLVisualElement;\nexports.MotionValue = MotionValue;\nexports.SVGVisualElement = SVGVisualElement;\nexports.SubscriptionManager = SubscriptionManager;\nexports.VisualElement = VisualElement;\nexports.addScaleCorrector = addScaleCorrector;\nexports.addUniqueItem = addUniqueItem;\nexports.animate = animate;\nexports.animateMotionValue = animateMotionValue;\nexports.animateSingleValue = animateSingleValue;\nexports.animateStyle = animateStyle;\nexports.animateTarget = animateTarget;\nexports.animateValue = animateValue;\nexports.anticipate = anticipate;\nexports.applyBoxDelta = applyBoxDelta;\nexports.applyTreeDeltas = applyTreeDeltas;\nexports.backIn = backIn;\nexports.backInOut = backInOut;\nexports.backOut = backOut;\nexports.buildHTMLStyles = buildHTMLStyles;\nexports.buildSVGAttrs = buildSVGAttrs;\nexports.buildTransform = buildTransform;\nexports.camelToDash = camelToDash;\nexports.cancelFrame = cancelFrame;\nexports.cancelSync = cancelSync;\nexports.checkTargetForNewValues = checkTargetForNewValues;\nexports.circIn = circIn;\nexports.circInOut = circInOut;\nexports.circOut = circOut;\nexports.clamp = clamp;\nexports.collectMotionValues = collectMotionValues;\nexports.color = color;\nexports.complex = complex;\nexports.convertBoundingBoxToBox = convertBoundingBoxToBox;\nexports.convertBoxToBoundingBox = convertBoxToBoundingBox;\nexports.createBox = createBox;\nexports.createDelta = createDelta;\nexports.createScopedAnimate = createScopedAnimate;\nexports.cubicBezier = cubicBezier;\nexports.delay = delay;\nexports.distance = distance;\nexports.distance2D = distance2D;\nexports.easeIn = easeIn;\nexports.easeInOut = easeInOut;\nexports.easeOut = easeOut;\nexports.featureDefinitions = featureDefinitions;\nexports.frame = frame;\nexports.frameData = frameData;\nexports.getOrigin = getOrigin;\nexports.getValueTransition = getValueTransition$1;\nexports.has2DTranslate = has2DTranslate;\nexports.hasReducedMotionListener = hasReducedMotionListener;\nexports.hasScale = hasScale;\nexports.hasTransform = hasTransform;\nexports.inView = inView;\nexports.initPrefersReducedMotion = initPrefersReducedMotion;\nexports.instantAnimationState = instantAnimationState;\nexports.interpolate = interpolate;\nexports.isAnimationControls = isAnimationControls;\nexports.isBrowser = isBrowser;\nexports.isCSSVariableName = isCSSVariableName;\nexports.isControllingVariants = isControllingVariants;\nexports.isCustomValue = isCustomValue;\nexports.isForcedMotionValue = isForcedMotionValue;\nexports.isKeyframesTarget = isKeyframesTarget;\nexports.isMotionValue = isMotionValue;\nexports.isRefObject = isRefObject;\nexports.isSVGElement = isSVGElement;\nexports.isSVGTag = isSVGTag;\nexports.isVariantLabel = isVariantLabel;\nexports.isVariantNode = isVariantNode;\nexports.measurePageBox = measurePageBox;\nexports.millisecondsToSeconds = millisecondsToSeconds;\nexports.mirrorEasing = mirrorEasing;\nexports.mix = mix;\nexports.motionValue = motionValue;\nexports.moveItem = moveItem;\nexports.noop = noop;\nexports.optimizedAppearDataAttribute = optimizedAppearDataAttribute;\nexports.optimizedAppearDataId = optimizedAppearDataId;\nexports.percent = percent;\nexports.pipe = pipe;\nexports.prefersReducedMotion = prefersReducedMotion;\nexports.progress = progress;\nexports.px = px;\nexports.removeItem = removeItem;\nexports.renderSVG = renderSVG;\nexports.resolveVariant = resolveVariant;\nexports.resolveVariantFromProps = resolveVariantFromProps;\nexports.reverseEasing = reverseEasing;\nexports.scaleCorrectors = scaleCorrectors;\nexports.scalePoint = scalePoint;\nexports.scrapeMotionValuesFromProps = scrapeMotionValuesFromProps;\nexports.scrapeMotionValuesFromProps$1 = scrapeMotionValuesFromProps$1;\nexports.scroll = scroll;\nexports.scrollInfo = scrollInfo;\nexports.secondsToMilliseconds = secondsToMilliseconds;\nexports.setValues = setValues;\nexports.spring = spring;\nexports.stagger = stagger;\nexports.steps = steps;\nexports.sync = sync;\nexports.transform = transform;\nexports.transformBox = transformBox;\nexports.transformProps = transformProps;\nexports.translateAxis = translateAxis;\nexports.variantPriorityOrder = variantPriorityOrder;\nexports.visualElementStore = visualElementStore;\nexports.warnOnce = warnOnce;\nexports.wrap = wrap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/cjs/index-legacy-c80d64bf.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/cjs/index.js":
/*!******************************************************!*\
  !*** ./node_modules/framer-motion/dist/cjs/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar indexLegacy = __webpack_require__(/*! ./index-legacy-c80d64bf.js */ \"(ssr)/./node_modules/framer-motion/dist/cjs/index-legacy-c80d64bf.js\");\nfunction _interopDefaultLegacy(e) {\n    return e && typeof e === \"object\" && \"default\" in e ? e : {\n        \"default\": e\n    };\n}\nfunction _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = Object.create(null);\n    if (e) {\n        Object.keys(e).forEach(function(k) {\n            if (k !== \"default\") {\n                var d = Object.getOwnPropertyDescriptor(e, k);\n                Object.defineProperty(n, k, d.get ? d : {\n                    enumerable: true,\n                    get: function() {\n                        return e[k];\n                    }\n                });\n            }\n        });\n    }\n    n[\"default\"] = e;\n    return Object.freeze(n);\n}\nvar React__namespace = /*#__PURE__*/ _interopNamespace(React);\nvar React__default = /*#__PURE__*/ _interopDefaultLegacy(React);\n/**\n * @public\n */ const MotionConfigContext = React.createContext({\n    transformPagePoint: (p)=>p,\n    isStatic: false,\n    reducedMotion: \"never\"\n});\nconst MotionContext = React.createContext({});\n/**\n * @public\n */ const PresenceContext = React.createContext(null);\nconst useIsomorphicLayoutEffect = indexLegacy.isBrowser ? React.useLayoutEffect : React.useEffect;\nconst LazyContext = React.createContext({\n    strict: false\n});\nfunction useVisualElement(Component, visualState, props, createVisualElement) {\n    const { visualElement: parent } = React.useContext(MotionContext);\n    const lazyContext = React.useContext(LazyContext);\n    const presenceContext = React.useContext(PresenceContext);\n    const reducedMotionConfig = React.useContext(MotionConfigContext).reducedMotion;\n    const visualElementRef = React.useRef();\n    /**\n     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n     */ createVisualElement = createVisualElement || lazyContext.renderer;\n    if (!visualElementRef.current && createVisualElement) {\n        visualElementRef.current = createVisualElement(Component, {\n            visualState,\n            parent,\n            props,\n            presenceContext,\n            blockInitialAnimation: presenceContext ? presenceContext.initial === false : false,\n            reducedMotionConfig\n        });\n    }\n    const visualElement = visualElementRef.current;\n    React.useInsertionEffect(()=>{\n        visualElement && visualElement.update(props, presenceContext);\n    });\n    /**\n     * Cache this value as we want to know whether HandoffAppearAnimations\n     * was present on initial render - it will be deleted after this.\n     */ const wantsHandoff = React.useRef(Boolean(props[indexLegacy.optimizedAppearDataAttribute] && !window.HandoffComplete));\n    useIsomorphicLayoutEffect(()=>{\n        if (!visualElement) return;\n        visualElement.render();\n        /**\n         * Ideally this function would always run in a useEffect.\n         *\n         * However, if we have optimised appear animations to handoff from,\n         * it needs to happen synchronously to ensure there's no flash of\n         * incorrect styles in the event of a hydration error.\n         *\n         * So if we detect a situtation where optimised appear animations\n         * are running, we use useLayoutEffect to trigger animations.\n         */ if (wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n    });\n    React.useEffect(()=>{\n        if (!visualElement) return;\n        visualElement.updateFeatures();\n        if (!wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n        if (wantsHandoff.current) {\n            wantsHandoff.current = false;\n            // This ensures all future calls to animateChanges() will run in useEffect\n            window.HandoffComplete = true;\n        }\n    });\n    return visualElement;\n}\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */ function useMotionRef(visualState, visualElement, externalRef) {\n    return React.useCallback((instance)=>{\n        instance && visualState.mount && visualState.mount(instance);\n        if (visualElement) {\n            instance ? visualElement.mount(instance) : visualElement.unmount();\n        }\n        if (externalRef) {\n            if (typeof externalRef === \"function\") {\n                externalRef(instance);\n            } else if (indexLegacy.isRefObject(externalRef)) {\n                externalRef.current = instance;\n            }\n        }\n    }, /**\n     * Only pass a new ref callback to React if we've received a visual element\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\n     * or other dependencies change.\n     */ [\n        visualElement\n    ]);\n}\nfunction getCurrentTreeVariants(props, context) {\n    if (indexLegacy.isControllingVariants(props)) {\n        const { initial, animate } = props;\n        return {\n            initial: initial === false || indexLegacy.isVariantLabel(initial) ? initial : undefined,\n            animate: indexLegacy.isVariantLabel(animate) ? animate : undefined\n        };\n    }\n    return props.inherit !== false ? context : {};\n}\nfunction useCreateMotionContext(props) {\n    const { initial, animate } = getCurrentTreeVariants(props, React.useContext(MotionContext));\n    return React.useMemo(()=>({\n            initial,\n            animate\n        }), [\n        variantLabelsAsDependency(initial),\n        variantLabelsAsDependency(animate)\n    ]);\n}\nfunction variantLabelsAsDependency(prop) {\n    return Array.isArray(prop) ? prop.join(\" \") : prop;\n}\nfunction loadFeatures(features) {\n    for(const key in features){\n        indexLegacy.featureDefinitions[key] = {\n            ...indexLegacy.featureDefinitions[key],\n            ...features[key]\n        };\n    }\n}\nconst LayoutGroupContext = React.createContext({});\n/**\n * Internal, exported only for usage in Framer\n */ const SwitchLayoutGroupContext = React.createContext({});\nconst motionComponentSymbol = Symbol.for(\"motionComponentSymbol\");\n/**\n * Create a `motion` component.\n *\n * This function accepts a Component argument, which can be either a string (ie \"div\"\n * for `motion.div`), or an actual React component.\n *\n * Alongside this is a config option which provides a way of rendering the provided\n * component \"offline\", or outside the React render cycle.\n */ function createMotionComponent({ preloadedFeatures, createVisualElement, useRender, useVisualState, Component }) {\n    preloadedFeatures && loadFeatures(preloadedFeatures);\n    function MotionComponent(props, externalRef) {\n        /**\n         * If we need to measure the element we load this functionality in a\n         * separate class component in order to gain access to getSnapshotBeforeUpdate.\n         */ let MeasureLayout;\n        const configAndProps = {\n            ...React.useContext(MotionConfigContext),\n            ...props,\n            layoutId: useLayoutId(props)\n        };\n        const { isStatic } = configAndProps;\n        const context = useCreateMotionContext(props);\n        const visualState = useVisualState(props, isStatic);\n        if (!isStatic && indexLegacy.isBrowser) {\n            /**\n             * Create a VisualElement for this component. A VisualElement provides a common\n             * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as\n             * providing a way of rendering to these APIs outside of the React render loop\n             * for more performant animations and interactions\n             */ context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement);\n            /**\n             * Load Motion gesture and animation features. These are rendered as renderless\n             * components so each feature can optionally make use of React lifecycle methods.\n             */ const initialLayoutGroupConfig = React.useContext(SwitchLayoutGroupContext);\n            const isStrict = React.useContext(LazyContext).strict;\n            if (context.visualElement) {\n                MeasureLayout = context.visualElement.loadFeatures(// Note: Pass the full new combined props to correctly re-render dynamic feature components.\n                configAndProps, isStrict, preloadedFeatures, initialLayoutGroupConfig);\n            }\n        }\n        /**\n         * The mount order and hierarchy is specific to ensure our element ref\n         * is hydrated by the time features fire their effects.\n         */ return React__namespace.createElement(MotionContext.Provider, {\n            value: context\n        }, MeasureLayout && context.visualElement ? React__namespace.createElement(MeasureLayout, {\n            visualElement: context.visualElement,\n            ...configAndProps\n        }) : null, useRender(Component, props, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement));\n    }\n    const ForwardRefComponent = React.forwardRef(MotionComponent);\n    ForwardRefComponent[motionComponentSymbol] = Component;\n    return ForwardRefComponent;\n}\nfunction useLayoutId({ layoutId }) {\n    const layoutGroupId = React.useContext(LayoutGroupContext).id;\n    return layoutGroupId && layoutId !== undefined ? layoutGroupId + \"-\" + layoutId : layoutId;\n}\n/**\n * Convert any React component into a `motion` component. The provided component\n * **must** use `React.forwardRef` to the underlying DOM component you want to animate.\n *\n * ```jsx\n * const Component = React.forwardRef((props, ref) => {\n *   return <div ref={ref} />\n * })\n *\n * const MotionComponent = motion(Component)\n * ```\n *\n * @public\n */ function createMotionProxy(createConfig) {\n    function custom(Component, customMotionComponentConfig = {}) {\n        return createMotionComponent(createConfig(Component, customMotionComponentConfig));\n    }\n    if (typeof Proxy === \"undefined\") {\n        return custom;\n    }\n    /**\n     * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.\n     * Rather than generating them anew every render.\n     */ const componentCache = new Map();\n    return new Proxy(custom, {\n        /**\n         * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.\n         * The prop name is passed through as `key` and we can use that to generate a `motion`\n         * DOM component with that name.\n         */ get: (_target, key)=>{\n            /**\n             * If this element doesn't exist in the component cache, create it and cache.\n             */ if (!componentCache.has(key)) {\n                componentCache.set(key, custom(key));\n            }\n            return componentCache.get(key);\n        }\n    });\n}\n/**\n * We keep these listed seperately as we use the lowercase tag names as part\n * of the runtime bundle to detect SVG components\n */ const lowercaseSVGElements = [\n    \"animate\",\n    \"circle\",\n    \"defs\",\n    \"desc\",\n    \"ellipse\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"filter\",\n    \"marker\",\n    \"mask\",\n    \"metadata\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"rect\",\n    \"stop\",\n    \"switch\",\n    \"symbol\",\n    \"svg\",\n    \"text\",\n    \"tspan\",\n    \"use\",\n    \"view\"\n];\nfunction isSVGComponent(Component) {\n    if (/**\n     * If it's not a string, it's a custom React component. Currently we only support\n     * HTML custom React components.\n     */ typeof Component !== \"string\" || /**\n         * If it contains a dash, the element is a custom HTML webcomponent.\n         */ Component.includes(\"-\")) {\n        return false;\n    } else if (/**\n     * If it's in our list of lowercase SVG tags, it's an SVG component\n     */ lowercaseSVGElements.indexOf(Component) > -1 || /**\n         * If it contains a capital letter, it's an SVG component\n         */ /[A-Z]/.test(Component)) {\n        return true;\n    }\n    return false;\n}\nconst createHtmlRenderState = ()=>({\n        style: {},\n        transform: {},\n        transformOrigin: {},\n        vars: {}\n    });\nfunction copyRawValuesOnly(target, source, props) {\n    for(const key in source){\n        if (!indexLegacy.isMotionValue(source[key]) && !indexLegacy.isForcedMotionValue(key, props)) {\n            target[key] = source[key];\n        }\n    }\n}\nfunction useInitialMotionValues({ transformTemplate }, visualState, isStatic) {\n    return React.useMemo(()=>{\n        const state = createHtmlRenderState();\n        indexLegacy.buildHTMLStyles(state, visualState, {\n            enableHardwareAcceleration: !isStatic\n        }, transformTemplate);\n        return Object.assign({}, state.vars, state.style);\n    }, [\n        visualState\n    ]);\n}\nfunction useStyle(props, visualState, isStatic) {\n    const styleProp = props.style || {};\n    const style = {};\n    /**\n     * Copy non-Motion Values straight into style\n     */ copyRawValuesOnly(style, styleProp, props);\n    Object.assign(style, useInitialMotionValues(props, visualState, isStatic));\n    return props.transformValues ? props.transformValues(style) : style;\n}\nfunction useHTMLProps(props, visualState, isStatic) {\n    // The `any` isn't ideal but it is the type of createElement props argument\n    const htmlProps = {};\n    const style = useStyle(props, visualState, isStatic);\n    if (props.drag && props.dragListener !== false) {\n        // Disable the ghost element when a user drags\n        htmlProps.draggable = false;\n        // Disable text selection\n        style.userSelect = style.WebkitUserSelect = style.WebkitTouchCallout = \"none\";\n        // Disable scrolling on the draggable direction\n        style.touchAction = props.drag === true ? \"none\" : `pan-${props.drag === \"x\" ? \"y\" : \"x\"}`;\n    }\n    if (props.tabIndex === undefined && (props.onTap || props.onTapStart || props.whileTap)) {\n        htmlProps.tabIndex = 0;\n    }\n    htmlProps.style = style;\n    return htmlProps;\n}\n/**\n * A list of all valid MotionProps.\n *\n * @privateRemarks\n * This doesn't throw if a `MotionProp` name is missing - it should.\n */ const validMotionProps = new Set([\n    \"animate\",\n    \"exit\",\n    \"variants\",\n    \"initial\",\n    \"style\",\n    \"values\",\n    \"variants\",\n    \"transition\",\n    \"transformTemplate\",\n    \"transformValues\",\n    \"custom\",\n    \"inherit\",\n    \"onLayoutAnimationStart\",\n    \"onLayoutAnimationComplete\",\n    \"onLayoutMeasure\",\n    \"onBeforeLayoutMeasure\",\n    \"onAnimationStart\",\n    \"onAnimationComplete\",\n    \"onUpdate\",\n    \"onDragStart\",\n    \"onDrag\",\n    \"onDragEnd\",\n    \"onMeasureDragConstraints\",\n    \"onDirectionLock\",\n    \"onDragTransitionEnd\",\n    \"_dragX\",\n    \"_dragY\",\n    \"onHoverStart\",\n    \"onHoverEnd\",\n    \"onViewportEnter\",\n    \"onViewportLeave\",\n    \"ignoreStrict\",\n    \"viewport\"\n]);\n/**\n * Check whether a prop name is a valid `MotionProp` key.\n *\n * @param key - Name of the property to check\n * @returns `true` is key is a valid `MotionProp`.\n *\n * @public\n */ function isValidMotionProp(key) {\n    return key.startsWith(\"while\") || key.startsWith(\"drag\") && key !== \"draggable\" || key.startsWith(\"layout\") || key.startsWith(\"onTap\") || key.startsWith(\"onPan\") || validMotionProps.has(key);\n}\nlet shouldForward = (key)=>!isValidMotionProp(key);\nfunction loadExternalIsValidProp(isValidProp) {\n    if (!isValidProp) return;\n    // Explicitly filter our events\n    shouldForward = (key)=>key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */ try {\n    /**\n     * We attempt to import this package but require won't be defined in esm environments, in that case\n     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n     * in favour of explicit injection.\n     */ loadExternalIsValidProp((__webpack_require__(/*! @emotion/is-prop-valid */ \"(ssr)/./node_modules/@emotion/is-prop-valid/dist/is-prop-valid.esm.js\")[\"default\"]));\n} catch (_a) {\n// We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n    const filteredProps = {};\n    for(const key in props){\n        /**\n         * values is considered a valid prop by Emotion, so if it's present\n         * this will be rendered out to the DOM unless explicitly filtered.\n         *\n         * We check the type as it could be used with the `feColorMatrix`\n         * element, which we support.\n         */ if (key === \"values\" && typeof props.values === \"object\") continue;\n        if (shouldForward(key) || forwardMotionProps === true && isValidMotionProp(key) || !isDom && !isValidMotionProp(key) || // If trying to use native HTML drag events, forward drag listeners\n        props[\"draggable\"] && key.startsWith(\"onDrag\")) {\n            filteredProps[key] = props[key];\n        }\n    }\n    return filteredProps;\n}\nconst createSvgRenderState = ()=>({\n        ...createHtmlRenderState(),\n        attrs: {}\n    });\nfunction useSVGProps(props, visualState, _isStatic, Component) {\n    const visualProps = React.useMemo(()=>{\n        const state = createSvgRenderState();\n        indexLegacy.buildSVGAttrs(state, visualState, {\n            enableHardwareAcceleration: false\n        }, indexLegacy.isSVGTag(Component), props.transformTemplate);\n        return {\n            ...state.attrs,\n            style: {\n                ...state.style\n            }\n        };\n    }, [\n        visualState\n    ]);\n    if (props.style) {\n        const rawStyles = {};\n        copyRawValuesOnly(rawStyles, props.style, props);\n        visualProps.style = {\n            ...rawStyles,\n            ...visualProps.style\n        };\n    }\n    return visualProps;\n}\nfunction createUseRender(forwardMotionProps = false) {\n    const useRender = (Component, props, ref, { latestValues }, isStatic)=>{\n        const useVisualProps = isSVGComponent(Component) ? useSVGProps : useHTMLProps;\n        const visualProps = useVisualProps(props, latestValues, isStatic, Component);\n        const filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n        const elementProps = {\n            ...filteredProps,\n            ...visualProps,\n            ref\n        };\n        /**\n         * If component has been handed a motion value as its child,\n         * memoise its initial value and render that. Subsequent updates\n         * will be handled by the onChange handler\n         */ const { children } = props;\n        const renderedChildren = React.useMemo(()=>indexLegacy.isMotionValue(children) ? children.get() : children, [\n            children\n        ]);\n        return React.createElement(Component, {\n            ...elementProps,\n            children: renderedChildren\n        });\n    };\n    return useRender;\n}\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */ function useConstant(init) {\n    const ref = React.useRef(null);\n    if (ref.current === null) {\n        ref.current = init();\n    }\n    return ref.current;\n}\n/**\n * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself\n *\n * TODO: Remove and move to library\n */ function resolveMotionValue(value) {\n    const unwrappedValue = indexLegacy.isMotionValue(value) ? value.get() : value;\n    return indexLegacy.isCustomValue(unwrappedValue) ? unwrappedValue.toValue() : unwrappedValue;\n}\nfunction makeState({ scrapeMotionValuesFromProps, createRenderState, onMount }, props, context, presenceContext) {\n    const state = {\n        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n        renderState: createRenderState()\n    };\n    if (onMount) {\n        state.mount = (instance)=>onMount(props, instance, state);\n    }\n    return state;\n}\nconst makeUseVisualState = (config)=>(props, isStatic)=>{\n        const context = React.useContext(MotionContext);\n        const presenceContext = React.useContext(PresenceContext);\n        const make = ()=>makeState(config, props, context, presenceContext);\n        return isStatic ? make() : useConstant(make);\n    };\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n    const values = {};\n    const motionValues = scrapeMotionValues(props, {});\n    for(const key in motionValues){\n        values[key] = resolveMotionValue(motionValues[key]);\n    }\n    let { initial, animate } = props;\n    const isControllingVariants = indexLegacy.isControllingVariants(props);\n    const isVariantNode = indexLegacy.isVariantNode(props);\n    if (context && isVariantNode && !isControllingVariants && props.inherit !== false) {\n        if (initial === undefined) initial = context.initial;\n        if (animate === undefined) animate = context.animate;\n    }\n    let isInitialAnimationBlocked = presenceContext ? presenceContext.initial === false : false;\n    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n    const variantToSet = isInitialAnimationBlocked ? animate : initial;\n    if (variantToSet && typeof variantToSet !== \"boolean\" && !indexLegacy.isAnimationControls(variantToSet)) {\n        const list = Array.isArray(variantToSet) ? variantToSet : [\n            variantToSet\n        ];\n        list.forEach((definition)=>{\n            const resolved = indexLegacy.resolveVariantFromProps(props, definition);\n            if (!resolved) return;\n            const { transitionEnd, transition, ...target } = resolved;\n            for(const key in target){\n                let valueTarget = target[key];\n                if (Array.isArray(valueTarget)) {\n                    /**\n                     * Take final keyframe if the initial animation is blocked because\n                     * we want to initialise at the end of that blocked animation.\n                     */ const index = isInitialAnimationBlocked ? valueTarget.length - 1 : 0;\n                    valueTarget = valueTarget[index];\n                }\n                if (valueTarget !== null) {\n                    values[key] = valueTarget;\n                }\n            }\n            for(const key in transitionEnd)values[key] = transitionEnd[key];\n        });\n    }\n    return values;\n}\nconst svgMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps: indexLegacy.scrapeMotionValuesFromProps,\n        createRenderState: createSvgRenderState,\n        onMount: (props, instance, { renderState, latestValues })=>{\n            indexLegacy.frame.read(()=>{\n                try {\n                    renderState.dimensions = typeof instance.getBBox === \"function\" ? instance.getBBox() : instance.getBoundingClientRect();\n                } catch (e) {\n                    // Most likely trying to measure an unrendered element under Firefox\n                    renderState.dimensions = {\n                        x: 0,\n                        y: 0,\n                        width: 0,\n                        height: 0\n                    };\n                }\n            });\n            indexLegacy.frame.render(()=>{\n                indexLegacy.buildSVGAttrs(renderState, latestValues, {\n                    enableHardwareAcceleration: false\n                }, indexLegacy.isSVGTag(instance.tagName), props.transformTemplate);\n                indexLegacy.renderSVG(instance, renderState);\n            });\n        }\n    })\n};\nconst htmlMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps: indexLegacy.scrapeMotionValuesFromProps$1,\n        createRenderState: createHtmlRenderState\n    })\n};\nfunction createDomMotionConfig(Component, { forwardMotionProps = false }, preloadedFeatures, createVisualElement) {\n    const baseConfig = isSVGComponent(Component) ? svgMotionConfig : htmlMotionConfig;\n    return {\n        ...baseConfig,\n        preloadedFeatures,\n        useRender: createUseRender(forwardMotionProps),\n        createVisualElement,\n        Component\n    };\n}\nfunction addDomEvent(target, eventName, handler, options = {\n    passive: true\n}) {\n    target.addEventListener(eventName, handler, options);\n    return ()=>target.removeEventListener(eventName, handler);\n}\nconst isPrimaryPointer = (event)=>{\n    if (event.pointerType === \"mouse\") {\n        return typeof event.button !== \"number\" || event.button <= 0;\n    } else {\n        /**\n         * isPrimary is true for all mice buttons, whereas every touch point\n         * is regarded as its own input. So subsequent concurrent touch points\n         * will be false.\n         *\n         * Specifically match against false here as incomplete versions of\n         * PointerEvents in very old browser might have it set as undefined.\n         */ return event.isPrimary !== false;\n    }\n};\nfunction extractEventInfo(event, pointType = \"page\") {\n    return {\n        point: {\n            x: event[pointType + \"X\"],\n            y: event[pointType + \"Y\"]\n        }\n    };\n}\nconst addPointerInfo = (handler)=>{\n    return (event)=>isPrimaryPointer(event) && handler(event, extractEventInfo(event));\n};\nfunction addPointerEvent(target, eventName, handler, options) {\n    return addDomEvent(target, eventName, addPointerInfo(handler), options);\n}\nfunction createLock(name) {\n    let lock = null;\n    return ()=>{\n        const openLock = ()=>{\n            lock = null;\n        };\n        if (lock === null) {\n            lock = name;\n            return openLock;\n        }\n        return false;\n    };\n}\nconst globalHorizontalLock = createLock(\"dragHorizontal\");\nconst globalVerticalLock = createLock(\"dragVertical\");\nfunction getGlobalLock(drag) {\n    let lock = false;\n    if (drag === \"y\") {\n        lock = globalVerticalLock();\n    } else if (drag === \"x\") {\n        lock = globalHorizontalLock();\n    } else {\n        const openHorizontal = globalHorizontalLock();\n        const openVertical = globalVerticalLock();\n        if (openHorizontal && openVertical) {\n            lock = ()=>{\n                openHorizontal();\n                openVertical();\n            };\n        } else {\n            // Release the locks because we don't use them\n            if (openHorizontal) openHorizontal();\n            if (openVertical) openVertical();\n        }\n    }\n    return lock;\n}\nfunction isDragActive() {\n    // Check the gesture lock - if we get it, it means no drag gesture is active\n    // and we can safely fire the tap gesture.\n    const openGestureLock = getGlobalLock(true);\n    if (!openGestureLock) return true;\n    openGestureLock();\n    return false;\n}\nclass Feature {\n    constructor(node){\n        this.isMounted = false;\n        this.node = node;\n    }\n    update() {}\n}\nfunction addHoverEvent(node, isActive) {\n    const eventName = \"pointer\" + (isActive ? \"enter\" : \"leave\");\n    const callbackName = \"onHover\" + (isActive ? \"Start\" : \"End\");\n    const handleEvent = (event, info)=>{\n        if (event.type === \"touch\" || isDragActive()) return;\n        const props = node.getProps();\n        if (node.animationState && props.whileHover) {\n            node.animationState.setActive(\"whileHover\", isActive);\n        }\n        if (props[callbackName]) {\n            indexLegacy.frame.update(()=>props[callbackName](event, info));\n        }\n    };\n    return addPointerEvent(node.current, eventName, handleEvent, {\n        passive: !node.getProps()[callbackName]\n    });\n}\nclass HoverGesture extends Feature {\n    mount() {\n        this.unmount = indexLegacy.pipe(addHoverEvent(this.node, true), addHoverEvent(this.node, false));\n    }\n    unmount() {}\n}\nclass FocusGesture extends Feature {\n    constructor(){\n        super(...arguments);\n        this.isActive = false;\n    }\n    onFocus() {\n        let isFocusVisible = false;\n        /**\n         * If this element doesn't match focus-visible then don't\n         * apply whileHover. But, if matches throws that focus-visible\n         * is not a valid selector then in that browser outline styles will be applied\n         * to the element by default and we want to match that behaviour with whileFocus.\n         */ try {\n            isFocusVisible = this.node.current.matches(\":focus-visible\");\n        } catch (e) {\n            isFocusVisible = true;\n        }\n        if (!isFocusVisible || !this.node.animationState) return;\n        this.node.animationState.setActive(\"whileFocus\", true);\n        this.isActive = true;\n    }\n    onBlur() {\n        if (!this.isActive || !this.node.animationState) return;\n        this.node.animationState.setActive(\"whileFocus\", false);\n        this.isActive = false;\n    }\n    mount() {\n        this.unmount = indexLegacy.pipe(addDomEvent(this.node.current, \"focus\", ()=>this.onFocus()), addDomEvent(this.node.current, \"blur\", ()=>this.onBlur()));\n    }\n    unmount() {}\n}\n/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */ const isNodeOrChild = (parent, child)=>{\n    if (!child) {\n        return false;\n    } else if (parent === child) {\n        return true;\n    } else {\n        return isNodeOrChild(parent, child.parentElement);\n    }\n};\nfunction fireSyntheticPointerEvent(name, handler) {\n    if (!handler) return;\n    const syntheticPointerEvent = new PointerEvent(\"pointer\" + name);\n    handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));\n}\nclass PressGesture extends Feature {\n    constructor(){\n        super(...arguments);\n        this.removeStartListeners = indexLegacy.noop;\n        this.removeEndListeners = indexLegacy.noop;\n        this.removeAccessibleListeners = indexLegacy.noop;\n        this.startPointerPress = (startEvent, startInfo)=>{\n            this.removeEndListeners();\n            if (this.isPressing) return;\n            const props = this.node.getProps();\n            const endPointerPress = (endEvent, endInfo)=>{\n                if (!this.checkPressEnd()) return;\n                const { onTap, onTapCancel } = this.node.getProps();\n                indexLegacy.frame.update(()=>{\n                    /**\n                     * We only count this as a tap gesture if the event.target is the same\n                     * as, or a child of, this component's element\n                     */ !isNodeOrChild(this.node.current, endEvent.target) ? onTapCancel && onTapCancel(endEvent, endInfo) : onTap && onTap(endEvent, endInfo);\n                });\n            };\n            const removePointerUpListener = addPointerEvent(window, \"pointerup\", endPointerPress, {\n                passive: !(props.onTap || props[\"onPointerUp\"])\n            });\n            const removePointerCancelListener = addPointerEvent(window, \"pointercancel\", (cancelEvent, cancelInfo)=>this.cancelPress(cancelEvent, cancelInfo), {\n                passive: !(props.onTapCancel || props[\"onPointerCancel\"])\n            });\n            this.removeEndListeners = indexLegacy.pipe(removePointerUpListener, removePointerCancelListener);\n            this.startPress(startEvent, startInfo);\n        };\n        this.startAccessiblePress = ()=>{\n            const handleKeydown = (keydownEvent)=>{\n                if (keydownEvent.key !== \"Enter\" || this.isPressing) return;\n                const handleKeyup = (keyupEvent)=>{\n                    if (keyupEvent.key !== \"Enter\" || !this.checkPressEnd()) return;\n                    fireSyntheticPointerEvent(\"up\", (event, info)=>{\n                        const { onTap } = this.node.getProps();\n                        if (onTap) {\n                            indexLegacy.frame.update(()=>onTap(event, info));\n                        }\n                    });\n                };\n                this.removeEndListeners();\n                this.removeEndListeners = addDomEvent(this.node.current, \"keyup\", handleKeyup);\n                fireSyntheticPointerEvent(\"down\", (event, info)=>{\n                    this.startPress(event, info);\n                });\n            };\n            const removeKeydownListener = addDomEvent(this.node.current, \"keydown\", handleKeydown);\n            const handleBlur = ()=>{\n                if (!this.isPressing) return;\n                fireSyntheticPointerEvent(\"cancel\", (cancelEvent, cancelInfo)=>this.cancelPress(cancelEvent, cancelInfo));\n            };\n            const removeBlurListener = addDomEvent(this.node.current, \"blur\", handleBlur);\n            this.removeAccessibleListeners = indexLegacy.pipe(removeKeydownListener, removeBlurListener);\n        };\n    }\n    startPress(event, info) {\n        this.isPressing = true;\n        const { onTapStart, whileTap } = this.node.getProps();\n        /**\n         * Ensure we trigger animations before firing event callback\n         */ if (whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", true);\n        }\n        if (onTapStart) {\n            indexLegacy.frame.update(()=>onTapStart(event, info));\n        }\n    }\n    checkPressEnd() {\n        this.removeEndListeners();\n        this.isPressing = false;\n        const props = this.node.getProps();\n        if (props.whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", false);\n        }\n        return !isDragActive();\n    }\n    cancelPress(event, info) {\n        if (!this.checkPressEnd()) return;\n        const { onTapCancel } = this.node.getProps();\n        if (onTapCancel) {\n            indexLegacy.frame.update(()=>onTapCancel(event, info));\n        }\n    }\n    mount() {\n        const props = this.node.getProps();\n        const removePointerListener = addPointerEvent(this.node.current, \"pointerdown\", this.startPointerPress, {\n            passive: !(props.onTapStart || props[\"onPointerStart\"])\n        });\n        const removeFocusListener = addDomEvent(this.node.current, \"focus\", this.startAccessiblePress);\n        this.removeStartListeners = indexLegacy.pipe(removePointerListener, removeFocusListener);\n    }\n    unmount() {\n        this.removeStartListeners();\n        this.removeEndListeners();\n        this.removeAccessibleListeners();\n    }\n}\n/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */ const observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */ const observers = new WeakMap();\nconst fireObserverCallback = (entry)=>{\n    const callback = observerCallbacks.get(entry.target);\n    callback && callback(entry);\n};\nconst fireAllObserverCallbacks = (entries)=>{\n    entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver({ root, ...options }) {\n    const lookupRoot = root || document;\n    /**\n     * If we don't have an observer lookup map for this root, create one.\n     */ if (!observers.has(lookupRoot)) {\n        observers.set(lookupRoot, {});\n    }\n    const rootObservers = observers.get(lookupRoot);\n    const key = JSON.stringify(options);\n    /**\n     * If we don't have an observer for this combination of root and settings,\n     * create one.\n     */ if (!rootObservers[key]) {\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, {\n            root,\n            ...options\n        });\n    }\n    return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n    const rootInteresectionObserver = initIntersectionObserver(options);\n    observerCallbacks.set(element, callback);\n    rootInteresectionObserver.observe(element);\n    return ()=>{\n        observerCallbacks.delete(element);\n        rootInteresectionObserver.unobserve(element);\n    };\n}\nconst thresholdNames = {\n    some: 0,\n    all: 1\n};\nclass InViewFeature extends Feature {\n    constructor(){\n        super(...arguments);\n        this.hasEnteredView = false;\n        this.isInView = false;\n    }\n    startObserver() {\n        this.unmount();\n        const { viewport = {} } = this.node.getProps();\n        const { root, margin: rootMargin, amount = \"some\", once } = viewport;\n        const options = {\n            root: root ? root.current : undefined,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount]\n        };\n        const onIntersectionUpdate = (entry)=>{\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */ if (this.isInView === isIntersecting) return;\n            this.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */ if (once && !isIntersecting && this.hasEnteredView) {\n                return;\n            } else if (isIntersecting) {\n                this.hasEnteredView = true;\n            }\n            if (this.node.animationState) {\n                this.node.animationState.setActive(\"whileInView\", isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */ const { onViewportEnter, onViewportLeave } = this.node.getProps();\n            const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n    mount() {\n        this.startObserver();\n    }\n    update() {\n        if (typeof IntersectionObserver === \"undefined\") return;\n        const { props, prevProps } = this.node;\n        const hasOptionsChanged = [\n            \"amount\",\n            \"margin\",\n            \"root\"\n        ].some(hasViewportOptionChanged(props, prevProps));\n        if (hasOptionsChanged) {\n            this.startObserver();\n        }\n    }\n    unmount() {}\n}\nfunction hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {\n    return (name)=>viewport[name] !== prevViewport[name];\n}\nconst gestureAnimations = {\n    inView: {\n        Feature: InViewFeature\n    },\n    tap: {\n        Feature: PressGesture\n    },\n    focus: {\n        Feature: FocusGesture\n    },\n    hover: {\n        Feature: HoverGesture\n    }\n};\nfunction shallowCompare(next, prev) {\n    if (!Array.isArray(prev)) return false;\n    const prevLength = prev.length;\n    if (prevLength !== next.length) return false;\n    for(let i = 0; i < prevLength; i++){\n        if (prev[i] !== next[i]) return false;\n    }\n    return true;\n}\nfunction animateVariant(visualElement, variant, options = {}) {\n    const resolved = indexLegacy.resolveVariant(visualElement, variant, options.custom);\n    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */ const getAnimation = resolved ? ()=>Promise.all(indexLegacy.animateTarget(visualElement, resolved, options)) : ()=>Promise.resolve();\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */ const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size ? (forwardDelay = 0)=>{\n        const { delayChildren = 0, staggerChildren, staggerDirection } = transition;\n        return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n    } : ()=>Promise.resolve();\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */ const { when } = transition;\n    if (when) {\n        const [first, last] = when === \"beforeChildren\" ? [\n            getAnimation,\n            getChildAnimations\n        ] : [\n            getChildAnimations,\n            getAnimation\n        ];\n        return first().then(()=>last());\n    } else {\n        return Promise.all([\n            getAnimation(),\n            getChildAnimations(options.delay)\n        ]);\n    }\n}\nfunction animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {\n    const animations = [];\n    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n    const generateStaggerDuration = staggerDirection === 1 ? (i = 0)=>i * staggerChildren : (i = 0)=>maxStaggerDuration - i * staggerChildren;\n    Array.from(visualElement.variantChildren).sort(sortByTreeOrder).forEach((child, i)=>{\n        child.notify(\"AnimationStart\", variant);\n        animations.push(animateVariant(child, variant, {\n            ...options,\n            delay: delayChildren + generateStaggerDuration(i)\n        }).then(()=>child.notify(\"AnimationComplete\", variant)));\n    });\n    return Promise.all(animations);\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\nfunction animateVisualElement(visualElement, definition, options = {}) {\n    visualElement.notify(\"AnimationStart\", definition);\n    let animation;\n    if (Array.isArray(definition)) {\n        const animations = definition.map((variant)=>animateVariant(visualElement, variant, options));\n        animation = Promise.all(animations);\n    } else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    } else {\n        const resolvedDefinition = typeof definition === \"function\" ? indexLegacy.resolveVariant(visualElement, definition, options.custom) : definition;\n        animation = Promise.all(indexLegacy.animateTarget(visualElement, resolvedDefinition, options));\n    }\n    return animation.then(()=>visualElement.notify(\"AnimationComplete\", definition));\n}\nconst reversePriorityOrder = [\n    ...indexLegacy.variantPriorityOrder\n].reverse();\nconst numAnimationTypes = indexLegacy.variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return (animations)=>Promise.all(animations.map(({ animation, options })=>animateVisualElement(visualElement, animation, options)));\n}\nfunction createAnimationState(visualElement) {\n    let animate = animateList(visualElement);\n    const state = createState();\n    let isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */ const buildResolvedTypeValues = (acc, definition)=>{\n        const resolved = indexLegacy.resolveVariant(visualElement, definition);\n        if (resolved) {\n            const { transition, transitionEnd, ...target } = resolved;\n            acc = {\n                ...acc,\n                ...target,\n                ...transitionEnd\n            };\n        }\n        return acc;\n    };\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */ function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */ function animateChanges(options, changedActiveType) {\n        const props = visualElement.getProps();\n        const context = visualElement.getVariantContext(true) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */ const animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */ const removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */ let encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */ let removedVariantIndex = Infinity;\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */ for(let i = 0; i < numAnimationTypes; i++){\n            const type = reversePriorityOrder[i];\n            const typeState = state[type];\n            const prop = props[type] !== undefined ? props[type] : context[type];\n            const propIsVariant = indexLegacy.isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */ const activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false) removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */ let isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n            /**\n             *\n             */ if (isInherited && isInitialRender && visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */ typeState.protectedKeys = {\n                ...encounteredKeys\n            };\n            // Check if we can skip analysing this prop early\n            if (// If it isn't active and hasn't *just* been set as inactive\n            !typeState.isActive && activeDelta === null || // If we didn't and don't have any defined prop for this animation type\n            !prop && !typeState.prevProp || // Or if the prop doesn't define an animation\n            indexLegacy.isAnimationControls(prop) || typeof prop === \"boolean\") {\n                continue;\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */ const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            let shouldAnimateType = variantDidChange || // If we're making this variant active, we want to always make it active\n            type === changedActiveType && typeState.isActive && !isInherited && propIsVariant || // If we removed a higher-priority variant (i is in reverse order)\n            i > removedVariantIndex && propIsVariant;\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */ const definitionList = Array.isArray(prop) ? prop : [\n                prop\n            ];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */ let resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n            if (activeDelta === false) resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */ const { prevResolvedValues = {} } = typeState;\n            const allKeys = {\n                ...prevResolvedValues,\n                ...resolvedValues\n            };\n            const markToAnimate = (key)=>{\n                shouldAnimateType = true;\n                removedKeys.delete(key);\n                typeState.needsAnimating[key] = true;\n            };\n            for(const key in allKeys){\n                const next = resolvedValues[key];\n                const prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key)) continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */ if (next !== prev) {\n                    /**\n                     * If both values are keyframes, we need to shallow compare them to\n                     * detect whether any value has changed. If it has, we animate it.\n                     */ if (indexLegacy.isKeyframesTarget(next) && indexLegacy.isKeyframesTarget(prev)) {\n                        if (!shallowCompare(next, prev) || variantDidChange) {\n                            markToAnimate(key);\n                        } else {\n                            /**\n                             * If it hasn't changed, we want to ensure it doesn't animate by\n                             * adding it to the list of protected keys.\n                             */ typeState.protectedKeys[key] = true;\n                        }\n                    } else if (next !== undefined) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    } else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                } else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */ markToAnimate(key);\n                } else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */ typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */ typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */ if (typeState.isActive) {\n                encounteredKeys = {\n                    ...encounteredKeys,\n                    ...resolvedValues\n                };\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to hard-block animations\n             * TODO: Test as this should probably still handle animations triggered\n             * by removed values?\n             */ if (shouldAnimateType && !isInherited) {\n                animations.push(...definitionList.map((animation)=>({\n                        animation: animation,\n                        options: {\n                            type,\n                            ...options\n                        }\n                    })));\n            }\n        }\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */ if (removedKeys.size) {\n            const fallbackAnimation = {};\n            removedKeys.forEach((key)=>{\n                const fallbackTarget = visualElement.getBaseTarget(key);\n                if (fallbackTarget !== undefined) {\n                    fallbackAnimation[key] = fallbackTarget;\n                }\n            });\n            animations.push({\n                animation: fallbackAnimation\n            });\n        }\n        let shouldAnimate = Boolean(animations.length);\n        if (isInitialRender && (props.initial === false || props.initial === props.animate) && !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */ function setActive(type, isActive, options) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive) return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child)=>{\n            var _a;\n            return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive);\n        });\n        state[type].isActive = isActive;\n        const animations = animateChanges(options, type);\n        for(const key in state){\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        animateChanges,\n        setActive,\n        setAnimateFunction,\n        getState: ()=>state\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    } else if (Array.isArray(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive = false) {\n    return {\n        isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {}\n    };\n}\nfunction createState() {\n    return {\n        animate: createTypeState(true),\n        whileInView: createTypeState(),\n        whileHover: createTypeState(),\n        whileTap: createTypeState(),\n        whileDrag: createTypeState(),\n        whileFocus: createTypeState(),\n        exit: createTypeState()\n    };\n}\nclass AnimationFeature extends Feature {\n    /**\n     * We dynamically generate the AnimationState manager as it contains a reference\n     * to the underlying animation library. We only want to load that if we load this,\n     * so people can optionally code split it out using the `m` component.\n     */ constructor(node){\n        super(node);\n        node.animationState || (node.animationState = createAnimationState(node));\n    }\n    updateAnimationControlsSubscription() {\n        const { animate } = this.node.getProps();\n        this.unmount();\n        if (indexLegacy.isAnimationControls(animate)) {\n            this.unmount = animate.subscribe(this.node);\n        }\n    }\n    /**\n     * Subscribe any provided AnimationControls to the component's VisualElement\n     */ mount() {\n        this.updateAnimationControlsSubscription();\n    }\n    update() {\n        const { animate } = this.node.getProps();\n        const { animate: prevAnimate } = this.node.prevProps || {};\n        if (animate !== prevAnimate) {\n            this.updateAnimationControlsSubscription();\n        }\n    }\n    unmount() {}\n}\nlet id$2 = 0;\nclass ExitAnimationFeature extends Feature {\n    constructor(){\n        super(...arguments);\n        this.id = id$2++;\n    }\n    update() {\n        if (!this.node.presenceContext) return;\n        const { isPresent, onExitComplete, custom } = this.node.presenceContext;\n        const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};\n        if (!this.node.animationState || isPresent === prevIsPresent) {\n            return;\n        }\n        const exitAnimation = this.node.animationState.setActive(\"exit\", !isPresent, {\n            custom: custom !== null && custom !== void 0 ? custom : this.node.getProps().custom\n        });\n        if (onExitComplete && !isPresent) {\n            exitAnimation.then(()=>onExitComplete(this.id));\n        }\n    }\n    mount() {\n        const { register } = this.node.presenceContext || {};\n        if (register) {\n            this.unmount = register(this.id);\n        }\n    }\n    unmount() {}\n}\nconst animations = {\n    animation: {\n        Feature: AnimationFeature\n    },\n    exit: {\n        Feature: ExitAnimationFeature\n    }\n};\n/**\n * @internal\n */ class PanSession {\n    constructor(event, handlers, { transformPagePoint, contextWindow } = {}){\n        /**\n         * @internal\n         */ this.startEvent = null;\n        /**\n         * @internal\n         */ this.lastMoveEvent = null;\n        /**\n         * @internal\n         */ this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */ this.handlers = {};\n        /**\n         * @internal\n         */ this.contextWindow = window;\n        this.updatePoint = ()=>{\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo)) return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            const isDistancePastThreshold = indexLegacy.distance2D(info.offset, {\n                x: 0,\n                y: 0\n            }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold) return;\n            const { point } = info;\n            const { timestamp } = indexLegacy.frameData;\n            this.history.push({\n                ...point,\n                timestamp\n            });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info)=>{\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            indexLegacy.frame.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info)=>{\n            this.end();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo)) return;\n            const { onEnd, onSessionEnd } = this.handlers;\n            const panInfo = getPanInfo(event.type === \"pointercancel\" ? this.lastMoveEventInfo : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!isPrimaryPointer(event)) return;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        this.contextWindow = contextWindow || window;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = indexLegacy.frameData;\n        this.history = [\n            {\n                ...point,\n                timestamp\n            }\n        ];\n        const { onSessionStart } = handlers;\n        onSessionStart && onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = indexLegacy.pipe(addPointerEvent(this.contextWindow, \"pointermove\", this.handlePointerMove), addPointerEvent(this.contextWindow, \"pointerup\", this.handlePointerUp), addPointerEvent(this.contextWindow, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        indexLegacy.cancelFrame(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? {\n        point: transformPagePoint(info.point)\n    } : info;\n}\nfunction subtractPoint(a, b) {\n    return {\n        x: a.x - b.x,\n        y: a.y - b.y\n    };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1)\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return {\n            x: 0,\n            y: 0\n        };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while(i >= 0){\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp > indexLegacy.secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return {\n            x: 0,\n            y: 0\n        };\n    }\n    const time = indexLegacy.millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n    if (time === 0) {\n        return {\n            x: 0,\n            y: 0\n        };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target = 0, maxDistance = 0.01) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n    delta.origin = origin;\n    delta.originPoint = indexLegacy.mix(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    if (isNear(delta.scale, 1, 0.0001) || isNaN(delta.scale)) delta.scale = 1;\n    delta.translate = indexLegacy.mix(target.min, target.max, delta.origin) - delta.originPoint;\n    if (isNear(delta.translate) || isNaN(delta.translate)) delta.translate = 0;\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);\n    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */ function applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic ? indexLegacy.mix(min, point, elastic.min) : Math.max(point, min);\n    } else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic ? indexLegacy.mix(max, point, elastic.max) : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */ function calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined ? axis.max + max - (axis.max - axis.min) : undefined\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */ function calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom)\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */ function calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) {\n        [min, max] = [\n            max,\n            min\n        ];\n    }\n    return {\n        min,\n        max\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */ function calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y)\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */ function calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = indexLegacy.progress(target.min, target.max - sourceLength, source.min);\n    } else if (sourceLength > targetLength) {\n        origin = indexLegacy.progress(source.min, source.max - targetLength, target.min);\n    }\n    return indexLegacy.clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */ function rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */ function resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    } else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\")\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel)\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\" ? dragElastic : dragElastic[label] || 0;\n}\nfunction eachAxis(callback) {\n    return [\n        callback(\"x\"),\n        callback(\"y\")\n    ];\n}\n// Fixes https://github.com/framer/motion/issues/2270\nconst getContextWindow = ({ current })=>{\n    return current ? current.ownerDocument.defaultView : null;\n};\nconst elementDragControls = new WeakMap();\n/**\n *\n */ // let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement){\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = {\n            x: 0,\n            y: 0\n        };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */ this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */ this.elastic = indexLegacy.createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */ const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false) return;\n        const onSessionStart = (event)=>{\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event, \"page\").point);\n            }\n        };\n        const onStart = (event, info)=>{\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openGlobalLock) this.openGlobalLock();\n                this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openGlobalLock) return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */ eachAxis((axis)=>{\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */ if (indexLegacy.percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                indexLegacy.frame.update(()=>onDragStart(event, info), false, true);\n            }\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info)=>{\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openGlobalLock) return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */ this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */ onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info)=>this.stop(event, info);\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd\n        }, {\n            transformPagePoint: this.visualElement.getTransformPagePoint(),\n            contextWindow: getContextWindow(this.visualElement)\n        });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging) return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            indexLegacy.frame.update(()=>onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection)) return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        var _a;\n        const { dragConstraints, dragElastic } = this.getProps();\n        const layout = this.visualElement.projection && !this.visualElement.projection.layout ? this.visualElement.projection.measure(false) : (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout;\n        const prevConstraints = this.constraints;\n        if (dragConstraints && indexLegacy.isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        } else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            } else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */ if (prevConstraints !== this.constraints && layout && this.constraints && !this.hasMutatedConstraints) {\n            eachAxis((axis)=>{\n                if (this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !indexLegacy.isRefObject(constraints)) return false;\n        const constraintsElement = constraints.current;\n        indexLegacy.invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout) return false;\n        const constraintsBox = indexLegacy.measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */ if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(indexLegacy.convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = indexLegacy.convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis)=>{\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = constraints && constraints[axis] || {};\n            if (dragSnapToOrigin) transition = {\n                min: 0,\n                max: 0\n            };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */ const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        return axisValue.start(indexLegacy.animateMotionValue(axis, axisValue, 0, transition));\n    }\n    stopAnimation() {\n        eachAxis((axis)=>this.getAxisMotionValue(axis).stop());\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */ getAxisMotionValue(axis) {\n        const dragKey = \"_drag\" + axis.toUpperCase();\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis)=>{\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection)) return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - indexLegacy.mix(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */ scalePositionWithinConstraints() {\n        if (!this.visualElement.current) return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!indexLegacy.isRefObject(dragConstraints) || !projection || !this.constraints) return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */ this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */ const boxProgress = {\n            x: 0,\n            y: 0\n        };\n        eachAxis((axis)=>{\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({\n                    min: latest,\n                    max: latest\n                }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */ const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */ eachAxis((axis)=>{\n            if (!shouldDrag(axis, drag, null)) return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */ const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(indexLegacy.mix(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current) return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */ const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event)=>{\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = ()=>{\n            const { dragConstraints } = this.getProps();\n            if (indexLegacy.isRefObject(dragConstraints)) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        measureDragConstraints();\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */ const stopResizeListener = addDomEvent(window, \"resize\", ()=>this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */ const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged })=>{\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis)=>{\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue) return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        });\n        return ()=>{\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return (drag === true || drag === direction) && (currentDirection === null || currentDirection === direction);\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */ function getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    } else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\nclass DragGesture extends Feature {\n    constructor(node){\n        super(node);\n        this.removeGroupControls = indexLegacy.noop;\n        this.removeListeners = indexLegacy.noop;\n        this.controls = new VisualElementDragControls(node);\n    }\n    mount() {\n        // If we've been provided a DragControls for manual control over the drag gesture,\n        // subscribe this component to it on mount.\n        const { dragControls } = this.node.getProps();\n        if (dragControls) {\n            this.removeGroupControls = dragControls.subscribe(this.controls);\n        }\n        this.removeListeners = this.controls.addListeners() || indexLegacy.noop;\n    }\n    unmount() {\n        this.removeGroupControls();\n        this.removeListeners();\n    }\n}\nconst asyncHandler = (handler)=>(event, info)=>{\n        if (handler) {\n            indexLegacy.frame.update(()=>handler(event, info));\n        }\n    };\nclass PanGesture extends Feature {\n    constructor(){\n        super(...arguments);\n        this.removePointerDownListener = indexLegacy.noop;\n    }\n    onPointerDown(pointerDownEvent) {\n        this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), {\n            transformPagePoint: this.node.getTransformPagePoint(),\n            contextWindow: getContextWindow(this.node)\n        });\n    }\n    createPanHandlers() {\n        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();\n        return {\n            onSessionStart: asyncHandler(onPanSessionStart),\n            onStart: asyncHandler(onPanStart),\n            onMove: onPan,\n            onEnd: (event, info)=>{\n                delete this.session;\n                if (onPanEnd) {\n                    indexLegacy.frame.update(()=>onPanEnd(event, info));\n                }\n            }\n        };\n    }\n    mount() {\n        this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", (event)=>this.onPointerDown(event));\n    }\n    update() {\n        this.session && this.session.updateHandlers(this.createPanHandlers());\n    }\n    unmount() {\n        this.removePointerDownListener();\n        this.session && this.session.end();\n    }\n}\nconst borders = [\n    \"TopLeft\",\n    \"TopRight\",\n    \"BottomLeft\",\n    \"BottomRight\"\n];\nconst numBorders = borders.length;\nconst asNumber = (value)=>typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value)=>typeof value === \"number\" || indexLegacy.px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = indexLegacy.mix(0, // TODO Reinstate this if only child\n        lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));\n        target.opacityExit = indexLegacy.mix(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));\n    } else if (isOnlyMember) {\n        target.opacity = indexLegacy.mix(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);\n    }\n    /**\n     * Mix border radius\n     */ for(let i = 0; i < numBorders; i++){\n        const borderLabel = `border${borders[i]}Radius`;\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined) continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 || leadRadius === 0 || isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max(indexLegacy.mix(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (indexLegacy.percent.test(leadRadius) || indexLegacy.percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        } else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */ if (follow.rotate || lead.rotate) {\n        target.rotate = indexLegacy.mix(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined ? values[radiusName] : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = compress(0, 0.5, indexLegacy.circOut);\nconst easeCrossfadeOut = compress(0.5, 0.95, indexLegacy.noop);\nfunction compress(min, max, easing) {\n    return (p)=>{\n        // Could replace ifs with clamp\n        if (p < min) return 0;\n        if (p > max) return 1;\n        return easing(indexLegacy.progress(min, max, p));\n    };\n}\n/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */ function copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */ function copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */ function removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = indexLegacy.scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = indexLegacy.scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */ function removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (indexLegacy.percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = indexLegacy.mix(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\") return;\n    let originPoint = indexLegacy.mix(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis) originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */ function removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */ const xKeys = [\n    \"x\",\n    \"scaleX\",\n    \"originX\"\n];\nconst yKeys = [\n    \"y\",\n    \"scaleY\",\n    \"originY\"\n];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */ function removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction boxEquals(a, b) {\n    return a.x.min === b.x.min && a.x.max === b.x.max && a.y.min === b.y.min && a.y.max === b.y.max;\n}\nfunction boxEqualsRounded(a, b) {\n    return Math.round(a.x.min) === Math.round(b.x.min) && Math.round(a.x.max) === Math.round(b.x.max) && Math.round(a.y.min) === Math.round(b.y.min) && Math.round(a.y.max) === Math.round(b.y.max);\n}\nfunction aspectRatio(box) {\n    return calcLength(box.x) / calcLength(box.y);\n}\nclass NodeStack {\n    constructor(){\n        this.members = [];\n    }\n    add(node) {\n        indexLegacy.addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        indexLegacy.removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member)=>node === member);\n        if (indexOfNode === 0) return false;\n        /**\n         * Find the next projection node that is present\n         */ let prevLead;\n        for(let i = indexOfNode; i >= 0; i--){\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        } else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead) return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n        /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */ }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node)=>{\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete && resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node)=>{\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */ removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\nfunction buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */ const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    if (xTranslate || yTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */ if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { rotate, rotateX, rotateY } = latestTransform;\n        if (rotate) transform += `rotate(${rotate}deg) `;\n        if (rotateX) transform += `rotateX(${rotateX}deg) `;\n        if (rotateY) transform += `rotateY(${rotateY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */ const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\nconst compareByDepth = (a, b)=>a.depth - b.depth;\nclass FlatTree {\n    constructor(){\n        this.children = [];\n        this.isDirty = false;\n    }\n    add(child) {\n        indexLegacy.addUniqueItem(this.children, child);\n        this.isDirty = true;\n    }\n    remove(child) {\n        indexLegacy.removeItem(this.children, child);\n        this.isDirty = true;\n    }\n    forEach(callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    }\n}\n/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */ const globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */ hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */ hasEverUpdated: false\n};\nfunction record(data) {\n    if (window.MotionDebug) {\n        window.MotionDebug.record(data);\n    }\n}\nconst transformAxes = [\n    \"\",\n    \"X\",\n    \"Y\",\n    \"Z\"\n];\nconst hiddenVisibility = {\n    visibility: \"hidden\"\n};\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */ const animationTarget = 1000;\nlet id$1 = 0;\n/**\n * Use a mutable data object for debug data so as to not create a new\n * object every frame.\n */ const projectionFrameData = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0\n};\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()){\n            /**\n             * A unique ID generated for every projection node.\n             */ this.id = id$1++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */ this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */ this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */ this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */ this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */ this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */ this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */ this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */ this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */ this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */ this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */ this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */ this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */ this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */ this.treeScale = {\n                x: 1,\n                y: 1\n            };\n            /**\n             *\n             */ this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.projectionUpdateScheduled = false;\n            this.checkUpdateFailed = ()=>{\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */ this.updateProjection = ()=>{\n                this.projectionUpdateScheduled = false;\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */ projectionFrameData.totalNodes = projectionFrameData.resolvedTargetDeltas = projectionFrameData.recalculatedProjection = 0;\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                record(projectionFrameData);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */ // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [\n                ...parent.path,\n                parent\n            ] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for(let i = 0; i < this.path.length; i++){\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this) this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new indexLegacy.SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */ mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {\n            if (this.instance) return;\n            this.isSVG = indexLegacy.isSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = ()=>this.root.updateBlockedByResize = false;\n                attachResizeListener(instance, ()=>{\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = indexLegacy.delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout })=>{\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition || visualElement.getDefaultTransition() || defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */ const targetChanged = !this.targetLayout || !boxEqualsRounded(this.targetLayout, newLayout) || hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */ const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot || this.resumeFrom && this.resumeFrom.instance || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !this.currentAnimation)) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...indexLegacy.getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete\n                        };\n                        if (visualElement.shouldReduceMotion || this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    } else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */ if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            indexLegacy.cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || false;\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked()) return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty) return;\n            this.isLayoutDirty = true;\n            for(let i = 0; i < this.path.length; i++){\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout) return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, \"\") : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            this.isUpdating = false;\n            /**\n             * Write\n             */ this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */ // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */ // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */ const now = performance.now();\n            indexLegacy.frameData.delta = indexLegacy.clamp(0, 1000 / 60, now - indexLegacy.frameData.timestamp);\n            indexLegacy.frameData.timestamp = now;\n            indexLegacy.frameData.isProcessing = true;\n            indexLegacy.steps.update.process(indexLegacy.frameData);\n            indexLegacy.steps.preRender.process(indexLegacy.frameData);\n            indexLegacy.steps.render.process(indexLegacy.frameData);\n            indexLegacy.frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                queueMicrotask(()=>this.update());\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            if (!this.projectionUpdateScheduled) {\n                this.projectionUpdateScheduled = true;\n                indexLegacy.frame.preRender(this.updateProjection, false, true);\n            }\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */ indexLegacy.frame.postRender(()=>{\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                } else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */ updateSnapshot() {\n            if (this.snapshot || !this.instance) return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance) return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */ if (this.resumeFrom && !this.resumeFrom.instance) {\n                for(let i = 0; i < this.path.length; i++){\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = indexLegacy.createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement && visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot: checkIsScrollRoot(this.instance),\n                    offset: measureScroll(this.instance)\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform) return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, \"\") : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested && (hasProjection || indexLegacy.hasTransform(this.latestValues) || transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */ if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement) return indexLegacy.createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                indexLegacy.translateAxis(box.x, scroll.offset.x);\n                indexLegacy.translateAxis(box.y, scroll.offset.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = indexLegacy.createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */ for(let i = 0; i < this.path.length; i++){\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */ if (scroll.isRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */ if (rootScroll) {\n                            indexLegacy.translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                            indexLegacy.translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n                        }\n                    }\n                    indexLegacy.translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    indexLegacy.translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = indexLegacy.createBox();\n            copyBoxInto(withTransforms, box);\n            for(let i = 0; i < this.path.length; i++){\n                const node = this.path[i];\n                if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n                    indexLegacy.transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y\n                    });\n                }\n                if (!indexLegacy.hasTransform(node.latestValues)) continue;\n                indexLegacy.transformBox(withTransforms, node.latestValues);\n            }\n            if (indexLegacy.hasTransform(this.latestValues)) {\n                indexLegacy.transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = indexLegacy.createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for(let i = 0; i < this.path.length; i++){\n                const node = this.path[i];\n                if (!node.instance) continue;\n                if (!indexLegacy.hasTransform(node.latestValues)) continue;\n                indexLegacy.hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = indexLegacy.createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (indexLegacy.hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent) return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */ if (this.relativeParent.resolvedRelativeTargetAt !== indexLegacy.frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */ const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */ const canSkip = !(forceRecalculation || isShared && this.isSharedProjectionDirty || this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) || this.attemptToResolveRelativeTarget);\n            if (canSkip) return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */ if (!this.layout || !(layout || layoutId)) return;\n            this.resolvedRelativeTargetAt = indexLegacy.frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */ // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent && relativeParent.layout && this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = indexLegacy.createBox();\n                    this.relativeTargetOrigin = indexLegacy.createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                } else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */ if (!this.relativeTarget && !this.targetDelta) return;\n            /**\n             * Lazy-init target data structure\n             */ if (!this.target) {\n                this.target = indexLegacy.createBox();\n                this.targetWithTransforms = indexLegacy.createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */ if (this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n            /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */ } else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                } else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                indexLegacy.applyBoxDelta(this.target, this.targetDelta);\n            } else {\n                /**\n                 * If no target, use own layout as target\n                 */ copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */ if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent && Boolean(relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !relativeParent.options.layoutScroll && relativeParent.target && this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = indexLegacy.createBox();\n                    this.relativeTargetOrigin = indexLegacy.createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                } else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */ projectionFrameData.resolvedTargetDeltas++;\n        }\n        getClosestProjectingParent() {\n            if (!this.parent || indexLegacy.hasScale(this.parent.latestValues) || indexLegacy.has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            } else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout);\n        }\n        calcProjection() {\n            var _a;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */ if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */ if (isShared && (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */ if (this.resolvedRelativeTargetAt === indexLegacy.frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip) return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */ this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId)) return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */ copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */ const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */ indexLegacy.applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */ if (lead.layout && !lead.target && (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */ if (this.projectionTransform) {\n                    this.projectionDelta = indexLegacy.createDelta();\n                    this.projectionTransform = \"none\";\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta) {\n                this.projectionDelta = indexLegacy.createDelta();\n                this.projectionDeltaWithTransform = indexLegacy.createDelta();\n            }\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */ calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */ projectionFrameData.recalculatedProjection++;\n        }\n        hide() {\n            this.isVisible = false;\n        // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n        // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.scheduleRender && this.options.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot ? snapshot.latestValues : {};\n            const mixedValues = {\n                ...this.latestValues\n            };\n            const targetDelta = indexLegacy.createDelta();\n            if (!this.relativeParent || !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = indexLegacy.createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest)=>{\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget && this.relativeTargetOrigin && this.layout && this.relativeParent && this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */ if (prevRelativeTarget && boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget) prevRelativeTarget = indexLegacy.createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                indexLegacy.cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */ this.pendingAnimation = indexLegacy.frame.update(()=>{\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = indexLegacy.animateSingleValue(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest)=>{\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: ()=>{\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    }\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout) return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */ if (this !== lead && this.layout && layout && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || indexLegacy.createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */ indexLegacy.transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */ calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity ? config.shouldPreserveFollowOpacity(node) : undefined\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId) return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity } = {}) {\n            const stack = this.getStack();\n            if (stack) stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition) this.setOptions({\n                transition\n            });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            } else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement) return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */ const { latestValues } = visualElement;\n            if (latestValues.rotate || latestValues.rotateX || latestValues.rotateY || latestValues.rotateZ) {\n                hasRotate = true;\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate) return;\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for(let i = 0; i < transformAxes.length; i++){\n                const key = \"rotate\" + transformAxes[i];\n                // Record the rotation and then temporarily set it to 0\n                if (latestValues[key]) {\n                    resetValues[key] = latestValues[key];\n                    visualElement.setStaticValue(key, 0);\n                }\n            }\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for(const key in resetValues){\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp) {\n            var _a, _b;\n            if (!this.instance || this.isSVG) return undefined;\n            if (!this.isVisible) {\n                return hiddenVisibility;\n            }\n            const styles = {\n                visibility: \"\"\n            };\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents = resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity = this.latestValues.opacity !== undefined ? this.latestValues.opacity : 1;\n                    emptyStyles.pointerEvents = resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !indexLegacy.hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */ styles.opacity = lead === this ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n            } else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */ styles.opacity = lead === this ? valuesToRender.opacity !== undefined ? valuesToRender.opacity : \"\" : valuesToRender.opacityExit !== undefined ? valuesToRender.opacityExit : 0;\n            }\n            /**\n             * Apply scale correction\n             */ for(const key in indexLegacy.scaleCorrectors){\n                if (valuesToRender[key] === undefined) continue;\n                const { correct, applyTo } = indexLegacy.scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */ const corrected = styles.transform === \"none\" ? valuesToRender[key] : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for(let i = 0; i < num; i++){\n                        styles[applyTo[i]] = corrected;\n                    }\n                } else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */ if (this.options.layoutId) {\n                styles.pointerEvents = lead === this ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\" : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node)=>{\n                var _a;\n                return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n            });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis)=>{\n                const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis)=>{\n                const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */ if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max = node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = indexLegacy.createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = indexLegacy.createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        } else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */ if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = indexLegacy.createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = indexLegacy.createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged\n        });\n    } else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */ node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */ projectionFrameData.totalNodes++;\n    if (!node.parent) return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */ if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */ node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty || node.parent.isProjectionDirty || node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty = node.isSharedProjectionDirty = node.isTransformDirty = false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = indexLegacy.mix(delta.translate, 0, p);\n    output.scale = indexLegacy.mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = indexLegacy.mix(from.min, to.min, p);\n    output.max = indexLegacy.mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [\n        0.4,\n        0,\n        0.1,\n        1\n    ]\n};\nconst userAgentContains = (string)=>typeof navigator !== \"undefined\" && navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */ const roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\") ? Math.round : indexLegacy.noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return animationType === \"position\" || animationType === \"preserve-aspect\" && !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2);\n}\nconst DocumentProjectionNode = createProjectionNode({\n    attachResizeListener: (ref, notify)=>addDomEvent(ref, \"resize\", notify),\n    measureScroll: ()=>({\n            x: document.documentElement.scrollLeft || document.body.scrollLeft,\n            y: document.documentElement.scrollTop || document.body.scrollTop\n        }),\n    checkIsScrollRoot: ()=>true\n});\nconst rootProjectionNode = {\n    current: undefined\n};\nconst HTMLProjectionNode = createProjectionNode({\n    measureScroll: (instance)=>({\n            x: instance.scrollLeft,\n            y: instance.scrollTop\n        }),\n    defaultParent: ()=>{\n        if (!rootProjectionNode.current) {\n            const documentNode = new DocumentProjectionNode({});\n            documentNode.mount(window);\n            documentNode.setOptions({\n                layoutScroll: true\n            });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value)=>{\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance)=>Boolean(window.getComputedStyle(instance).position === \"fixed\")\n});\nconst notify = (node)=>!node.isLayoutDirty && node.willUpdate(false);\nfunction nodeGroup() {\n    const nodes = new Set();\n    const subscriptions = new WeakMap();\n    const dirtyAll = ()=>nodes.forEach(notify);\n    return {\n        add: (node)=>{\n            nodes.add(node);\n            subscriptions.set(node, node.addEventListener(\"willUpdate\", dirtyAll));\n        },\n        remove: (node)=>{\n            nodes.delete(node);\n            const unsubscribe = subscriptions.get(node);\n            if (unsubscribe) {\n                unsubscribe();\n                subscriptions.delete(node);\n            }\n            dirtyAll();\n        },\n        dirty: dirtyAll\n    };\n}\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min) return 0;\n    return pixels / (axis.max - axis.min) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */ const correctBorderRadius = {\n    correct: (latest, node)=>{\n        if (!node.target) return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */ if (typeof latest === \"string\") {\n            if (indexLegacy.px.test(latest)) {\n                latest = parseFloat(latest);\n            } else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */ const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return `${x}% ${y}%`;\n    }\n};\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta })=>{\n        const original = latest;\n        const shadow = indexLegacy.complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5) return original;\n        const template = indexLegacy.complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */ const averageScale = indexLegacy.mix(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\") shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\") shadow[3 + offset] /= averageScale;\n        return template(shadow);\n    }\n};\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */ function usePresence() {\n    const context = React.useContext(PresenceContext);\n    if (context === null) return [\n        true,\n        null\n    ];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    const id = React.useId();\n    React.useEffect(()=>register(id), []);\n    const safeToRemove = ()=>onExitComplete && onExitComplete(id);\n    return !isPresent && onExitComplete ? [\n        false,\n        safeToRemove\n    ] : [\n        true\n    ];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */ function useIsPresent() {\n    return isPresent(React.useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\nclass MeasureLayoutWithContext extends React__default[\"default\"].Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */ componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        indexLegacy.addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group) layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", ()=>{\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: ()=>this.safeToRemove()\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const projection = visualElement.projection;\n        if (!projection) return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */ projection.isPresent = isPresent;\n        if (drag || prevProps.layoutDependency !== layoutDependency || layoutDependency === undefined) {\n            projection.willUpdate();\n        } else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            } else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */ indexLegacy.frame.postRender(()=>{\n                    const stack = projection.getStack();\n                    if (!stack || !stack.members.length) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            queueMicrotask(()=>{\n                if (!projection.currentAnimation && projection.isLead()) {\n                    this.safeToRemove();\n                }\n            });\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup && layoutGroup.group) layoutGroup.group.remove(projection);\n            if (promoteContext && promoteContext.deregister) promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove && safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = React.useContext(LayoutGroupContext);\n    return React__default[\"default\"].createElement(MeasureLayoutWithContext, {\n        ...props,\n        layoutGroup: layoutGroup,\n        switchLayoutGroup: React.useContext(SwitchLayoutGroupContext),\n        isPresent: isPresent,\n        safeToRemove: safeToRemove\n    });\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\"\n        ]\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow\n};\nconst drag = {\n    pan: {\n        Feature: PanGesture\n    },\n    drag: {\n        Feature: DragGesture,\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout\n    }\n};\nconst createDomVisualElement = (Component, options)=>{\n    return isSVGComponent(Component) ? new indexLegacy.SVGVisualElement(options, {\n        enableHardwareAcceleration: false\n    }) : new indexLegacy.HTMLVisualElement(options, {\n        enableHardwareAcceleration: true\n    });\n};\nconst layout = {\n    layout: {\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout\n    }\n};\nconst preloadedFeatures = {\n    ...animations,\n    ...gestureAnimations,\n    ...drag,\n    ...layout\n};\n/**\n * HTML & SVG components, optimised for use with gestures and animation. These can be used as\n * drop-in replacements for any HTML & SVG component, all CSS & SVG properties are supported.\n *\n * @public\n */ const motion = /*@__PURE__*/ createMotionProxy((Component, config)=>createDomMotionConfig(Component, config, preloadedFeatures, createDomVisualElement));\n/**\n * Create a DOM `motion` component with the provided string. This is primarily intended\n * as a full alternative to `motion` for consumers who have to support environments that don't\n * support `Proxy`.\n *\n * ```javascript\n * import { createDomMotionComponent } from \"framer-motion\"\n *\n * const motion = {\n *   div: createDomMotionComponent('div')\n * }\n * ```\n *\n * @public\n */ function createDomMotionComponent(key) {\n    return createMotionComponent(createDomMotionConfig(key, {\n        forwardMotionProps: false\n    }, preloadedFeatures, createDomVisualElement));\n}\n/**\n * @public\n */ const m = createMotionProxy(createDomMotionConfig);\nfunction useIsMounted() {\n    const isMounted = React.useRef(false);\n    useIsomorphicLayoutEffect(()=>{\n        isMounted.current = true;\n        return ()=>{\n            isMounted.current = false;\n        };\n    }, []);\n    return isMounted;\n}\nfunction useForceUpdate() {\n    const isMounted = useIsMounted();\n    const [forcedRenderCount, setForcedRenderCount] = React.useState(0);\n    const forceRender = React.useCallback(()=>{\n        isMounted.current && setForcedRenderCount(forcedRenderCount + 1);\n    }, [\n        forcedRenderCount\n    ]);\n    /**\n     * Defer this to the end of the next animation frame in case there are multiple\n     * synchronous calls.\n     */ const deferredForceRender = React.useCallback(()=>indexLegacy.frame.postRender(forceRender), [\n        forceRender\n    ]);\n    return [\n        deferredForceRender,\n        forcedRenderCount\n    ];\n}\n/**\n * Measurement functionality has to be within a separate component\n * to leverage snapshot lifecycle.\n */ class PopChildMeasure extends React__namespace.Component {\n    getSnapshotBeforeUpdate(prevProps) {\n        const element = this.props.childRef.current;\n        if (element && prevProps.isPresent && !this.props.isPresent) {\n            const size = this.props.sizeRef.current;\n            size.height = element.offsetHeight || 0;\n            size.width = element.offsetWidth || 0;\n            size.top = element.offsetTop;\n            size.left = element.offsetLeft;\n        }\n        return null;\n    }\n    /**\n     * Required with getSnapshotBeforeUpdate to stop React complaining.\n     */ componentDidUpdate() {}\n    render() {\n        return this.props.children;\n    }\n}\nfunction PopChild({ children, isPresent }) {\n    const id = React.useId();\n    const ref = React.useRef(null);\n    const size = React.useRef({\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0\n    });\n    /**\n     * We create and inject a style block so we can apply this explicit\n     * sizing in a non-destructive manner by just deleting the style block.\n     *\n     * We can't apply size via render as the measurement happens\n     * in getSnapshotBeforeUpdate (post-render), likewise if we apply the\n     * styles directly on the DOM node, we might be overwriting\n     * styles set via the style prop.\n     */ React.useInsertionEffect(()=>{\n        const { width, height, top, left } = size.current;\n        if (isPresent || !ref.current || !width || !height) return;\n        ref.current.dataset.motionPopId = id;\n        const style = document.createElement(\"style\");\n        document.head.appendChild(style);\n        if (style.sheet) {\n            style.sheet.insertRule(`\n          [data-motion-pop-id=\"${id}\"] {\n            position: absolute !important;\n            width: ${width}px !important;\n            height: ${height}px !important;\n            top: ${top}px !important;\n            left: ${left}px !important;\n          }\n        `);\n        }\n        return ()=>{\n            document.head.removeChild(style);\n        };\n    }, [\n        isPresent\n    ]);\n    return React__namespace.createElement(PopChildMeasure, {\n        isPresent: isPresent,\n        childRef: ref,\n        sizeRef: size\n    }, React__namespace.cloneElement(children, {\n        ref\n    }));\n}\nconst PresenceChild = ({ children, initial, isPresent, onExitComplete, custom, presenceAffectsLayout, mode })=>{\n    const presenceChildren = useConstant(newChildrenMap);\n    const id = React.useId();\n    const context = React.useMemo(()=>({\n            id,\n            initial,\n            isPresent,\n            custom,\n            onExitComplete: (childId)=>{\n                presenceChildren.set(childId, true);\n                for (const isComplete of presenceChildren.values()){\n                    if (!isComplete) return; // can stop searching when any is incomplete\n                }\n                onExitComplete && onExitComplete();\n            },\n            register: (childId)=>{\n                presenceChildren.set(childId, false);\n                return ()=>presenceChildren.delete(childId);\n            }\n        }), /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */ presenceAffectsLayout ? undefined : [\n        isPresent\n    ]);\n    React.useMemo(()=>{\n        presenceChildren.forEach((_, key)=>presenceChildren.set(key, false));\n    }, [\n        isPresent\n    ]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */ React__namespace.useEffect(()=>{\n        !isPresent && !presenceChildren.size && onExitComplete && onExitComplete();\n    }, [\n        isPresent\n    ]);\n    if (mode === \"popLayout\") {\n        children = React__namespace.createElement(PopChild, {\n            isPresent: isPresent\n        }, children);\n    }\n    return React__namespace.createElement(PresenceContext.Provider, {\n        value: context\n    }, children);\n};\nfunction newChildrenMap() {\n    return new Map();\n}\nfunction useUnmountEffect(callback) {\n    return React.useEffect(()=>()=>callback(), []);\n}\nconst getChildKey = (child)=>child.key || \"\";\nfunction updateChildLookup(children, allChildren) {\n    children.forEach((child)=>{\n        const key = getChildKey(child);\n        allChildren.set(key, child);\n    });\n}\nfunction onlyElements(children) {\n    const filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    React.Children.forEach(children, (child)=>{\n        if (React.isValidElement(child)) filtered.push(child);\n    });\n    return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */ const AnimatePresence = ({ children, custom, initial = true, onExitComplete, exitBeforeEnter, presenceAffectsLayout = true, mode = \"sync\" })=>{\n    indexLegacy.invariant(!exitBeforeEnter, \"Replace exitBeforeEnter with mode='wait'\");\n    // We want to force a re-render once all exiting animations have finished. We\n    // either use a local forceRender function, or one from a parent context if it exists.\n    const forceRender = React.useContext(LayoutGroupContext).forceRender || useForceUpdate()[0];\n    const isMounted = useIsMounted();\n    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n    const filteredChildren = onlyElements(children);\n    let childrenToRender = filteredChildren;\n    const exitingChildren = React.useRef(new Map()).current;\n    // Keep a living record of the children we're actually rendering so we\n    // can diff to figure out which are entering and exiting\n    const presentChildren = React.useRef(childrenToRender);\n    // A lookup table to quickly reference components by key\n    const allChildren = React.useRef(new Map()).current;\n    // If this is the initial component render, just deal with logic surrounding whether\n    // we play onMount animations or not.\n    const isInitialRender = React.useRef(true);\n    useIsomorphicLayoutEffect(()=>{\n        isInitialRender.current = false;\n        updateChildLookup(filteredChildren, allChildren);\n        presentChildren.current = childrenToRender;\n    });\n    useUnmountEffect(()=>{\n        isInitialRender.current = true;\n        allChildren.clear();\n        exitingChildren.clear();\n    });\n    if (isInitialRender.current) {\n        return React__namespace.createElement(React__namespace.Fragment, null, childrenToRender.map((child)=>React__namespace.createElement(PresenceChild, {\n                key: getChildKey(child),\n                isPresent: true,\n                initial: initial ? undefined : false,\n                presenceAffectsLayout: presenceAffectsLayout,\n                mode: mode\n            }, child)));\n    }\n    // If this is a subsequent render, deal with entering and exiting children\n    childrenToRender = [\n        ...childrenToRender\n    ];\n    // Diff the keys of the currently-present and target children to update our\n    // exiting list.\n    const presentKeys = presentChildren.current.map(getChildKey);\n    const targetKeys = filteredChildren.map(getChildKey);\n    // Diff the present children with our target children and mark those that are exiting\n    const numPresent = presentKeys.length;\n    for(let i = 0; i < numPresent; i++){\n        const key = presentKeys[i];\n        if (targetKeys.indexOf(key) === -1 && !exitingChildren.has(key)) {\n            exitingChildren.set(key, undefined);\n        }\n    }\n    // If we currently have exiting children, and we're deferring rendering incoming children\n    // until after all current children have exiting, empty the childrenToRender array\n    if (mode === \"wait\" && exitingChildren.size) {\n        childrenToRender = [];\n    }\n    // Loop through all currently exiting components and clone them to overwrite `animate`\n    // with any `exit` prop they might have defined.\n    exitingChildren.forEach((component, key)=>{\n        // If this component is actually entering again, early return\n        if (targetKeys.indexOf(key) !== -1) return;\n        const child = allChildren.get(key);\n        if (!child) return;\n        const insertionIndex = presentKeys.indexOf(key);\n        let exitingComponent = component;\n        if (!exitingComponent) {\n            const onExit = ()=>{\n                // clean up the exiting children map\n                exitingChildren.delete(key);\n                // compute the keys of children that were rendered once but are no longer present\n                // this could happen in case of too many fast consequent renderings\n                // @link https://github.com/framer/motion/issues/2023\n                const leftOverKeys = Array.from(allChildren.keys()).filter((childKey)=>!targetKeys.includes(childKey));\n                // clean up the all children map\n                leftOverKeys.forEach((leftOverKey)=>allChildren.delete(leftOverKey));\n                // make sure to render only the children that are actually visible\n                presentChildren.current = filteredChildren.filter((presentChild)=>{\n                    const presentChildKey = getChildKey(presentChild);\n                    return(// filter out the node exiting\n                    presentChildKey === key || // filter out the leftover children\n                    leftOverKeys.includes(presentChildKey));\n                });\n                // Defer re-rendering until all exiting children have indeed left\n                if (!exitingChildren.size) {\n                    if (isMounted.current === false) return;\n                    forceRender();\n                    onExitComplete && onExitComplete();\n                }\n            };\n            exitingComponent = React__namespace.createElement(PresenceChild, {\n                key: getChildKey(child),\n                isPresent: false,\n                onExitComplete: onExit,\n                custom: custom,\n                presenceAffectsLayout: presenceAffectsLayout,\n                mode: mode\n            }, child);\n            exitingChildren.set(key, exitingComponent);\n        }\n        childrenToRender.splice(insertionIndex, 0, exitingComponent);\n    });\n    // Add `MotionContext` even to children that don't need it to ensure we're rendering\n    // the same tree between renders\n    childrenToRender = childrenToRender.map((child)=>{\n        const key = child.key;\n        return exitingChildren.has(key) ? child : React__namespace.createElement(PresenceChild, {\n            key: getChildKey(child),\n            isPresent: true,\n            presenceAffectsLayout: presenceAffectsLayout,\n            mode: mode\n        }, child);\n    });\n    if ( true && mode === \"wait\" && childrenToRender.length > 1) {\n        console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n    }\n    return React__namespace.createElement(React__namespace.Fragment, null, exitingChildren.size ? childrenToRender : childrenToRender.map((child)=>React.cloneElement(child)));\n};\n/**\n * `MotionConfig` is used to set configuration options for all children `motion` components.\n *\n * ```jsx\n * import { motion, MotionConfig } from \"framer-motion\"\n *\n * export function App() {\n *   return (\n *     <MotionConfig transition={{ type: \"spring\" }}>\n *       <motion.div animate={{ x: 100 }} />\n *     </MotionConfig>\n *   )\n * }\n * ```\n *\n * @public\n */ function MotionConfig({ children, isValidProp, ...config }) {\n    isValidProp && loadExternalIsValidProp(isValidProp);\n    /**\n     * Inherit props from any parent MotionConfig components\n     */ config = {\n        ...React.useContext(MotionConfigContext),\n        ...config\n    };\n    /**\n     * Don't allow isStatic to change between renders as it affects how many hooks\n     * motion components fire.\n     */ config.isStatic = useConstant(()=>config.isStatic);\n    /**\n     * Creating a new config context object will re-render every `motion` component\n     * every time it renders. So we only want to create a new one sparingly.\n     */ const context = React.useMemo(()=>config, [\n        JSON.stringify(config.transition),\n        config.transformPagePoint,\n        config.reducedMotion\n    ]);\n    return React__namespace.createElement(MotionConfigContext.Provider, {\n        value: context\n    }, children);\n}\n/**\n * Used in conjunction with the `m` component to reduce bundle size.\n *\n * `m` is a version of the `motion` component that only loads functionality\n * critical for the initial render.\n *\n * `LazyMotion` can then be used to either synchronously or asynchronously\n * load animation and gesture support.\n *\n * ```jsx\n * // Synchronous loading\n * import { LazyMotion, m, domAnimation } from \"framer-motion\"\n *\n * function App() {\n *   return (\n *     <LazyMotion features={domAnimation}>\n *       <m.div animate={{ scale: 2 }} />\n *     </LazyMotion>\n *   )\n * }\n *\n * // Asynchronous loading\n * import { LazyMotion, m } from \"framer-motion\"\n *\n * function App() {\n *   return (\n *     <LazyMotion features={() => import('./path/to/domAnimation')}>\n *       <m.div animate={{ scale: 2 }} />\n *     </LazyMotion>\n *   )\n * }\n * ```\n *\n * @public\n */ function LazyMotion({ children, features, strict = false }) {\n    const [, setIsLoaded] = React.useState(!isLazyBundle(features));\n    const loadedRenderer = React.useRef(undefined);\n    /**\n     * If this is a synchronous load, load features immediately\n     */ if (!isLazyBundle(features)) {\n        const { renderer, ...loadedFeatures } = features;\n        loadedRenderer.current = renderer;\n        loadFeatures(loadedFeatures);\n    }\n    React.useEffect(()=>{\n        if (isLazyBundle(features)) {\n            features().then(({ renderer, ...loadedFeatures })=>{\n                loadFeatures(loadedFeatures);\n                loadedRenderer.current = renderer;\n                setIsLoaded(true);\n            });\n        }\n    }, []);\n    return React__namespace.createElement(LazyContext.Provider, {\n        value: {\n            renderer: loadedRenderer.current,\n            strict\n        }\n    }, children);\n}\nfunction isLazyBundle(features) {\n    return typeof features === \"function\";\n}\n/**\n * Note: Still used by components generated by old versions of Framer\n *\n * @deprecated\n */ const DeprecatedLayoutGroupContext = React.createContext(null);\nconst shouldInheritGroup = (inherit)=>inherit === true;\nconst shouldInheritId = (inherit)=>shouldInheritGroup(inherit === true) || inherit === \"id\";\nconst LayoutGroup = ({ children, id, inherit = true })=>{\n    const layoutGroupContext = React.useContext(LayoutGroupContext);\n    const deprecatedLayoutGroupContext = React.useContext(DeprecatedLayoutGroupContext);\n    const [forceRender, key] = useForceUpdate();\n    const context = React.useRef(null);\n    const upstreamId = layoutGroupContext.id || deprecatedLayoutGroupContext;\n    if (context.current === null) {\n        if (shouldInheritId(inherit) && upstreamId) {\n            id = id ? upstreamId + \"-\" + id : upstreamId;\n        }\n        context.current = {\n            id,\n            group: shouldInheritGroup(inherit) ? layoutGroupContext.group || nodeGroup() : nodeGroup()\n        };\n    }\n    const memoizedContext = React.useMemo(()=>({\n            ...context.current,\n            forceRender\n        }), [\n        key\n    ]);\n    return React__namespace.createElement(LayoutGroupContext.Provider, {\n        value: memoizedContext\n    }, children);\n};\nconst ReorderContext = React.createContext(null);\nfunction checkReorder(order, value, offset, velocity) {\n    if (!velocity) return order;\n    const index = order.findIndex((item)=>item.value === value);\n    if (index === -1) return order;\n    const nextOffset = velocity > 0 ? 1 : -1;\n    const nextItem = order[index + nextOffset];\n    if (!nextItem) return order;\n    const item = order[index];\n    const nextLayout = nextItem.layout;\n    const nextItemCenter = indexLegacy.mix(nextLayout.min, nextLayout.max, 0.5);\n    if (nextOffset === 1 && item.layout.max + offset > nextItemCenter || nextOffset === -1 && item.layout.min + offset < nextItemCenter) {\n        return indexLegacy.moveItem(order, index, index + nextOffset);\n    }\n    return order;\n}\nfunction ReorderGroup({ children, as = \"ul\", axis = \"y\", onReorder, values, ...props }, externalRef) {\n    const Component = useConstant(()=>motion(as));\n    const order = [];\n    const isReordering = React.useRef(false);\n    indexLegacy.invariant(Boolean(values), \"Reorder.Group must be provided a values prop\");\n    const context = {\n        axis,\n        registerItem: (value, layout)=>{\n            // If the entry was already added, update it rather than adding it again\n            const idx = order.findIndex((entry)=>value === entry.value);\n            if (idx !== -1) {\n                order[idx].layout = layout[axis];\n            } else {\n                order.push({\n                    value: value,\n                    layout: layout[axis]\n                });\n            }\n            order.sort(compareMin);\n        },\n        updateOrder: (item, offset, velocity)=>{\n            if (isReordering.current) return;\n            const newOrder = checkReorder(order, item, offset, velocity);\n            if (order !== newOrder) {\n                isReordering.current = true;\n                onReorder(newOrder.map(getValue).filter((value)=>values.indexOf(value) !== -1));\n            }\n        }\n    };\n    React.useEffect(()=>{\n        isReordering.current = false;\n    });\n    return React__namespace.createElement(Component, {\n        ...props,\n        ref: externalRef,\n        ignoreStrict: true\n    }, React__namespace.createElement(ReorderContext.Provider, {\n        value: context\n    }, children));\n}\nconst Group = React.forwardRef(ReorderGroup);\nfunction getValue(item) {\n    return item.value;\n}\nfunction compareMin(a, b) {\n    return a.layout.min - b.layout.min;\n}\n/**\n * Creates a `MotionValue` to track the state and velocity of a value.\n *\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const scale = useMotionValue(1)\n *\n *   return <motion.div style={{ scale }} />\n * }\n * ```\n *\n * @param initial - The initial state.\n *\n * @public\n */ function useMotionValue(initial) {\n    const value = useConstant(()=>indexLegacy.motionValue(initial));\n    /**\n     * If this motion value is being used in static mode, like on\n     * the Framer canvas, force components to rerender when the motion\n     * value is updated.\n     */ const { isStatic } = React.useContext(MotionConfigContext);\n    if (isStatic) {\n        const [, setLatest] = React.useState(initial);\n        React.useEffect(()=>value.on(\"change\", setLatest), []);\n    }\n    return value;\n}\nfunction useCombineMotionValues(values, combineValues) {\n    /**\n     * Initialise the returned motion value. This remains the same between renders.\n     */ const value = useMotionValue(combineValues());\n    /**\n     * Create a function that will update the template motion value with the latest values.\n     * This is pre-bound so whenever a motion value updates it can schedule its\n     * execution in Framesync. If it's already been scheduled it won't be fired twice\n     * in a single frame.\n     */ const updateValue = ()=>value.set(combineValues());\n    /**\n     * Synchronously update the motion value with the latest values during the render.\n     * This ensures that within a React render, the styles applied to the DOM are up-to-date.\n     */ updateValue();\n    /**\n     * Subscribe to all motion values found within the template. Whenever any of them change,\n     * schedule an update.\n     */ useIsomorphicLayoutEffect(()=>{\n        const scheduleUpdate = ()=>indexLegacy.frame.update(updateValue, false, true);\n        const subscriptions = values.map((v)=>v.on(\"change\", scheduleUpdate));\n        return ()=>{\n            subscriptions.forEach((unsubscribe)=>unsubscribe());\n            indexLegacy.cancelFrame(updateValue);\n        };\n    });\n    return value;\n}\nfunction useComputed(compute) {\n    /**\n     * Open session of collectMotionValues. Any MotionValue that calls get()\n     * will be saved into this array.\n     */ indexLegacy.collectMotionValues.current = [];\n    compute();\n    const value = useCombineMotionValues(indexLegacy.collectMotionValues.current, compute);\n    /**\n     * Synchronously close session of collectMotionValues.\n     */ indexLegacy.collectMotionValues.current = undefined;\n    return value;\n}\nfunction useTransform(input, inputRangeOrTransformer, outputRange, options) {\n    if (typeof input === \"function\") {\n        return useComputed(input);\n    }\n    const transformer = typeof inputRangeOrTransformer === \"function\" ? inputRangeOrTransformer : indexLegacy.transform(inputRangeOrTransformer, outputRange, options);\n    return Array.isArray(input) ? useListTransform(input, transformer) : useListTransform([\n        input\n    ], ([latest])=>transformer(latest));\n}\nfunction useListTransform(values, transformer) {\n    const latest = useConstant(()=>[]);\n    return useCombineMotionValues(values, ()=>{\n        latest.length = 0;\n        const numValues = values.length;\n        for(let i = 0; i < numValues; i++){\n            latest[i] = values[i].get();\n        }\n        return transformer(latest);\n    });\n}\nfunction useDefaultMotionValue(value, defaultValue = 0) {\n    return indexLegacy.isMotionValue(value) ? value : useMotionValue(defaultValue);\n}\nfunction ReorderItem({ children, style = {}, value, as = \"li\", onDrag, layout = true, ...props }, externalRef) {\n    const Component = useConstant(()=>motion(as));\n    const context = React.useContext(ReorderContext);\n    const point = {\n        x: useDefaultMotionValue(style.x),\n        y: useDefaultMotionValue(style.y)\n    };\n    const zIndex = useTransform([\n        point.x,\n        point.y\n    ], ([latestX, latestY])=>latestX || latestY ? 1 : \"unset\");\n    indexLegacy.invariant(Boolean(context), \"Reorder.Item must be a child of Reorder.Group\");\n    const { axis, registerItem, updateOrder } = context;\n    return React__namespace.createElement(Component, {\n        drag: axis,\n        ...props,\n        dragSnapToOrigin: true,\n        style: {\n            ...style,\n            x: point.x,\n            y: point.y,\n            zIndex\n        },\n        layout: layout,\n        onDrag: (event, gesturePoint)=>{\n            const { velocity } = gesturePoint;\n            velocity[axis] && updateOrder(value, point[axis].get(), velocity[axis]);\n            onDrag && onDrag(event, gesturePoint);\n        },\n        onLayoutMeasure: (measured)=>registerItem(value, measured),\n        ref: externalRef,\n        ignoreStrict: true\n    }, children);\n}\nconst Item = React.forwardRef(ReorderItem);\nconst Reorder = {\n    Group,\n    Item\n};\n/**\n * @public\n */ const domAnimation = {\n    renderer: createDomVisualElement,\n    ...animations,\n    ...gestureAnimations\n};\n/**\n * @public\n */ const domMax = {\n    ...domAnimation,\n    ...drag,\n    ...layout\n};\n/**\n * Combine multiple motion values into a new one using a string template literal.\n *\n * ```jsx\n * import {\n *   motion,\n *   useSpring,\n *   useMotionValue,\n *   useMotionTemplate\n * } from \"framer-motion\"\n *\n * function Component() {\n *   const shadowX = useSpring(0)\n *   const shadowY = useMotionValue(0)\n *   const shadow = useMotionTemplate`drop-shadow(${shadowX}px ${shadowY}px 20px rgba(0,0,0,0.3))`\n *\n *   return <motion.div style={{ filter: shadow }} />\n * }\n * ```\n *\n * @public\n */ function useMotionTemplate(fragments, ...values) {\n    /**\n     * Create a function that will build a string from the latest motion values.\n     */ const numFragments = fragments.length;\n    function buildValue() {\n        let output = ``;\n        for(let i = 0; i < numFragments; i++){\n            output += fragments[i];\n            const value = values[i];\n            if (value) {\n                output += indexLegacy.isMotionValue(value) ? value.get() : value;\n            }\n        }\n        return output;\n    }\n    return useCombineMotionValues(values.filter(indexLegacy.isMotionValue), buildValue);\n}\n/**\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\n *\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\n * to another `MotionValue`.\n *\n * @remarks\n *\n * ```jsx\n * const x = useSpring(0, { stiffness: 300 })\n * const y = useSpring(x, { damping: 10 })\n * ```\n *\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\n * @param springConfig - Configuration options for the spring.\n * @returns `MotionValue`\n *\n * @public\n */ function useSpring(source, config = {}) {\n    const { isStatic } = React.useContext(MotionConfigContext);\n    const activeSpringAnimation = React.useRef(null);\n    const value = useMotionValue(indexLegacy.isMotionValue(source) ? source.get() : source);\n    const stopAnimation = ()=>{\n        if (activeSpringAnimation.current) {\n            activeSpringAnimation.current.stop();\n        }\n    };\n    React.useInsertionEffect(()=>{\n        return value.attach((v, set)=>{\n            /**\n             * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\n             * at that level, but this will work for now\n             */ if (isStatic) return set(v);\n            stopAnimation();\n            activeSpringAnimation.current = indexLegacy.animateValue({\n                keyframes: [\n                    value.get(),\n                    v\n                ],\n                velocity: value.getVelocity(),\n                type: \"spring\",\n                restDelta: 0.001,\n                restSpeed: 0.01,\n                ...config,\n                onUpdate: set\n            });\n            /**\n             * If we're between frames, resync the animation to the frameloop.\n             */ if (!indexLegacy.frameData.isProcessing) {\n                const delta = performance.now() - indexLegacy.frameData.timestamp;\n                if (delta < 30) {\n                    activeSpringAnimation.current.time = indexLegacy.millisecondsToSeconds(delta);\n                }\n            }\n            return value.get();\n        }, stopAnimation);\n    }, [\n        JSON.stringify(config)\n    ]);\n    useIsomorphicLayoutEffect(()=>{\n        if (indexLegacy.isMotionValue(source)) {\n            return source.on(\"change\", (v)=>value.set(parseFloat(v)));\n        }\n    }, [\n        value\n    ]);\n    return value;\n}\nfunction useMotionValueEvent(value, event, callback) {\n    /**\n     * useInsertionEffect will create subscriptions before any other\n     * effects will run. Effects run upwards through the tree so it\n     * can be that binding a useLayoutEffect higher up the tree can\n     * miss changes from lower down the tree.\n     */ React.useInsertionEffect(()=>value.on(event, callback), [\n        value,\n        event,\n        callback\n    ]);\n}\n/**\n * Creates a `MotionValue` that updates when the velocity of the provided `MotionValue` changes.\n *\n * ```javascript\n * const x = useMotionValue(0)\n * const xVelocity = useVelocity(x)\n * const xAcceleration = useVelocity(xVelocity)\n * ```\n *\n * @public\n */ function useVelocity(value) {\n    const velocity = useMotionValue(value.getVelocity());\n    useMotionValueEvent(value, \"velocityChange\", (newVelocity)=>{\n        velocity.set(newVelocity);\n    });\n    return velocity;\n}\nfunction refWarning(name, ref) {\n    indexLegacy.warning(Boolean(!ref || ref.current), `You have defined a ${name} options but the provided ref is not yet hydrated, probably because it's defined higher up the tree. Try calling useScroll() in the same component as the ref, or setting its \\`layoutEffect: false\\` option.`);\n}\nconst createScrollMotionValues = ()=>({\n        scrollX: indexLegacy.motionValue(0),\n        scrollY: indexLegacy.motionValue(0),\n        scrollXProgress: indexLegacy.motionValue(0),\n        scrollYProgress: indexLegacy.motionValue(0)\n    });\nfunction useScroll({ container, target, layoutEffect = true, ...options } = {}) {\n    const values = useConstant(createScrollMotionValues);\n    const useLifecycleEffect = layoutEffect ? useIsomorphicLayoutEffect : React.useEffect;\n    useLifecycleEffect(()=>{\n        refWarning(\"target\", target);\n        refWarning(\"container\", container);\n        return indexLegacy.scrollInfo(({ x, y })=>{\n            values.scrollX.set(x.current);\n            values.scrollXProgress.set(x.progress);\n            values.scrollY.set(y.current);\n            values.scrollYProgress.set(y.progress);\n        }, {\n            ...options,\n            container: (container === null || container === void 0 ? void 0 : container.current) || undefined,\n            target: (target === null || target === void 0 ? void 0 : target.current) || undefined\n        });\n    }, [\n        container,\n        target,\n        JSON.stringify(options.offset)\n    ]);\n    return values;\n}\n/**\n * @deprecated useElementScroll is deprecated. Convert to useScroll({ container: ref })\n */ function useElementScroll(ref) {\n    if (true) {\n        indexLegacy.warnOnce(false, \"useElementScroll is deprecated. Convert to useScroll({ container: ref }).\");\n    }\n    return useScroll({\n        container: ref\n    });\n}\n/**\n * @deprecated useViewportScroll is deprecated. Convert to useScroll()\n */ function useViewportScroll() {\n    if (true) {\n        indexLegacy.warnOnce(false, \"useViewportScroll is deprecated. Convert to useScroll().\");\n    }\n    return useScroll();\n}\nfunction useAnimationFrame(callback) {\n    const initialTimestamp = React.useRef(0);\n    const { isStatic } = React.useContext(MotionConfigContext);\n    React.useEffect(()=>{\n        if (isStatic) return;\n        const provideTimeSinceStart = ({ timestamp, delta })=>{\n            if (!initialTimestamp.current) initialTimestamp.current = timestamp;\n            callback(timestamp - initialTimestamp.current, delta);\n        };\n        indexLegacy.frame.update(provideTimeSinceStart, true);\n        return ()=>indexLegacy.cancelFrame(provideTimeSinceStart);\n    }, [\n        callback\n    ]);\n}\nfunction useTime() {\n    const time = useMotionValue(0);\n    useAnimationFrame((t)=>time.set(t));\n    return time;\n}\nclass WillChangeMotionValue extends indexLegacy.MotionValue {\n    constructor(){\n        super(...arguments);\n        this.members = [];\n        this.transforms = new Set();\n    }\n    add(name) {\n        let memberName;\n        if (indexLegacy.transformProps.has(name)) {\n            this.transforms.add(name);\n            memberName = \"transform\";\n        } else if (!name.startsWith(\"origin\") && !indexLegacy.isCSSVariableName(name) && name !== \"willChange\") {\n            memberName = indexLegacy.camelToDash(name);\n        }\n        if (memberName) {\n            indexLegacy.addUniqueItem(this.members, memberName);\n            this.update();\n        }\n    }\n    remove(name) {\n        if (indexLegacy.transformProps.has(name)) {\n            this.transforms.delete(name);\n            if (!this.transforms.size) {\n                indexLegacy.removeItem(this.members, \"transform\");\n            }\n        } else {\n            indexLegacy.removeItem(this.members, indexLegacy.camelToDash(name));\n        }\n        this.update();\n    }\n    update() {\n        this.set(this.members.length ? this.members.join(\", \") : \"auto\");\n    }\n}\nfunction useWillChange() {\n    return useConstant(()=>new WillChangeMotionValue(\"auto\"));\n}\n/**\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\n *\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\n *\n * It will actively respond to changes and re-render your components with the latest setting.\n *\n * ```jsx\n * export function Sidebar({ isOpen }) {\n *   const shouldReduceMotion = useReducedMotion()\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\n *\n *   return (\n *     <motion.div animate={{\n *       opacity: isOpen ? 1 : 0,\n *       x: isOpen ? 0 : closedX\n *     }} />\n *   )\n * }\n * ```\n *\n * @return boolean\n *\n * @public\n */ function useReducedMotion() {\n    /**\n     * Lazy initialisation of prefersReducedMotion\n     */ !indexLegacy.hasReducedMotionListener.current && indexLegacy.initPrefersReducedMotion();\n    const [shouldReduceMotion] = React.useState(indexLegacy.prefersReducedMotion.current);\n    if (true) {\n        indexLegacy.warnOnce(shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n    }\n    /**\n     * TODO See if people miss automatically updating shouldReduceMotion setting\n     */ return shouldReduceMotion;\n}\nfunction useReducedMotionConfig() {\n    const reducedMotionPreference = useReducedMotion();\n    const { reducedMotion } = React.useContext(MotionConfigContext);\n    if (reducedMotion === \"never\") {\n        return false;\n    } else if (reducedMotion === \"always\") {\n        return true;\n    } else {\n        return reducedMotionPreference;\n    }\n}\nfunction stopAnimation(visualElement) {\n    visualElement.values.forEach((value)=>value.stop());\n}\n/**\n * @public\n */ function animationControls() {\n    /**\n     * Track whether the host component has mounted.\n     */ let hasMounted = false;\n    /**\n     * A collection of linked component animation controls.\n     */ const subscribers = new Set();\n    const controls = {\n        subscribe (visualElement) {\n            subscribers.add(visualElement);\n            return ()=>void subscribers.delete(visualElement);\n        },\n        start (definition, transitionOverride) {\n            indexLegacy.invariant(hasMounted, \"controls.start() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            const animations = [];\n            subscribers.forEach((visualElement)=>{\n                animations.push(animateVisualElement(visualElement, definition, {\n                    transitionOverride\n                }));\n            });\n            return Promise.all(animations);\n        },\n        set (definition) {\n            indexLegacy.invariant(hasMounted, \"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            return subscribers.forEach((visualElement)=>{\n                indexLegacy.setValues(visualElement, definition);\n            });\n        },\n        stop () {\n            subscribers.forEach((visualElement)=>{\n                stopAnimation(visualElement);\n            });\n        },\n        mount () {\n            hasMounted = true;\n            return ()=>{\n                hasMounted = false;\n                controls.stop();\n            };\n        }\n    };\n    return controls;\n}\nfunction useAnimate() {\n    const scope = useConstant(()=>({\n            current: null,\n            animations: []\n        }));\n    const animate = useConstant(()=>indexLegacy.createScopedAnimate(scope));\n    useUnmountEffect(()=>{\n        scope.animations.forEach((animation)=>animation.stop());\n    });\n    return [\n        scope,\n        animate\n    ];\n}\n/**\n * Creates `AnimationControls`, which can be used to manually start, stop\n * and sequence animations on one or more components.\n *\n * The returned `AnimationControls` should be passed to the `animate` property\n * of the components you want to animate.\n *\n * These components can then be animated with the `start` method.\n *\n * ```jsx\n * import * as React from 'react'\n * import { motion, useAnimation } from 'framer-motion'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <motion.div animate={controls} />\n * }\n * ```\n *\n * @returns Animation controller with `start` and `stop` methods\n *\n * @public\n */ function useAnimationControls() {\n    const controls = useConstant(animationControls);\n    useIsomorphicLayoutEffect(controls.mount, []);\n    return controls;\n}\nconst useAnimation = useAnimationControls;\n/**\n * Cycles through a series of visual properties. Can be used to toggle between or cycle through animations. It works similar to `useState` in React. It is provided an initial array of possible states, and returns an array of two arguments.\n *\n * An index value can be passed to the returned `cycle` function to cycle to a specific index.\n *\n * ```jsx\n * import * as React from \"react\"\n * import { motion, useCycle } from \"framer-motion\"\n *\n * export const MyComponent = () => {\n *   const [x, cycleX] = useCycle(0, 50, 100)\n *\n *   return (\n *     <motion.div\n *       animate={{ x: x }}\n *       onTap={() => cycleX()}\n *      />\n *    )\n * }\n * ```\n *\n * @param items - items to cycle through\n * @returns [currentState, cycleState]\n *\n * @public\n */ function useCycle(...items) {\n    const index = React.useRef(0);\n    const [item, setItem] = React.useState(items[index.current]);\n    const runCycle = React.useCallback((next)=>{\n        index.current = typeof next !== \"number\" ? indexLegacy.wrap(0, items.length, index.current + 1) : next;\n        setItem(items[index.current]);\n    }, // The array will change on each call, but by putting items.length at\n    // the front of this array, we guarantee the dependency comparison will match up\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        items.length,\n        ...items\n    ]);\n    return [\n        item,\n        runCycle\n    ];\n}\nfunction useInView(ref, { root, margin, amount, once = false } = {}) {\n    const [isInView, setInView] = React.useState(false);\n    React.useEffect(()=>{\n        if (!ref.current || once && isInView) return;\n        const onEnter = ()=>{\n            setInView(true);\n            return once ? undefined : ()=>setInView(false);\n        };\n        const options = {\n            root: root && root.current || undefined,\n            margin,\n            amount\n        };\n        return indexLegacy.inView(ref.current, onEnter, options);\n    }, [\n        root,\n        ref,\n        margin,\n        once\n    ]);\n    return isInView;\n}\n/**\n * Can manually trigger a drag gesture on one or more `drag`-enabled `motion` components.\n *\n * ```jsx\n * const dragControls = useDragControls()\n *\n * function startDrag(event) {\n *   dragControls.start(event, { snapToCursor: true })\n * }\n *\n * return (\n *   <>\n *     <div onPointerDown={startDrag} />\n *     <motion.div drag=\"x\" dragControls={dragControls} />\n *   </>\n * )\n * ```\n *\n * @public\n */ class DragControls {\n    constructor(){\n        this.componentControls = new Set();\n    }\n    /**\n     * Subscribe a component's internal `VisualElementDragControls` to the user-facing API.\n     *\n     * @internal\n     */ subscribe(controls) {\n        this.componentControls.add(controls);\n        return ()=>this.componentControls.delete(controls);\n    }\n    /**\n     * Start a drag gesture on every `motion` component that has this set of drag controls\n     * passed into it via the `dragControls` prop.\n     *\n     * ```jsx\n     * dragControls.start(e, {\n     *   snapToCursor: true\n     * })\n     * ```\n     *\n     * @param event - PointerEvent\n     * @param options - Options\n     *\n     * @public\n     */ start(event, options) {\n        this.componentControls.forEach((controls)=>{\n            controls.start(event.nativeEvent || event, options);\n        });\n    }\n}\nconst createDragControls = ()=>new DragControls();\n/**\n * Usually, dragging is initiated by pressing down on a `motion` component with a `drag` prop\n * and moving it. For some use-cases, for instance clicking at an arbitrary point on a video scrubber, we\n * might want to initiate that dragging from a different component than the draggable one.\n *\n * By creating a `dragControls` using the `useDragControls` hook, we can pass this into\n * the draggable component's `dragControls` prop. It exposes a `start` method\n * that can start dragging from pointer events on other components.\n *\n * ```jsx\n * const dragControls = useDragControls()\n *\n * function startDrag(event) {\n *   dragControls.start(event, { snapToCursor: true })\n * }\n *\n * return (\n *   <>\n *     <div onPointerDown={startDrag} />\n *     <motion.div drag=\"x\" dragControls={dragControls} />\n *   </>\n * )\n * ```\n *\n * @public\n */ function useDragControls() {\n    return useConstant(createDragControls);\n}\n/**\n * Attaches an event listener directly to the provided DOM element.\n *\n * Bypassing React's event system can be desirable, for instance when attaching non-passive\n * event handlers.\n *\n * ```jsx\n * const ref = useRef(null)\n *\n * useDomEvent(ref, 'wheel', onWheel, { passive: false })\n *\n * return <div ref={ref} />\n * ```\n *\n * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.\n * @param eventName - Name of the event you want listen for.\n * @param handler - Function to fire when receiving the event.\n * @param options - Options to pass to `Event.addEventListener`.\n *\n * @public\n */ function useDomEvent(ref, eventName, handler, options) {\n    React.useEffect(()=>{\n        const element = ref.current;\n        if (handler && element) {\n            return addDomEvent(element, eventName, handler, options);\n        }\n    }, [\n        ref,\n        eventName,\n        handler,\n        options\n    ]);\n}\n/**\n * Checks if a component is a `motion` component.\n */ function isMotionComponent(component) {\n    return component !== null && typeof component === \"object\" && motionComponentSymbol in component;\n}\n/**\n * Unwraps a `motion` component and returns either a string for `motion.div` or\n * the React component for `motion(Component)`.\n *\n * If the component is not a `motion` component it returns undefined.\n */ function unwrapMotionComponent(component) {\n    if (isMotionComponent(component)) {\n        return component[motionComponentSymbol];\n    }\n    return undefined;\n}\nfunction useInstantLayoutTransition() {\n    return startTransition;\n}\nfunction startTransition(callback) {\n    if (!rootProjectionNode.current) return;\n    rootProjectionNode.current.isUpdating = false;\n    rootProjectionNode.current.blockUpdate();\n    callback && callback();\n}\nfunction useInstantTransition() {\n    const [forceUpdate, forcedRenderCount] = useForceUpdate();\n    const startInstantLayoutTransition = useInstantLayoutTransition();\n    const unlockOnFrameRef = React.useRef();\n    React.useEffect(()=>{\n        /**\n         * Unblock after two animation frames, otherwise this will unblock too soon.\n         */ indexLegacy.frame.postRender(()=>indexLegacy.frame.postRender(()=>{\n                /**\n             * If the callback has been called again after the effect\n             * triggered this 2 frame delay, don't unblock animations. This\n             * prevents the previous effect from unblocking the current\n             * instant transition too soon. This becomes more likely when\n             * used in conjunction with React.startTransition().\n             */ if (forcedRenderCount !== unlockOnFrameRef.current) return;\n                indexLegacy.instantAnimationState.current = false;\n            }));\n    }, [\n        forcedRenderCount\n    ]);\n    return (callback)=>{\n        startInstantLayoutTransition(()=>{\n            indexLegacy.instantAnimationState.current = true;\n            forceUpdate();\n            callback();\n            unlockOnFrameRef.current = forcedRenderCount + 1;\n        });\n    };\n}\nfunction disableInstantTransitions() {\n    indexLegacy.instantAnimationState.current = false;\n}\nfunction useResetProjection() {\n    const reset = React__namespace.useCallback(()=>{\n        const root = rootProjectionNode.current;\n        if (!root) return;\n        root.resetTree();\n    }, []);\n    return reset;\n}\nconst appearStoreId = (id, value)=>`${id}: ${value}`;\nconst appearAnimationStore = new Map();\nlet handoffFrameTime;\nfunction handoffOptimizedAppearAnimation(elementId, valueName, /**\n * Legacy arguments. This function is inlined as part of SSG so it can be there's\n * a version mismatch between the main included Motion and the inlined script.\n *\n * Remove in early 2024.\n */ _value, _frame) {\n    const optimisedValueName = indexLegacy.transformProps.has(valueName) ? \"transform\" : valueName;\n    const storeId = appearStoreId(elementId, optimisedValueName);\n    const optimisedAnimation = appearAnimationStore.get(storeId);\n    if (!optimisedAnimation) {\n        return null;\n    }\n    const { animation, startTime } = optimisedAnimation;\n    const cancelAnimation = ()=>{\n        appearAnimationStore.delete(storeId);\n        try {\n            animation.cancel();\n        } catch (error) {}\n    };\n    /**\n     * If the startTime is null, this animation is the Paint Ready detection animation\n     * and we can cancel it immediately without handoff.\n     *\n     * Or if we've already handed off the animation then we're now interrupting it.\n     * In which case we need to cancel it.\n     */ if (startTime === null || window.HandoffComplete) {\n        cancelAnimation();\n        return null;\n    } else {\n        /**\n         * Otherwise we're handing off this animation to the main thread.\n         *\n         * Record the time of the first handoff. We call performance.now() once\n         * here and once in startOptimisedAnimation to ensure we're getting\n         * close to a frame-locked time. This keeps all animations in sync.\n         */ if (handoffFrameTime === undefined) {\n            handoffFrameTime = performance.now();\n        }\n        /**\n         * We use main thread timings vs those returned by Animation.currentTime as it\n         * can be the case, particularly in Firefox, that currentTime doesn't return\n         * an updated value for several frames, even as the animation plays smoothly via\n         * the GPU.\n         */ return handoffFrameTime - startTime || 0;\n    }\n}\n/**\n * A single time to use across all animations to manually set startTime\n * and ensure they're all in sync.\n */ let startFrameTime;\n/**\n * A dummy animation to detect when Chrome is ready to start\n * painting the page and hold off from triggering the real animation\n * until then. We only need one animation to detect paint ready.\n *\n * https://bugs.chromium.org/p/chromium/issues/detail?id=1406850\n */ let readyAnimation;\nfunction startOptimizedAppearAnimation(element, name, keyframes, options, onReady) {\n    // Prevent optimised appear animations if Motion has already started animating.\n    if (window.HandoffComplete) {\n        window.HandoffAppearAnimations = undefined;\n        return;\n    }\n    const id = element.dataset[indexLegacy.optimizedAppearDataId];\n    if (!id) return;\n    window.HandoffAppearAnimations = handoffOptimizedAppearAnimation;\n    const storeId = appearStoreId(id, name);\n    if (!readyAnimation) {\n        readyAnimation = indexLegacy.animateStyle(element, name, [\n            keyframes[0],\n            keyframes[0]\n        ], /**\n         * 10 secs is basically just a super-safe duration to give Chrome\n         * long enough to get the animation ready.\n         */ {\n            duration: 10000,\n            ease: \"linear\"\n        });\n        appearAnimationStore.set(storeId, {\n            animation: readyAnimation,\n            startTime: null\n        });\n    }\n    const startAnimation = ()=>{\n        readyAnimation.cancel();\n        const appearAnimation = indexLegacy.animateStyle(element, name, keyframes, options);\n        /**\n         * Record the time of the first started animation. We call performance.now() once\n         * here and once in handoff to ensure we're getting\n         * close to a frame-locked time. This keeps all animations in sync.\n         */ if (startFrameTime === undefined) {\n            startFrameTime = performance.now();\n        }\n        appearAnimation.startTime = startFrameTime;\n        appearAnimationStore.set(storeId, {\n            animation: appearAnimation,\n            startTime: startFrameTime\n        });\n        if (onReady) onReady(appearAnimation);\n    };\n    if (readyAnimation.ready) {\n        readyAnimation.ready.then(startAnimation).catch(indexLegacy.noop);\n    } else {\n        startAnimation();\n    }\n}\nconst createObject = ()=>({});\nclass StateVisualElement extends indexLegacy.VisualElement {\n    build() {}\n    measureInstanceViewportBox() {\n        return indexLegacy.createBox();\n    }\n    resetTransform() {}\n    restoreTransform() {}\n    removeValueFromRenderState() {}\n    renderInstance() {}\n    scrapeMotionValuesFromProps() {\n        return createObject();\n    }\n    getBaseTargetFromProps() {\n        return undefined;\n    }\n    readValueFromInstance(_state, key, options) {\n        return options.initialState[key] || 0;\n    }\n    sortInstanceNodePosition() {\n        return 0;\n    }\n    makeTargetAnimatableFromInstance({ transition, transitionEnd, ...target }) {\n        const origin = indexLegacy.getOrigin(target, transition || {}, this);\n        indexLegacy.checkTargetForNewValues(this, target, origin);\n        return {\n            transition,\n            transitionEnd,\n            ...target\n        };\n    }\n}\nconst useVisualState = makeUseVisualState({\n    scrapeMotionValuesFromProps: createObject,\n    createRenderState: createObject\n});\n/**\n * This is not an officially supported API and may be removed\n * on any version.\n */ function useAnimatedState(initialState) {\n    const [animationState, setAnimationState] = React.useState(initialState);\n    const visualState = useVisualState({}, false);\n    const element = useConstant(()=>{\n        return new StateVisualElement({\n            props: {},\n            visualState,\n            presenceContext: null\n        }, {\n            initialState\n        });\n    });\n    React.useEffect(()=>{\n        element.mount({});\n        return ()=>element.unmount();\n    }, [\n        element\n    ]);\n    React.useEffect(()=>{\n        element.update({\n            onUpdate: (v)=>{\n                setAnimationState({\n                    ...v\n                });\n            }\n        }, null);\n    }, [\n        setAnimationState,\n        element\n    ]);\n    const startAnimation = useConstant(()=>(animationDefinition)=>{\n            return animateVisualElement(element, animationDefinition);\n        });\n    return [\n        animationState,\n        startAnimation\n    ];\n}\n// Keep things reasonable and avoid scale: Infinity. In practise we might need\n// to add another value, opacity, that could interpolate scaleX/Y [0,0.01] => [0,1]\n// to simply hide content at unreasonable scales.\nconst maxScale = 100000;\nconst invertScale = (scale)=>scale > 0.001 ? 1 / scale : maxScale;\nlet hasWarned = false;\n/**\n * Returns a `MotionValue` each for `scaleX` and `scaleY` that update with the inverse\n * of their respective parent scales.\n *\n * This is useful for undoing the distortion of content when scaling a parent component.\n *\n * By default, `useInvertedScale` will automatically fetch `scaleX` and `scaleY` from the nearest parent.\n * By passing other `MotionValue`s in as `useInvertedScale({ scaleX, scaleY })`, it will invert the output\n * of those instead.\n *\n * ```jsx\n * const MyComponent = () => {\n *   const { scaleX, scaleY } = useInvertedScale()\n *   return <motion.div style={{ scaleX, scaleY }} />\n * }\n * ```\n *\n * @deprecated\n */ function useInvertedScale(scale) {\n    let parentScaleX = useMotionValue(1);\n    let parentScaleY = useMotionValue(1);\n    const { visualElement } = React.useContext(MotionContext);\n    indexLegacy.invariant(!!(scale || visualElement), \"If no scale values are provided, useInvertedScale must be used within a child of another motion component.\");\n    indexLegacy.warning(hasWarned, \"useInvertedScale is deprecated and will be removed in 3.0. Use the layout prop instead.\");\n    hasWarned = true;\n    if (scale) {\n        parentScaleX = scale.scaleX || parentScaleX;\n        parentScaleY = scale.scaleY || parentScaleY;\n    } else if (visualElement) {\n        parentScaleX = visualElement.getValue(\"scaleX\", 1);\n        parentScaleY = visualElement.getValue(\"scaleY\", 1);\n    }\n    const scaleX = useTransform(parentScaleX, invertScale);\n    const scaleY = useTransform(parentScaleY, invertScale);\n    return {\n        scaleX,\n        scaleY\n    };\n}\nlet id = 0;\nconst AnimateSharedLayout = ({ children })=>{\n    React__namespace.useEffect(()=>{\n        indexLegacy.invariant(false, \"AnimateSharedLayout is deprecated: https://www.framer.com/docs/guide-upgrade/##shared-layout-animations\");\n    }, []);\n    return React__namespace.createElement(LayoutGroup, {\n        id: useConstant(()=>`asl-${id++}`)\n    }, children);\n};\nexports.MotionValue = indexLegacy.MotionValue;\nexports.VisualElement = indexLegacy.VisualElement;\nexports.addScaleCorrector = indexLegacy.addScaleCorrector;\nexports.animate = indexLegacy.animate;\nexports.animateValue = indexLegacy.animateValue;\nexports.anticipate = indexLegacy.anticipate;\nexports.backIn = indexLegacy.backIn;\nexports.backInOut = indexLegacy.backInOut;\nexports.backOut = indexLegacy.backOut;\nexports.buildTransform = indexLegacy.buildTransform;\nexports.cancelFrame = indexLegacy.cancelFrame;\nexports.cancelSync = indexLegacy.cancelSync;\nexports.checkTargetForNewValues = indexLegacy.checkTargetForNewValues;\nexports.circIn = indexLegacy.circIn;\nexports.circInOut = indexLegacy.circInOut;\nexports.circOut = indexLegacy.circOut;\nexports.clamp = indexLegacy.clamp;\nexports.color = indexLegacy.color;\nexports.complex = indexLegacy.complex;\nexports.createBox = indexLegacy.createBox;\nexports.createScopedAnimate = indexLegacy.createScopedAnimate;\nexports.cubicBezier = indexLegacy.cubicBezier;\nexports.delay = indexLegacy.delay;\nexports.distance = indexLegacy.distance;\nexports.distance2D = indexLegacy.distance2D;\nexports.easeIn = indexLegacy.easeIn;\nexports.easeInOut = indexLegacy.easeInOut;\nexports.easeOut = indexLegacy.easeOut;\nexports.frame = indexLegacy.frame;\nexports.frameData = indexLegacy.frameData;\nexports.inView = indexLegacy.inView;\nexports.interpolate = indexLegacy.interpolate;\nObject.defineProperty(exports, \"invariant\", ({\n    enumerable: true,\n    get: function() {\n        return indexLegacy.invariant;\n    }\n}));\nexports.isBrowser = indexLegacy.isBrowser;\nexports.isMotionValue = indexLegacy.isMotionValue;\nexports.mirrorEasing = indexLegacy.mirrorEasing;\nexports.mix = indexLegacy.mix;\nexports.motionValue = indexLegacy.motionValue;\nexports.optimizedAppearDataAttribute = indexLegacy.optimizedAppearDataAttribute;\nexports.pipe = indexLegacy.pipe;\nexports.progress = indexLegacy.progress;\nexports.px = indexLegacy.px;\nexports.reverseEasing = indexLegacy.reverseEasing;\nexports.scroll = indexLegacy.scroll;\nexports.scrollInfo = indexLegacy.scrollInfo;\nexports.spring = indexLegacy.spring;\nexports.stagger = indexLegacy.stagger;\nexports.steps = indexLegacy.steps;\nexports.sync = indexLegacy.sync;\nexports.transform = indexLegacy.transform;\nexports.visualElementStore = indexLegacy.visualElementStore;\nObject.defineProperty(exports, \"warning\", ({\n    enumerable: true,\n    get: function() {\n        return indexLegacy.warning;\n    }\n}));\nexports.wrap = indexLegacy.wrap;\nexports.AnimatePresence = AnimatePresence;\nexports.AnimateSharedLayout = AnimateSharedLayout;\nexports.DeprecatedLayoutGroupContext = DeprecatedLayoutGroupContext;\nexports.DragControls = DragControls;\nexports.FlatTree = FlatTree;\nexports.LayoutGroup = LayoutGroup;\nexports.LayoutGroupContext = LayoutGroupContext;\nexports.LazyMotion = LazyMotion;\nexports.MotionConfig = MotionConfig;\nexports.MotionConfigContext = MotionConfigContext;\nexports.MotionContext = MotionContext;\nexports.PresenceContext = PresenceContext;\nexports.Reorder = Reorder;\nexports.SwitchLayoutGroupContext = SwitchLayoutGroupContext;\nexports.addPointerEvent = addPointerEvent;\nexports.addPointerInfo = addPointerInfo;\nexports.animateVisualElement = animateVisualElement;\nexports.animationControls = animationControls;\nexports.animations = animations;\nexports.calcLength = calcLength;\nexports.createDomMotionComponent = createDomMotionComponent;\nexports.createMotionComponent = createMotionComponent;\nexports.disableInstantTransitions = disableInstantTransitions;\nexports.domAnimation = domAnimation;\nexports.domMax = domMax;\nexports.filterProps = filterProps;\nexports.isDragActive = isDragActive;\nexports.isMotionComponent = isMotionComponent;\nexports.isValidMotionProp = isValidMotionProp;\nexports.m = m;\nexports.makeUseVisualState = makeUseVisualState;\nexports.motion = motion;\nexports.resolveMotionValue = resolveMotionValue;\nexports.startOptimizedAppearAnimation = startOptimizedAppearAnimation;\nexports.unwrapMotionComponent = unwrapMotionComponent;\nexports.useAnimate = useAnimate;\nexports.useAnimation = useAnimation;\nexports.useAnimationControls = useAnimationControls;\nexports.useAnimationFrame = useAnimationFrame;\nexports.useCycle = useCycle;\nexports.useDeprecatedAnimatedState = useAnimatedState;\nexports.useDeprecatedInvertedScale = useInvertedScale;\nexports.useDomEvent = useDomEvent;\nexports.useDragControls = useDragControls;\nexports.useElementScroll = useElementScroll;\nexports.useForceUpdate = useForceUpdate;\nexports.useInView = useInView;\nexports.useInstantLayoutTransition = useInstantLayoutTransition;\nexports.useInstantTransition = useInstantTransition;\nexports.useIsPresent = useIsPresent;\nexports.useIsomorphicLayoutEffect = useIsomorphicLayoutEffect;\nexports.useMotionTemplate = useMotionTemplate;\nexports.useMotionValue = useMotionValue;\nexports.useMotionValueEvent = useMotionValueEvent;\nexports.usePresence = usePresence;\nexports.useReducedMotion = useReducedMotion;\nexports.useReducedMotionConfig = useReducedMotionConfig;\nexports.useResetProjection = useResetProjection;\nexports.useScroll = useScroll;\nexports.useSpring = useSpring;\nexports.useTime = useTime;\nexports.useTransform = useTransform;\nexports.useUnmountEffect = useUnmountEffect;\nexports.useVelocity = useVelocity;\nexports.useViewportScroll = useViewportScroll;\nexports.useWillChange = useWillChange;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/cjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/animators/instant.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/animators/instant.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createInstantAnimation: () => (/* binding */ createInstantAnimation)\n/* harmony export */ });\n/* harmony import */ var _js_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./js/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/animators/js/index.mjs\");\n/* harmony import */ var _utils_noop_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/noop.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/noop.mjs\");\n\n\nfunction createInstantAnimation({ keyframes, delay, onUpdate, onComplete }) {\n    const setValue = ()=>{\n        onUpdate && onUpdate(keyframes[keyframes.length - 1]);\n        onComplete && onComplete();\n        /**\n         * TODO: As this API grows it could make sense to always return\n         * animateValue. This will be a bigger project as animateValue\n         * is frame-locked whereas this function resolves instantly.\n         * This is a behavioural change and also has ramifications regarding\n         * assumptions within tests.\n         */ return {\n            time: 0,\n            speed: 1,\n            duration: 0,\n            play: _utils_noop_mjs__WEBPACK_IMPORTED_MODULE_0__.noop,\n            pause: _utils_noop_mjs__WEBPACK_IMPORTED_MODULE_0__.noop,\n            stop: _utils_noop_mjs__WEBPACK_IMPORTED_MODULE_0__.noop,\n            then: (resolve)=>{\n                resolve();\n                return Promise.resolve();\n            },\n            cancel: _utils_noop_mjs__WEBPACK_IMPORTED_MODULE_0__.noop,\n            complete: _utils_noop_mjs__WEBPACK_IMPORTED_MODULE_0__.noop\n        };\n    };\n    return delay ? (0,_js_index_mjs__WEBPACK_IMPORTED_MODULE_1__.animateValue)({\n        keyframes: [\n            0,\n            1\n        ],\n        duration: 0,\n        delay,\n        onComplete: setValue\n    }) : setValue();\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9hbmltYXRvcnMvaW5zdGFudC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQThDO0FBQ0Y7QUFFNUMsU0FBU0UsdUJBQXVCLEVBQUVDLFNBQVMsRUFBRUMsS0FBSyxFQUFFQyxRQUFRLEVBQUVDLFVBQVUsRUFBRztJQUN2RSxNQUFNQyxXQUFXO1FBQ2JGLFlBQVlBLFNBQVNGLFNBQVMsQ0FBQ0EsVUFBVUssTUFBTSxHQUFHLEVBQUU7UUFDcERGLGNBQWNBO1FBQ2Q7Ozs7OztTQU1DLEdBQ0QsT0FBTztZQUNIRyxNQUFNO1lBQ05DLE9BQU87WUFDUEMsVUFBVTtZQUNWQyxNQUFPWCxpREFBSUE7WUFDWFksT0FBUVosaURBQUlBO1lBQ1phLE1BQU9iLGlEQUFJQTtZQUNYYyxNQUFNLENBQUNDO2dCQUNIQTtnQkFDQSxPQUFPQyxRQUFRRCxPQUFPO1lBQzFCO1lBQ0FFLFFBQVNqQixpREFBSUE7WUFDYmtCLFVBQVdsQixpREFBSUE7UUFDbkI7SUFDSjtJQUNBLE9BQU9HLFFBQ0RKLDJEQUFZQSxDQUFDO1FBQ1hHLFdBQVc7WUFBQztZQUFHO1NBQUU7UUFDakJRLFVBQVU7UUFDVlA7UUFDQUUsWUFBWUM7SUFDaEIsS0FDRUE7QUFDVjtBQUVrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vYW5pbWF0b3JzL2luc3RhbnQubWpzP2M3MTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYW5pbWF0ZVZhbHVlIH0gZnJvbSAnLi9qcy9pbmRleC5tanMnO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4uLy4uL3V0aWxzL25vb3AubWpzJztcblxuZnVuY3Rpb24gY3JlYXRlSW5zdGFudEFuaW1hdGlvbih7IGtleWZyYW1lcywgZGVsYXksIG9uVXBkYXRlLCBvbkNvbXBsZXRlLCB9KSB7XG4gICAgY29uc3Qgc2V0VmFsdWUgPSAoKSA9PiB7XG4gICAgICAgIG9uVXBkYXRlICYmIG9uVXBkYXRlKGtleWZyYW1lc1trZXlmcmFtZXMubGVuZ3RoIC0gMV0pO1xuICAgICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRPRE86IEFzIHRoaXMgQVBJIGdyb3dzIGl0IGNvdWxkIG1ha2Ugc2Vuc2UgdG8gYWx3YXlzIHJldHVyblxuICAgICAgICAgKiBhbmltYXRlVmFsdWUuIFRoaXMgd2lsbCBiZSBhIGJpZ2dlciBwcm9qZWN0IGFzIGFuaW1hdGVWYWx1ZVxuICAgICAgICAgKiBpcyBmcmFtZS1sb2NrZWQgd2hlcmVhcyB0aGlzIGZ1bmN0aW9uIHJlc29sdmVzIGluc3RhbnRseS5cbiAgICAgICAgICogVGhpcyBpcyBhIGJlaGF2aW91cmFsIGNoYW5nZSBhbmQgYWxzbyBoYXMgcmFtaWZpY2F0aW9ucyByZWdhcmRpbmdcbiAgICAgICAgICogYXNzdW1wdGlvbnMgd2l0aGluIHRlc3RzLlxuICAgICAgICAgKi9cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRpbWU6IDAsXG4gICAgICAgICAgICBzcGVlZDogMSxcbiAgICAgICAgICAgIGR1cmF0aW9uOiAwLFxuICAgICAgICAgICAgcGxheTogKG5vb3ApLFxuICAgICAgICAgICAgcGF1c2U6IChub29wKSxcbiAgICAgICAgICAgIHN0b3A6IChub29wKSxcbiAgICAgICAgICAgIHRoZW46IChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYW5jZWw6IChub29wKSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiAobm9vcCksXG4gICAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gZGVsYXlcbiAgICAgICAgPyBhbmltYXRlVmFsdWUoe1xuICAgICAgICAgICAga2V5ZnJhbWVzOiBbMCwgMV0sXG4gICAgICAgICAgICBkdXJhdGlvbjogMCxcbiAgICAgICAgICAgIGRlbGF5LFxuICAgICAgICAgICAgb25Db21wbGV0ZTogc2V0VmFsdWUsXG4gICAgICAgIH0pXG4gICAgICAgIDogc2V0VmFsdWUoKTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlSW5zdGFudEFuaW1hdGlvbiB9O1xuIl0sIm5hbWVzIjpbImFuaW1hdGVWYWx1ZSIsIm5vb3AiLCJjcmVhdGVJbnN0YW50QW5pbWF0aW9uIiwia2V5ZnJhbWVzIiwiZGVsYXkiLCJvblVwZGF0ZSIsIm9uQ29tcGxldGUiLCJzZXRWYWx1ZSIsImxlbmd0aCIsInRpbWUiLCJzcGVlZCIsImR1cmF0aW9uIiwicGxheSIsInBhdXNlIiwic3RvcCIsInRoZW4iLCJyZXNvbHZlIiwiUHJvbWlzZSIsImNhbmNlbCIsImNvbXBsZXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/animators/instant.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/animators/js/driver-frameloop.mjs":
/*!****************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/animators/js/driver-frameloop.mjs ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   frameloopDriver: () => (/* binding */ frameloopDriver)\n/* harmony export */ });\n/* harmony import */ var _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../frameloop/frame.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/frameloop/frame.mjs\");\n\nconst frameloopDriver = (update)=>{\n    const passTimestamp = ({ timestamp })=>update(timestamp);\n    return {\n        start: ()=>_frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_0__.frame.update(passTimestamp, true),\n        stop: ()=>(0,_frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_0__.cancelFrame)(passTimestamp),\n        /**\n         * If we're processing this frame we can use the\n         * framelocked timestamp to keep things in sync.\n         */ now: ()=>_frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_0__.frameData.isProcessing ? _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_0__.frameData.timestamp : performance.now()\n    };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9hbmltYXRvcnMvanMvZHJpdmVyLWZyYW1lbG9vcC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNkU7QUFFN0UsTUFBTUcsa0JBQWtCLENBQUNDO0lBQ3JCLE1BQU1DLGdCQUFnQixDQUFDLEVBQUVDLFNBQVMsRUFBRSxHQUFLRixPQUFPRTtJQUNoRCxPQUFPO1FBQ0hDLE9BQU8sSUFBTVAsdURBQUtBLENBQUNJLE1BQU0sQ0FBQ0MsZUFBZTtRQUN6Q0csTUFBTSxJQUFNUCxpRUFBV0EsQ0FBQ0k7UUFDeEI7OztTQUdDLEdBQ0RJLEtBQUssSUFBTVAsMkRBQVNBLENBQUNRLFlBQVksR0FBR1IsMkRBQVNBLENBQUNJLFNBQVMsR0FBR0ssWUFBWUYsR0FBRztJQUM3RTtBQUNKO0FBRTJCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9hbmltYXRvcnMvanMvZHJpdmVyLWZyYW1lbG9vcC5tanM/ZDBmMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmcmFtZSwgY2FuY2VsRnJhbWUsIGZyYW1lRGF0YSB9IGZyb20gJy4uLy4uLy4uL2ZyYW1lbG9vcC9mcmFtZS5tanMnO1xuXG5jb25zdCBmcmFtZWxvb3BEcml2ZXIgPSAodXBkYXRlKSA9PiB7XG4gICAgY29uc3QgcGFzc1RpbWVzdGFtcCA9ICh7IHRpbWVzdGFtcCB9KSA9PiB1cGRhdGUodGltZXN0YW1wKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydDogKCkgPT4gZnJhbWUudXBkYXRlKHBhc3NUaW1lc3RhbXAsIHRydWUpLFxuICAgICAgICBzdG9wOiAoKSA9PiBjYW5jZWxGcmFtZShwYXNzVGltZXN0YW1wKSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHdlJ3JlIHByb2Nlc3NpbmcgdGhpcyBmcmFtZSB3ZSBjYW4gdXNlIHRoZVxuICAgICAgICAgKiBmcmFtZWxvY2tlZCB0aW1lc3RhbXAgdG8ga2VlcCB0aGluZ3MgaW4gc3luYy5cbiAgICAgICAgICovXG4gICAgICAgIG5vdzogKCkgPT4gZnJhbWVEYXRhLmlzUHJvY2Vzc2luZyA/IGZyYW1lRGF0YS50aW1lc3RhbXAgOiBwZXJmb3JtYW5jZS5ub3coKSxcbiAgICB9O1xufTtcblxuZXhwb3J0IHsgZnJhbWVsb29wRHJpdmVyIH07XG4iXSwibmFtZXMiOlsiZnJhbWUiLCJjYW5jZWxGcmFtZSIsImZyYW1lRGF0YSIsImZyYW1lbG9vcERyaXZlciIsInVwZGF0ZSIsInBhc3NUaW1lc3RhbXAiLCJ0aW1lc3RhbXAiLCJzdGFydCIsInN0b3AiLCJub3ciLCJpc1Byb2Nlc3NpbmciLCJwZXJmb3JtYW5jZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/animators/js/driver-frameloop.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/animators/js/index.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/animators/js/index.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   animateValue: () => (/* binding */ animateValue)\n/* harmony export */ });\n/* harmony import */ var _generators_keyframes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../generators/keyframes.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/generators/keyframes.mjs\");\n/* harmony import */ var _generators_spring_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../generators/spring/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/generators/spring/index.mjs\");\n/* harmony import */ var _generators_inertia_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../generators/inertia.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/generators/inertia.mjs\");\n/* harmony import */ var _driver_frameloop_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./driver-frameloop.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/animators/js/driver-frameloop.mjs\");\n/* harmony import */ var _utils_interpolate_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../utils/interpolate.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/interpolate.mjs\");\n/* harmony import */ var _utils_clamp_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../utils/clamp.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/clamp.mjs\");\n/* harmony import */ var _utils_time_conversion_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../utils/time-conversion.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/time-conversion.mjs\");\n/* harmony import */ var _generators_utils_calc_duration_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../generators/utils/calc-duration.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/generators/utils/calc-duration.mjs\");\n\n\n\n\n\n\n\n\nconst types = {\n    decay: _generators_inertia_mjs__WEBPACK_IMPORTED_MODULE_0__.inertia,\n    inertia: _generators_inertia_mjs__WEBPACK_IMPORTED_MODULE_0__.inertia,\n    tween: _generators_keyframes_mjs__WEBPACK_IMPORTED_MODULE_1__.keyframes,\n    keyframes: _generators_keyframes_mjs__WEBPACK_IMPORTED_MODULE_1__.keyframes,\n    spring: _generators_spring_index_mjs__WEBPACK_IMPORTED_MODULE_2__.spring\n};\n/**\n * Animate a single value on the main thread.\n *\n * This function is written, where functionality overlaps,\n * to be largely spec-compliant with WAAPI to allow fungibility\n * between the two.\n */ function animateValue({ autoplay = true, delay = 0, driver = _driver_frameloop_mjs__WEBPACK_IMPORTED_MODULE_3__.frameloopDriver, keyframes: keyframes$1, type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType = \"loop\", onPlay, onStop, onComplete, onUpdate, ...options }) {\n    let speed = 1;\n    let hasStopped = false;\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Resolve the current Promise every time we enter the\n     * finished state. This is WAAPI-compatible behaviour.\n     */ const updateFinishedPromise = ()=>{\n        currentFinishedPromise = new Promise((resolve)=>{\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let animationDriver;\n    const generatorFactory = types[type] || _generators_keyframes_mjs__WEBPACK_IMPORTED_MODULE_1__.keyframes;\n    /**\n     * If this isn't the keyframes generator and we've been provided\n     * strings as keyframes, we need to interpolate these.\n     * TODO: Support velocity for units and complex value types/\n     */ let mapNumbersToKeyframes;\n    if (generatorFactory !== _generators_keyframes_mjs__WEBPACK_IMPORTED_MODULE_1__.keyframes && typeof keyframes$1[0] !== \"number\") {\n        mapNumbersToKeyframes = (0,_utils_interpolate_mjs__WEBPACK_IMPORTED_MODULE_4__.interpolate)([\n            0,\n            100\n        ], keyframes$1, {\n            clamp: false\n        });\n        keyframes$1 = [\n            0,\n            100\n        ];\n    }\n    const generator = generatorFactory({\n        ...options,\n        keyframes: keyframes$1\n    });\n    let mirroredGenerator;\n    if (repeatType === \"mirror\") {\n        mirroredGenerator = generatorFactory({\n            ...options,\n            keyframes: [\n                ...keyframes$1\n            ].reverse(),\n            velocity: -(options.velocity || 0)\n        });\n    }\n    let playState = \"idle\";\n    let holdTime = null;\n    let startTime = null;\n    let cancelTime = null;\n    /**\n     * If duration is undefined and we have repeat options,\n     * we need to calculate a duration from the generator.\n     *\n     * We set it to the generator itself to cache the duration.\n     * Any timeline resolver will need to have already precalculated\n     * the duration by this step.\n     */ if (generator.calculatedDuration === null && repeat) {\n        generator.calculatedDuration = (0,_generators_utils_calc_duration_mjs__WEBPACK_IMPORTED_MODULE_5__.calcGeneratorDuration)(generator);\n    }\n    const { calculatedDuration } = generator;\n    let resolvedDuration = Infinity;\n    let totalDuration = Infinity;\n    if (calculatedDuration !== null) {\n        resolvedDuration = calculatedDuration + repeatDelay;\n        totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\n    }\n    let currentTime = 0;\n    const tick = (timestamp)=>{\n        if (startTime === null) return;\n        /**\n         * requestAnimationFrame timestamps can come through as lower than\n         * the startTime as set by performance.now(). Here we prevent this,\n         * though in the future it could be possible to make setting startTime\n         * a pending operation that gets resolved here.\n         */ if (speed > 0) startTime = Math.min(startTime, timestamp);\n        if (speed < 0) startTime = Math.min(timestamp - totalDuration / speed, startTime);\n        if (holdTime !== null) {\n            currentTime = holdTime;\n        } else {\n            // Rounding the time because floating point arithmetic is not always accurate, e.g. 3000.367 - 1000.367 =\n            // 2000.0000000000002. This is a problem when we are comparing the currentTime with the duration, for\n            // example.\n            currentTime = Math.round(timestamp - startTime) * speed;\n        }\n        // Rebase on delay\n        const timeWithoutDelay = currentTime - delay * (speed >= 0 ? 1 : -1);\n        const isInDelayPhase = speed >= 0 ? timeWithoutDelay < 0 : timeWithoutDelay > totalDuration;\n        currentTime = Math.max(timeWithoutDelay, 0);\n        /**\n         * If this animation has finished, set the current time\n         * to the total duration.\n         */ if (playState === \"finished\" && holdTime === null) {\n            currentTime = totalDuration;\n        }\n        let elapsed = currentTime;\n        let frameGenerator = generator;\n        if (repeat) {\n            /**\n             * Get the current progress (0-1) of the animation. If t is >\n             * than duration we'll get values like 2.5 (midway through the\n             * third iteration)\n             */ const progress = currentTime / resolvedDuration;\n            /**\n             * Get the current iteration (0 indexed). For instance the floor of\n             * 2.5 is 2.\n             */ let currentIteration = Math.floor(progress);\n            /**\n             * Get the current progress of the iteration by taking the remainder\n             * so 2.5 is 0.5 through iteration 2\n             */ let iterationProgress = progress % 1.0;\n            /**\n             * If iteration progress is 1 we count that as the end\n             * of the previous iteration.\n             */ if (!iterationProgress && progress >= 1) {\n                iterationProgress = 1;\n            }\n            iterationProgress === 1 && currentIteration--;\n            currentIteration = Math.min(currentIteration, repeat + 1);\n            /**\n             * Reverse progress if we're not running in \"normal\" direction\n             */ const iterationIsOdd = Boolean(currentIteration % 2);\n            if (iterationIsOdd) {\n                if (repeatType === \"reverse\") {\n                    iterationProgress = 1 - iterationProgress;\n                    if (repeatDelay) {\n                        iterationProgress -= repeatDelay / resolvedDuration;\n                    }\n                } else if (repeatType === \"mirror\") {\n                    frameGenerator = mirroredGenerator;\n                }\n            }\n            let p = (0,_utils_clamp_mjs__WEBPACK_IMPORTED_MODULE_6__.clamp)(0, 1, iterationProgress);\n            if (currentTime > totalDuration) {\n                p = repeatType === \"reverse\" && iterationIsOdd ? 1 : 0;\n            }\n            elapsed = p * resolvedDuration;\n        }\n        /**\n         * If we're in negative time, set state as the initial keyframe.\n         * This prevents delay: x, duration: 0 animations from finishing\n         * instantly.\n         */ const state = isInDelayPhase ? {\n            done: false,\n            value: keyframes$1[0]\n        } : frameGenerator.next(elapsed);\n        if (mapNumbersToKeyframes) {\n            state.value = mapNumbersToKeyframes(state.value);\n        }\n        let { done } = state;\n        if (!isInDelayPhase && calculatedDuration !== null) {\n            done = speed >= 0 ? currentTime >= totalDuration : currentTime <= 0;\n        }\n        const isAnimationFinished = holdTime === null && (playState === \"finished\" || playState === \"running\" && done);\n        if (onUpdate) {\n            onUpdate(state.value);\n        }\n        if (isAnimationFinished) {\n            finish();\n        }\n        return state;\n    };\n    const stopAnimationDriver = ()=>{\n        animationDriver && animationDriver.stop();\n        animationDriver = undefined;\n    };\n    const cancel = ()=>{\n        playState = \"idle\";\n        stopAnimationDriver();\n        resolveFinishedPromise();\n        updateFinishedPromise();\n        startTime = cancelTime = null;\n    };\n    const finish = ()=>{\n        playState = \"finished\";\n        onComplete && onComplete();\n        stopAnimationDriver();\n        resolveFinishedPromise();\n    };\n    const play = ()=>{\n        if (hasStopped) return;\n        if (!animationDriver) animationDriver = driver(tick);\n        const now = animationDriver.now();\n        onPlay && onPlay();\n        if (holdTime !== null) {\n            startTime = now - holdTime;\n        } else if (!startTime || playState === \"finished\") {\n            startTime = now;\n        }\n        if (playState === \"finished\") {\n            updateFinishedPromise();\n        }\n        cancelTime = startTime;\n        holdTime = null;\n        /**\n         * Set playState to running only after we've used it in\n         * the previous logic.\n         */ playState = \"running\";\n        animationDriver.start();\n    };\n    if (autoplay) {\n        play();\n    }\n    const controls = {\n        then (resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        get time () {\n            return (0,_utils_time_conversion_mjs__WEBPACK_IMPORTED_MODULE_7__.millisecondsToSeconds)(currentTime);\n        },\n        set time (newTime){\n            newTime = (0,_utils_time_conversion_mjs__WEBPACK_IMPORTED_MODULE_7__.secondsToMilliseconds)(newTime);\n            currentTime = newTime;\n            if (holdTime !== null || !animationDriver || speed === 0) {\n                holdTime = newTime;\n            } else {\n                startTime = animationDriver.now() - newTime / speed;\n            }\n        },\n        get duration () {\n            const duration = generator.calculatedDuration === null ? (0,_generators_utils_calc_duration_mjs__WEBPACK_IMPORTED_MODULE_5__.calcGeneratorDuration)(generator) : generator.calculatedDuration;\n            return (0,_utils_time_conversion_mjs__WEBPACK_IMPORTED_MODULE_7__.millisecondsToSeconds)(duration);\n        },\n        get speed () {\n            return speed;\n        },\n        set speed (newSpeed){\n            if (newSpeed === speed || !animationDriver) return;\n            speed = newSpeed;\n            controls.time = (0,_utils_time_conversion_mjs__WEBPACK_IMPORTED_MODULE_7__.millisecondsToSeconds)(currentTime);\n        },\n        get state () {\n            return playState;\n        },\n        play,\n        pause: ()=>{\n            playState = \"paused\";\n            holdTime = currentTime;\n        },\n        stop: ()=>{\n            hasStopped = true;\n            if (playState === \"idle\") return;\n            playState = \"idle\";\n            onStop && onStop();\n            cancel();\n        },\n        cancel: ()=>{\n            if (cancelTime !== null) tick(cancelTime);\n            cancel();\n        },\n        complete: ()=>{\n            playState = \"finished\";\n        },\n        sample: (elapsed)=>{\n            startTime = 0;\n            return tick(elapsed);\n        }\n    };\n    return controls;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/animators/js/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/animators/waapi/create-accelerated-animation.mjs":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/animators/waapi/create-accelerated-animation.mjs ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAcceleratedAnimation: () => (/* binding */ createAcceleratedAnimation)\n/* harmony export */ });\n/* harmony import */ var _index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/animators/waapi/index.mjs\");\n/* harmony import */ var _easing_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./easing.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/animators/waapi/easing.mjs\");\n/* harmony import */ var _utils_get_final_keyframe_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/get-final-keyframe.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.mjs\");\n/* harmony import */ var _js_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../js/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/animators/js/index.mjs\");\n/* harmony import */ var _utils_time_conversion_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../utils/time-conversion.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/time-conversion.mjs\");\n/* harmony import */ var _utils_memo_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/memo.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/memo.mjs\");\n/* harmony import */ var _utils_noop_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../utils/noop.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/noop.mjs\");\n/* harmony import */ var _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../frameloop/frame.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/frameloop/frame.mjs\");\n\n\n\n\n\n\n\n\nconst supportsWaapi = (0,_utils_memo_mjs__WEBPACK_IMPORTED_MODULE_0__.memo)(()=>Object.hasOwnProperty.call(Element.prototype, \"animate\"));\n/**\n * A list of values that can be hardware-accelerated.\n */ const acceleratedValues = new Set([\n    \"opacity\",\n    \"clipPath\",\n    \"filter\",\n    \"transform\",\n    \"backgroundColor\"\n]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */ const sampleDelta = 10; //ms\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */ const maxDuration = 20000;\nconst requiresPregeneratedKeyframes = (valueName, options)=>options.type === \"spring\" || valueName === \"backgroundColor\" || !(0,_easing_mjs__WEBPACK_IMPORTED_MODULE_1__.isWaapiSupportedEasing)(options.ease);\nfunction createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {\n    const canAccelerateAnimation = supportsWaapi() && acceleratedValues.has(valueName) && !options.repeatDelay && options.repeatType !== \"mirror\" && options.damping !== 0 && options.type !== \"inertia\";\n    if (!canAccelerateAnimation) return false;\n    /**\n     * TODO: Unify with js/index\n     */ let hasStopped = false;\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Resolve the current Promise every time we enter the\n     * finished state. This is WAAPI-compatible behaviour.\n     */ const updateFinishedPromise = ()=>{\n        currentFinishedPromise = new Promise((resolve)=>{\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let { keyframes, duration = 300, ease, times } = options;\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */ if (requiresPregeneratedKeyframes(valueName, options)) {\n        const sampleAnimation = (0,_js_index_mjs__WEBPACK_IMPORTED_MODULE_2__.animateValue)({\n            ...options,\n            repeat: 0,\n            delay: 0\n        });\n        let state = {\n            done: false,\n            value: keyframes[0]\n        };\n        const pregeneratedKeyframes = [];\n        /**\n         * Bail after 20 seconds of pre-generated keyframes as it's likely\n         * we're heading for an infinite loop.\n         */ let t = 0;\n        while(!state.done && t < maxDuration){\n            state = sampleAnimation.sample(t);\n            pregeneratedKeyframes.push(state.value);\n            t += sampleDelta;\n        }\n        times = undefined;\n        keyframes = pregeneratedKeyframes;\n        duration = t - sampleDelta;\n        ease = \"linear\";\n    }\n    const animation = (0,_index_mjs__WEBPACK_IMPORTED_MODULE_3__.animateStyle)(value.owner.current, valueName, keyframes, {\n        ...options,\n        duration,\n        /**\n         * This function is currently not called if ease is provided\n         * as a function so the cast is safe.\n         *\n         * However it would be possible for a future refinement to port\n         * in easing pregeneration from Motion One for browsers that\n         * support the upcoming `linear()` easing function.\n         */ ease: ease,\n        times\n    });\n    const cancelAnimation = ()=>animation.cancel();\n    const safeCancel = ()=>{\n        _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_4__.frame.update(cancelAnimation);\n        resolveFinishedPromise();\n        updateFinishedPromise();\n    };\n    /**\n     * Prefer the `onfinish` prop as it's more widely supported than\n     * the `finished` promise.\n     *\n     * Here, we synchronously set the provided MotionValue to the end\n     * keyframe. If we didn't, when the WAAPI animation is finished it would\n     * be removed from the element which would then revert to its old styles.\n     */ animation.onfinish = ()=>{\n        value.set((0,_utils_get_final_keyframe_mjs__WEBPACK_IMPORTED_MODULE_5__.getFinalKeyframe)(keyframes, options));\n        onComplete && onComplete();\n        safeCancel();\n    };\n    /**\n     * Animation interrupt callback.\n     */ const controls = {\n        then (resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        attachTimeline (timeline) {\n            animation.timeline = timeline;\n            animation.onfinish = null;\n            return _utils_noop_mjs__WEBPACK_IMPORTED_MODULE_6__.noop;\n        },\n        get time () {\n            return (0,_utils_time_conversion_mjs__WEBPACK_IMPORTED_MODULE_7__.millisecondsToSeconds)(animation.currentTime || 0);\n        },\n        set time (newTime){\n            animation.currentTime = (0,_utils_time_conversion_mjs__WEBPACK_IMPORTED_MODULE_7__.secondsToMilliseconds)(newTime);\n        },\n        get speed () {\n            return animation.playbackRate;\n        },\n        set speed (newSpeed){\n            animation.playbackRate = newSpeed;\n        },\n        get duration () {\n            return (0,_utils_time_conversion_mjs__WEBPACK_IMPORTED_MODULE_7__.millisecondsToSeconds)(duration);\n        },\n        play: ()=>{\n            if (hasStopped) return;\n            animation.play();\n            /**\n             * Cancel any pending cancel tasks\n             */ (0,_frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_4__.cancelFrame)(cancelAnimation);\n        },\n        pause: ()=>animation.pause(),\n        stop: ()=>{\n            hasStopped = true;\n            if (animation.playState === \"idle\") return;\n            /**\n             * WAAPI doesn't natively have any interruption capabilities.\n             *\n             * Rather than read commited styles back out of the DOM, we can\n             * create a renderless JS animation and sample it twice to calculate\n             * its current value, \"previous\" value, and therefore allow\n             * Motion to calculate velocity for any subsequent animation.\n             */ const { currentTime } = animation;\n            if (currentTime) {\n                const sampleAnimation = (0,_js_index_mjs__WEBPACK_IMPORTED_MODULE_2__.animateValue)({\n                    ...options,\n                    autoplay: false\n                });\n                value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n            }\n            safeCancel();\n        },\n        complete: ()=>animation.finish(),\n        cancel: safeCancel\n    };\n    return controls;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/animators/waapi/create-accelerated-animation.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/animators/waapi/easing.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/animators/waapi/easing.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cubicBezierAsString: () => (/* binding */ cubicBezierAsString),\n/* harmony export */   isWaapiSupportedEasing: () => (/* binding */ isWaapiSupportedEasing),\n/* harmony export */   mapEasingToNativeEasing: () => (/* binding */ mapEasingToNativeEasing),\n/* harmony export */   supportedWaapiEasing: () => (/* binding */ supportedWaapiEasing)\n/* harmony export */ });\n/* harmony import */ var _easing_utils_is_bezier_definition_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../easing/utils/is-bezier-definition.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/easing/utils/is-bezier-definition.mjs\");\n\nfunction isWaapiSupportedEasing(easing) {\n    return Boolean(!easing || typeof easing === \"string\" && supportedWaapiEasing[easing] || (0,_easing_utils_is_bezier_definition_mjs__WEBPACK_IMPORTED_MODULE_0__.isBezierDefinition)(easing) || Array.isArray(easing) && easing.every(isWaapiSupportedEasing));\n}\nconst cubicBezierAsString = ([a, b, c, d])=>`cubic-bezier(${a}, ${b}, ${c}, ${d})`;\nconst supportedWaapiEasing = {\n    linear: \"linear\",\n    ease: \"ease\",\n    easeIn: \"ease-in\",\n    easeOut: \"ease-out\",\n    easeInOut: \"ease-in-out\",\n    circIn: cubicBezierAsString([\n        0,\n        0.65,\n        0.55,\n        1\n    ]),\n    circOut: cubicBezierAsString([\n        0.55,\n        0,\n        1,\n        0.45\n    ]),\n    backIn: cubicBezierAsString([\n        0.31,\n        0.01,\n        0.66,\n        -0.59\n    ]),\n    backOut: cubicBezierAsString([\n        0.33,\n        1.53,\n        0.69,\n        0.99\n    ])\n};\nfunction mapEasingToNativeEasing(easing) {\n    if (!easing) return undefined;\n    return (0,_easing_utils_is_bezier_definition_mjs__WEBPACK_IMPORTED_MODULE_0__.isBezierDefinition)(easing) ? cubicBezierAsString(easing) : Array.isArray(easing) ? easing.map(mapEasingToNativeEasing) : supportedWaapiEasing[easing];\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9hbmltYXRvcnMvd2FhcGkvZWFzaW5nLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFvRjtBQUVwRixTQUFTQyx1QkFBdUJDLE1BQU07SUFDbEMsT0FBT0MsUUFBUSxDQUFDRCxVQUNYLE9BQU9BLFdBQVcsWUFBWUUsb0JBQW9CLENBQUNGLE9BQU8sSUFDM0RGLDBGQUFrQkEsQ0FBQ0UsV0FDbEJHLE1BQU1DLE9BQU8sQ0FBQ0osV0FBV0EsT0FBT0ssS0FBSyxDQUFDTjtBQUMvQztBQUNBLE1BQU1PLHNCQUFzQixDQUFDLENBQUNDLEdBQUdDLEdBQUdDLEdBQUdDLEVBQUUsR0FBSyxDQUFDLGFBQWEsRUFBRUgsRUFBRSxFQUFFLEVBQUVDLEVBQUUsRUFBRSxFQUFFQyxFQUFFLEVBQUUsRUFBRUMsRUFBRSxDQUFDLENBQUM7QUFDcEYsTUFBTVIsdUJBQXVCO0lBQ3pCUyxRQUFRO0lBQ1JDLE1BQU07SUFDTkMsUUFBUTtJQUNSQyxTQUFTO0lBQ1RDLFdBQVc7SUFDWEMsUUFBUVYsb0JBQW9CO1FBQUM7UUFBRztRQUFNO1FBQU07S0FBRTtJQUM5Q1csU0FBU1gsb0JBQW9CO1FBQUM7UUFBTTtRQUFHO1FBQUc7S0FBSztJQUMvQ1ksUUFBUVosb0JBQW9CO1FBQUM7UUFBTTtRQUFNO1FBQU0sQ0FBQztLQUFLO0lBQ3JEYSxTQUFTYixvQkFBb0I7UUFBQztRQUFNO1FBQU07UUFBTTtLQUFLO0FBQ3pEO0FBQ0EsU0FBU2Msd0JBQXdCcEIsTUFBTTtJQUNuQyxJQUFJLENBQUNBLFFBQ0QsT0FBT3FCO0lBQ1gsT0FBT3ZCLDBGQUFrQkEsQ0FBQ0UsVUFDcEJNLG9CQUFvQk4sVUFDcEJHLE1BQU1DLE9BQU8sQ0FBQ0osVUFDVkEsT0FBT3NCLEdBQUcsQ0FBQ0YsMkJBQ1hsQixvQkFBb0IsQ0FBQ0YsT0FBTztBQUMxQztBQUVzRyIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vYW5pbWF0b3JzL3dhYXBpL2Vhc2luZy5tanM/NDAwMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0JlemllckRlZmluaXRpb24gfSBmcm9tICcuLi8uLi8uLi9lYXNpbmcvdXRpbHMvaXMtYmV6aWVyLWRlZmluaXRpb24ubWpzJztcblxuZnVuY3Rpb24gaXNXYWFwaVN1cHBvcnRlZEVhc2luZyhlYXNpbmcpIHtcbiAgICByZXR1cm4gQm9vbGVhbighZWFzaW5nIHx8XG4gICAgICAgICh0eXBlb2YgZWFzaW5nID09PSBcInN0cmluZ1wiICYmIHN1cHBvcnRlZFdhYXBpRWFzaW5nW2Vhc2luZ10pIHx8XG4gICAgICAgIGlzQmV6aWVyRGVmaW5pdGlvbihlYXNpbmcpIHx8XG4gICAgICAgIChBcnJheS5pc0FycmF5KGVhc2luZykgJiYgZWFzaW5nLmV2ZXJ5KGlzV2FhcGlTdXBwb3J0ZWRFYXNpbmcpKSk7XG59XG5jb25zdCBjdWJpY0JlemllckFzU3RyaW5nID0gKFthLCBiLCBjLCBkXSkgPT4gYGN1YmljLWJlemllcigke2F9LCAke2J9LCAke2N9LCAke2R9KWA7XG5jb25zdCBzdXBwb3J0ZWRXYWFwaUVhc2luZyA9IHtcbiAgICBsaW5lYXI6IFwibGluZWFyXCIsXG4gICAgZWFzZTogXCJlYXNlXCIsXG4gICAgZWFzZUluOiBcImVhc2UtaW5cIixcbiAgICBlYXNlT3V0OiBcImVhc2Utb3V0XCIsXG4gICAgZWFzZUluT3V0OiBcImVhc2UtaW4tb3V0XCIsXG4gICAgY2lyY0luOiBjdWJpY0JlemllckFzU3RyaW5nKFswLCAwLjY1LCAwLjU1LCAxXSksXG4gICAgY2lyY091dDogY3ViaWNCZXppZXJBc1N0cmluZyhbMC41NSwgMCwgMSwgMC40NV0pLFxuICAgIGJhY2tJbjogY3ViaWNCZXppZXJBc1N0cmluZyhbMC4zMSwgMC4wMSwgMC42NiwgLTAuNTldKSxcbiAgICBiYWNrT3V0OiBjdWJpY0JlemllckFzU3RyaW5nKFswLjMzLCAxLjUzLCAwLjY5LCAwLjk5XSksXG59O1xuZnVuY3Rpb24gbWFwRWFzaW5nVG9OYXRpdmVFYXNpbmcoZWFzaW5nKSB7XG4gICAgaWYgKCFlYXNpbmcpXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIGlzQmV6aWVyRGVmaW5pdGlvbihlYXNpbmcpXG4gICAgICAgID8gY3ViaWNCZXppZXJBc1N0cmluZyhlYXNpbmcpXG4gICAgICAgIDogQXJyYXkuaXNBcnJheShlYXNpbmcpXG4gICAgICAgICAgICA/IGVhc2luZy5tYXAobWFwRWFzaW5nVG9OYXRpdmVFYXNpbmcpXG4gICAgICAgICAgICA6IHN1cHBvcnRlZFdhYXBpRWFzaW5nW2Vhc2luZ107XG59XG5cbmV4cG9ydCB7IGN1YmljQmV6aWVyQXNTdHJpbmcsIGlzV2FhcGlTdXBwb3J0ZWRFYXNpbmcsIG1hcEVhc2luZ1RvTmF0aXZlRWFzaW5nLCBzdXBwb3J0ZWRXYWFwaUVhc2luZyB9O1xuIl0sIm5hbWVzIjpbImlzQmV6aWVyRGVmaW5pdGlvbiIsImlzV2FhcGlTdXBwb3J0ZWRFYXNpbmciLCJlYXNpbmciLCJCb29sZWFuIiwic3VwcG9ydGVkV2FhcGlFYXNpbmciLCJBcnJheSIsImlzQXJyYXkiLCJldmVyeSIsImN1YmljQmV6aWVyQXNTdHJpbmciLCJhIiwiYiIsImMiLCJkIiwibGluZWFyIiwiZWFzZSIsImVhc2VJbiIsImVhc2VPdXQiLCJlYXNlSW5PdXQiLCJjaXJjSW4iLCJjaXJjT3V0IiwiYmFja0luIiwiYmFja091dCIsIm1hcEVhc2luZ1RvTmF0aXZlRWFzaW5nIiwidW5kZWZpbmVkIiwibWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/animators/waapi/easing.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/animators/waapi/index.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/animators/waapi/index.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   animateStyle: () => (/* binding */ animateStyle)\n/* harmony export */ });\n/* harmony import */ var _easing_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./easing.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/animators/waapi/easing.mjs\");\n\nfunction animateStyle(element, valueName, keyframes, { delay = 0, duration, repeat = 0, repeatType = \"loop\", ease, times } = {}) {\n    const keyframeOptions = {\n        [valueName]: keyframes\n    };\n    if (times) keyframeOptions.offset = times;\n    const easing = (0,_easing_mjs__WEBPACK_IMPORTED_MODULE_0__.mapEasingToNativeEasing)(ease);\n    /**\n     * If this is an easing array, apply to keyframes, not animation as a whole\n     */ if (Array.isArray(easing)) keyframeOptions.easing = easing;\n    return element.animate(keyframeOptions, {\n        delay,\n        duration,\n        easing: !Array.isArray(easing) ? easing : \"linear\",\n        fill: \"both\",\n        iterations: repeat + 1,\n        direction: repeatType === \"reverse\" ? \"alternate\" : \"normal\"\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9hbmltYXRvcnMvd2FhcGkvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXVEO0FBRXZELFNBQVNDLGFBQWFDLE9BQU8sRUFBRUMsU0FBUyxFQUFFQyxTQUFTLEVBQUUsRUFBRUMsUUFBUSxDQUFDLEVBQUVDLFFBQVEsRUFBRUMsU0FBUyxDQUFDLEVBQUVDLGFBQWEsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLEtBQUssRUFBRyxHQUFHLENBQUMsQ0FBQztJQUM1SCxNQUFNQyxrQkFBa0I7UUFBRSxDQUFDUixVQUFVLEVBQUVDO0lBQVU7SUFDakQsSUFBSU0sT0FDQUMsZ0JBQWdCQyxNQUFNLEdBQUdGO0lBQzdCLE1BQU1HLFNBQVNiLG9FQUF1QkEsQ0FBQ1M7SUFDdkM7O0tBRUMsR0FDRCxJQUFJSyxNQUFNQyxPQUFPLENBQUNGLFNBQ2RGLGdCQUFnQkUsTUFBTSxHQUFHQTtJQUM3QixPQUFPWCxRQUFRYyxPQUFPLENBQUNMLGlCQUFpQjtRQUNwQ047UUFDQUM7UUFDQU8sUUFBUSxDQUFDQyxNQUFNQyxPQUFPLENBQUNGLFVBQVVBLFNBQVM7UUFDMUNJLE1BQU07UUFDTkMsWUFBWVgsU0FBUztRQUNyQlksV0FBV1gsZUFBZSxZQUFZLGNBQWM7SUFDeEQ7QUFDSjtBQUV3QiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vYW5pbWF0b3JzL3dhYXBpL2luZGV4Lm1qcz83ZDJiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1hcEVhc2luZ1RvTmF0aXZlRWFzaW5nIH0gZnJvbSAnLi9lYXNpbmcubWpzJztcblxuZnVuY3Rpb24gYW5pbWF0ZVN0eWxlKGVsZW1lbnQsIHZhbHVlTmFtZSwga2V5ZnJhbWVzLCB7IGRlbGF5ID0gMCwgZHVyYXRpb24sIHJlcGVhdCA9IDAsIHJlcGVhdFR5cGUgPSBcImxvb3BcIiwgZWFzZSwgdGltZXMsIH0gPSB7fSkge1xuICAgIGNvbnN0IGtleWZyYW1lT3B0aW9ucyA9IHsgW3ZhbHVlTmFtZV06IGtleWZyYW1lcyB9O1xuICAgIGlmICh0aW1lcylcbiAgICAgICAga2V5ZnJhbWVPcHRpb25zLm9mZnNldCA9IHRpbWVzO1xuICAgIGNvbnN0IGVhc2luZyA9IG1hcEVhc2luZ1RvTmF0aXZlRWFzaW5nKGVhc2UpO1xuICAgIC8qKlxuICAgICAqIElmIHRoaXMgaXMgYW4gZWFzaW5nIGFycmF5LCBhcHBseSB0byBrZXlmcmFtZXMsIG5vdCBhbmltYXRpb24gYXMgYSB3aG9sZVxuICAgICAqL1xuICAgIGlmIChBcnJheS5pc0FycmF5KGVhc2luZykpXG4gICAgICAgIGtleWZyYW1lT3B0aW9ucy5lYXNpbmcgPSBlYXNpbmc7XG4gICAgcmV0dXJuIGVsZW1lbnQuYW5pbWF0ZShrZXlmcmFtZU9wdGlvbnMsIHtcbiAgICAgICAgZGVsYXksXG4gICAgICAgIGR1cmF0aW9uLFxuICAgICAgICBlYXNpbmc6ICFBcnJheS5pc0FycmF5KGVhc2luZykgPyBlYXNpbmcgOiBcImxpbmVhclwiLFxuICAgICAgICBmaWxsOiBcImJvdGhcIixcbiAgICAgICAgaXRlcmF0aW9uczogcmVwZWF0ICsgMSxcbiAgICAgICAgZGlyZWN0aW9uOiByZXBlYXRUeXBlID09PSBcInJldmVyc2VcIiA/IFwiYWx0ZXJuYXRlXCIgOiBcIm5vcm1hbFwiLFxuICAgIH0pO1xufVxuXG5leHBvcnQgeyBhbmltYXRlU3R5bGUgfTtcbiJdLCJuYW1lcyI6WyJtYXBFYXNpbmdUb05hdGl2ZUVhc2luZyIsImFuaW1hdGVTdHlsZSIsImVsZW1lbnQiLCJ2YWx1ZU5hbWUiLCJrZXlmcmFtZXMiLCJkZWxheSIsImR1cmF0aW9uIiwicmVwZWF0IiwicmVwZWF0VHlwZSIsImVhc2UiLCJ0aW1lcyIsImtleWZyYW1lT3B0aW9ucyIsIm9mZnNldCIsImVhc2luZyIsIkFycmF5IiwiaXNBcnJheSIsImFuaW1hdGUiLCJmaWxsIiwiaXRlcmF0aW9ucyIsImRpcmVjdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/animators/waapi/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.mjs":
/*!***************************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.mjs ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getFinalKeyframe: () => (/* binding */ getFinalKeyframe)\n/* harmony export */ });\nfunction getFinalKeyframe(keyframes, { repeat, repeatType = \"loop\" }) {\n    const index = repeat && repeatType !== \"loop\" && repeat % 2 === 1 ? 0 : keyframes.length - 1;\n    return keyframes[index];\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9hbmltYXRvcnMvd2FhcGkvdXRpbHMvZ2V0LWZpbmFsLWtleWZyYW1lLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsU0FBU0EsaUJBQWlCQyxTQUFTLEVBQUUsRUFBRUMsTUFBTSxFQUFFQyxhQUFhLE1BQU0sRUFBRTtJQUNoRSxNQUFNQyxRQUFRRixVQUFVQyxlQUFlLFVBQVVELFNBQVMsTUFBTSxJQUMxRCxJQUNBRCxVQUFVSSxNQUFNLEdBQUc7SUFDekIsT0FBT0osU0FBUyxDQUFDRyxNQUFNO0FBQzNCO0FBRTRCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9hbmltYXRvcnMvd2FhcGkvdXRpbHMvZ2V0LWZpbmFsLWtleWZyYW1lLm1qcz84MWE4Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGdldEZpbmFsS2V5ZnJhbWUoa2V5ZnJhbWVzLCB7IHJlcGVhdCwgcmVwZWF0VHlwZSA9IFwibG9vcFwiIH0pIHtcbiAgICBjb25zdCBpbmRleCA9IHJlcGVhdCAmJiByZXBlYXRUeXBlICE9PSBcImxvb3BcIiAmJiByZXBlYXQgJSAyID09PSAxXG4gICAgICAgID8gMFxuICAgICAgICA6IGtleWZyYW1lcy5sZW5ndGggLSAxO1xuICAgIHJldHVybiBrZXlmcmFtZXNbaW5kZXhdO1xufVxuXG5leHBvcnQgeyBnZXRGaW5hbEtleWZyYW1lIH07XG4iXSwibmFtZXMiOlsiZ2V0RmluYWxLZXlmcmFtZSIsImtleWZyYW1lcyIsInJlcGVhdCIsInJlcGVhdFR5cGUiLCJpbmRleCIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/generators/inertia.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/generators/inertia.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   inertia: () => (/* binding */ inertia)\n/* harmony export */ });\n/* harmony import */ var _spring_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./spring/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/generators/spring/index.mjs\");\n/* harmony import */ var _utils_velocity_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/velocity.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/generators/utils/velocity.mjs\");\n\n\nfunction inertia({ keyframes, velocity = 0.0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min, max, restDelta = 0.5, restSpeed }) {\n    const origin = keyframes[0];\n    const state = {\n        done: false,\n        value: origin\n    };\n    const isOutOfBounds = (v)=>min !== undefined && v < min || max !== undefined && v > max;\n    const nearestBoundary = (v)=>{\n        if (min === undefined) return max;\n        if (max === undefined) return min;\n        return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n    };\n    let amplitude = power * velocity;\n    const ideal = origin + amplitude;\n    const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);\n    /**\n     * If the target has changed we need to re-calculate the amplitude, otherwise\n     * the animation will start from the wrong position.\n     */ if (target !== ideal) amplitude = target - origin;\n    const calcDelta = (t)=>-amplitude * Math.exp(-t / timeConstant);\n    const calcLatest = (t)=>target + calcDelta(t);\n    const applyFriction = (t)=>{\n        const delta = calcDelta(t);\n        const latest = calcLatest(t);\n        state.done = Math.abs(delta) <= restDelta;\n        state.value = state.done ? target : latest;\n    };\n    /**\n     * Ideally this would resolve for t in a stateless way, we could\n     * do that by always precalculating the animation but as we know\n     * this will be done anyway we can assume that spring will\n     * be discovered during that.\n     */ let timeReachedBoundary;\n    let spring$1;\n    const checkCatchBoundary = (t)=>{\n        if (!isOutOfBounds(state.value)) return;\n        timeReachedBoundary = t;\n        spring$1 = (0,_spring_index_mjs__WEBPACK_IMPORTED_MODULE_0__.spring)({\n            keyframes: [\n                state.value,\n                nearestBoundary(state.value)\n            ],\n            velocity: (0,_utils_velocity_mjs__WEBPACK_IMPORTED_MODULE_1__.calcGeneratorVelocity)(calcLatest, t, state.value),\n            damping: bounceDamping,\n            stiffness: bounceStiffness,\n            restDelta,\n            restSpeed\n        });\n    };\n    checkCatchBoundary(0);\n    return {\n        calculatedDuration: null,\n        next: (t)=>{\n            /**\n             * We need to resolve the friction to figure out if we need a\n             * spring but we don't want to do this twice per frame. So here\n             * we flag if we updated for this frame and later if we did\n             * we can skip doing it again.\n             */ let hasUpdatedFrame = false;\n            if (!spring$1 && timeReachedBoundary === undefined) {\n                hasUpdatedFrame = true;\n                applyFriction(t);\n                checkCatchBoundary(t);\n            }\n            /**\n             * If we have a spring and the provided t is beyond the moment the friction\n             * animation crossed the min/max boundary, use the spring.\n             */ if (timeReachedBoundary !== undefined && t > timeReachedBoundary) {\n                return spring$1.next(t - timeReachedBoundary);\n            } else {\n                !hasUpdatedFrame && applyFriction(t);\n                return state;\n            }\n        }\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9nZW5lcmF0b3JzL2luZXJ0aWEubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE0QztBQUNpQjtBQUU3RCxTQUFTRSxRQUFRLEVBQUVDLFNBQVMsRUFBRUMsV0FBVyxHQUFHLEVBQUVDLFFBQVEsR0FBRyxFQUFFQyxlQUFlLEdBQUcsRUFBRUMsZ0JBQWdCLEVBQUUsRUFBRUMsa0JBQWtCLEdBQUcsRUFBRUMsWUFBWSxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsWUFBWSxHQUFHLEVBQUVDLFNBQVMsRUFBRztJQUMzSyxNQUFNQyxTQUFTWCxTQUFTLENBQUMsRUFBRTtJQUMzQixNQUFNWSxRQUFRO1FBQ1ZDLE1BQU07UUFDTkMsT0FBT0g7SUFDWDtJQUNBLE1BQU1JLGdCQUFnQixDQUFDQyxJQUFNLFFBQVNDLGFBQWFELElBQUlULE9BQVNDLFFBQVFTLGFBQWFELElBQUlSO0lBQ3pGLE1BQU1VLGtCQUFrQixDQUFDRjtRQUNyQixJQUFJVCxRQUFRVSxXQUNSLE9BQU9UO1FBQ1gsSUFBSUEsUUFBUVMsV0FDUixPQUFPVjtRQUNYLE9BQU9ZLEtBQUtDLEdBQUcsQ0FBQ2IsTUFBTVMsS0FBS0csS0FBS0MsR0FBRyxDQUFDWixNQUFNUSxLQUFLVCxNQUFNQztJQUN6RDtJQUNBLElBQUlhLFlBQVluQixRQUFRRDtJQUN4QixNQUFNcUIsUUFBUVgsU0FBU1U7SUFDdkIsTUFBTUUsU0FBU2pCLGlCQUFpQlcsWUFBWUssUUFBUWhCLGFBQWFnQjtJQUNqRTs7O0tBR0MsR0FDRCxJQUFJQyxXQUFXRCxPQUNYRCxZQUFZRSxTQUFTWjtJQUN6QixNQUFNYSxZQUFZLENBQUNDLElBQU0sQ0FBQ0osWUFBWUYsS0FBS08sR0FBRyxDQUFDLENBQUNELElBQUl0QjtJQUNwRCxNQUFNd0IsYUFBYSxDQUFDRixJQUFNRixTQUFTQyxVQUFVQztJQUM3QyxNQUFNRyxnQkFBZ0IsQ0FBQ0g7UUFDbkIsTUFBTUksUUFBUUwsVUFBVUM7UUFDeEIsTUFBTUssU0FBU0gsV0FBV0Y7UUFDMUJiLE1BQU1DLElBQUksR0FBR00sS0FBS0MsR0FBRyxDQUFDUyxVQUFVcEI7UUFDaENHLE1BQU1FLEtBQUssR0FBR0YsTUFBTUMsSUFBSSxHQUFHVSxTQUFTTztJQUN4QztJQUNBOzs7OztLQUtDLEdBQ0QsSUFBSUM7SUFDSixJQUFJQztJQUNKLE1BQU1DLHFCQUFxQixDQUFDUjtRQUN4QixJQUFJLENBQUNWLGNBQWNILE1BQU1FLEtBQUssR0FDMUI7UUFDSmlCLHNCQUFzQk47UUFDdEJPLFdBQVduQyx5REFBTUEsQ0FBQztZQUNkRyxXQUFXO2dCQUFDWSxNQUFNRSxLQUFLO2dCQUFFSSxnQkFBZ0JOLE1BQU1FLEtBQUs7YUFBRTtZQUN0RGIsVUFBVUgsMEVBQXFCQSxDQUFDNkIsWUFBWUYsR0FBR2IsTUFBTUUsS0FBSztZQUMxRG9CLFNBQVM5QjtZQUNUK0IsV0FBVzlCO1lBQ1hJO1lBQ0FDO1FBQ0o7SUFDSjtJQUNBdUIsbUJBQW1CO0lBQ25CLE9BQU87UUFDSEcsb0JBQW9CO1FBQ3BCQyxNQUFNLENBQUNaO1lBQ0g7Ozs7O2FBS0MsR0FDRCxJQUFJYSxrQkFBa0I7WUFDdEIsSUFBSSxDQUFDTixZQUFZRCx3QkFBd0JkLFdBQVc7Z0JBQ2hEcUIsa0JBQWtCO2dCQUNsQlYsY0FBY0g7Z0JBQ2RRLG1CQUFtQlI7WUFDdkI7WUFDQTs7O2FBR0MsR0FDRCxJQUFJTSx3QkFBd0JkLGFBQWFRLElBQUlNLHFCQUFxQjtnQkFDOUQsT0FBT0MsU0FBU0ssSUFBSSxDQUFDWixJQUFJTTtZQUM3QixPQUNLO2dCQUNELENBQUNPLG1CQUFtQlYsY0FBY0g7Z0JBQ2xDLE9BQU9iO1lBQ1g7UUFDSjtJQUNKO0FBQ0o7QUFFbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9uL2dlbmVyYXRvcnMvaW5lcnRpYS5tanM/NGRmZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzcHJpbmcgfSBmcm9tICcuL3NwcmluZy9pbmRleC5tanMnO1xuaW1wb3J0IHsgY2FsY0dlbmVyYXRvclZlbG9jaXR5IH0gZnJvbSAnLi91dGlscy92ZWxvY2l0eS5tanMnO1xuXG5mdW5jdGlvbiBpbmVydGlhKHsga2V5ZnJhbWVzLCB2ZWxvY2l0eSA9IDAuMCwgcG93ZXIgPSAwLjgsIHRpbWVDb25zdGFudCA9IDMyNSwgYm91bmNlRGFtcGluZyA9IDEwLCBib3VuY2VTdGlmZm5lc3MgPSA1MDAsIG1vZGlmeVRhcmdldCwgbWluLCBtYXgsIHJlc3REZWx0YSA9IDAuNSwgcmVzdFNwZWVkLCB9KSB7XG4gICAgY29uc3Qgb3JpZ2luID0ga2V5ZnJhbWVzWzBdO1xuICAgIGNvbnN0IHN0YXRlID0ge1xuICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IG9yaWdpbixcbiAgICB9O1xuICAgIGNvbnN0IGlzT3V0T2ZCb3VuZHMgPSAodikgPT4gKG1pbiAhPT0gdW5kZWZpbmVkICYmIHYgPCBtaW4pIHx8IChtYXggIT09IHVuZGVmaW5lZCAmJiB2ID4gbWF4KTtcbiAgICBjb25zdCBuZWFyZXN0Qm91bmRhcnkgPSAodikgPT4ge1xuICAgICAgICBpZiAobWluID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gbWF4O1xuICAgICAgICBpZiAobWF4ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gbWluO1xuICAgICAgICByZXR1cm4gTWF0aC5hYnMobWluIC0gdikgPCBNYXRoLmFicyhtYXggLSB2KSA/IG1pbiA6IG1heDtcbiAgICB9O1xuICAgIGxldCBhbXBsaXR1ZGUgPSBwb3dlciAqIHZlbG9jaXR5O1xuICAgIGNvbnN0IGlkZWFsID0gb3JpZ2luICsgYW1wbGl0dWRlO1xuICAgIGNvbnN0IHRhcmdldCA9IG1vZGlmeVRhcmdldCA9PT0gdW5kZWZpbmVkID8gaWRlYWwgOiBtb2RpZnlUYXJnZXQoaWRlYWwpO1xuICAgIC8qKlxuICAgICAqIElmIHRoZSB0YXJnZXQgaGFzIGNoYW5nZWQgd2UgbmVlZCB0byByZS1jYWxjdWxhdGUgdGhlIGFtcGxpdHVkZSwgb3RoZXJ3aXNlXG4gICAgICogdGhlIGFuaW1hdGlvbiB3aWxsIHN0YXJ0IGZyb20gdGhlIHdyb25nIHBvc2l0aW9uLlxuICAgICAqL1xuICAgIGlmICh0YXJnZXQgIT09IGlkZWFsKVxuICAgICAgICBhbXBsaXR1ZGUgPSB0YXJnZXQgLSBvcmlnaW47XG4gICAgY29uc3QgY2FsY0RlbHRhID0gKHQpID0+IC1hbXBsaXR1ZGUgKiBNYXRoLmV4cCgtdCAvIHRpbWVDb25zdGFudCk7XG4gICAgY29uc3QgY2FsY0xhdGVzdCA9ICh0KSA9PiB0YXJnZXQgKyBjYWxjRGVsdGEodCk7XG4gICAgY29uc3QgYXBwbHlGcmljdGlvbiA9ICh0KSA9PiB7XG4gICAgICAgIGNvbnN0IGRlbHRhID0gY2FsY0RlbHRhKHQpO1xuICAgICAgICBjb25zdCBsYXRlc3QgPSBjYWxjTGF0ZXN0KHQpO1xuICAgICAgICBzdGF0ZS5kb25lID0gTWF0aC5hYnMoZGVsdGEpIDw9IHJlc3REZWx0YTtcbiAgICAgICAgc3RhdGUudmFsdWUgPSBzdGF0ZS5kb25lID8gdGFyZ2V0IDogbGF0ZXN0O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSWRlYWxseSB0aGlzIHdvdWxkIHJlc29sdmUgZm9yIHQgaW4gYSBzdGF0ZWxlc3Mgd2F5LCB3ZSBjb3VsZFxuICAgICAqIGRvIHRoYXQgYnkgYWx3YXlzIHByZWNhbGN1bGF0aW5nIHRoZSBhbmltYXRpb24gYnV0IGFzIHdlIGtub3dcbiAgICAgKiB0aGlzIHdpbGwgYmUgZG9uZSBhbnl3YXkgd2UgY2FuIGFzc3VtZSB0aGF0IHNwcmluZyB3aWxsXG4gICAgICogYmUgZGlzY292ZXJlZCBkdXJpbmcgdGhhdC5cbiAgICAgKi9cbiAgICBsZXQgdGltZVJlYWNoZWRCb3VuZGFyeTtcbiAgICBsZXQgc3ByaW5nJDE7XG4gICAgY29uc3QgY2hlY2tDYXRjaEJvdW5kYXJ5ID0gKHQpID0+IHtcbiAgICAgICAgaWYgKCFpc091dE9mQm91bmRzKHN0YXRlLnZhbHVlKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGltZVJlYWNoZWRCb3VuZGFyeSA9IHQ7XG4gICAgICAgIHNwcmluZyQxID0gc3ByaW5nKHtcbiAgICAgICAgICAgIGtleWZyYW1lczogW3N0YXRlLnZhbHVlLCBuZWFyZXN0Qm91bmRhcnkoc3RhdGUudmFsdWUpXSxcbiAgICAgICAgICAgIHZlbG9jaXR5OiBjYWxjR2VuZXJhdG9yVmVsb2NpdHkoY2FsY0xhdGVzdCwgdCwgc3RhdGUudmFsdWUpLFxuICAgICAgICAgICAgZGFtcGluZzogYm91bmNlRGFtcGluZyxcbiAgICAgICAgICAgIHN0aWZmbmVzczogYm91bmNlU3RpZmZuZXNzLFxuICAgICAgICAgICAgcmVzdERlbHRhLFxuICAgICAgICAgICAgcmVzdFNwZWVkLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNoZWNrQ2F0Y2hCb3VuZGFyeSgwKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBjYWxjdWxhdGVkRHVyYXRpb246IG51bGwsXG4gICAgICAgIG5leHQ6ICh0KSA9PiB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFdlIG5lZWQgdG8gcmVzb2x2ZSB0aGUgZnJpY3Rpb24gdG8gZmlndXJlIG91dCBpZiB3ZSBuZWVkIGFcbiAgICAgICAgICAgICAqIHNwcmluZyBidXQgd2UgZG9uJ3Qgd2FudCB0byBkbyB0aGlzIHR3aWNlIHBlciBmcmFtZS4gU28gaGVyZVxuICAgICAgICAgICAgICogd2UgZmxhZyBpZiB3ZSB1cGRhdGVkIGZvciB0aGlzIGZyYW1lIGFuZCBsYXRlciBpZiB3ZSBkaWRcbiAgICAgICAgICAgICAqIHdlIGNhbiBza2lwIGRvaW5nIGl0IGFnYWluLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBsZXQgaGFzVXBkYXRlZEZyYW1lID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoIXNwcmluZyQxICYmIHRpbWVSZWFjaGVkQm91bmRhcnkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGhhc1VwZGF0ZWRGcmFtZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgYXBwbHlGcmljdGlvbih0KTtcbiAgICAgICAgICAgICAgICBjaGVja0NhdGNoQm91bmRhcnkodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHdlIGhhdmUgYSBzcHJpbmcgYW5kIHRoZSBwcm92aWRlZCB0IGlzIGJleW9uZCB0aGUgbW9tZW50IHRoZSBmcmljdGlvblxuICAgICAgICAgICAgICogYW5pbWF0aW9uIGNyb3NzZWQgdGhlIG1pbi9tYXggYm91bmRhcnksIHVzZSB0aGUgc3ByaW5nLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAodGltZVJlYWNoZWRCb3VuZGFyeSAhPT0gdW5kZWZpbmVkICYmIHQgPiB0aW1lUmVhY2hlZEJvdW5kYXJ5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNwcmluZyQxLm5leHQodCAtIHRpbWVSZWFjaGVkQm91bmRhcnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgIWhhc1VwZGF0ZWRGcmFtZSAmJiBhcHBseUZyaWN0aW9uKHQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9O1xufVxuXG5leHBvcnQgeyBpbmVydGlhIH07XG4iXSwibmFtZXMiOlsic3ByaW5nIiwiY2FsY0dlbmVyYXRvclZlbG9jaXR5IiwiaW5lcnRpYSIsImtleWZyYW1lcyIsInZlbG9jaXR5IiwicG93ZXIiLCJ0aW1lQ29uc3RhbnQiLCJib3VuY2VEYW1waW5nIiwiYm91bmNlU3RpZmZuZXNzIiwibW9kaWZ5VGFyZ2V0IiwibWluIiwibWF4IiwicmVzdERlbHRhIiwicmVzdFNwZWVkIiwib3JpZ2luIiwic3RhdGUiLCJkb25lIiwidmFsdWUiLCJpc091dE9mQm91bmRzIiwidiIsInVuZGVmaW5lZCIsIm5lYXJlc3RCb3VuZGFyeSIsIk1hdGgiLCJhYnMiLCJhbXBsaXR1ZGUiLCJpZGVhbCIsInRhcmdldCIsImNhbGNEZWx0YSIsInQiLCJleHAiLCJjYWxjTGF0ZXN0IiwiYXBwbHlGcmljdGlvbiIsImRlbHRhIiwibGF0ZXN0IiwidGltZVJlYWNoZWRCb3VuZGFyeSIsInNwcmluZyQxIiwiY2hlY2tDYXRjaEJvdW5kYXJ5IiwiZGFtcGluZyIsInN0aWZmbmVzcyIsImNhbGN1bGF0ZWREdXJhdGlvbiIsIm5leHQiLCJoYXNVcGRhdGVkRnJhbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/generators/inertia.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/generators/keyframes.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/generators/keyframes.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultEasing: () => (/* binding */ defaultEasing),\n/* harmony export */   keyframes: () => (/* binding */ keyframes)\n/* harmony export */ });\n/* harmony import */ var _easing_ease_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../easing/ease.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/easing/ease.mjs\");\n/* harmony import */ var _easing_utils_is_easing_array_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../easing/utils/is-easing-array.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/easing/utils/is-easing-array.mjs\");\n/* harmony import */ var _easing_utils_map_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../easing/utils/map.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/easing/utils/map.mjs\");\n/* harmony import */ var _utils_interpolate_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/interpolate.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/interpolate.mjs\");\n/* harmony import */ var _utils_offsets_default_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/offsets/default.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/offsets/default.mjs\");\n/* harmony import */ var _utils_offsets_time_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/offsets/time.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/offsets/time.mjs\");\n\n\n\n\n\n\nfunction defaultEasing(values, easing) {\n    return values.map(()=>easing || _easing_ease_mjs__WEBPACK_IMPORTED_MODULE_0__.easeInOut).splice(0, values.length - 1);\n}\nfunction keyframes({ duration = 300, keyframes: keyframeValues, times, ease = \"easeInOut\" }) {\n    /**\n     * Easing functions can be externally defined as strings. Here we convert them\n     * into actual functions.\n     */ const easingFunctions = (0,_easing_utils_is_easing_array_mjs__WEBPACK_IMPORTED_MODULE_1__.isEasingArray)(ease) ? ease.map(_easing_utils_map_mjs__WEBPACK_IMPORTED_MODULE_2__.easingDefinitionToFunction) : (0,_easing_utils_map_mjs__WEBPACK_IMPORTED_MODULE_2__.easingDefinitionToFunction)(ease);\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */ const state = {\n        done: false,\n        value: keyframeValues[0]\n    };\n    /**\n     * Create a times array based on the provided 0-1 offsets\n     */ const absoluteTimes = (0,_utils_offsets_time_mjs__WEBPACK_IMPORTED_MODULE_3__.convertOffsetToTimes)(// Only use the provided offsets if they're the correct length\n    // TODO Maybe we should warn here if there's a length mismatch\n    times && times.length === keyframeValues.length ? times : (0,_utils_offsets_default_mjs__WEBPACK_IMPORTED_MODULE_4__.defaultOffset)(keyframeValues), duration);\n    const mapTimeToKeyframe = (0,_utils_interpolate_mjs__WEBPACK_IMPORTED_MODULE_5__.interpolate)(absoluteTimes, keyframeValues, {\n        ease: Array.isArray(easingFunctions) ? easingFunctions : defaultEasing(keyframeValues, easingFunctions)\n    });\n    return {\n        calculatedDuration: duration,\n        next: (t)=>{\n            state.value = mapTimeToKeyframe(t);\n            state.done = t >= duration;\n            return state;\n        }\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9nZW5lcmF0b3JzL2tleWZyYW1lcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBa0Q7QUFDcUI7QUFDQztBQUNkO0FBQ007QUFDSTtBQUVwRSxTQUFTTSxjQUFjQyxNQUFNLEVBQUVDLE1BQU07SUFDakMsT0FBT0QsT0FBT0UsR0FBRyxDQUFDLElBQU1ELFVBQVVSLHVEQUFTQSxFQUFFVSxNQUFNLENBQUMsR0FBR0gsT0FBT0ksTUFBTSxHQUFHO0FBQzNFO0FBQ0EsU0FBU0MsVUFBVSxFQUFFQyxXQUFXLEdBQUcsRUFBRUQsV0FBV0UsY0FBYyxFQUFFQyxLQUFLLEVBQUVDLE9BQU8sV0FBVyxFQUFHO0lBQ3hGOzs7S0FHQyxHQUNELE1BQU1DLGtCQUFrQmhCLGdGQUFhQSxDQUFDZSxRQUNoQ0EsS0FBS1AsR0FBRyxDQUFDUCw2RUFBMEJBLElBQ25DQSxpRkFBMEJBLENBQUNjO0lBQ2pDOzs7S0FHQyxHQUNELE1BQU1FLFFBQVE7UUFDVkMsTUFBTTtRQUNOQyxPQUFPTixjQUFjLENBQUMsRUFBRTtJQUM1QjtJQUNBOztLQUVDLEdBQ0QsTUFBTU8sZ0JBQWdCaEIsNkVBQW9CQSxDQUMxQyw4REFBOEQ7SUFDOUQsOERBQThEO0lBQzlEVSxTQUFTQSxNQUFNSixNQUFNLEtBQUtHLGVBQWVILE1BQU0sR0FDekNJLFFBQ0FYLHlFQUFhQSxDQUFDVSxpQkFBaUJEO0lBQ3JDLE1BQU1TLG9CQUFvQm5CLG1FQUFXQSxDQUFDa0IsZUFBZVAsZ0JBQWdCO1FBQ2pFRSxNQUFNTyxNQUFNQyxPQUFPLENBQUNQLG1CQUNkQSxrQkFDQVgsY0FBY1EsZ0JBQWdCRztJQUN4QztJQUNBLE9BQU87UUFDSFEsb0JBQW9CWjtRQUNwQmEsTUFBTSxDQUFDQztZQUNIVCxNQUFNRSxLQUFLLEdBQUdFLGtCQUFrQks7WUFDaENULE1BQU1DLElBQUksR0FBR1EsS0FBS2Q7WUFDbEIsT0FBT0s7UUFDWDtJQUNKO0FBQ0o7QUFFb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9uL2dlbmVyYXRvcnMva2V5ZnJhbWVzLm1qcz80Zjc2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVhc2VJbk91dCB9IGZyb20gJy4uLy4uL2Vhc2luZy9lYXNlLm1qcyc7XG5pbXBvcnQgeyBpc0Vhc2luZ0FycmF5IH0gZnJvbSAnLi4vLi4vZWFzaW5nL3V0aWxzL2lzLWVhc2luZy1hcnJheS5tanMnO1xuaW1wb3J0IHsgZWFzaW5nRGVmaW5pdGlvblRvRnVuY3Rpb24gfSBmcm9tICcuLi8uLi9lYXNpbmcvdXRpbHMvbWFwLm1qcyc7XG5pbXBvcnQgeyBpbnRlcnBvbGF0ZSB9IGZyb20gJy4uLy4uL3V0aWxzL2ludGVycG9sYXRlLm1qcyc7XG5pbXBvcnQgeyBkZWZhdWx0T2Zmc2V0IH0gZnJvbSAnLi4vLi4vdXRpbHMvb2Zmc2V0cy9kZWZhdWx0Lm1qcyc7XG5pbXBvcnQgeyBjb252ZXJ0T2Zmc2V0VG9UaW1lcyB9IGZyb20gJy4uLy4uL3V0aWxzL29mZnNldHMvdGltZS5tanMnO1xuXG5mdW5jdGlvbiBkZWZhdWx0RWFzaW5nKHZhbHVlcywgZWFzaW5nKSB7XG4gICAgcmV0dXJuIHZhbHVlcy5tYXAoKCkgPT4gZWFzaW5nIHx8IGVhc2VJbk91dCkuc3BsaWNlKDAsIHZhbHVlcy5sZW5ndGggLSAxKTtcbn1cbmZ1bmN0aW9uIGtleWZyYW1lcyh7IGR1cmF0aW9uID0gMzAwLCBrZXlmcmFtZXM6IGtleWZyYW1lVmFsdWVzLCB0aW1lcywgZWFzZSA9IFwiZWFzZUluT3V0XCIsIH0pIHtcbiAgICAvKipcbiAgICAgKiBFYXNpbmcgZnVuY3Rpb25zIGNhbiBiZSBleHRlcm5hbGx5IGRlZmluZWQgYXMgc3RyaW5ncy4gSGVyZSB3ZSBjb252ZXJ0IHRoZW1cbiAgICAgKiBpbnRvIGFjdHVhbCBmdW5jdGlvbnMuXG4gICAgICovXG4gICAgY29uc3QgZWFzaW5nRnVuY3Rpb25zID0gaXNFYXNpbmdBcnJheShlYXNlKVxuICAgICAgICA/IGVhc2UubWFwKGVhc2luZ0RlZmluaXRpb25Ub0Z1bmN0aW9uKVxuICAgICAgICA6IGVhc2luZ0RlZmluaXRpb25Ub0Z1bmN0aW9uKGVhc2UpO1xuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgdGhlIEl0ZXJhdG9yLXNwZWMgcmV0dXJuIHZhbHVlLiBXZSBlbnN1cmUgaXQncyBtdXRhYmxlIHJhdGhlciB0aGFuIHVzaW5nIGEgZ2VuZXJhdG9yXG4gICAgICogdG8gcmVkdWNlIEdDIGR1cmluZyBhbmltYXRpb24uXG4gICAgICovXG4gICAgY29uc3Qgc3RhdGUgPSB7XG4gICAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgICB2YWx1ZToga2V5ZnJhbWVWYWx1ZXNbMF0sXG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSB0aW1lcyBhcnJheSBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgMC0xIG9mZnNldHNcbiAgICAgKi9cbiAgICBjb25zdCBhYnNvbHV0ZVRpbWVzID0gY29udmVydE9mZnNldFRvVGltZXMoXG4gICAgLy8gT25seSB1c2UgdGhlIHByb3ZpZGVkIG9mZnNldHMgaWYgdGhleSdyZSB0aGUgY29ycmVjdCBsZW5ndGhcbiAgICAvLyBUT0RPIE1heWJlIHdlIHNob3VsZCB3YXJuIGhlcmUgaWYgdGhlcmUncyBhIGxlbmd0aCBtaXNtYXRjaFxuICAgIHRpbWVzICYmIHRpbWVzLmxlbmd0aCA9PT0ga2V5ZnJhbWVWYWx1ZXMubGVuZ3RoXG4gICAgICAgID8gdGltZXNcbiAgICAgICAgOiBkZWZhdWx0T2Zmc2V0KGtleWZyYW1lVmFsdWVzKSwgZHVyYXRpb24pO1xuICAgIGNvbnN0IG1hcFRpbWVUb0tleWZyYW1lID0gaW50ZXJwb2xhdGUoYWJzb2x1dGVUaW1lcywga2V5ZnJhbWVWYWx1ZXMsIHtcbiAgICAgICAgZWFzZTogQXJyYXkuaXNBcnJheShlYXNpbmdGdW5jdGlvbnMpXG4gICAgICAgICAgICA/IGVhc2luZ0Z1bmN0aW9uc1xuICAgICAgICAgICAgOiBkZWZhdWx0RWFzaW5nKGtleWZyYW1lVmFsdWVzLCBlYXNpbmdGdW5jdGlvbnMpLFxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIGNhbGN1bGF0ZWREdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgIG5leHQ6ICh0KSA9PiB7XG4gICAgICAgICAgICBzdGF0ZS52YWx1ZSA9IG1hcFRpbWVUb0tleWZyYW1lKHQpO1xuICAgICAgICAgICAgc3RhdGUuZG9uZSA9IHQgPj0gZHVyYXRpb247XG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cblxuZXhwb3J0IHsgZGVmYXVsdEVhc2luZywga2V5ZnJhbWVzIH07XG4iXSwibmFtZXMiOlsiZWFzZUluT3V0IiwiaXNFYXNpbmdBcnJheSIsImVhc2luZ0RlZmluaXRpb25Ub0Z1bmN0aW9uIiwiaW50ZXJwb2xhdGUiLCJkZWZhdWx0T2Zmc2V0IiwiY29udmVydE9mZnNldFRvVGltZXMiLCJkZWZhdWx0RWFzaW5nIiwidmFsdWVzIiwiZWFzaW5nIiwibWFwIiwic3BsaWNlIiwibGVuZ3RoIiwia2V5ZnJhbWVzIiwiZHVyYXRpb24iLCJrZXlmcmFtZVZhbHVlcyIsInRpbWVzIiwiZWFzZSIsImVhc2luZ0Z1bmN0aW9ucyIsInN0YXRlIiwiZG9uZSIsInZhbHVlIiwiYWJzb2x1dGVUaW1lcyIsIm1hcFRpbWVUb0tleWZyYW1lIiwiQXJyYXkiLCJpc0FycmF5IiwiY2FsY3VsYXRlZER1cmF0aW9uIiwibmV4dCIsInQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/generators/keyframes.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/generators/spring/find.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/generators/spring/find.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calcAngularFreq: () => (/* binding */ calcAngularFreq),\n/* harmony export */   findSpring: () => (/* binding */ findSpring),\n/* harmony export */   maxDamping: () => (/* binding */ maxDamping),\n/* harmony export */   maxDuration: () => (/* binding */ maxDuration),\n/* harmony export */   minDamping: () => (/* binding */ minDamping),\n/* harmony export */   minDuration: () => (/* binding */ minDuration)\n/* harmony export */ });\n/* harmony import */ var _utils_errors_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/errors.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/errors.mjs\");\n/* harmony import */ var _utils_clamp_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/clamp.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/clamp.mjs\");\n/* harmony import */ var _utils_time_conversion_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/time-conversion.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/time-conversion.mjs\");\n\n\n\nconst safeMin = 0.001;\nconst minDuration = 0.01;\nconst maxDuration = 10.0;\nconst minDamping = 0.05;\nconst maxDamping = 1;\nfunction findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1 }) {\n    let envelope;\n    let derivative;\n    (0,_utils_errors_mjs__WEBPACK_IMPORTED_MODULE_0__.warning)(duration <= (0,_utils_time_conversion_mjs__WEBPACK_IMPORTED_MODULE_1__.secondsToMilliseconds)(maxDuration), \"Spring duration must be 10 seconds or less\");\n    let dampingRatio = 1 - bounce;\n    /**\n     * Restrict dampingRatio and duration to within acceptable ranges.\n     */ dampingRatio = (0,_utils_clamp_mjs__WEBPACK_IMPORTED_MODULE_2__.clamp)(minDamping, maxDamping, dampingRatio);\n    duration = (0,_utils_clamp_mjs__WEBPACK_IMPORTED_MODULE_2__.clamp)(minDuration, maxDuration, (0,_utils_time_conversion_mjs__WEBPACK_IMPORTED_MODULE_1__.millisecondsToSeconds)(duration));\n    if (dampingRatio < 1) {\n        /**\n         * Underdamped spring\n         */ envelope = (undampedFreq)=>{\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const a = exponentialDecay - velocity;\n            const b = calcAngularFreq(undampedFreq, dampingRatio);\n            const c = Math.exp(-delta);\n            return safeMin - a / b * c;\n        };\n        derivative = (undampedFreq)=>{\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const d = delta * velocity + velocity;\n            const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;\n            const f = Math.exp(-delta);\n            const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);\n            const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;\n            return factor * ((d - e) * f) / g;\n        };\n    } else {\n        /**\n         * Critically-damped spring\n         */ envelope = (undampedFreq)=>{\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (undampedFreq - velocity) * duration + 1;\n            return -safeMin + a * b;\n        };\n        derivative = (undampedFreq)=>{\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (velocity - undampedFreq) * (duration * duration);\n            return a * b;\n        };\n    }\n    const initialGuess = 5 / duration;\n    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);\n    duration = (0,_utils_time_conversion_mjs__WEBPACK_IMPORTED_MODULE_1__.secondsToMilliseconds)(duration);\n    if (isNaN(undampedFreq)) {\n        return {\n            stiffness: 100,\n            damping: 10,\n            duration\n        };\n    } else {\n        const stiffness = Math.pow(undampedFreq, 2) * mass;\n        return {\n            stiffness,\n            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),\n            duration\n        };\n    }\n}\nconst rootIterations = 12;\nfunction approximateRoot(envelope, derivative, initialGuess) {\n    let result = initialGuess;\n    for(let i = 1; i < rootIterations; i++){\n        result = result - envelope(result) / derivative(result);\n    }\n    return result;\n}\nfunction calcAngularFreq(undampedFreq, dampingRatio) {\n    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9nZW5lcmF0b3JzL3NwcmluZy9maW5kLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBb0Q7QUFDSDtBQUNpRDtBQUVsRyxNQUFNSSxVQUFVO0FBQ2hCLE1BQU1DLGNBQWM7QUFDcEIsTUFBTUMsY0FBYztBQUNwQixNQUFNQyxhQUFhO0FBQ25CLE1BQU1DLGFBQWE7QUFDbkIsU0FBU0MsV0FBVyxFQUFFQyxXQUFXLEdBQUcsRUFBRUMsU0FBUyxJQUFJLEVBQUVDLFdBQVcsQ0FBQyxFQUFFQyxPQUFPLENBQUMsRUFBRztJQUMxRSxJQUFJQztJQUNKLElBQUlDO0lBQ0pmLDBEQUFPQSxDQUFDVSxZQUFZUixpRkFBcUJBLENBQUNJLGNBQWM7SUFDeEQsSUFBSVUsZUFBZSxJQUFJTDtJQUN2Qjs7S0FFQyxHQUNESyxlQUFlZix1REFBS0EsQ0FBQ00sWUFBWUMsWUFBWVE7SUFDN0NOLFdBQVdULHVEQUFLQSxDQUFDSSxhQUFhQyxhQUFhSCxpRkFBcUJBLENBQUNPO0lBQ2pFLElBQUlNLGVBQWUsR0FBRztRQUNsQjs7U0FFQyxHQUNERixXQUFXLENBQUNHO1lBQ1IsTUFBTUMsbUJBQW1CRCxlQUFlRDtZQUN4QyxNQUFNRyxRQUFRRCxtQkFBbUJSO1lBQ2pDLE1BQU1VLElBQUlGLG1CQUFtQk47WUFDN0IsTUFBTVMsSUFBSUMsZ0JBQWdCTCxjQUFjRDtZQUN4QyxNQUFNTyxJQUFJQyxLQUFLQyxHQUFHLENBQUMsQ0FBQ047WUFDcEIsT0FBT2YsVUFBVSxJQUFLaUIsSUFBS0U7UUFDL0I7UUFDQVIsYUFBYSxDQUFDRTtZQUNWLE1BQU1DLG1CQUFtQkQsZUFBZUQ7WUFDeEMsTUFBTUcsUUFBUUQsbUJBQW1CUjtZQUNqQyxNQUFNZ0IsSUFBSVAsUUFBUVAsV0FBV0E7WUFDN0IsTUFBTWUsSUFBSUgsS0FBS0ksR0FBRyxDQUFDWixjQUFjLEtBQUtRLEtBQUtJLEdBQUcsQ0FBQ1gsY0FBYyxLQUFLUDtZQUNsRSxNQUFNbUIsSUFBSUwsS0FBS0MsR0FBRyxDQUFDLENBQUNOO1lBQ3BCLE1BQU1XLElBQUlSLGdCQUFnQkUsS0FBS0ksR0FBRyxDQUFDWCxjQUFjLElBQUlEO1lBQ3JELE1BQU1lLFNBQVMsQ0FBQ2pCLFNBQVNHLGdCQUFnQmIsVUFBVSxJQUFJLENBQUMsSUFBSTtZQUM1RCxPQUFPLFNBQVcsRUFBQ3NCLElBQUlDLENBQUFBLElBQUtFLENBQUFBLElBQU1DO1FBQ3RDO0lBQ0osT0FDSztRQUNEOztTQUVDLEdBQ0RoQixXQUFXLENBQUNHO1lBQ1IsTUFBTUcsSUFBSUksS0FBS0MsR0FBRyxDQUFDLENBQUNSLGVBQWVQO1lBQ25DLE1BQU1XLElBQUksQ0FBQ0osZUFBZUwsUUFBTyxJQUFLRixXQUFXO1lBQ2pELE9BQU8sQ0FBQ04sVUFBVWdCLElBQUlDO1FBQzFCO1FBQ0FOLGFBQWEsQ0FBQ0U7WUFDVixNQUFNRyxJQUFJSSxLQUFLQyxHQUFHLENBQUMsQ0FBQ1IsZUFBZVA7WUFDbkMsTUFBTVcsSUFBSSxDQUFDVCxXQUFXSyxZQUFXLElBQU1QLENBQUFBLFdBQVdBLFFBQU87WUFDekQsT0FBT1UsSUFBSUM7UUFDZjtJQUNKO0lBQ0EsTUFBTVcsZUFBZSxJQUFJdEI7SUFDekIsTUFBTU8sZUFBZWdCLGdCQUFnQm5CLFVBQVVDLFlBQVlpQjtJQUMzRHRCLFdBQVdSLGlGQUFxQkEsQ0FBQ1E7SUFDakMsSUFBSXdCLE1BQU1qQixlQUFlO1FBQ3JCLE9BQU87WUFDSGtCLFdBQVc7WUFDWEMsU0FBUztZQUNUMUI7UUFDSjtJQUNKLE9BQ0s7UUFDRCxNQUFNeUIsWUFBWVgsS0FBS0ksR0FBRyxDQUFDWCxjQUFjLEtBQUtKO1FBQzlDLE9BQU87WUFDSHNCO1lBQ0FDLFNBQVNwQixlQUFlLElBQUlRLEtBQUthLElBQUksQ0FBQ3hCLE9BQU9zQjtZQUM3Q3pCO1FBQ0o7SUFDSjtBQUNKO0FBQ0EsTUFBTTRCLGlCQUFpQjtBQUN2QixTQUFTTCxnQkFBZ0JuQixRQUFRLEVBQUVDLFVBQVUsRUFBRWlCLFlBQVk7SUFDdkQsSUFBSU8sU0FBU1A7SUFDYixJQUFLLElBQUlRLElBQUksR0FBR0EsSUFBSUYsZ0JBQWdCRSxJQUFLO1FBQ3JDRCxTQUFTQSxTQUFTekIsU0FBU3lCLFVBQVV4QixXQUFXd0I7SUFDcEQ7SUFDQSxPQUFPQTtBQUNYO0FBQ0EsU0FBU2pCLGdCQUFnQkwsWUFBWSxFQUFFRCxZQUFZO0lBQy9DLE9BQU9DLGVBQWVPLEtBQUthLElBQUksQ0FBQyxJQUFJckIsZUFBZUE7QUFDdkQ7QUFFeUYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9uL2dlbmVyYXRvcnMvc3ByaW5nL2ZpbmQubWpzP2RkZDMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgd2FybmluZyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2Vycm9ycy5tanMnO1xuaW1wb3J0IHsgY2xhbXAgfSBmcm9tICcuLi8uLi8uLi91dGlscy9jbGFtcC5tanMnO1xuaW1wb3J0IHsgc2Vjb25kc1RvTWlsbGlzZWNvbmRzLCBtaWxsaXNlY29uZHNUb1NlY29uZHMgfSBmcm9tICcuLi8uLi8uLi91dGlscy90aW1lLWNvbnZlcnNpb24ubWpzJztcblxuY29uc3Qgc2FmZU1pbiA9IDAuMDAxO1xuY29uc3QgbWluRHVyYXRpb24gPSAwLjAxO1xuY29uc3QgbWF4RHVyYXRpb24gPSAxMC4wO1xuY29uc3QgbWluRGFtcGluZyA9IDAuMDU7XG5jb25zdCBtYXhEYW1waW5nID0gMTtcbmZ1bmN0aW9uIGZpbmRTcHJpbmcoeyBkdXJhdGlvbiA9IDgwMCwgYm91bmNlID0gMC4yNSwgdmVsb2NpdHkgPSAwLCBtYXNzID0gMSwgfSkge1xuICAgIGxldCBlbnZlbG9wZTtcbiAgICBsZXQgZGVyaXZhdGl2ZTtcbiAgICB3YXJuaW5nKGR1cmF0aW9uIDw9IHNlY29uZHNUb01pbGxpc2Vjb25kcyhtYXhEdXJhdGlvbiksIFwiU3ByaW5nIGR1cmF0aW9uIG11c3QgYmUgMTAgc2Vjb25kcyBvciBsZXNzXCIpO1xuICAgIGxldCBkYW1waW5nUmF0aW8gPSAxIC0gYm91bmNlO1xuICAgIC8qKlxuICAgICAqIFJlc3RyaWN0IGRhbXBpbmdSYXRpbyBhbmQgZHVyYXRpb24gdG8gd2l0aGluIGFjY2VwdGFibGUgcmFuZ2VzLlxuICAgICAqL1xuICAgIGRhbXBpbmdSYXRpbyA9IGNsYW1wKG1pbkRhbXBpbmcsIG1heERhbXBpbmcsIGRhbXBpbmdSYXRpbyk7XG4gICAgZHVyYXRpb24gPSBjbGFtcChtaW5EdXJhdGlvbiwgbWF4RHVyYXRpb24sIG1pbGxpc2Vjb25kc1RvU2Vjb25kcyhkdXJhdGlvbikpO1xuICAgIGlmIChkYW1waW5nUmF0aW8gPCAxKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVbmRlcmRhbXBlZCBzcHJpbmdcbiAgICAgICAgICovXG4gICAgICAgIGVudmVsb3BlID0gKHVuZGFtcGVkRnJlcSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZXhwb25lbnRpYWxEZWNheSA9IHVuZGFtcGVkRnJlcSAqIGRhbXBpbmdSYXRpbztcbiAgICAgICAgICAgIGNvbnN0IGRlbHRhID0gZXhwb25lbnRpYWxEZWNheSAqIGR1cmF0aW9uO1xuICAgICAgICAgICAgY29uc3QgYSA9IGV4cG9uZW50aWFsRGVjYXkgLSB2ZWxvY2l0eTtcbiAgICAgICAgICAgIGNvbnN0IGIgPSBjYWxjQW5ndWxhckZyZXEodW5kYW1wZWRGcmVxLCBkYW1waW5nUmF0aW8pO1xuICAgICAgICAgICAgY29uc3QgYyA9IE1hdGguZXhwKC1kZWx0YSk7XG4gICAgICAgICAgICByZXR1cm4gc2FmZU1pbiAtIChhIC8gYikgKiBjO1xuICAgICAgICB9O1xuICAgICAgICBkZXJpdmF0aXZlID0gKHVuZGFtcGVkRnJlcSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZXhwb25lbnRpYWxEZWNheSA9IHVuZGFtcGVkRnJlcSAqIGRhbXBpbmdSYXRpbztcbiAgICAgICAgICAgIGNvbnN0IGRlbHRhID0gZXhwb25lbnRpYWxEZWNheSAqIGR1cmF0aW9uO1xuICAgICAgICAgICAgY29uc3QgZCA9IGRlbHRhICogdmVsb2NpdHkgKyB2ZWxvY2l0eTtcbiAgICAgICAgICAgIGNvbnN0IGUgPSBNYXRoLnBvdyhkYW1waW5nUmF0aW8sIDIpICogTWF0aC5wb3codW5kYW1wZWRGcmVxLCAyKSAqIGR1cmF0aW9uO1xuICAgICAgICAgICAgY29uc3QgZiA9IE1hdGguZXhwKC1kZWx0YSk7XG4gICAgICAgICAgICBjb25zdCBnID0gY2FsY0FuZ3VsYXJGcmVxKE1hdGgucG93KHVuZGFtcGVkRnJlcSwgMiksIGRhbXBpbmdSYXRpbyk7XG4gICAgICAgICAgICBjb25zdCBmYWN0b3IgPSAtZW52ZWxvcGUodW5kYW1wZWRGcmVxKSArIHNhZmVNaW4gPiAwID8gLTEgOiAxO1xuICAgICAgICAgICAgcmV0dXJuIChmYWN0b3IgKiAoKGQgLSBlKSAqIGYpKSAvIGc7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvKipcbiAgICAgICAgICogQ3JpdGljYWxseS1kYW1wZWQgc3ByaW5nXG4gICAgICAgICAqL1xuICAgICAgICBlbnZlbG9wZSA9ICh1bmRhbXBlZEZyZXEpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGEgPSBNYXRoLmV4cCgtdW5kYW1wZWRGcmVxICogZHVyYXRpb24pO1xuICAgICAgICAgICAgY29uc3QgYiA9ICh1bmRhbXBlZEZyZXEgLSB2ZWxvY2l0eSkgKiBkdXJhdGlvbiArIDE7XG4gICAgICAgICAgICByZXR1cm4gLXNhZmVNaW4gKyBhICogYjtcbiAgICAgICAgfTtcbiAgICAgICAgZGVyaXZhdGl2ZSA9ICh1bmRhbXBlZEZyZXEpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGEgPSBNYXRoLmV4cCgtdW5kYW1wZWRGcmVxICogZHVyYXRpb24pO1xuICAgICAgICAgICAgY29uc3QgYiA9ICh2ZWxvY2l0eSAtIHVuZGFtcGVkRnJlcSkgKiAoZHVyYXRpb24gKiBkdXJhdGlvbik7XG4gICAgICAgICAgICByZXR1cm4gYSAqIGI7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IGluaXRpYWxHdWVzcyA9IDUgLyBkdXJhdGlvbjtcbiAgICBjb25zdCB1bmRhbXBlZEZyZXEgPSBhcHByb3hpbWF0ZVJvb3QoZW52ZWxvcGUsIGRlcml2YXRpdmUsIGluaXRpYWxHdWVzcyk7XG4gICAgZHVyYXRpb24gPSBzZWNvbmRzVG9NaWxsaXNlY29uZHMoZHVyYXRpb24pO1xuICAgIGlmIChpc05hTih1bmRhbXBlZEZyZXEpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGlmZm5lc3M6IDEwMCxcbiAgICAgICAgICAgIGRhbXBpbmc6IDEwLFxuICAgICAgICAgICAgZHVyYXRpb24sXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBzdGlmZm5lc3MgPSBNYXRoLnBvdyh1bmRhbXBlZEZyZXEsIDIpICogbWFzcztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0aWZmbmVzcyxcbiAgICAgICAgICAgIGRhbXBpbmc6IGRhbXBpbmdSYXRpbyAqIDIgKiBNYXRoLnNxcnQobWFzcyAqIHN0aWZmbmVzcyksXG4gICAgICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgfTtcbiAgICB9XG59XG5jb25zdCByb290SXRlcmF0aW9ucyA9IDEyO1xuZnVuY3Rpb24gYXBwcm94aW1hdGVSb290KGVudmVsb3BlLCBkZXJpdmF0aXZlLCBpbml0aWFsR3Vlc3MpIHtcbiAgICBsZXQgcmVzdWx0ID0gaW5pdGlhbEd1ZXNzO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcm9vdEl0ZXJhdGlvbnM7IGkrKykge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQgLSBlbnZlbG9wZShyZXN1bHQpIC8gZGVyaXZhdGl2ZShyZXN1bHQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gY2FsY0FuZ3VsYXJGcmVxKHVuZGFtcGVkRnJlcSwgZGFtcGluZ1JhdGlvKSB7XG4gICAgcmV0dXJuIHVuZGFtcGVkRnJlcSAqIE1hdGguc3FydCgxIC0gZGFtcGluZ1JhdGlvICogZGFtcGluZ1JhdGlvKTtcbn1cblxuZXhwb3J0IHsgY2FsY0FuZ3VsYXJGcmVxLCBmaW5kU3ByaW5nLCBtYXhEYW1waW5nLCBtYXhEdXJhdGlvbiwgbWluRGFtcGluZywgbWluRHVyYXRpb24gfTtcbiJdLCJuYW1lcyI6WyJ3YXJuaW5nIiwiY2xhbXAiLCJzZWNvbmRzVG9NaWxsaXNlY29uZHMiLCJtaWxsaXNlY29uZHNUb1NlY29uZHMiLCJzYWZlTWluIiwibWluRHVyYXRpb24iLCJtYXhEdXJhdGlvbiIsIm1pbkRhbXBpbmciLCJtYXhEYW1waW5nIiwiZmluZFNwcmluZyIsImR1cmF0aW9uIiwiYm91bmNlIiwidmVsb2NpdHkiLCJtYXNzIiwiZW52ZWxvcGUiLCJkZXJpdmF0aXZlIiwiZGFtcGluZ1JhdGlvIiwidW5kYW1wZWRGcmVxIiwiZXhwb25lbnRpYWxEZWNheSIsImRlbHRhIiwiYSIsImIiLCJjYWxjQW5ndWxhckZyZXEiLCJjIiwiTWF0aCIsImV4cCIsImQiLCJlIiwicG93IiwiZiIsImciLCJmYWN0b3IiLCJpbml0aWFsR3Vlc3MiLCJhcHByb3hpbWF0ZVJvb3QiLCJpc05hTiIsInN0aWZmbmVzcyIsImRhbXBpbmciLCJzcXJ0Iiwicm9vdEl0ZXJhdGlvbnMiLCJyZXN1bHQiLCJpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/generators/spring/find.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/generators/spring/index.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/generators/spring/index.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   spring: () => (/* binding */ spring)\n/* harmony export */ });\n/* harmony import */ var _utils_time_conversion_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/time-conversion.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/time-conversion.mjs\");\n/* harmony import */ var _utils_velocity_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/velocity.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/generators/utils/velocity.mjs\");\n/* harmony import */ var _find_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./find.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/generators/spring/find.mjs\");\n\n\n\nconst durationKeys = [\n    \"duration\",\n    \"bounce\"\n];\nconst physicsKeys = [\n    \"stiffness\",\n    \"damping\",\n    \"mass\"\n];\nfunction isSpringType(options, keys) {\n    return keys.some((key)=>options[key] !== undefined);\n}\nfunction getSpringOptions(options) {\n    let springOptions = {\n        velocity: 0.0,\n        stiffness: 100,\n        damping: 10,\n        mass: 1.0,\n        isResolvedFromDuration: false,\n        ...options\n    };\n    // stiffness/damping/mass overrides duration/bounce\n    if (!isSpringType(options, physicsKeys) && isSpringType(options, durationKeys)) {\n        const derived = (0,_find_mjs__WEBPACK_IMPORTED_MODULE_0__.findSpring)(options);\n        springOptions = {\n            ...springOptions,\n            ...derived,\n            velocity: 0.0,\n            mass: 1.0\n        };\n        springOptions.isResolvedFromDuration = true;\n    }\n    return springOptions;\n}\nfunction spring({ keyframes, restDelta, restSpeed, ...options }) {\n    const origin = keyframes[0];\n    const target = keyframes[keyframes.length - 1];\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */ const state = {\n        done: false,\n        value: origin\n    };\n    const { stiffness, damping, mass, velocity, duration, isResolvedFromDuration } = getSpringOptions(options);\n    const initialVelocity = velocity ? -(0,_utils_time_conversion_mjs__WEBPACK_IMPORTED_MODULE_1__.millisecondsToSeconds)(velocity) : 0.0;\n    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n    const initialDelta = target - origin;\n    const undampedAngularFreq = (0,_utils_time_conversion_mjs__WEBPACK_IMPORTED_MODULE_1__.millisecondsToSeconds)(Math.sqrt(stiffness / mass));\n    /**\n     * If we're working on a granular scale, use smaller defaults for determining\n     * when the spring is finished.\n     *\n     * These defaults have been selected emprically based on what strikes a good\n     * ratio between feeling good and finishing as soon as changes are imperceptible.\n     */ const isGranularScale = Math.abs(initialDelta) < 5;\n    restSpeed || (restSpeed = isGranularScale ? 0.01 : 2);\n    restDelta || (restDelta = isGranularScale ? 0.005 : 0.5);\n    let resolveSpring;\n    if (dampingRatio < 1) {\n        const angularFreq = (0,_find_mjs__WEBPACK_IMPORTED_MODULE_0__.calcAngularFreq)(undampedAngularFreq, dampingRatio);\n        // Underdamped spring\n        resolveSpring = (t)=>{\n            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n            return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t) + initialDelta * Math.cos(angularFreq * t));\n        };\n    } else if (dampingRatio === 1) {\n        // Critically damped spring\n        resolveSpring = (t)=>target - Math.exp(-undampedAngularFreq * t) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t);\n    } else {\n        // Overdamped spring\n        const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n        resolveSpring = (t)=>{\n            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n            // When performing sinh or cosh values can hit Infinity so we cap them here\n            const freqForT = Math.min(dampedAngularFreq * t, 300);\n            return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq;\n        };\n    }\n    return {\n        calculatedDuration: isResolvedFromDuration ? duration || null : null,\n        next: (t)=>{\n            const current = resolveSpring(t);\n            if (!isResolvedFromDuration) {\n                let currentVelocity = initialVelocity;\n                if (t !== 0) {\n                    /**\n                     * We only need to calculate velocity for under-damped springs\n                     * as over- and critically-damped springs can't overshoot, so\n                     * checking only for displacement is enough.\n                     */ if (dampingRatio < 1) {\n                        currentVelocity = (0,_utils_velocity_mjs__WEBPACK_IMPORTED_MODULE_2__.calcGeneratorVelocity)(resolveSpring, t, current);\n                    } else {\n                        currentVelocity = 0;\n                    }\n                }\n                const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n                const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;\n                state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;\n            } else {\n                state.done = t >= duration;\n            }\n            state.value = state.done ? target : current;\n            return state;\n        }\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/generators/spring/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/generators/utils/calc-duration.mjs":
/*!*****************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/generators/utils/calc-duration.mjs ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calcGeneratorDuration: () => (/* binding */ calcGeneratorDuration),\n/* harmony export */   maxGeneratorDuration: () => (/* binding */ maxGeneratorDuration)\n/* harmony export */ });\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */ const maxGeneratorDuration = 20000;\nfunction calcGeneratorDuration(generator) {\n    let duration = 0;\n    const timeStep = 50;\n    let state = generator.next(duration);\n    while(!state.done && duration < maxGeneratorDuration){\n        duration += timeStep;\n        state = generator.next(duration);\n    }\n    return duration >= maxGeneratorDuration ? Infinity : duration;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9nZW5lcmF0b3JzL3V0aWxzL2NhbGMtZHVyYXRpb24ubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7OztDQUdDLEdBQ0QsTUFBTUEsdUJBQXVCO0FBQzdCLFNBQVNDLHNCQUFzQkMsU0FBUztJQUNwQyxJQUFJQyxXQUFXO0lBQ2YsTUFBTUMsV0FBVztJQUNqQixJQUFJQyxRQUFRSCxVQUFVSSxJQUFJLENBQUNIO0lBQzNCLE1BQU8sQ0FBQ0UsTUFBTUUsSUFBSSxJQUFJSixXQUFXSCxxQkFBc0I7UUFDbkRHLFlBQVlDO1FBQ1pDLFFBQVFILFVBQVVJLElBQUksQ0FBQ0g7SUFDM0I7SUFDQSxPQUFPQSxZQUFZSCx1QkFBdUJRLFdBQVdMO0FBQ3pEO0FBRXVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9nZW5lcmF0b3JzL3V0aWxzL2NhbGMtZHVyYXRpb24ubWpzPzdhZDMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBJbXBsZW1lbnQgYSBwcmFjdGljYWwgbWF4IGR1cmF0aW9uIGZvciBrZXlmcmFtZSBnZW5lcmF0aW9uXG4gKiB0byBwcmV2ZW50IGluZmluaXRlIGxvb3BzXG4gKi9cbmNvbnN0IG1heEdlbmVyYXRvckR1cmF0aW9uID0gMjAwMDA7XG5mdW5jdGlvbiBjYWxjR2VuZXJhdG9yRHVyYXRpb24oZ2VuZXJhdG9yKSB7XG4gICAgbGV0IGR1cmF0aW9uID0gMDtcbiAgICBjb25zdCB0aW1lU3RlcCA9IDUwO1xuICAgIGxldCBzdGF0ZSA9IGdlbmVyYXRvci5uZXh0KGR1cmF0aW9uKTtcbiAgICB3aGlsZSAoIXN0YXRlLmRvbmUgJiYgZHVyYXRpb24gPCBtYXhHZW5lcmF0b3JEdXJhdGlvbikge1xuICAgICAgICBkdXJhdGlvbiArPSB0aW1lU3RlcDtcbiAgICAgICAgc3RhdGUgPSBnZW5lcmF0b3IubmV4dChkdXJhdGlvbik7XG4gICAgfVxuICAgIHJldHVybiBkdXJhdGlvbiA+PSBtYXhHZW5lcmF0b3JEdXJhdGlvbiA/IEluZmluaXR5IDogZHVyYXRpb247XG59XG5cbmV4cG9ydCB7IGNhbGNHZW5lcmF0b3JEdXJhdGlvbiwgbWF4R2VuZXJhdG9yRHVyYXRpb24gfTtcbiJdLCJuYW1lcyI6WyJtYXhHZW5lcmF0b3JEdXJhdGlvbiIsImNhbGNHZW5lcmF0b3JEdXJhdGlvbiIsImdlbmVyYXRvciIsImR1cmF0aW9uIiwidGltZVN0ZXAiLCJzdGF0ZSIsIm5leHQiLCJkb25lIiwiSW5maW5pdHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/generators/utils/calc-duration.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/generators/utils/velocity.mjs":
/*!************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/generators/utils/velocity.mjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calcGeneratorVelocity: () => (/* binding */ calcGeneratorVelocity)\n/* harmony export */ });\n/* harmony import */ var _utils_velocity_per_second_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/velocity-per-second.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/velocity-per-second.mjs\");\n\nconst velocitySampleDuration = 5; // ms\nfunction calcGeneratorVelocity(resolveValue, t, current) {\n    const prevT = Math.max(t - velocitySampleDuration, 0);\n    return (0,_utils_velocity_per_second_mjs__WEBPACK_IMPORTED_MODULE_0__.velocityPerSecond)(current - resolveValue(prevT), t - prevT);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9nZW5lcmF0b3JzL3V0aWxzL3ZlbG9jaXR5Lm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEyRTtBQUUzRSxNQUFNQyx5QkFBeUIsR0FBRyxLQUFLO0FBQ3ZDLFNBQVNDLHNCQUFzQkMsWUFBWSxFQUFFQyxDQUFDLEVBQUVDLE9BQU87SUFDbkQsTUFBTUMsUUFBUUMsS0FBS0MsR0FBRyxDQUFDSixJQUFJSCx3QkFBd0I7SUFDbkQsT0FBT0QsaUZBQWlCQSxDQUFDSyxVQUFVRixhQUFhRyxRQUFRRixJQUFJRTtBQUNoRTtBQUVpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vZ2VuZXJhdG9ycy91dGlscy92ZWxvY2l0eS5tanM/YzA3YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB2ZWxvY2l0eVBlclNlY29uZCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3ZlbG9jaXR5LXBlci1zZWNvbmQubWpzJztcblxuY29uc3QgdmVsb2NpdHlTYW1wbGVEdXJhdGlvbiA9IDU7IC8vIG1zXG5mdW5jdGlvbiBjYWxjR2VuZXJhdG9yVmVsb2NpdHkocmVzb2x2ZVZhbHVlLCB0LCBjdXJyZW50KSB7XG4gICAgY29uc3QgcHJldlQgPSBNYXRoLm1heCh0IC0gdmVsb2NpdHlTYW1wbGVEdXJhdGlvbiwgMCk7XG4gICAgcmV0dXJuIHZlbG9jaXR5UGVyU2Vjb25kKGN1cnJlbnQgLSByZXNvbHZlVmFsdWUocHJldlQpLCB0IC0gcHJldlQpO1xufVxuXG5leHBvcnQgeyBjYWxjR2VuZXJhdG9yVmVsb2NpdHkgfTtcbiJdLCJuYW1lcyI6WyJ2ZWxvY2l0eVBlclNlY29uZCIsInZlbG9jaXR5U2FtcGxlRHVyYXRpb24iLCJjYWxjR2VuZXJhdG9yVmVsb2NpdHkiLCJyZXNvbHZlVmFsdWUiLCJ0IiwiY3VycmVudCIsInByZXZUIiwiTWF0aCIsIm1heCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/generators/utils/velocity.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   animateMotionValue: () => (/* binding */ animateMotionValue)\n/* harmony export */ });\n/* harmony import */ var _utils_errors_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/errors.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/errors.mjs\");\n/* harmony import */ var _utils_time_conversion_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/time-conversion.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/time-conversion.mjs\");\n/* harmony import */ var _utils_use_instant_transition_state_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/use-instant-transition-state.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs\");\n/* harmony import */ var _animators_waapi_create_accelerated_animation_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../animators/waapi/create-accelerated-animation.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/animators/waapi/create-accelerated-animation.mjs\");\n/* harmony import */ var _animators_instant_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../animators/instant.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/animators/instant.mjs\");\n/* harmony import */ var _utils_default_transitions_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/default-transitions.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs\");\n/* harmony import */ var _utils_is_animatable_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/is-animatable.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs\");\n/* harmony import */ var _utils_keyframes_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/keyframes.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/utils/keyframes.mjs\");\n/* harmony import */ var _utils_transitions_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/transitions.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/utils/transitions.mjs\");\n/* harmony import */ var _animators_js_index_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../animators/js/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/animators/js/index.mjs\");\n\n\n\n\n\n\n\n\n\n\nconst animateMotionValue = (valueName, value, target, transition = {})=>{\n    return (onComplete)=>{\n        const valueTransition = (0,_utils_transitions_mjs__WEBPACK_IMPORTED_MODULE_0__.getValueTransition)(transition, valueName) || {};\n        /**\n         * Most transition values are currently completely overwritten by value-specific\n         * transitions. In the future it'd be nicer to blend these transitions. But for now\n         * delay actually does inherit from the root transition if not value-specific.\n         */ const delay = valueTransition.delay || transition.delay || 0;\n        /**\n         * Elapsed isn't a public transition option but can be passed through from\n         * optimized appear effects in milliseconds.\n         */ let { elapsed = 0 } = transition;\n        elapsed = elapsed - (0,_utils_time_conversion_mjs__WEBPACK_IMPORTED_MODULE_1__.secondsToMilliseconds)(delay);\n        const keyframes = (0,_utils_keyframes_mjs__WEBPACK_IMPORTED_MODULE_2__.getKeyframes)(value, valueName, target, valueTransition);\n        /**\n         * Check if we're able to animate between the start and end keyframes,\n         * and throw a warning if we're attempting to animate between one that's\n         * animatable and another that isn't.\n         */ const originKeyframe = keyframes[0];\n        const targetKeyframe = keyframes[keyframes.length - 1];\n        const isOriginAnimatable = (0,_utils_is_animatable_mjs__WEBPACK_IMPORTED_MODULE_3__.isAnimatable)(valueName, originKeyframe);\n        const isTargetAnimatable = (0,_utils_is_animatable_mjs__WEBPACK_IMPORTED_MODULE_3__.isAnimatable)(valueName, targetKeyframe);\n        (0,_utils_errors_mjs__WEBPACK_IMPORTED_MODULE_4__.warning)(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${valueName} from \"${originKeyframe}\" to \"${targetKeyframe}\". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \\`style\\` property.`);\n        let options = {\n            keyframes,\n            velocity: value.getVelocity(),\n            ease: \"easeOut\",\n            ...valueTransition,\n            delay: -elapsed,\n            onUpdate: (v)=>{\n                value.set(v);\n                valueTransition.onUpdate && valueTransition.onUpdate(v);\n            },\n            onComplete: ()=>{\n                onComplete();\n                valueTransition.onComplete && valueTransition.onComplete();\n            }\n        };\n        /**\n         * If there's no transition defined for this value, we can generate\n         * unqiue transition settings for this value.\n         */ if (!(0,_utils_transitions_mjs__WEBPACK_IMPORTED_MODULE_0__.isTransitionDefined)(valueTransition)) {\n            options = {\n                ...options,\n                ...(0,_utils_default_transitions_mjs__WEBPACK_IMPORTED_MODULE_5__.getDefaultTransition)(valueName, options)\n            };\n        }\n        /**\n         * Both WAAPI and our internal animation functions use durations\n         * as defined by milliseconds, while our external API defines them\n         * as seconds.\n         */ if (options.duration) {\n            options.duration = (0,_utils_time_conversion_mjs__WEBPACK_IMPORTED_MODULE_1__.secondsToMilliseconds)(options.duration);\n        }\n        if (options.repeatDelay) {\n            options.repeatDelay = (0,_utils_time_conversion_mjs__WEBPACK_IMPORTED_MODULE_1__.secondsToMilliseconds)(options.repeatDelay);\n        }\n        if (!isOriginAnimatable || !isTargetAnimatable || _utils_use_instant_transition_state_mjs__WEBPACK_IMPORTED_MODULE_6__.instantAnimationState.current || valueTransition.type === false) {\n            /**\n             * If we can't animate this value, or the global instant animation flag is set,\n             * or this is simply defined as an instant transition, return an instant transition.\n             */ return (0,_animators_instant_mjs__WEBPACK_IMPORTED_MODULE_7__.createInstantAnimation)(_utils_use_instant_transition_state_mjs__WEBPACK_IMPORTED_MODULE_6__.instantAnimationState.current ? {\n                ...options,\n                delay: 0\n            } : options);\n        }\n        /**\n         * Animate via WAAPI if possible.\n         */ if (/**\n         * If this is a handoff animation, the optimised animation will be running via\n         * WAAPI. Therefore, this animation must be JS to ensure it runs \"under\" the\n         * optimised animation.\n         */ !transition.isHandoff && value.owner && value.owner.current instanceof HTMLElement && /**\n             * If we're outputting values to onUpdate then we can't use WAAPI as there's\n             * no way to read the value from WAAPI every frame.\n             */ !value.owner.getProps().onUpdate) {\n            const acceleratedAnimation = (0,_animators_waapi_create_accelerated_animation_mjs__WEBPACK_IMPORTED_MODULE_8__.createAcceleratedAnimation)(value, valueName, options);\n            if (acceleratedAnimation) return acceleratedAnimation;\n        }\n        /**\n         * If we didn't create an accelerated animation, create a JS animation\n         */ return (0,_animators_js_index_mjs__WEBPACK_IMPORTED_MODULE_9__.animateValue)(options);\n    };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/interfaces/single-value.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/interfaces/single-value.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   animateSingleValue: () => (/* binding */ animateSingleValue)\n/* harmony export */ });\n/* harmony import */ var _motion_value_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs\");\n/* harmony import */ var _value_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../value/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/index.mjs\");\n/* harmony import */ var _value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../value/utils/is-motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs\");\n\n\n\nfunction animateSingleValue(value, keyframes, options) {\n    const motionValue$1 = (0,_value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_0__.isMotionValue)(value) ? value : (0,_value_index_mjs__WEBPACK_IMPORTED_MODULE_1__.motionValue)(value);\n    motionValue$1.start((0,_motion_value_mjs__WEBPACK_IMPORTED_MODULE_2__.animateMotionValue)(\"\", motionValue$1, keyframes, options));\n    return motionValue$1.animation;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9pbnRlcmZhY2VzL3NpbmdsZS12YWx1ZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF3RDtBQUNKO0FBQ2tCO0FBRXRFLFNBQVNHLG1CQUFtQkMsS0FBSyxFQUFFQyxTQUFTLEVBQUVDLE9BQU87SUFDakQsTUFBTUMsZ0JBQWdCTCwrRUFBYUEsQ0FBQ0UsU0FBU0EsUUFBUUgsNkRBQVdBLENBQUNHO0lBQ2pFRyxjQUFjQyxLQUFLLENBQUNSLHFFQUFrQkEsQ0FBQyxJQUFJTyxlQUFlRixXQUFXQztJQUNyRSxPQUFPQyxjQUFjRSxTQUFTO0FBQ2xDO0FBRThCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9pbnRlcmZhY2VzL3NpbmdsZS12YWx1ZS5tanM/YWU5YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhbmltYXRlTW90aW9uVmFsdWUgfSBmcm9tICcuL21vdGlvbi12YWx1ZS5tanMnO1xuaW1wb3J0IHsgbW90aW9uVmFsdWUgfSBmcm9tICcuLi8uLi92YWx1ZS9pbmRleC5tanMnO1xuaW1wb3J0IHsgaXNNb3Rpb25WYWx1ZSB9IGZyb20gJy4uLy4uL3ZhbHVlL3V0aWxzL2lzLW1vdGlvbi12YWx1ZS5tanMnO1xuXG5mdW5jdGlvbiBhbmltYXRlU2luZ2xlVmFsdWUodmFsdWUsIGtleWZyYW1lcywgb3B0aW9ucykge1xuICAgIGNvbnN0IG1vdGlvblZhbHVlJDEgPSBpc01vdGlvblZhbHVlKHZhbHVlKSA/IHZhbHVlIDogbW90aW9uVmFsdWUodmFsdWUpO1xuICAgIG1vdGlvblZhbHVlJDEuc3RhcnQoYW5pbWF0ZU1vdGlvblZhbHVlKFwiXCIsIG1vdGlvblZhbHVlJDEsIGtleWZyYW1lcywgb3B0aW9ucykpO1xuICAgIHJldHVybiBtb3Rpb25WYWx1ZSQxLmFuaW1hdGlvbjtcbn1cblxuZXhwb3J0IHsgYW5pbWF0ZVNpbmdsZVZhbHVlIH07XG4iXSwibmFtZXMiOlsiYW5pbWF0ZU1vdGlvblZhbHVlIiwibW90aW9uVmFsdWUiLCJpc01vdGlvblZhbHVlIiwiYW5pbWF0ZVNpbmdsZVZhbHVlIiwidmFsdWUiLCJrZXlmcmFtZXMiLCJvcHRpb25zIiwibW90aW9uVmFsdWUkMSIsInN0YXJ0IiwiYW5pbWF0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/interfaces/single-value.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs":
/*!*******************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   animateTarget: () => (/* binding */ animateTarget)\n/* harmony export */ });\n/* harmony import */ var _render_html_utils_transform_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../render/html/utils/transform.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/transform.mjs\");\n/* harmony import */ var _optimized_appear_data_id_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../optimized-appear/data-id.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs\");\n/* harmony import */ var _motion_value_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs\");\n/* harmony import */ var _value_use_will_change_is_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../value/use-will-change/is.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/use-will-change/is.mjs\");\n/* harmony import */ var _render_utils_setters_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../render/utils/setters.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/setters.mjs\");\n/* harmony import */ var _utils_transitions_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/transitions.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/utils/transitions.mjs\");\n/* harmony import */ var _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../frameloop/frame.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/frameloop/frame.mjs\");\n\n\n\n\n\n\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */ function shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction hasKeyframesChanged(value, target) {\n    const current = value.get();\n    if (Array.isArray(target)) {\n        for(let i = 0; i < target.length; i++){\n            if (target[i] !== current) return true;\n        }\n    } else {\n        return current !== target;\n    }\n}\nfunction animateTarget(visualElement, definition, { delay = 0, transitionOverride, type } = {}) {\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);\n    const willChange = visualElement.getValue(\"willChange\");\n    if (transitionOverride) transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];\n    for(const key in target){\n        const value = visualElement.getValue(key);\n        const valueTarget = target[key];\n        if (!value || valueTarget === undefined || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {\n            continue;\n        }\n        const valueTransition = {\n            delay,\n            elapsed: 0,\n            ...(0,_utils_transitions_mjs__WEBPACK_IMPORTED_MODULE_0__.getValueTransition)(transition || {}, key)\n        };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */ if (window.HandoffAppearAnimations) {\n            const appearId = visualElement.getProps()[_optimized_appear_data_id_mjs__WEBPACK_IMPORTED_MODULE_1__.optimizedAppearDataAttribute];\n            if (appearId) {\n                const elapsed = window.HandoffAppearAnimations(appearId, key, value, _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_2__.frame);\n                if (elapsed !== null) {\n                    valueTransition.elapsed = elapsed;\n                    valueTransition.isHandoff = true;\n                }\n            }\n        }\n        let canSkip = !valueTransition.isHandoff && !hasKeyframesChanged(value, valueTarget);\n        if (valueTransition.type === \"spring\" && (value.getVelocity() || valueTransition.velocity)) {\n            canSkip = false;\n        }\n        /**\n         * Temporarily disable skipping animations if there's an animation in\n         * progress. Better would be to track the current target of a value\n         * and compare that against valueTarget.\n         */ if (value.animation) {\n            canSkip = false;\n        }\n        if (canSkip) continue;\n        value.start((0,_motion_value_mjs__WEBPACK_IMPORTED_MODULE_3__.animateMotionValue)(key, value, valueTarget, visualElement.shouldReduceMotion && _render_html_utils_transform_mjs__WEBPACK_IMPORTED_MODULE_4__.transformProps.has(key) ? {\n            type: false\n        } : valueTransition));\n        const animation = value.animation;\n        if ((0,_value_use_will_change_is_mjs__WEBPACK_IMPORTED_MODULE_5__.isWillChangeMotionValue)(willChange)) {\n            willChange.add(key);\n            animation.then(()=>willChange.remove(key));\n        }\n        animations.push(animation);\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(()=>{\n            transitionEnd && (0,_render_utils_setters_mjs__WEBPACK_IMPORTED_MODULE_6__.setTarget)(visualElement, transitionEnd);\n        });\n    }\n    return animations;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.mjs":
/*!********************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.mjs ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   animateVariant: () => (/* binding */ animateVariant),\n/* harmony export */   sortByTreeOrder: () => (/* binding */ sortByTreeOrder)\n/* harmony export */ });\n/* harmony import */ var _render_utils_resolve_dynamic_variants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../render/utils/resolve-dynamic-variants.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs\");\n/* harmony import */ var _visual_element_target_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./visual-element-target.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs\");\n\n\nfunction animateVariant(visualElement, variant, options = {}) {\n    const resolved = (0,_render_utils_resolve_dynamic_variants_mjs__WEBPACK_IMPORTED_MODULE_0__.resolveVariant)(visualElement, variant, options.custom);\n    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */ const getAnimation = resolved ? ()=>Promise.all((0,_visual_element_target_mjs__WEBPACK_IMPORTED_MODULE_1__.animateTarget)(visualElement, resolved, options)) : ()=>Promise.resolve();\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */ const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size ? (forwardDelay = 0)=>{\n        const { delayChildren = 0, staggerChildren, staggerDirection } = transition;\n        return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n    } : ()=>Promise.resolve();\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */ const { when } = transition;\n    if (when) {\n        const [first, last] = when === \"beforeChildren\" ? [\n            getAnimation,\n            getChildAnimations\n        ] : [\n            getChildAnimations,\n            getAnimation\n        ];\n        return first().then(()=>last());\n    } else {\n        return Promise.all([\n            getAnimation(),\n            getChildAnimations(options.delay)\n        ]);\n    }\n}\nfunction animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {\n    const animations = [];\n    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n    const generateStaggerDuration = staggerDirection === 1 ? (i = 0)=>i * staggerChildren : (i = 0)=>maxStaggerDuration - i * staggerChildren;\n    Array.from(visualElement.variantChildren).sort(sortByTreeOrder).forEach((child, i)=>{\n        child.notify(\"AnimationStart\", variant);\n        animations.push(animateVariant(child, variant, {\n            ...options,\n            delay: delayChildren + generateStaggerDuration(i)\n        }).then(()=>child.notify(\"AnimationComplete\", variant)));\n    });\n    return Promise.all(animations);\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9pbnRlcmZhY2VzL3Zpc3VhbC1lbGVtZW50LXZhcmlhbnQubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBaUY7QUFDckI7QUFFNUQsU0FBU0UsZUFBZUMsYUFBYSxFQUFFQyxPQUFPLEVBQUVDLFVBQVUsQ0FBQyxDQUFDO0lBQ3hELE1BQU1DLFdBQVdOLDBGQUFjQSxDQUFDRyxlQUFlQyxTQUFTQyxRQUFRRSxNQUFNO0lBQ3RFLElBQUksRUFBRUMsYUFBYUwsY0FBY00sb0JBQW9CLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBR0gsWUFBWSxDQUFDO0lBQy9FLElBQUlELFFBQVFLLGtCQUFrQixFQUFFO1FBQzVCRixhQUFhSCxRQUFRSyxrQkFBa0I7SUFDM0M7SUFDQTs7O0tBR0MsR0FDRCxNQUFNQyxlQUFlTCxXQUNmLElBQU1NLFFBQVFDLEdBQUcsQ0FBQ1oseUVBQWFBLENBQUNFLGVBQWVHLFVBQVVELFlBQ3pELElBQU1PLFFBQVFFLE9BQU87SUFDM0I7OztLQUdDLEdBQ0QsTUFBTUMscUJBQXFCWixjQUFjYSxlQUFlLElBQUliLGNBQWNhLGVBQWUsQ0FBQ0MsSUFBSSxHQUN4RixDQUFDQyxlQUFlLENBQUM7UUFDZixNQUFNLEVBQUVDLGdCQUFnQixDQUFDLEVBQUVDLGVBQWUsRUFBRUMsZ0JBQWdCLEVBQUcsR0FBR2I7UUFDbEUsT0FBT2MsZ0JBQWdCbkIsZUFBZUMsU0FBU2UsZ0JBQWdCRCxjQUFjRSxpQkFBaUJDLGtCQUFrQmhCO0lBQ3BILElBQ0UsSUFBTU8sUUFBUUUsT0FBTztJQUMzQjs7O0tBR0MsR0FDRCxNQUFNLEVBQUVTLElBQUksRUFBRSxHQUFHZjtJQUNqQixJQUFJZSxNQUFNO1FBQ04sTUFBTSxDQUFDQyxPQUFPQyxLQUFLLEdBQUdGLFNBQVMsbUJBQ3pCO1lBQUNaO1lBQWNJO1NBQW1CLEdBQ2xDO1lBQUNBO1lBQW9CSjtTQUFhO1FBQ3hDLE9BQU9hLFFBQVFFLElBQUksQ0FBQyxJQUFNRDtJQUM5QixPQUNLO1FBQ0QsT0FBT2IsUUFBUUMsR0FBRyxDQUFDO1lBQUNGO1lBQWdCSSxtQkFBbUJWLFFBQVFzQixLQUFLO1NBQUU7SUFDMUU7QUFDSjtBQUNBLFNBQVNMLGdCQUFnQm5CLGFBQWEsRUFBRUMsT0FBTyxFQUFFZSxnQkFBZ0IsQ0FBQyxFQUFFQyxrQkFBa0IsQ0FBQyxFQUFFQyxtQkFBbUIsQ0FBQyxFQUFFaEIsT0FBTztJQUNsSCxNQUFNdUIsYUFBYSxFQUFFO0lBQ3JCLE1BQU1DLHFCQUFxQixDQUFDMUIsY0FBY2EsZUFBZSxDQUFDQyxJQUFJLEdBQUcsS0FBS0c7SUFDdEUsTUFBTVUsMEJBQTBCVCxxQkFBcUIsSUFDL0MsQ0FBQ1UsSUFBSSxDQUFDLEdBQUtBLElBQUlYLGtCQUNmLENBQUNXLElBQUksQ0FBQyxHQUFLRixxQkFBcUJFLElBQUlYO0lBQzFDWSxNQUFNQyxJQUFJLENBQUM5QixjQUFjYSxlQUFlLEVBQ25Da0IsSUFBSSxDQUFDQyxpQkFDTEMsT0FBTyxDQUFDLENBQUNDLE9BQU9OO1FBQ2pCTSxNQUFNQyxNQUFNLENBQUMsa0JBQWtCbEM7UUFDL0J3QixXQUFXVyxJQUFJLENBQUNyQyxlQUFlbUMsT0FBT2pDLFNBQVM7WUFDM0MsR0FBR0MsT0FBTztZQUNWc0IsT0FBT1IsZ0JBQWdCVyx3QkFBd0JDO1FBQ25ELEdBQUdMLElBQUksQ0FBQyxJQUFNVyxNQUFNQyxNQUFNLENBQUMscUJBQXFCbEM7SUFDcEQ7SUFDQSxPQUFPUSxRQUFRQyxHQUFHLENBQUNlO0FBQ3ZCO0FBQ0EsU0FBU08sZ0JBQWdCSyxDQUFDLEVBQUVDLENBQUM7SUFDekIsT0FBT0QsRUFBRUUsZ0JBQWdCLENBQUNEO0FBQzlCO0FBRTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9pbnRlcmZhY2VzL3Zpc3VhbC1lbGVtZW50LXZhcmlhbnQubWpzPzM1N2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzb2x2ZVZhcmlhbnQgfSBmcm9tICcuLi8uLi9yZW5kZXIvdXRpbHMvcmVzb2x2ZS1keW5hbWljLXZhcmlhbnRzLm1qcyc7XG5pbXBvcnQgeyBhbmltYXRlVGFyZ2V0IH0gZnJvbSAnLi92aXN1YWwtZWxlbWVudC10YXJnZXQubWpzJztcblxuZnVuY3Rpb24gYW5pbWF0ZVZhcmlhbnQodmlzdWFsRWxlbWVudCwgdmFyaWFudCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgcmVzb2x2ZWQgPSByZXNvbHZlVmFyaWFudCh2aXN1YWxFbGVtZW50LCB2YXJpYW50LCBvcHRpb25zLmN1c3RvbSk7XG4gICAgbGV0IHsgdHJhbnNpdGlvbiA9IHZpc3VhbEVsZW1lbnQuZ2V0RGVmYXVsdFRyYW5zaXRpb24oKSB8fCB7fSB9ID0gcmVzb2x2ZWQgfHwge307XG4gICAgaWYgKG9wdGlvbnMudHJhbnNpdGlvbk92ZXJyaWRlKSB7XG4gICAgICAgIHRyYW5zaXRpb24gPSBvcHRpb25zLnRyYW5zaXRpb25PdmVycmlkZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSWYgd2UgaGF2ZSBhIHZhcmlhbnQsIGNyZWF0ZSBhIGNhbGxiYWNrIHRoYXQgcnVucyBpdCBhcyBhbiBhbmltYXRpb24uXG4gICAgICogT3RoZXJ3aXNlLCB3ZSByZXNvbHZlIGEgUHJvbWlzZSBpbW1lZGlhdGVseSBmb3IgYSBjb21wb3NhYmxlIG5vLW9wLlxuICAgICAqL1xuICAgIGNvbnN0IGdldEFuaW1hdGlvbiA9IHJlc29sdmVkXG4gICAgICAgID8gKCkgPT4gUHJvbWlzZS5hbGwoYW5pbWF0ZVRhcmdldCh2aXN1YWxFbGVtZW50LCByZXNvbHZlZCwgb3B0aW9ucykpXG4gICAgICAgIDogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgLyoqXG4gICAgICogSWYgd2UgaGF2ZSBjaGlsZHJlbiwgY3JlYXRlIGEgY2FsbGJhY2sgdGhhdCBydW5zIGFsbCB0aGVpciBhbmltYXRpb25zLlxuICAgICAqIE90aGVyd2lzZSwgd2UgcmVzb2x2ZSBhIFByb21pc2UgaW1tZWRpYXRlbHkgZm9yIGEgY29tcG9zYWJsZSBuby1vcC5cbiAgICAgKi9cbiAgICBjb25zdCBnZXRDaGlsZEFuaW1hdGlvbnMgPSB2aXN1YWxFbGVtZW50LnZhcmlhbnRDaGlsZHJlbiAmJiB2aXN1YWxFbGVtZW50LnZhcmlhbnRDaGlsZHJlbi5zaXplXG4gICAgICAgID8gKGZvcndhcmREZWxheSA9IDApID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZGVsYXlDaGlsZHJlbiA9IDAsIHN0YWdnZXJDaGlsZHJlbiwgc3RhZ2dlckRpcmVjdGlvbiwgfSA9IHRyYW5zaXRpb247XG4gICAgICAgICAgICByZXR1cm4gYW5pbWF0ZUNoaWxkcmVuKHZpc3VhbEVsZW1lbnQsIHZhcmlhbnQsIGRlbGF5Q2hpbGRyZW4gKyBmb3J3YXJkRGVsYXksIHN0YWdnZXJDaGlsZHJlbiwgc3RhZ2dlckRpcmVjdGlvbiwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgdHJhbnNpdGlvbiBleHBsaWNpdGx5IGRlZmluZXMgYSBcIndoZW5cIiBvcHRpb24sIHdlIG5lZWQgdG8gcmVzb2x2ZSBlaXRoZXJcbiAgICAgKiB0aGlzIGFuaW1hdGlvbiBvciBhbGwgY2hpbGRyZW4gYW5pbWF0aW9ucyBiZWZvcmUgcGxheWluZyB0aGUgb3RoZXIuXG4gICAgICovXG4gICAgY29uc3QgeyB3aGVuIH0gPSB0cmFuc2l0aW9uO1xuICAgIGlmICh3aGVuKSB7XG4gICAgICAgIGNvbnN0IFtmaXJzdCwgbGFzdF0gPSB3aGVuID09PSBcImJlZm9yZUNoaWxkcmVuXCJcbiAgICAgICAgICAgID8gW2dldEFuaW1hdGlvbiwgZ2V0Q2hpbGRBbmltYXRpb25zXVxuICAgICAgICAgICAgOiBbZ2V0Q2hpbGRBbmltYXRpb25zLCBnZXRBbmltYXRpb25dO1xuICAgICAgICByZXR1cm4gZmlyc3QoKS50aGVuKCgpID0+IGxhc3QoKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW2dldEFuaW1hdGlvbigpLCBnZXRDaGlsZEFuaW1hdGlvbnMob3B0aW9ucy5kZWxheSldKTtcbiAgICB9XG59XG5mdW5jdGlvbiBhbmltYXRlQ2hpbGRyZW4odmlzdWFsRWxlbWVudCwgdmFyaWFudCwgZGVsYXlDaGlsZHJlbiA9IDAsIHN0YWdnZXJDaGlsZHJlbiA9IDAsIHN0YWdnZXJEaXJlY3Rpb24gPSAxLCBvcHRpb25zKSB7XG4gICAgY29uc3QgYW5pbWF0aW9ucyA9IFtdO1xuICAgIGNvbnN0IG1heFN0YWdnZXJEdXJhdGlvbiA9ICh2aXN1YWxFbGVtZW50LnZhcmlhbnRDaGlsZHJlbi5zaXplIC0gMSkgKiBzdGFnZ2VyQ2hpbGRyZW47XG4gICAgY29uc3QgZ2VuZXJhdGVTdGFnZ2VyRHVyYXRpb24gPSBzdGFnZ2VyRGlyZWN0aW9uID09PSAxXG4gICAgICAgID8gKGkgPSAwKSA9PiBpICogc3RhZ2dlckNoaWxkcmVuXG4gICAgICAgIDogKGkgPSAwKSA9PiBtYXhTdGFnZ2VyRHVyYXRpb24gLSBpICogc3RhZ2dlckNoaWxkcmVuO1xuICAgIEFycmF5LmZyb20odmlzdWFsRWxlbWVudC52YXJpYW50Q2hpbGRyZW4pXG4gICAgICAgIC5zb3J0KHNvcnRCeVRyZWVPcmRlcilcbiAgICAgICAgLmZvckVhY2goKGNoaWxkLCBpKSA9PiB7XG4gICAgICAgIGNoaWxkLm5vdGlmeShcIkFuaW1hdGlvblN0YXJ0XCIsIHZhcmlhbnQpO1xuICAgICAgICBhbmltYXRpb25zLnB1c2goYW5pbWF0ZVZhcmlhbnQoY2hpbGQsIHZhcmlhbnQsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBkZWxheTogZGVsYXlDaGlsZHJlbiArIGdlbmVyYXRlU3RhZ2dlckR1cmF0aW9uKGkpLFxuICAgICAgICB9KS50aGVuKCgpID0+IGNoaWxkLm5vdGlmeShcIkFuaW1hdGlvbkNvbXBsZXRlXCIsIHZhcmlhbnQpKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKGFuaW1hdGlvbnMpO1xufVxuZnVuY3Rpb24gc29ydEJ5VHJlZU9yZGVyKGEsIGIpIHtcbiAgICByZXR1cm4gYS5zb3J0Tm9kZVBvc2l0aW9uKGIpO1xufVxuXG5leHBvcnQgeyBhbmltYXRlVmFyaWFudCwgc29ydEJ5VHJlZU9yZGVyIH07XG4iXSwibmFtZXMiOlsicmVzb2x2ZVZhcmlhbnQiLCJhbmltYXRlVGFyZ2V0IiwiYW5pbWF0ZVZhcmlhbnQiLCJ2aXN1YWxFbGVtZW50IiwidmFyaWFudCIsIm9wdGlvbnMiLCJyZXNvbHZlZCIsImN1c3RvbSIsInRyYW5zaXRpb24iLCJnZXREZWZhdWx0VHJhbnNpdGlvbiIsInRyYW5zaXRpb25PdmVycmlkZSIsImdldEFuaW1hdGlvbiIsIlByb21pc2UiLCJhbGwiLCJyZXNvbHZlIiwiZ2V0Q2hpbGRBbmltYXRpb25zIiwidmFyaWFudENoaWxkcmVuIiwic2l6ZSIsImZvcndhcmREZWxheSIsImRlbGF5Q2hpbGRyZW4iLCJzdGFnZ2VyQ2hpbGRyZW4iLCJzdGFnZ2VyRGlyZWN0aW9uIiwiYW5pbWF0ZUNoaWxkcmVuIiwid2hlbiIsImZpcnN0IiwibGFzdCIsInRoZW4iLCJkZWxheSIsImFuaW1hdGlvbnMiLCJtYXhTdGFnZ2VyRHVyYXRpb24iLCJnZW5lcmF0ZVN0YWdnZXJEdXJhdGlvbiIsImkiLCJBcnJheSIsImZyb20iLCJzb3J0Iiwic29ydEJ5VHJlZU9yZGVyIiwiZm9yRWFjaCIsImNoaWxkIiwibm90aWZ5IiwicHVzaCIsImEiLCJiIiwic29ydE5vZGVQb3NpdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs":
/*!************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   animateVisualElement: () => (/* binding */ animateVisualElement)\n/* harmony export */ });\n/* harmony import */ var _render_utils_resolve_dynamic_variants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../render/utils/resolve-dynamic-variants.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs\");\n/* harmony import */ var _visual_element_target_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./visual-element-target.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs\");\n/* harmony import */ var _visual_element_variant_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./visual-element-variant.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.mjs\");\n\n\n\nfunction animateVisualElement(visualElement, definition, options = {}) {\n    visualElement.notify(\"AnimationStart\", definition);\n    let animation;\n    if (Array.isArray(definition)) {\n        const animations = definition.map((variant)=>(0,_visual_element_variant_mjs__WEBPACK_IMPORTED_MODULE_0__.animateVariant)(visualElement, variant, options));\n        animation = Promise.all(animations);\n    } else if (typeof definition === \"string\") {\n        animation = (0,_visual_element_variant_mjs__WEBPACK_IMPORTED_MODULE_0__.animateVariant)(visualElement, definition, options);\n    } else {\n        const resolvedDefinition = typeof definition === \"function\" ? (0,_render_utils_resolve_dynamic_variants_mjs__WEBPACK_IMPORTED_MODULE_1__.resolveVariant)(visualElement, definition, options.custom) : definition;\n        animation = Promise.all((0,_visual_element_target_mjs__WEBPACK_IMPORTED_MODULE_2__.animateTarget)(visualElement, resolvedDefinition, options));\n    }\n    return animation.then(()=>visualElement.notify(\"AnimationComplete\", definition));\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9pbnRlcmZhY2VzL3Zpc3VhbC1lbGVtZW50Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWlGO0FBQ3JCO0FBQ0U7QUFFOUQsU0FBU0cscUJBQXFCQyxhQUFhLEVBQUVDLFVBQVUsRUFBRUMsVUFBVSxDQUFDLENBQUM7SUFDakVGLGNBQWNHLE1BQU0sQ0FBQyxrQkFBa0JGO0lBQ3ZDLElBQUlHO0lBQ0osSUFBSUMsTUFBTUMsT0FBTyxDQUFDTCxhQUFhO1FBQzNCLE1BQU1NLGFBQWFOLFdBQVdPLEdBQUcsQ0FBQyxDQUFDQyxVQUFZWCwyRUFBY0EsQ0FBQ0UsZUFBZVMsU0FBU1A7UUFDdEZFLFlBQVlNLFFBQVFDLEdBQUcsQ0FBQ0o7SUFDNUIsT0FDSyxJQUFJLE9BQU9OLGVBQWUsVUFBVTtRQUNyQ0csWUFBWU4sMkVBQWNBLENBQUNFLGVBQWVDLFlBQVlDO0lBQzFELE9BQ0s7UUFDRCxNQUFNVSxxQkFBcUIsT0FBT1gsZUFBZSxhQUMzQ0wsMEZBQWNBLENBQUNJLGVBQWVDLFlBQVlDLFFBQVFXLE1BQU0sSUFDeERaO1FBQ05HLFlBQVlNLFFBQVFDLEdBQUcsQ0FBQ2QseUVBQWFBLENBQUNHLGVBQWVZLG9CQUFvQlY7SUFDN0U7SUFDQSxPQUFPRSxVQUFVVSxJQUFJLENBQUMsSUFBTWQsY0FBY0csTUFBTSxDQUFDLHFCQUFxQkY7QUFDMUU7QUFFZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9uL2ludGVyZmFjZXMvdmlzdWFsLWVsZW1lbnQubWpzPzM3NGMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzb2x2ZVZhcmlhbnQgfSBmcm9tICcuLi8uLi9yZW5kZXIvdXRpbHMvcmVzb2x2ZS1keW5hbWljLXZhcmlhbnRzLm1qcyc7XG5pbXBvcnQgeyBhbmltYXRlVGFyZ2V0IH0gZnJvbSAnLi92aXN1YWwtZWxlbWVudC10YXJnZXQubWpzJztcbmltcG9ydCB7IGFuaW1hdGVWYXJpYW50IH0gZnJvbSAnLi92aXN1YWwtZWxlbWVudC12YXJpYW50Lm1qcyc7XG5cbmZ1bmN0aW9uIGFuaW1hdGVWaXN1YWxFbGVtZW50KHZpc3VhbEVsZW1lbnQsIGRlZmluaXRpb24sIG9wdGlvbnMgPSB7fSkge1xuICAgIHZpc3VhbEVsZW1lbnQubm90aWZ5KFwiQW5pbWF0aW9uU3RhcnRcIiwgZGVmaW5pdGlvbik7XG4gICAgbGV0IGFuaW1hdGlvbjtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShkZWZpbml0aW9uKSkge1xuICAgICAgICBjb25zdCBhbmltYXRpb25zID0gZGVmaW5pdGlvbi5tYXAoKHZhcmlhbnQpID0+IGFuaW1hdGVWYXJpYW50KHZpc3VhbEVsZW1lbnQsIHZhcmlhbnQsIG9wdGlvbnMpKTtcbiAgICAgICAgYW5pbWF0aW9uID0gUHJvbWlzZS5hbGwoYW5pbWF0aW9ucyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBkZWZpbml0aW9uID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGFuaW1hdGlvbiA9IGFuaW1hdGVWYXJpYW50KHZpc3VhbEVsZW1lbnQsIGRlZmluaXRpb24sIG9wdGlvbnMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgcmVzb2x2ZWREZWZpbml0aW9uID0gdHlwZW9mIGRlZmluaXRpb24gPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgPyByZXNvbHZlVmFyaWFudCh2aXN1YWxFbGVtZW50LCBkZWZpbml0aW9uLCBvcHRpb25zLmN1c3RvbSlcbiAgICAgICAgICAgIDogZGVmaW5pdGlvbjtcbiAgICAgICAgYW5pbWF0aW9uID0gUHJvbWlzZS5hbGwoYW5pbWF0ZVRhcmdldCh2aXN1YWxFbGVtZW50LCByZXNvbHZlZERlZmluaXRpb24sIG9wdGlvbnMpKTtcbiAgICB9XG4gICAgcmV0dXJuIGFuaW1hdGlvbi50aGVuKCgpID0+IHZpc3VhbEVsZW1lbnQubm90aWZ5KFwiQW5pbWF0aW9uQ29tcGxldGVcIiwgZGVmaW5pdGlvbikpO1xufVxuXG5leHBvcnQgeyBhbmltYXRlVmlzdWFsRWxlbWVudCB9O1xuIl0sIm5hbWVzIjpbInJlc29sdmVWYXJpYW50IiwiYW5pbWF0ZVRhcmdldCIsImFuaW1hdGVWYXJpYW50IiwiYW5pbWF0ZVZpc3VhbEVsZW1lbnQiLCJ2aXN1YWxFbGVtZW50IiwiZGVmaW5pdGlvbiIsIm9wdGlvbnMiLCJub3RpZnkiLCJhbmltYXRpb24iLCJBcnJheSIsImlzQXJyYXkiLCJhbmltYXRpb25zIiwibWFwIiwidmFyaWFudCIsIlByb21pc2UiLCJhbGwiLCJyZXNvbHZlZERlZmluaXRpb24iLCJjdXN0b20iLCJ0aGVuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   optimizedAppearDataAttribute: () => (/* binding */ optimizedAppearDataAttribute),\n/* harmony export */   optimizedAppearDataId: () => (/* binding */ optimizedAppearDataId)\n/* harmony export */ });\n/* harmony import */ var _render_dom_utils_camel_to_dash_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../render/dom/utils/camel-to-dash.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs\");\n\nconst optimizedAppearDataId = \"framerAppearId\";\nconst optimizedAppearDataAttribute = \"data-\" + (0,_render_dom_utils_camel_to_dash_mjs__WEBPACK_IMPORTED_MODULE_0__.camelToDash)(optimizedAppearDataId);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9vcHRpbWl6ZWQtYXBwZWFyL2RhdGEtaWQubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF1RTtBQUV2RSxNQUFNQyx3QkFBd0I7QUFDOUIsTUFBTUMsK0JBQStCLFVBQVVGLGdGQUFXQSxDQUFDQztBQUVJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9vcHRpbWl6ZWQtYXBwZWFyL2RhdGEtaWQubWpzPzZiNmYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2FtZWxUb0Rhc2ggfSBmcm9tICcuLi8uLi9yZW5kZXIvZG9tL3V0aWxzL2NhbWVsLXRvLWRhc2gubWpzJztcblxuY29uc3Qgb3B0aW1pemVkQXBwZWFyRGF0YUlkID0gXCJmcmFtZXJBcHBlYXJJZFwiO1xuY29uc3Qgb3B0aW1pemVkQXBwZWFyRGF0YUF0dHJpYnV0ZSA9IFwiZGF0YS1cIiArIGNhbWVsVG9EYXNoKG9wdGltaXplZEFwcGVhckRhdGFJZCk7XG5cbmV4cG9ydCB7IG9wdGltaXplZEFwcGVhckRhdGFBdHRyaWJ1dGUsIG9wdGltaXplZEFwcGVhckRhdGFJZCB9O1xuIl0sIm5hbWVzIjpbImNhbWVsVG9EYXNoIiwib3B0aW1pemVkQXBwZWFyRGF0YUlkIiwib3B0aW1pemVkQXBwZWFyRGF0YUF0dHJpYnV0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs":
/*!************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDefaultTransition: () => (/* binding */ getDefaultTransition)\n/* harmony export */ });\n/* harmony import */ var _render_html_utils_transform_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../render/html/utils/transform.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/transform.mjs\");\n\nconst underDampedSpring = {\n    type: \"spring\",\n    stiffness: 500,\n    damping: 25,\n    restSpeed: 10\n};\nconst criticallyDampedSpring = (target)=>({\n        type: \"spring\",\n        stiffness: 550,\n        damping: target === 0 ? 2 * Math.sqrt(550) : 30,\n        restSpeed: 10\n    });\nconst keyframesTransition = {\n    type: \"keyframes\",\n    duration: 0.8\n};\n/**\n * Default easing curve is a slightly shallower version of\n * the default browser easing curve.\n */ const ease = {\n    type: \"keyframes\",\n    ease: [\n        0.25,\n        0.1,\n        0.35,\n        1\n    ],\n    duration: 0.3\n};\nconst getDefaultTransition = (valueKey, { keyframes })=>{\n    if (keyframes.length > 2) {\n        return keyframesTransition;\n    } else if (_render_html_utils_transform_mjs__WEBPACK_IMPORTED_MODULE_0__.transformProps.has(valueKey)) {\n        return valueKey.startsWith(\"scale\") ? criticallyDampedSpring(keyframes[1]) : underDampedSpring;\n    }\n    return ease;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi91dGlscy9kZWZhdWx0LXRyYW5zaXRpb25zLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF1RTtBQUV2RSxNQUFNQyxvQkFBb0I7SUFDdEJDLE1BQU07SUFDTkMsV0FBVztJQUNYQyxTQUFTO0lBQ1RDLFdBQVc7QUFDZjtBQUNBLE1BQU1DLHlCQUF5QixDQUFDQyxTQUFZO1FBQ3hDTCxNQUFNO1FBQ05DLFdBQVc7UUFDWEMsU0FBU0csV0FBVyxJQUFJLElBQUlDLEtBQUtDLElBQUksQ0FBQyxPQUFPO1FBQzdDSixXQUFXO0lBQ2Y7QUFDQSxNQUFNSyxzQkFBc0I7SUFDeEJSLE1BQU07SUFDTlMsVUFBVTtBQUNkO0FBQ0E7OztDQUdDLEdBQ0QsTUFBTUMsT0FBTztJQUNUVixNQUFNO0lBQ05VLE1BQU07UUFBQztRQUFNO1FBQUs7UUFBTTtLQUFFO0lBQzFCRCxVQUFVO0FBQ2Q7QUFDQSxNQUFNRSx1QkFBdUIsQ0FBQ0MsVUFBVSxFQUFFQyxTQUFTLEVBQUU7SUFDakQsSUFBSUEsVUFBVUMsTUFBTSxHQUFHLEdBQUc7UUFDdEIsT0FBT047SUFDWCxPQUNLLElBQUlWLDRFQUFjQSxDQUFDaUIsR0FBRyxDQUFDSCxXQUFXO1FBQ25DLE9BQU9BLFNBQVNJLFVBQVUsQ0FBQyxXQUNyQlosdUJBQXVCUyxTQUFTLENBQUMsRUFBRSxJQUNuQ2Q7SUFDVjtJQUNBLE9BQU9XO0FBQ1g7QUFFZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9uL3V0aWxzL2RlZmF1bHQtdHJhbnNpdGlvbnMubWpzP2ExZDMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdHJhbnNmb3JtUHJvcHMgfSBmcm9tICcuLi8uLi9yZW5kZXIvaHRtbC91dGlscy90cmFuc2Zvcm0ubWpzJztcblxuY29uc3QgdW5kZXJEYW1wZWRTcHJpbmcgPSB7XG4gICAgdHlwZTogXCJzcHJpbmdcIixcbiAgICBzdGlmZm5lc3M6IDUwMCxcbiAgICBkYW1waW5nOiAyNSxcbiAgICByZXN0U3BlZWQ6IDEwLFxufTtcbmNvbnN0IGNyaXRpY2FsbHlEYW1wZWRTcHJpbmcgPSAodGFyZ2V0KSA9PiAoe1xuICAgIHR5cGU6IFwic3ByaW5nXCIsXG4gICAgc3RpZmZuZXNzOiA1NTAsXG4gICAgZGFtcGluZzogdGFyZ2V0ID09PSAwID8gMiAqIE1hdGguc3FydCg1NTApIDogMzAsXG4gICAgcmVzdFNwZWVkOiAxMCxcbn0pO1xuY29uc3Qga2V5ZnJhbWVzVHJhbnNpdGlvbiA9IHtcbiAgICB0eXBlOiBcImtleWZyYW1lc1wiLFxuICAgIGR1cmF0aW9uOiAwLjgsXG59O1xuLyoqXG4gKiBEZWZhdWx0IGVhc2luZyBjdXJ2ZSBpcyBhIHNsaWdodGx5IHNoYWxsb3dlciB2ZXJzaW9uIG9mXG4gKiB0aGUgZGVmYXVsdCBicm93c2VyIGVhc2luZyBjdXJ2ZS5cbiAqL1xuY29uc3QgZWFzZSA9IHtcbiAgICB0eXBlOiBcImtleWZyYW1lc1wiLFxuICAgIGVhc2U6IFswLjI1LCAwLjEsIDAuMzUsIDFdLFxuICAgIGR1cmF0aW9uOiAwLjMsXG59O1xuY29uc3QgZ2V0RGVmYXVsdFRyYW5zaXRpb24gPSAodmFsdWVLZXksIHsga2V5ZnJhbWVzIH0pID0+IHtcbiAgICBpZiAoa2V5ZnJhbWVzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgcmV0dXJuIGtleWZyYW1lc1RyYW5zaXRpb247XG4gICAgfVxuICAgIGVsc2UgaWYgKHRyYW5zZm9ybVByb3BzLmhhcyh2YWx1ZUtleSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlS2V5LnN0YXJ0c1dpdGgoXCJzY2FsZVwiKVxuICAgICAgICAgICAgPyBjcml0aWNhbGx5RGFtcGVkU3ByaW5nKGtleWZyYW1lc1sxXSlcbiAgICAgICAgICAgIDogdW5kZXJEYW1wZWRTcHJpbmc7XG4gICAgfVxuICAgIHJldHVybiBlYXNlO1xufTtcblxuZXhwb3J0IHsgZ2V0RGVmYXVsdFRyYW5zaXRpb24gfTtcbiJdLCJuYW1lcyI6WyJ0cmFuc2Zvcm1Qcm9wcyIsInVuZGVyRGFtcGVkU3ByaW5nIiwidHlwZSIsInN0aWZmbmVzcyIsImRhbXBpbmciLCJyZXN0U3BlZWQiLCJjcml0aWNhbGx5RGFtcGVkU3ByaW5nIiwidGFyZ2V0IiwiTWF0aCIsInNxcnQiLCJrZXlmcmFtZXNUcmFuc2l0aW9uIiwiZHVyYXRpb24iLCJlYXNlIiwiZ2V0RGVmYXVsdFRyYW5zaXRpb24iLCJ2YWx1ZUtleSIsImtleWZyYW1lcyIsImxlbmd0aCIsImhhcyIsInN0YXJ0c1dpdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isAnimatable: () => (/* binding */ isAnimatable)\n/* harmony export */ });\n/* harmony import */ var _value_types_complex_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../value/types/complex/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/complex/index.mjs\");\n\n/**\n * Check if a value is animatable. Examples:\n *\n * ✅: 100, \"100px\", \"#fff\"\n * ❌: \"block\", \"url(2.jpg)\"\n * @param value\n *\n * @internal\n */ const isAnimatable = (key, value)=>{\n    // If the list of keys tat might be non-animatable grows, replace with Set\n    if (key === \"zIndex\") return false;\n    // If it's a number or a keyframes array, we can animate it. We might at some point\n    // need to do a deep isAnimatable check of keyframes, or let Popmotion handle this,\n    // but for now lets leave it like this for performance reasons\n    if (typeof value === \"number\" || Array.isArray(value)) return true;\n    if (typeof value === \"string\" && // It's animatable if we have a string\n    (_value_types_complex_index_mjs__WEBPACK_IMPORTED_MODULE_0__.complex.test(value) || value === \"0\") && // And it contains numbers and/or colors\n    !value.startsWith(\"url(\") // Unless it starts with \"url(\"\n    ) {\n        return true;\n    }\n    return false;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi91dGlscy9pcy1hbmltYXRhYmxlLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE4RDtBQUU5RDs7Ozs7Ozs7Q0FRQyxHQUNELE1BQU1DLGVBQWUsQ0FBQ0MsS0FBS0M7SUFDdkIsMEVBQTBFO0lBQzFFLElBQUlELFFBQVEsVUFDUixPQUFPO0lBQ1gsbUZBQW1GO0lBQ25GLG1GQUFtRjtJQUNuRiw4REFBOEQ7SUFDOUQsSUFBSSxPQUFPQyxVQUFVLFlBQVlDLE1BQU1DLE9BQU8sQ0FBQ0YsUUFDM0MsT0FBTztJQUNYLElBQUksT0FBT0EsVUFBVSxZQUFZLHNDQUFzQztJQUNsRUgsQ0FBQUEsbUVBQU9BLENBQUNNLElBQUksQ0FBQ0gsVUFBVUEsVUFBVSxHQUFFLEtBQU0sd0NBQXdDO0lBQ2xGLENBQUNBLE1BQU1JLFVBQVUsQ0FBQyxRQUFRLCtCQUErQjtNQUMzRDtRQUNFLE9BQU87SUFDWDtJQUNBLE9BQU87QUFDWDtBQUV3QiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vdXRpbHMvaXMtYW5pbWF0YWJsZS5tanM/Nzc1NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb21wbGV4IH0gZnJvbSAnLi4vLi4vdmFsdWUvdHlwZXMvY29tcGxleC9pbmRleC5tanMnO1xuXG4vKipcbiAqIENoZWNrIGlmIGEgdmFsdWUgaXMgYW5pbWF0YWJsZS4gRXhhbXBsZXM6XG4gKlxuICog4pyFOiAxMDAsIFwiMTAwcHhcIiwgXCIjZmZmXCJcbiAqIOKdjDogXCJibG9ja1wiLCBcInVybCgyLmpwZylcIlxuICogQHBhcmFtIHZhbHVlXG4gKlxuICogQGludGVybmFsXG4gKi9cbmNvbnN0IGlzQW5pbWF0YWJsZSA9IChrZXksIHZhbHVlKSA9PiB7XG4gICAgLy8gSWYgdGhlIGxpc3Qgb2Yga2V5cyB0YXQgbWlnaHQgYmUgbm9uLWFuaW1hdGFibGUgZ3Jvd3MsIHJlcGxhY2Ugd2l0aCBTZXRcbiAgICBpZiAoa2V5ID09PSBcInpJbmRleFwiKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgLy8gSWYgaXQncyBhIG51bWJlciBvciBhIGtleWZyYW1lcyBhcnJheSwgd2UgY2FuIGFuaW1hdGUgaXQuIFdlIG1pZ2h0IGF0IHNvbWUgcG9pbnRcbiAgICAvLyBuZWVkIHRvIGRvIGEgZGVlcCBpc0FuaW1hdGFibGUgY2hlY2sgb2Yga2V5ZnJhbWVzLCBvciBsZXQgUG9wbW90aW9uIGhhbmRsZSB0aGlzLFxuICAgIC8vIGJ1dCBmb3Igbm93IGxldHMgbGVhdmUgaXQgbGlrZSB0aGlzIGZvciBwZXJmb3JtYW5jZSByZWFzb25zXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiB8fCBBcnJheS5pc0FycmF5KHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAvLyBJdCdzIGFuaW1hdGFibGUgaWYgd2UgaGF2ZSBhIHN0cmluZ1xuICAgICAgICAoY29tcGxleC50ZXN0KHZhbHVlKSB8fCB2YWx1ZSA9PT0gXCIwXCIpICYmIC8vIEFuZCBpdCBjb250YWlucyBudW1iZXJzIGFuZC9vciBjb2xvcnNcbiAgICAgICAgIXZhbHVlLnN0YXJ0c1dpdGgoXCJ1cmwoXCIpIC8vIFVubGVzcyBpdCBzdGFydHMgd2l0aCBcInVybChcIlxuICAgICkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuZXhwb3J0IHsgaXNBbmltYXRhYmxlIH07XG4iXSwibmFtZXMiOlsiY29tcGxleCIsImlzQW5pbWF0YWJsZSIsImtleSIsInZhbHVlIiwiQXJyYXkiLCJpc0FycmF5IiwidGVzdCIsInN0YXJ0c1dpdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs":
/*!**************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isAnimationControls: () => (/* binding */ isAnimationControls)\n/* harmony export */ });\nfunction isAnimationControls(v) {\n    return typeof v === \"object\" && typeof v.start === \"function\";\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi91dGlscy9pcy1hbmltYXRpb24tY29udHJvbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxTQUFTQSxvQkFBb0JDLENBQUM7SUFDMUIsT0FBTyxPQUFPQSxNQUFNLFlBQVksT0FBT0EsRUFBRUMsS0FBSyxLQUFLO0FBQ3ZEO0FBRStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi91dGlscy9pcy1hbmltYXRpb24tY29udHJvbHMubWpzPzk0MWQiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaXNBbmltYXRpb25Db250cm9scyh2KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiB2LnN0YXJ0ID09PSBcImZ1bmN0aW9uXCI7XG59XG5cbmV4cG9ydCB7IGlzQW5pbWF0aW9uQ29udHJvbHMgfTtcbiJdLCJuYW1lcyI6WyJpc0FuaW1hdGlvbkNvbnRyb2xzIiwidiIsInN0YXJ0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs":
/*!************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isKeyframesTarget: () => (/* binding */ isKeyframesTarget)\n/* harmony export */ });\nconst isKeyframesTarget = (v)=>{\n    return Array.isArray(v);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi91dGlscy9pcy1rZXlmcmFtZXMtdGFyZ2V0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsb0JBQW9CLENBQUNDO0lBQ3ZCLE9BQU9DLE1BQU1DLE9BQU8sQ0FBQ0Y7QUFDekI7QUFFNkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9uL3V0aWxzL2lzLWtleWZyYW1lcy10YXJnZXQubWpzPzM1NDUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgaXNLZXlmcmFtZXNUYXJnZXQgPSAodikgPT4ge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHYpO1xufTtcblxuZXhwb3J0IHsgaXNLZXlmcmFtZXNUYXJnZXQgfTtcbiJdLCJuYW1lcyI6WyJpc0tleWZyYW1lc1RhcmdldCIsInYiLCJBcnJheSIsImlzQXJyYXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-none.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/utils/is-none.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNone: () => (/* binding */ isNone)\n/* harmony export */ });\n/* harmony import */ var _utils_is_zero_value_string_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/is-zero-value-string.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs\");\n\nfunction isNone(value) {\n    if (typeof value === \"number\") {\n        return value === 0;\n    } else if (value !== null) {\n        return value === \"none\" || value === \"0\" || (0,_utils_is_zero_value_string_mjs__WEBPACK_IMPORTED_MODULE_0__.isZeroValueString)(value);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi91dGlscy9pcy1ub25lLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF5RTtBQUV6RSxTQUFTQyxPQUFPQyxLQUFLO0lBQ2pCLElBQUksT0FBT0EsVUFBVSxVQUFVO1FBQzNCLE9BQU9BLFVBQVU7SUFDckIsT0FDSyxJQUFJQSxVQUFVLE1BQU07UUFDckIsT0FBT0EsVUFBVSxVQUFVQSxVQUFVLE9BQU9GLGtGQUFpQkEsQ0FBQ0U7SUFDbEU7QUFDSjtBQUVrQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vdXRpbHMvaXMtbm9uZS5tanM/MmVjYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1plcm9WYWx1ZVN0cmluZyB9IGZyb20gJy4uLy4uL3V0aWxzL2lzLXplcm8tdmFsdWUtc3RyaW5nLm1qcyc7XG5cbmZ1bmN0aW9uIGlzTm9uZSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAwO1xuICAgIH1cbiAgICBlbHNlIGlmICh2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IFwibm9uZVwiIHx8IHZhbHVlID09PSBcIjBcIiB8fCBpc1plcm9WYWx1ZVN0cmluZyh2YWx1ZSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBpc05vbmUgfTtcbiJdLCJuYW1lcyI6WyJpc1plcm9WYWx1ZVN0cmluZyIsImlzTm9uZSIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-none.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/utils/keyframes.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/utils/keyframes.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getKeyframes: () => (/* binding */ getKeyframes)\n/* harmony export */ });\n/* harmony import */ var _render_dom_value_types_animatable_none_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../render/dom/value-types/animatable-none.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs\");\n/* harmony import */ var _is_animatable_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is-animatable.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs\");\n/* harmony import */ var _is_none_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is-none.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-none.mjs\");\n\n\n\nfunction getKeyframes(value, valueName, target, transition) {\n    const isTargetAnimatable = (0,_is_animatable_mjs__WEBPACK_IMPORTED_MODULE_0__.isAnimatable)(valueName, target);\n    let keyframes;\n    if (Array.isArray(target)) {\n        keyframes = [\n            ...target\n        ];\n    } else {\n        keyframes = [\n            null,\n            target\n        ];\n    }\n    const defaultOrigin = transition.from !== undefined ? transition.from : value.get();\n    let animatableTemplateValue = undefined;\n    const noneKeyframeIndexes = [];\n    for(let i = 0; i < keyframes.length; i++){\n        /**\n         * Fill null/wildcard keyframes\n         */ if (keyframes[i] === null) {\n            keyframes[i] = i === 0 ? defaultOrigin : keyframes[i - 1];\n        }\n        if ((0,_is_none_mjs__WEBPACK_IMPORTED_MODULE_1__.isNone)(keyframes[i])) {\n            noneKeyframeIndexes.push(i);\n        }\n        // TODO: Clean this conditional, it works for now\n        if (typeof keyframes[i] === \"string\" && keyframes[i] !== \"none\" && keyframes[i] !== \"0\") {\n            animatableTemplateValue = keyframes[i];\n        }\n    }\n    if (isTargetAnimatable && noneKeyframeIndexes.length && animatableTemplateValue) {\n        for(let i = 0; i < noneKeyframeIndexes.length; i++){\n            const index = noneKeyframeIndexes[i];\n            keyframes[index] = (0,_render_dom_value_types_animatable_none_mjs__WEBPACK_IMPORTED_MODULE_2__.getAnimatableNone)(valueName, animatableTemplateValue);\n        }\n    }\n    return keyframes;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi91dGlscy9rZXlmcmFtZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBcUY7QUFDbEM7QUFDWjtBQUV2QyxTQUFTRyxhQUFhQyxLQUFLLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxVQUFVO0lBQ3RELE1BQU1DLHFCQUFxQlAsZ0VBQVlBLENBQUNJLFdBQVdDO0lBQ25ELElBQUlHO0lBQ0osSUFBSUMsTUFBTUMsT0FBTyxDQUFDTCxTQUFTO1FBQ3ZCRyxZQUFZO2VBQUlIO1NBQU87SUFDM0IsT0FDSztRQUNERyxZQUFZO1lBQUM7WUFBTUg7U0FBTztJQUM5QjtJQUNBLE1BQU1NLGdCQUFnQkwsV0FBV00sSUFBSSxLQUFLQyxZQUFZUCxXQUFXTSxJQUFJLEdBQUdULE1BQU1XLEdBQUc7SUFDakYsSUFBSUMsMEJBQTBCRjtJQUM5QixNQUFNRyxzQkFBc0IsRUFBRTtJQUM5QixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSVQsVUFBVVUsTUFBTSxFQUFFRCxJQUFLO1FBQ3ZDOztTQUVDLEdBQ0QsSUFBSVQsU0FBUyxDQUFDUyxFQUFFLEtBQUssTUFBTTtZQUN2QlQsU0FBUyxDQUFDUyxFQUFFLEdBQUdBLE1BQU0sSUFBSU4sZ0JBQWdCSCxTQUFTLENBQUNTLElBQUksRUFBRTtRQUM3RDtRQUNBLElBQUloQixvREFBTUEsQ0FBQ08sU0FBUyxDQUFDUyxFQUFFLEdBQUc7WUFDdEJELG9CQUFvQkcsSUFBSSxDQUFDRjtRQUM3QjtRQUNBLGlEQUFpRDtRQUNqRCxJQUFJLE9BQU9ULFNBQVMsQ0FBQ1MsRUFBRSxLQUFLLFlBQ3hCVCxTQUFTLENBQUNTLEVBQUUsS0FBSyxVQUNqQlQsU0FBUyxDQUFDUyxFQUFFLEtBQUssS0FBSztZQUN0QkYsMEJBQTBCUCxTQUFTLENBQUNTLEVBQUU7UUFDMUM7SUFDSjtJQUNBLElBQUlWLHNCQUNBUyxvQkFBb0JFLE1BQU0sSUFDMUJILHlCQUF5QjtRQUN6QixJQUFLLElBQUlFLElBQUksR0FBR0EsSUFBSUQsb0JBQW9CRSxNQUFNLEVBQUVELElBQUs7WUFDakQsTUFBTUcsUUFBUUosbUJBQW1CLENBQUNDLEVBQUU7WUFDcENULFNBQVMsQ0FBQ1ksTUFBTSxHQUFHckIsOEZBQWlCQSxDQUFDSyxXQUFXVztRQUNwRDtJQUNKO0lBQ0EsT0FBT1A7QUFDWDtBQUV3QiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vdXRpbHMva2V5ZnJhbWVzLm1qcz85MjU5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEFuaW1hdGFibGVOb25lIH0gZnJvbSAnLi4vLi4vcmVuZGVyL2RvbS92YWx1ZS10eXBlcy9hbmltYXRhYmxlLW5vbmUubWpzJztcbmltcG9ydCB7IGlzQW5pbWF0YWJsZSB9IGZyb20gJy4vaXMtYW5pbWF0YWJsZS5tanMnO1xuaW1wb3J0IHsgaXNOb25lIH0gZnJvbSAnLi9pcy1ub25lLm1qcyc7XG5cbmZ1bmN0aW9uIGdldEtleWZyYW1lcyh2YWx1ZSwgdmFsdWVOYW1lLCB0YXJnZXQsIHRyYW5zaXRpb24pIHtcbiAgICBjb25zdCBpc1RhcmdldEFuaW1hdGFibGUgPSBpc0FuaW1hdGFibGUodmFsdWVOYW1lLCB0YXJnZXQpO1xuICAgIGxldCBrZXlmcmFtZXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSkge1xuICAgICAgICBrZXlmcmFtZXMgPSBbLi4udGFyZ2V0XTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGtleWZyYW1lcyA9IFtudWxsLCB0YXJnZXRdO1xuICAgIH1cbiAgICBjb25zdCBkZWZhdWx0T3JpZ2luID0gdHJhbnNpdGlvbi5mcm9tICE9PSB1bmRlZmluZWQgPyB0cmFuc2l0aW9uLmZyb20gOiB2YWx1ZS5nZXQoKTtcbiAgICBsZXQgYW5pbWF0YWJsZVRlbXBsYXRlVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgY29uc3Qgbm9uZUtleWZyYW1lSW5kZXhlcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5ZnJhbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaWxsIG51bGwvd2lsZGNhcmQga2V5ZnJhbWVzXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoa2V5ZnJhbWVzW2ldID09PSBudWxsKSB7XG4gICAgICAgICAgICBrZXlmcmFtZXNbaV0gPSBpID09PSAwID8gZGVmYXVsdE9yaWdpbiA6IGtleWZyYW1lc1tpIC0gMV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTm9uZShrZXlmcmFtZXNbaV0pKSB7XG4gICAgICAgICAgICBub25lS2V5ZnJhbWVJbmRleGVzLnB1c2goaSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVE9ETzogQ2xlYW4gdGhpcyBjb25kaXRpb25hbCwgaXQgd29ya3MgZm9yIG5vd1xuICAgICAgICBpZiAodHlwZW9mIGtleWZyYW1lc1tpXSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAga2V5ZnJhbWVzW2ldICE9PSBcIm5vbmVcIiAmJlxuICAgICAgICAgICAga2V5ZnJhbWVzW2ldICE9PSBcIjBcIikge1xuICAgICAgICAgICAgYW5pbWF0YWJsZVRlbXBsYXRlVmFsdWUgPSBrZXlmcmFtZXNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzVGFyZ2V0QW5pbWF0YWJsZSAmJlxuICAgICAgICBub25lS2V5ZnJhbWVJbmRleGVzLmxlbmd0aCAmJlxuICAgICAgICBhbmltYXRhYmxlVGVtcGxhdGVWYWx1ZSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vbmVLZXlmcmFtZUluZGV4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gbm9uZUtleWZyYW1lSW5kZXhlc1tpXTtcbiAgICAgICAgICAgIGtleWZyYW1lc1tpbmRleF0gPSBnZXRBbmltYXRhYmxlTm9uZSh2YWx1ZU5hbWUsIGFuaW1hdGFibGVUZW1wbGF0ZVZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ga2V5ZnJhbWVzO1xufVxuXG5leHBvcnQgeyBnZXRLZXlmcmFtZXMgfTtcbiJdLCJuYW1lcyI6WyJnZXRBbmltYXRhYmxlTm9uZSIsImlzQW5pbWF0YWJsZSIsImlzTm9uZSIsImdldEtleWZyYW1lcyIsInZhbHVlIiwidmFsdWVOYW1lIiwidGFyZ2V0IiwidHJhbnNpdGlvbiIsImlzVGFyZ2V0QW5pbWF0YWJsZSIsImtleWZyYW1lcyIsIkFycmF5IiwiaXNBcnJheSIsImRlZmF1bHRPcmlnaW4iLCJmcm9tIiwidW5kZWZpbmVkIiwiZ2V0IiwiYW5pbWF0YWJsZVRlbXBsYXRlVmFsdWUiLCJub25lS2V5ZnJhbWVJbmRleGVzIiwiaSIsImxlbmd0aCIsInB1c2giLCJpbmRleCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/utils/keyframes.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/utils/transitions.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/utils/transitions.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getValueTransition: () => (/* binding */ getValueTransition),\n/* harmony export */   isTransitionDefined: () => (/* binding */ isTransitionDefined)\n/* harmony export */ });\n/**\n * Decide whether a transition is defined on a given Transition.\n * This filters out orchestration options and returns true\n * if any options are left.\n */ function isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed, ...transition }) {\n    return !!Object.keys(transition).length;\n}\nfunction getValueTransition(transition, key) {\n    return transition[key] || transition[\"default\"] || transition;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi91dGlscy90cmFuc2l0aW9ucy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7OztDQUlDLEdBQ0QsU0FBU0Esb0JBQW9CLEVBQUVDLElBQUksRUFBRUMsT0FBT0MsTUFBTSxFQUFFQyxhQUFhLEVBQUVDLGVBQWUsRUFBRUMsZ0JBQWdCLEVBQUVDLE1BQU0sRUFBRUMsVUFBVSxFQUFFQyxXQUFXLEVBQUVDLElBQUksRUFBRUMsT0FBTyxFQUFFLEdBQUdDLFlBQVk7SUFDakssT0FBTyxDQUFDLENBQUNDLE9BQU9DLElBQUksQ0FBQ0YsWUFBWUcsTUFBTTtBQUMzQztBQUNBLFNBQVNDLG1CQUFtQkosVUFBVSxFQUFFSyxHQUFHO0lBQ3ZDLE9BQU9MLFVBQVUsQ0FBQ0ssSUFBSSxJQUFJTCxVQUFVLENBQUMsVUFBVSxJQUFJQTtBQUN2RDtBQUVtRCIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vdXRpbHMvdHJhbnNpdGlvbnMubWpzPzA1ZjMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBEZWNpZGUgd2hldGhlciBhIHRyYW5zaXRpb24gaXMgZGVmaW5lZCBvbiBhIGdpdmVuIFRyYW5zaXRpb24uXG4gKiBUaGlzIGZpbHRlcnMgb3V0IG9yY2hlc3RyYXRpb24gb3B0aW9ucyBhbmQgcmV0dXJucyB0cnVlXG4gKiBpZiBhbnkgb3B0aW9ucyBhcmUgbGVmdC5cbiAqL1xuZnVuY3Rpb24gaXNUcmFuc2l0aW9uRGVmaW5lZCh7IHdoZW4sIGRlbGF5OiBfZGVsYXksIGRlbGF5Q2hpbGRyZW4sIHN0YWdnZXJDaGlsZHJlbiwgc3RhZ2dlckRpcmVjdGlvbiwgcmVwZWF0LCByZXBlYXRUeXBlLCByZXBlYXREZWxheSwgZnJvbSwgZWxhcHNlZCwgLi4udHJhbnNpdGlvbiB9KSB7XG4gICAgcmV0dXJuICEhT2JqZWN0LmtleXModHJhbnNpdGlvbikubGVuZ3RoO1xufVxuZnVuY3Rpb24gZ2V0VmFsdWVUcmFuc2l0aW9uKHRyYW5zaXRpb24sIGtleSkge1xuICAgIHJldHVybiB0cmFuc2l0aW9uW2tleV0gfHwgdHJhbnNpdGlvbltcImRlZmF1bHRcIl0gfHwgdHJhbnNpdGlvbjtcbn1cblxuZXhwb3J0IHsgZ2V0VmFsdWVUcmFuc2l0aW9uLCBpc1RyYW5zaXRpb25EZWZpbmVkIH07XG4iXSwibmFtZXMiOlsiaXNUcmFuc2l0aW9uRGVmaW5lZCIsIndoZW4iLCJkZWxheSIsIl9kZWxheSIsImRlbGF5Q2hpbGRyZW4iLCJzdGFnZ2VyQ2hpbGRyZW4iLCJzdGFnZ2VyRGlyZWN0aW9uIiwicmVwZWF0IiwicmVwZWF0VHlwZSIsInJlcGVhdERlbGF5IiwiZnJvbSIsImVsYXBzZWQiLCJ0cmFuc2l0aW9uIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsImdldFZhbHVlVHJhbnNpdGlvbiIsImtleSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/utils/transitions.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/components/AnimatePresence/PopChild.mjs":
/*!************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/components/AnimatePresence/PopChild.mjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PopChild: () => (/* binding */ PopChild)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n\n/**\n * Measurement functionality has to be within a separate component\n * to leverage snapshot lifecycle.\n */ class PopChildMeasure extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n    getSnapshotBeforeUpdate(prevProps) {\n        const element = this.props.childRef.current;\n        if (element && prevProps.isPresent && !this.props.isPresent) {\n            const size = this.props.sizeRef.current;\n            size.height = element.offsetHeight || 0;\n            size.width = element.offsetWidth || 0;\n            size.top = element.offsetTop;\n            size.left = element.offsetLeft;\n        }\n        return null;\n    }\n    /**\n     * Required with getSnapshotBeforeUpdate to stop React complaining.\n     */ componentDidUpdate() {}\n    render() {\n        return this.props.children;\n    }\n}\nfunction PopChild({ children, isPresent }) {\n    const id = (0,react__WEBPACK_IMPORTED_MODULE_0__.useId)();\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const size = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0\n    });\n    /**\n     * We create and inject a style block so we can apply this explicit\n     * sizing in a non-destructive manner by just deleting the style block.\n     *\n     * We can't apply size via render as the measurement happens\n     * in getSnapshotBeforeUpdate (post-render), likewise if we apply the\n     * styles directly on the DOM node, we might be overwriting\n     * styles set via the style prop.\n     */ (0,react__WEBPACK_IMPORTED_MODULE_0__.useInsertionEffect)(()=>{\n        const { width, height, top, left } = size.current;\n        if (isPresent || !ref.current || !width || !height) return;\n        ref.current.dataset.motionPopId = id;\n        const style = document.createElement(\"style\");\n        document.head.appendChild(style);\n        if (style.sheet) {\n            style.sheet.insertRule(`\n          [data-motion-pop-id=\"${id}\"] {\n            position: absolute !important;\n            width: ${width}px !important;\n            height: ${height}px !important;\n            top: ${top}px !important;\n            left: ${left}px !important;\n          }\n        `);\n        }\n        return ()=>{\n            document.head.removeChild(style);\n        };\n    }, [\n        isPresent\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(PopChildMeasure, {\n        isPresent: isPresent,\n        childRef: ref,\n        sizeRef: size\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(children, {\n        ref\n    }));\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbXBvbmVudHMvQW5pbWF0ZVByZXNlbmNlL1BvcENoaWxkLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUErQjtBQUMyQjtBQUUxRDs7O0NBR0MsR0FDRCxNQUFNSSx3QkFBd0JKLDRDQUFlO0lBQ3pDTSx3QkFBd0JDLFNBQVMsRUFBRTtRQUMvQixNQUFNQyxVQUFVLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxRQUFRLENBQUNDLE9BQU87UUFDM0MsSUFBSUgsV0FBV0QsVUFBVUssU0FBUyxJQUFJLENBQUMsSUFBSSxDQUFDSCxLQUFLLENBQUNHLFNBQVMsRUFBRTtZQUN6RCxNQUFNQyxPQUFPLElBQUksQ0FBQ0osS0FBSyxDQUFDSyxPQUFPLENBQUNILE9BQU87WUFDdkNFLEtBQUtFLE1BQU0sR0FBR1AsUUFBUVEsWUFBWSxJQUFJO1lBQ3RDSCxLQUFLSSxLQUFLLEdBQUdULFFBQVFVLFdBQVcsSUFBSTtZQUNwQ0wsS0FBS00sR0FBRyxHQUFHWCxRQUFRWSxTQUFTO1lBQzVCUCxLQUFLUSxJQUFJLEdBQUdiLFFBQVFjLFVBQVU7UUFDbEM7UUFDQSxPQUFPO0lBQ1g7SUFDQTs7S0FFQyxHQUNEQyxxQkFBcUIsQ0FBRTtJQUN2QkMsU0FBUztRQUNMLE9BQU8sSUFBSSxDQUFDZixLQUFLLENBQUNnQixRQUFRO0lBQzlCO0FBQ0o7QUFDQSxTQUFTQyxTQUFTLEVBQUVELFFBQVEsRUFBRWIsU0FBUyxFQUFFO0lBQ3JDLE1BQU1lLEtBQUsxQiw0Q0FBS0E7SUFDaEIsTUFBTTJCLE1BQU0xQiw2Q0FBTUEsQ0FBQztJQUNuQixNQUFNVyxPQUFPWCw2Q0FBTUEsQ0FBQztRQUNoQmUsT0FBTztRQUNQRixRQUFRO1FBQ1JJLEtBQUs7UUFDTEUsTUFBTTtJQUNWO0lBQ0E7Ozs7Ozs7O0tBUUMsR0FDRGxCLHlEQUFrQkEsQ0FBQztRQUNmLE1BQU0sRUFBRWMsS0FBSyxFQUFFRixNQUFNLEVBQUVJLEdBQUcsRUFBRUUsSUFBSSxFQUFFLEdBQUdSLEtBQUtGLE9BQU87UUFDakQsSUFBSUMsYUFBYSxDQUFDZ0IsSUFBSWpCLE9BQU8sSUFBSSxDQUFDTSxTQUFTLENBQUNGLFFBQ3hDO1FBQ0phLElBQUlqQixPQUFPLENBQUNrQixPQUFPLENBQUNDLFdBQVcsR0FBR0g7UUFDbEMsTUFBTUksUUFBUUMsU0FBU0MsYUFBYSxDQUFDO1FBQ3JDRCxTQUFTRSxJQUFJLENBQUNDLFdBQVcsQ0FBQ0o7UUFDMUIsSUFBSUEsTUFBTUssS0FBSyxFQUFFO1lBQ2JMLE1BQU1LLEtBQUssQ0FBQ0MsVUFBVSxDQUFDLENBQUM7K0JBQ0wsRUFBRVYsR0FBRzs7bUJBRWpCLEVBQUVWLE1BQU07b0JBQ1AsRUFBRUYsT0FBTztpQkFDWixFQUFFSSxJQUFJO2tCQUNMLEVBQUVFLEtBQUs7O1FBRWpCLENBQUM7UUFDRDtRQUNBLE9BQU87WUFDSFcsU0FBU0UsSUFBSSxDQUFDSSxXQUFXLENBQUNQO1FBQzlCO0lBQ0osR0FBRztRQUFDbkI7S0FBVTtJQUNkLHFCQUFRWixnREFBbUIsQ0FBQ0ksaUJBQWlCO1FBQUVRLFdBQVdBO1FBQVdGLFVBQVVrQjtRQUFLZCxTQUFTRDtJQUFLLGlCQUFHYiwrQ0FBa0IsQ0FBQ3lCLFVBQVU7UUFBRUc7SUFBSTtBQUM1STtBQUVvQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9jb21wb25lbnRzL0FuaW1hdGVQcmVzZW5jZS9Qb3BDaGlsZC5tanM/ZWU1MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VJZCwgdXNlUmVmLCB1c2VJbnNlcnRpb25FZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5cbi8qKlxuICogTWVhc3VyZW1lbnQgZnVuY3Rpb25hbGl0eSBoYXMgdG8gYmUgd2l0aGluIGEgc2VwYXJhdGUgY29tcG9uZW50XG4gKiB0byBsZXZlcmFnZSBzbmFwc2hvdCBsaWZlY3ljbGUuXG4gKi9cbmNsYXNzIFBvcENoaWxkTWVhc3VyZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLnByb3BzLmNoaWxkUmVmLmN1cnJlbnQ7XG4gICAgICAgIGlmIChlbGVtZW50ICYmIHByZXZQcm9wcy5pc1ByZXNlbnQgJiYgIXRoaXMucHJvcHMuaXNQcmVzZW50KSB7XG4gICAgICAgICAgICBjb25zdCBzaXplID0gdGhpcy5wcm9wcy5zaXplUmVmLmN1cnJlbnQ7XG4gICAgICAgICAgICBzaXplLmhlaWdodCA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0IHx8IDA7XG4gICAgICAgICAgICBzaXplLndpZHRoID0gZWxlbWVudC5vZmZzZXRXaWR0aCB8fCAwO1xuICAgICAgICAgICAgc2l6ZS50b3AgPSBlbGVtZW50Lm9mZnNldFRvcDtcbiAgICAgICAgICAgIHNpemUubGVmdCA9IGVsZW1lbnQub2Zmc2V0TGVmdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVxdWlyZWQgd2l0aCBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSB0byBzdG9wIFJlYWN0IGNvbXBsYWluaW5nLlxuICAgICAqL1xuICAgIGNvbXBvbmVudERpZFVwZGF0ZSgpIHsgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfVxufVxuZnVuY3Rpb24gUG9wQ2hpbGQoeyBjaGlsZHJlbiwgaXNQcmVzZW50IH0pIHtcbiAgICBjb25zdCBpZCA9IHVzZUlkKCk7XG4gICAgY29uc3QgcmVmID0gdXNlUmVmKG51bGwpO1xuICAgIGNvbnN0IHNpemUgPSB1c2VSZWYoe1xuICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogV2UgY3JlYXRlIGFuZCBpbmplY3QgYSBzdHlsZSBibG9jayBzbyB3ZSBjYW4gYXBwbHkgdGhpcyBleHBsaWNpdFxuICAgICAqIHNpemluZyBpbiBhIG5vbi1kZXN0cnVjdGl2ZSBtYW5uZXIgYnkganVzdCBkZWxldGluZyB0aGUgc3R5bGUgYmxvY2suXG4gICAgICpcbiAgICAgKiBXZSBjYW4ndCBhcHBseSBzaXplIHZpYSByZW5kZXIgYXMgdGhlIG1lYXN1cmVtZW50IGhhcHBlbnNcbiAgICAgKiBpbiBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSAocG9zdC1yZW5kZXIpLCBsaWtld2lzZSBpZiB3ZSBhcHBseSB0aGVcbiAgICAgKiBzdHlsZXMgZGlyZWN0bHkgb24gdGhlIERPTSBub2RlLCB3ZSBtaWdodCBiZSBvdmVyd3JpdGluZ1xuICAgICAqIHN0eWxlcyBzZXQgdmlhIHRoZSBzdHlsZSBwcm9wLlxuICAgICAqL1xuICAgIHVzZUluc2VydGlvbkVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCwgdG9wLCBsZWZ0IH0gPSBzaXplLmN1cnJlbnQ7XG4gICAgICAgIGlmIChpc1ByZXNlbnQgfHwgIXJlZi5jdXJyZW50IHx8ICF3aWR0aCB8fCAhaGVpZ2h0KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICByZWYuY3VycmVudC5kYXRhc2V0Lm1vdGlvblBvcElkID0gaWQ7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgICAgICAgaWYgKHN0eWxlLnNoZWV0KSB7XG4gICAgICAgICAgICBzdHlsZS5zaGVldC5pbnNlcnRSdWxlKGBcbiAgICAgICAgICBbZGF0YS1tb3Rpb24tcG9wLWlkPVwiJHtpZH1cIl0ge1xuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICB3aWR0aDogJHt3aWR0aH1weCAhaW1wb3J0YW50O1xuICAgICAgICAgICAgaGVpZ2h0OiAke2hlaWdodH1weCAhaW1wb3J0YW50O1xuICAgICAgICAgICAgdG9wOiAke3RvcH1weCAhaW1wb3J0YW50O1xuICAgICAgICAgICAgbGVmdDogJHtsZWZ0fXB4ICFpbXBvcnRhbnQ7XG4gICAgICAgICAgfVxuICAgICAgICBgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgZG9jdW1lbnQuaGVhZC5yZW1vdmVDaGlsZChzdHlsZSk7XG4gICAgICAgIH07XG4gICAgfSwgW2lzUHJlc2VudF0pO1xuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChQb3BDaGlsZE1lYXN1cmUsIHsgaXNQcmVzZW50OiBpc1ByZXNlbnQsIGNoaWxkUmVmOiByZWYsIHNpemVSZWY6IHNpemUgfSwgUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7IHJlZiB9KSkpO1xufVxuXG5leHBvcnQgeyBQb3BDaGlsZCB9O1xuIl0sIm5hbWVzIjpbIlJlYWN0IiwidXNlSWQiLCJ1c2VSZWYiLCJ1c2VJbnNlcnRpb25FZmZlY3QiLCJQb3BDaGlsZE1lYXN1cmUiLCJDb21wb25lbnQiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsInByZXZQcm9wcyIsImVsZW1lbnQiLCJwcm9wcyIsImNoaWxkUmVmIiwiY3VycmVudCIsImlzUHJlc2VudCIsInNpemUiLCJzaXplUmVmIiwiaGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0Iiwid2lkdGgiLCJvZmZzZXRXaWR0aCIsInRvcCIsIm9mZnNldFRvcCIsImxlZnQiLCJvZmZzZXRMZWZ0IiwiY29tcG9uZW50RGlkVXBkYXRlIiwicmVuZGVyIiwiY2hpbGRyZW4iLCJQb3BDaGlsZCIsImlkIiwicmVmIiwiZGF0YXNldCIsIm1vdGlvblBvcElkIiwic3R5bGUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJzaGVldCIsImluc2VydFJ1bGUiLCJyZW1vdmVDaGlsZCIsImNsb25lRWxlbWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/components/AnimatePresence/PopChild.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs":
/*!*****************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PresenceChild: () => (/* binding */ PresenceChild)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _context_PresenceContext_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../context/PresenceContext.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/PresenceContext.mjs\");\n/* harmony import */ var _utils_use_constant_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/use-constant.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-constant.mjs\");\n/* harmony import */ var _PopChild_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PopChild.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/components/AnimatePresence/PopChild.mjs\");\n\n\n\n\n\nconst PresenceChild = ({ children, initial, isPresent, onExitComplete, custom, presenceAffectsLayout, mode })=>{\n    const presenceChildren = (0,_utils_use_constant_mjs__WEBPACK_IMPORTED_MODULE_1__.useConstant)(newChildrenMap);\n    const id = (0,react__WEBPACK_IMPORTED_MODULE_0__.useId)();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            id,\n            initial,\n            isPresent,\n            custom,\n            onExitComplete: (childId)=>{\n                presenceChildren.set(childId, true);\n                for (const isComplete of presenceChildren.values()){\n                    if (!isComplete) return; // can stop searching when any is incomplete\n                }\n                onExitComplete && onExitComplete();\n            },\n            register: (childId)=>{\n                presenceChildren.set(childId, false);\n                return ()=>presenceChildren.delete(childId);\n            }\n        }), /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */ presenceAffectsLayout ? undefined : [\n        isPresent\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        presenceChildren.forEach((_, key)=>presenceChildren.set(key, false));\n    }, [\n        isPresent\n    ]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */ react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        !isPresent && !presenceChildren.size && onExitComplete && onExitComplete();\n    }, [\n        isPresent\n    ]);\n    if (mode === \"popLayout\") {\n        children = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_PopChild_mjs__WEBPACK_IMPORTED_MODULE_2__.PopChild, {\n            isPresent: isPresent\n        }, children);\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_context_PresenceContext_mjs__WEBPACK_IMPORTED_MODULE_3__.PresenceContext.Provider, {\n        value: context\n    }, children);\n};\nfunction newChildrenMap() {\n    return new Map();\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbXBvbmVudHMvQW5pbWF0ZVByZXNlbmNlL1ByZXNlbmNlQ2hpbGQubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQStCO0FBQ1E7QUFDNkI7QUFDVDtBQUNqQjtBQUUxQyxNQUFNTSxnQkFBZ0IsQ0FBQyxFQUFFQyxRQUFRLEVBQUVDLE9BQU8sRUFBRUMsU0FBUyxFQUFFQyxjQUFjLEVBQUVDLE1BQU0sRUFBRUMscUJBQXFCLEVBQUVDLElBQUksRUFBRztJQUN6RyxNQUFNQyxtQkFBbUJWLG9FQUFXQSxDQUFDVztJQUNyQyxNQUFNQyxLQUFLZiw0Q0FBS0E7SUFDaEIsTUFBTWdCLFVBQVVmLDhDQUFPQSxDQUFDLElBQU87WUFDM0JjO1lBQ0FSO1lBQ0FDO1lBQ0FFO1lBQ0FELGdCQUFnQixDQUFDUTtnQkFDYkosaUJBQWlCSyxHQUFHLENBQUNELFNBQVM7Z0JBQzlCLEtBQUssTUFBTUUsY0FBY04saUJBQWlCTyxNQUFNLEdBQUk7b0JBQ2hELElBQUksQ0FBQ0QsWUFDRCxRQUFRLDRDQUE0QztnQkFDNUQ7Z0JBQ0FWLGtCQUFrQkE7WUFDdEI7WUFDQVksVUFBVSxDQUFDSjtnQkFDUEosaUJBQWlCSyxHQUFHLENBQUNELFNBQVM7Z0JBQzlCLE9BQU8sSUFBTUosaUJBQWlCUyxNQUFNLENBQUNMO1lBQ3pDO1FBQ0osSUFDQTs7OztLQUlDLEdBQ0ROLHdCQUF3QlksWUFBWTtRQUFDZjtLQUFVO0lBQy9DUCw4Q0FBT0EsQ0FBQztRQUNKWSxpQkFBaUJXLE9BQU8sQ0FBQyxDQUFDQyxHQUFHQyxNQUFRYixpQkFBaUJLLEdBQUcsQ0FBQ1EsS0FBSztJQUNuRSxHQUFHO1FBQUNsQjtLQUFVO0lBQ2Q7OztLQUdDLEdBQ0RULDRDQUFlLENBQUM7UUFDWixDQUFDUyxhQUNHLENBQUNLLGlCQUFpQmUsSUFBSSxJQUN0Qm5CLGtCQUNBQTtJQUNSLEdBQUc7UUFBQ0Q7S0FBVTtJQUNkLElBQUlJLFNBQVMsYUFBYTtRQUN0Qk4seUJBQVdQLGdEQUFtQixDQUFDSyxtREFBUUEsRUFBRTtZQUFFSSxXQUFXQTtRQUFVLEdBQUdGO0lBQ3ZFO0lBQ0EscUJBQVFQLGdEQUFtQixDQUFDRyx5RUFBZUEsQ0FBQzRCLFFBQVEsRUFBRTtRQUFFQyxPQUFPZjtJQUFRLEdBQUdWO0FBQzlFO0FBQ0EsU0FBU1E7SUFDTCxPQUFPLElBQUlrQjtBQUNmO0FBRXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbXBvbmVudHMvQW5pbWF0ZVByZXNlbmNlL1ByZXNlbmNlQ2hpbGQubWpzPzI0M2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlSWQsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBQcmVzZW5jZUNvbnRleHQgfSBmcm9tICcuLi8uLi9jb250ZXh0L1ByZXNlbmNlQ29udGV4dC5tanMnO1xuaW1wb3J0IHsgdXNlQ29uc3RhbnQgfSBmcm9tICcuLi8uLi91dGlscy91c2UtY29uc3RhbnQubWpzJztcbmltcG9ydCB7IFBvcENoaWxkIH0gZnJvbSAnLi9Qb3BDaGlsZC5tanMnO1xuXG5jb25zdCBQcmVzZW5jZUNoaWxkID0gKHsgY2hpbGRyZW4sIGluaXRpYWwsIGlzUHJlc2VudCwgb25FeGl0Q29tcGxldGUsIGN1c3RvbSwgcHJlc2VuY2VBZmZlY3RzTGF5b3V0LCBtb2RlLCB9KSA9PiB7XG4gICAgY29uc3QgcHJlc2VuY2VDaGlsZHJlbiA9IHVzZUNvbnN0YW50KG5ld0NoaWxkcmVuTWFwKTtcbiAgICBjb25zdCBpZCA9IHVzZUlkKCk7XG4gICAgY29uc3QgY29udGV4dCA9IHVzZU1lbW8oKCkgPT4gKHtcbiAgICAgICAgaWQsXG4gICAgICAgIGluaXRpYWwsXG4gICAgICAgIGlzUHJlc2VudCxcbiAgICAgICAgY3VzdG9tLFxuICAgICAgICBvbkV4aXRDb21wbGV0ZTogKGNoaWxkSWQpID0+IHtcbiAgICAgICAgICAgIHByZXNlbmNlQ2hpbGRyZW4uc2V0KGNoaWxkSWQsIHRydWUpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBpc0NvbXBsZXRlIG9mIHByZXNlbmNlQ2hpbGRyZW4udmFsdWVzKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzQ29tcGxldGUpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjsgLy8gY2FuIHN0b3Agc2VhcmNoaW5nIHdoZW4gYW55IGlzIGluY29tcGxldGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9uRXhpdENvbXBsZXRlICYmIG9uRXhpdENvbXBsZXRlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlZ2lzdGVyOiAoY2hpbGRJZCkgPT4ge1xuICAgICAgICAgICAgcHJlc2VuY2VDaGlsZHJlbi5zZXQoY2hpbGRJZCwgZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHByZXNlbmNlQ2hpbGRyZW4uZGVsZXRlKGNoaWxkSWQpO1xuICAgICAgICB9LFxuICAgIH0pLCBcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgcHJlc2VuY2Ugb2YgYSBjaGlsZCBhZmZlY3RzIHRoZSBsYXlvdXQgb2YgdGhlIGNvbXBvbmVudHMgYXJvdW5kIGl0LFxuICAgICAqIHdlIHdhbnQgdG8gbWFrZSBhIG5ldyBjb250ZXh0IHZhbHVlIHRvIGVuc3VyZSB0aGV5IGdldCByZS1yZW5kZXJlZFxuICAgICAqIHNvIHRoZXkgY2FuIGRldGVjdCB0aGF0IGxheW91dCBjaGFuZ2UuXG4gICAgICovXG4gICAgcHJlc2VuY2VBZmZlY3RzTGF5b3V0ID8gdW5kZWZpbmVkIDogW2lzUHJlc2VudF0pO1xuICAgIHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBwcmVzZW5jZUNoaWxkcmVuLmZvckVhY2goKF8sIGtleSkgPT4gcHJlc2VuY2VDaGlsZHJlbi5zZXQoa2V5LCBmYWxzZSkpO1xuICAgIH0sIFtpc1ByZXNlbnRdKTtcbiAgICAvKipcbiAgICAgKiBJZiB0aGVyZSdzIG5vIGBtb3Rpb25gIGNvbXBvbmVudHMgdG8gZmlyZSBleGl0IGFuaW1hdGlvbnMsIHdlIHdhbnQgdG8gcmVtb3ZlIHRoaXNcbiAgICAgKiBjb21wb25lbnQgaW1tZWRpYXRlbHkuXG4gICAgICovXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgIWlzUHJlc2VudCAmJlxuICAgICAgICAgICAgIXByZXNlbmNlQ2hpbGRyZW4uc2l6ZSAmJlxuICAgICAgICAgICAgb25FeGl0Q29tcGxldGUgJiZcbiAgICAgICAgICAgIG9uRXhpdENvbXBsZXRlKCk7XG4gICAgfSwgW2lzUHJlc2VudF0pO1xuICAgIGlmIChtb2RlID09PSBcInBvcExheW91dFwiKSB7XG4gICAgICAgIGNoaWxkcmVuID0gUmVhY3QuY3JlYXRlRWxlbWVudChQb3BDaGlsZCwgeyBpc1ByZXNlbnQ6IGlzUHJlc2VudCB9LCBjaGlsZHJlbik7XG4gICAgfVxuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChQcmVzZW5jZUNvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IGNvbnRleHQgfSwgY2hpbGRyZW4pKTtcbn07XG5mdW5jdGlvbiBuZXdDaGlsZHJlbk1hcCgpIHtcbiAgICByZXR1cm4gbmV3IE1hcCgpO1xufVxuXG5leHBvcnQgeyBQcmVzZW5jZUNoaWxkIH07XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VJZCIsInVzZU1lbW8iLCJQcmVzZW5jZUNvbnRleHQiLCJ1c2VDb25zdGFudCIsIlBvcENoaWxkIiwiUHJlc2VuY2VDaGlsZCIsImNoaWxkcmVuIiwiaW5pdGlhbCIsImlzUHJlc2VudCIsIm9uRXhpdENvbXBsZXRlIiwiY3VzdG9tIiwicHJlc2VuY2VBZmZlY3RzTGF5b3V0IiwibW9kZSIsInByZXNlbmNlQ2hpbGRyZW4iLCJuZXdDaGlsZHJlbk1hcCIsImlkIiwiY29udGV4dCIsImNoaWxkSWQiLCJzZXQiLCJpc0NvbXBsZXRlIiwidmFsdWVzIiwicmVnaXN0ZXIiLCJkZWxldGUiLCJ1bmRlZmluZWQiLCJmb3JFYWNoIiwiXyIsImtleSIsInVzZUVmZmVjdCIsInNpemUiLCJjcmVhdGVFbGVtZW50IiwiUHJvdmlkZXIiLCJ2YWx1ZSIsIk1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnimatePresence: () => (/* binding */ AnimatePresence)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _utils_use_force_update_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/use-force-update.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-force-update.mjs\");\n/* harmony import */ var _utils_use_is_mounted_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/use-is-mounted.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs\");\n/* harmony import */ var _PresenceChild_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./PresenceChild.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs\");\n/* harmony import */ var _context_LayoutGroupContext_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../context/LayoutGroupContext.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs\");\n/* harmony import */ var _utils_use_isomorphic_effect_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/use-isomorphic-effect.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs\");\n/* harmony import */ var _utils_use_unmount_effect_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/use-unmount-effect.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-unmount-effect.mjs\");\n/* harmony import */ var _utils_errors_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/errors.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/errors.mjs\");\n\n\n\n\n\n\n\n\n\nconst getChildKey = (child)=>child.key || \"\";\nfunction updateChildLookup(children, allChildren) {\n    children.forEach((child)=>{\n        const key = getChildKey(child);\n        allChildren.set(key, child);\n    });\n}\nfunction onlyElements(children) {\n    const filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    react__WEBPACK_IMPORTED_MODULE_0__.Children.forEach(children, (child)=>{\n        if (/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(child)) filtered.push(child);\n    });\n    return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */ const AnimatePresence = ({ children, custom, initial = true, onExitComplete, exitBeforeEnter, presenceAffectsLayout = true, mode = \"sync\" })=>{\n    (0,_utils_errors_mjs__WEBPACK_IMPORTED_MODULE_1__.invariant)(!exitBeforeEnter, \"Replace exitBeforeEnter with mode='wait'\");\n    // We want to force a re-render once all exiting animations have finished. We\n    // either use a local forceRender function, or one from a parent context if it exists.\n    const forceRender = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_LayoutGroupContext_mjs__WEBPACK_IMPORTED_MODULE_2__.LayoutGroupContext).forceRender || (0,_utils_use_force_update_mjs__WEBPACK_IMPORTED_MODULE_3__.useForceUpdate)()[0];\n    const isMounted = (0,_utils_use_is_mounted_mjs__WEBPACK_IMPORTED_MODULE_4__.useIsMounted)();\n    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n    const filteredChildren = onlyElements(children);\n    let childrenToRender = filteredChildren;\n    const exitingChildren = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(new Map()).current;\n    // Keep a living record of the children we're actually rendering so we\n    // can diff to figure out which are entering and exiting\n    const presentChildren = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(childrenToRender);\n    // A lookup table to quickly reference components by key\n    const allChildren = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(new Map()).current;\n    // If this is the initial component render, just deal with logic surrounding whether\n    // we play onMount animations or not.\n    const isInitialRender = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);\n    (0,_utils_use_isomorphic_effect_mjs__WEBPACK_IMPORTED_MODULE_5__.useIsomorphicLayoutEffect)(()=>{\n        isInitialRender.current = false;\n        updateChildLookup(filteredChildren, allChildren);\n        presentChildren.current = childrenToRender;\n    });\n    (0,_utils_use_unmount_effect_mjs__WEBPACK_IMPORTED_MODULE_6__.useUnmountEffect)(()=>{\n        isInitialRender.current = true;\n        allChildren.clear();\n        exitingChildren.clear();\n    });\n    if (isInitialRender.current) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, childrenToRender.map((child)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_PresenceChild_mjs__WEBPACK_IMPORTED_MODULE_7__.PresenceChild, {\n                key: getChildKey(child),\n                isPresent: true,\n                initial: initial ? undefined : false,\n                presenceAffectsLayout: presenceAffectsLayout,\n                mode: mode\n            }, child)));\n    }\n    // If this is a subsequent render, deal with entering and exiting children\n    childrenToRender = [\n        ...childrenToRender\n    ];\n    // Diff the keys of the currently-present and target children to update our\n    // exiting list.\n    const presentKeys = presentChildren.current.map(getChildKey);\n    const targetKeys = filteredChildren.map(getChildKey);\n    // Diff the present children with our target children and mark those that are exiting\n    const numPresent = presentKeys.length;\n    for(let i = 0; i < numPresent; i++){\n        const key = presentKeys[i];\n        if (targetKeys.indexOf(key) === -1 && !exitingChildren.has(key)) {\n            exitingChildren.set(key, undefined);\n        }\n    }\n    // If we currently have exiting children, and we're deferring rendering incoming children\n    // until after all current children have exiting, empty the childrenToRender array\n    if (mode === \"wait\" && exitingChildren.size) {\n        childrenToRender = [];\n    }\n    // Loop through all currently exiting components and clone them to overwrite `animate`\n    // with any `exit` prop they might have defined.\n    exitingChildren.forEach((component, key)=>{\n        // If this component is actually entering again, early return\n        if (targetKeys.indexOf(key) !== -1) return;\n        const child = allChildren.get(key);\n        if (!child) return;\n        const insertionIndex = presentKeys.indexOf(key);\n        let exitingComponent = component;\n        if (!exitingComponent) {\n            const onExit = ()=>{\n                // clean up the exiting children map\n                exitingChildren.delete(key);\n                // compute the keys of children that were rendered once but are no longer present\n                // this could happen in case of too many fast consequent renderings\n                // @link https://github.com/framer/motion/issues/2023\n                const leftOverKeys = Array.from(allChildren.keys()).filter((childKey)=>!targetKeys.includes(childKey));\n                // clean up the all children map\n                leftOverKeys.forEach((leftOverKey)=>allChildren.delete(leftOverKey));\n                // make sure to render only the children that are actually visible\n                presentChildren.current = filteredChildren.filter((presentChild)=>{\n                    const presentChildKey = getChildKey(presentChild);\n                    return(// filter out the node exiting\n                    presentChildKey === key || // filter out the leftover children\n                    leftOverKeys.includes(presentChildKey));\n                });\n                // Defer re-rendering until all exiting children have indeed left\n                if (!exitingChildren.size) {\n                    if (isMounted.current === false) return;\n                    forceRender();\n                    onExitComplete && onExitComplete();\n                }\n            };\n            exitingComponent = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_PresenceChild_mjs__WEBPACK_IMPORTED_MODULE_7__.PresenceChild, {\n                key: getChildKey(child),\n                isPresent: false,\n                onExitComplete: onExit,\n                custom: custom,\n                presenceAffectsLayout: presenceAffectsLayout,\n                mode: mode\n            }, child);\n            exitingChildren.set(key, exitingComponent);\n        }\n        childrenToRender.splice(insertionIndex, 0, exitingComponent);\n    });\n    // Add `MotionContext` even to children that don't need it to ensure we're rendering\n    // the same tree between renders\n    childrenToRender = childrenToRender.map((child)=>{\n        const key = child.key;\n        return exitingChildren.has(key) ? child : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_PresenceChild_mjs__WEBPACK_IMPORTED_MODULE_7__.PresenceChild, {\n            key: getChildKey(child),\n            isPresent: true,\n            presenceAffectsLayout: presenceAffectsLayout,\n            mode: mode\n        }, child);\n    });\n    if ( true && mode === \"wait\" && childrenToRender.length > 1) {\n        console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, exitingChildren.size ? childrenToRender : childrenToRender.map((child)=>/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.cloneElement)(child)));\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs":
/*!****************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isPresent: () => (/* binding */ isPresent),\n/* harmony export */   useIsPresent: () => (/* binding */ useIsPresent),\n/* harmony export */   usePresence: () => (/* binding */ usePresence)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _context_PresenceContext_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../context/PresenceContext.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/PresenceContext.mjs\");\n\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */ function usePresence() {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_PresenceContext_mjs__WEBPACK_IMPORTED_MODULE_1__.PresenceContext);\n    if (context === null) return [\n        true,\n        null\n    ];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    const id = (0,react__WEBPACK_IMPORTED_MODULE_0__.useId)();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>register(id), []);\n    const safeToRemove = ()=>onExitComplete && onExitComplete(id);\n    return !isPresent && onExitComplete ? [\n        false,\n        safeToRemove\n    ] : [\n        true\n    ];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */ function useIsPresent() {\n    return isPresent((0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_PresenceContext_mjs__WEBPACK_IMPORTED_MODULE_1__.PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbXBvbmVudHMvQW5pbWF0ZVByZXNlbmNlL3VzZS1wcmVzZW5jZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBcUQ7QUFDZTtBQUVwRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXNCQyxHQUNELFNBQVNJO0lBQ0wsTUFBTUMsVUFBVUwsaURBQVVBLENBQUNHLHlFQUFlQTtJQUMxQyxJQUFJRSxZQUFZLE1BQ1osT0FBTztRQUFDO1FBQU07S0FBSztJQUN2QixNQUFNLEVBQUVDLFNBQVMsRUFBRUMsY0FBYyxFQUFFQyxRQUFRLEVBQUUsR0FBR0g7SUFDaEQsOEdBQThHO0lBQzlHLGdFQUFnRTtJQUNoRSxNQUFNSSxLQUFLUiw0Q0FBS0E7SUFDaEJDLGdEQUFTQSxDQUFDLElBQU1NLFNBQVNDLEtBQUssRUFBRTtJQUNoQyxNQUFNQyxlQUFlLElBQU1ILGtCQUFrQkEsZUFBZUU7SUFDNUQsT0FBTyxDQUFDSCxhQUFhQyxpQkFBaUI7UUFBQztRQUFPRztLQUFhLEdBQUc7UUFBQztLQUFLO0FBQ3hFO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FtQkMsR0FDRCxTQUFTQztJQUNMLE9BQU9MLFVBQVVOLGlEQUFVQSxDQUFDRyx5RUFBZUE7QUFDL0M7QUFDQSxTQUFTRyxVQUFVRCxPQUFPO0lBQ3RCLE9BQU9BLFlBQVksT0FBTyxPQUFPQSxRQUFRQyxTQUFTO0FBQ3REO0FBRWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbXBvbmVudHMvQW5pbWF0ZVByZXNlbmNlL3VzZS1wcmVzZW5jZS5tanM/MjZmMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDb250ZXh0LCB1c2VJZCwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUHJlc2VuY2VDb250ZXh0IH0gZnJvbSAnLi4vLi4vY29udGV4dC9QcmVzZW5jZUNvbnRleHQubWpzJztcblxuLyoqXG4gKiBXaGVuIGEgY29tcG9uZW50IGlzIHRoZSBjaGlsZCBvZiBgQW5pbWF0ZVByZXNlbmNlYCwgaXQgY2FuIHVzZSBgdXNlUHJlc2VuY2VgXG4gKiB0byBhY2Nlc3MgaW5mb3JtYXRpb24gYWJvdXQgd2hldGhlciBpdCdzIHN0aWxsIHByZXNlbnQgaW4gdGhlIFJlYWN0IHRyZWUuXG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgeyB1c2VQcmVzZW5jZSB9IGZyb20gXCJmcmFtZXItbW90aW9uXCJcbiAqXG4gKiBleHBvcnQgY29uc3QgQ29tcG9uZW50ID0gKCkgPT4ge1xuICogICBjb25zdCBbaXNQcmVzZW50LCBzYWZlVG9SZW1vdmVdID0gdXNlUHJlc2VuY2UoKVxuICpcbiAqICAgdXNlRWZmZWN0KCgpID0+IHtcbiAqICAgICAhaXNQcmVzZW50ICYmIHNldFRpbWVvdXQoc2FmZVRvUmVtb3ZlLCAxMDAwKVxuICogICB9LCBbaXNQcmVzZW50XSlcbiAqXG4gKiAgIHJldHVybiA8ZGl2IC8+XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBJZiBgaXNQcmVzZW50YCBpcyBgZmFsc2VgLCBpdCBtZWFucyB0aGF0IGEgY29tcG9uZW50IGhhcyBiZWVuIHJlbW92ZWQgdGhlIHRyZWUsIGJ1dFxuICogYEFuaW1hdGVQcmVzZW5jZWAgd29uJ3QgcmVhbGx5IHJlbW92ZSBpdCB1bnRpbCBgc2FmZVRvUmVtb3ZlYCBoYXMgYmVlbiBjYWxsZWQuXG4gKlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiB1c2VQcmVzZW5jZSgpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChQcmVzZW5jZUNvbnRleHQpO1xuICAgIGlmIChjb250ZXh0ID09PSBudWxsKVxuICAgICAgICByZXR1cm4gW3RydWUsIG51bGxdO1xuICAgIGNvbnN0IHsgaXNQcmVzZW50LCBvbkV4aXRDb21wbGV0ZSwgcmVnaXN0ZXIgfSA9IGNvbnRleHQ7XG4gICAgLy8gSXQncyBzYWZlIHRvIGNhbGwgdGhlIGZvbGxvd2luZyBob29rcyBjb25kaXRpb25hbGx5IChhZnRlciBhbiBlYXJseSByZXR1cm4pIGJlY2F1c2UgdGhlIGNvbnRleHQgd2lsbCBhbHdheXNcbiAgICAvLyBlaXRoZXIgYmUgbnVsbCBvciBub24tbnVsbCBmb3IgdGhlIGxpZmVzcGFuIG9mIHRoZSBjb21wb25lbnQuXG4gICAgY29uc3QgaWQgPSB1c2VJZCgpO1xuICAgIHVzZUVmZmVjdCgoKSA9PiByZWdpc3RlcihpZCksIFtdKTtcbiAgICBjb25zdCBzYWZlVG9SZW1vdmUgPSAoKSA9PiBvbkV4aXRDb21wbGV0ZSAmJiBvbkV4aXRDb21wbGV0ZShpZCk7XG4gICAgcmV0dXJuICFpc1ByZXNlbnQgJiYgb25FeGl0Q29tcGxldGUgPyBbZmFsc2UsIHNhZmVUb1JlbW92ZV0gOiBbdHJ1ZV07XG59XG4vKipcbiAqIFNpbWlsYXIgdG8gYHVzZVByZXNlbmNlYCwgZXhjZXB0IGB1c2VJc1ByZXNlbnRgIHNpbXBseSByZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBjb21wb25lbnQgaXMgcHJlc2VudC5cbiAqIFRoZXJlIGlzIG5vIGBzYWZlVG9SZW1vdmVgIGZ1bmN0aW9uLlxuICpcbiAqIGBgYGpzeFxuICogaW1wb3J0IHsgdXNlSXNQcmVzZW50IH0gZnJvbSBcImZyYW1lci1tb3Rpb25cIlxuICpcbiAqIGV4cG9ydCBjb25zdCBDb21wb25lbnQgPSAoKSA9PiB7XG4gKiAgIGNvbnN0IGlzUHJlc2VudCA9IHVzZUlzUHJlc2VudCgpXG4gKlxuICogICB1c2VFZmZlY3QoKCkgPT4ge1xuICogICAgICFpc1ByZXNlbnQgJiYgY29uc29sZS5sb2coXCJJJ3ZlIGJlZW4gcmVtb3ZlZCFcIilcbiAqICAgfSwgW2lzUHJlc2VudF0pXG4gKlxuICogICByZXR1cm4gPGRpdiAvPlxuICogfVxuICogYGBgXG4gKlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiB1c2VJc1ByZXNlbnQoKSB7XG4gICAgcmV0dXJuIGlzUHJlc2VudCh1c2VDb250ZXh0KFByZXNlbmNlQ29udGV4dCkpO1xufVxuZnVuY3Rpb24gaXNQcmVzZW50KGNvbnRleHQpIHtcbiAgICByZXR1cm4gY29udGV4dCA9PT0gbnVsbCA/IHRydWUgOiBjb250ZXh0LmlzUHJlc2VudDtcbn1cblxuZXhwb3J0IHsgaXNQcmVzZW50LCB1c2VJc1ByZXNlbnQsIHVzZVByZXNlbmNlIH07XG4iXSwibmFtZXMiOlsidXNlQ29udGV4dCIsInVzZUlkIiwidXNlRWZmZWN0IiwiUHJlc2VuY2VDb250ZXh0IiwidXNlUHJlc2VuY2UiLCJjb250ZXh0IiwiaXNQcmVzZW50Iiwib25FeGl0Q29tcGxldGUiLCJyZWdpc3RlciIsImlkIiwic2FmZVRvUmVtb3ZlIiwidXNlSXNQcmVzZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LayoutGroupContext: () => (/* binding */ LayoutGroupContext)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nconst LayoutGroupContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvTGF5b3V0R3JvdXBDb250ZXh0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFzQztBQUV0QyxNQUFNQyxtQ0FBcUJELG9EQUFhQSxDQUFDLENBQUM7QUFFWiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9jb250ZXh0L0xheW91dEdyb3VwQ29udGV4dC5tanM/YjhmYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuXG5jb25zdCBMYXlvdXRHcm91cENvbnRleHQgPSBjcmVhdGVDb250ZXh0KHt9KTtcblxuZXhwb3J0IHsgTGF5b3V0R3JvdXBDb250ZXh0IH07XG4iXSwibmFtZXMiOlsiY3JlYXRlQ29udGV4dCIsIkxheW91dEdyb3VwQ29udGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/context/LazyContext.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/context/LazyContext.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LazyContext: () => (/* binding */ LazyContext)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nconst LazyContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    strict: false\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvTGF6eUNvbnRleHQubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXNDO0FBRXRDLE1BQU1DLDRCQUFjRCxvREFBYUEsQ0FBQztJQUFFRSxRQUFRO0FBQU07QUFFM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvY29udGV4dC9MYXp5Q29udGV4dC5tanM/Mzk4NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuXG5jb25zdCBMYXp5Q29udGV4dCA9IGNyZWF0ZUNvbnRleHQoeyBzdHJpY3Q6IGZhbHNlIH0pO1xuXG5leHBvcnQgeyBMYXp5Q29udGV4dCB9O1xuIl0sIm5hbWVzIjpbImNyZWF0ZUNvbnRleHQiLCJMYXp5Q29udGV4dCIsInN0cmljdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/context/LazyContext.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MotionConfigContext: () => (/* binding */ MotionConfigContext)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * @public\n */ const MotionConfigContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    transformPagePoint: (p)=>p,\n    isStatic: false,\n    reducedMotion: \"never\"\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvTW90aW9uQ29uZmlnQ29udGV4dC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBc0M7QUFFdEM7O0NBRUMsR0FDRCxNQUFNQyxvQ0FBc0JELG9EQUFhQSxDQUFDO0lBQ3RDRSxvQkFBb0IsQ0FBQ0MsSUFBTUE7SUFDM0JDLFVBQVU7SUFDVkMsZUFBZTtBQUNuQjtBQUUrQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9jb250ZXh0L01vdGlvbkNvbmZpZ0NvbnRleHQubWpzPzBkNzYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmNvbnN0IE1vdGlvbkNvbmZpZ0NvbnRleHQgPSBjcmVhdGVDb250ZXh0KHtcbiAgICB0cmFuc2Zvcm1QYWdlUG9pbnQ6IChwKSA9PiBwLFxuICAgIGlzU3RhdGljOiBmYWxzZSxcbiAgICByZWR1Y2VkTW90aW9uOiBcIm5ldmVyXCIsXG59KTtcblxuZXhwb3J0IHsgTW90aW9uQ29uZmlnQ29udGV4dCB9O1xuIl0sIm5hbWVzIjpbImNyZWF0ZUNvbnRleHQiLCJNb3Rpb25Db25maWdDb250ZXh0IiwidHJhbnNmb3JtUGFnZVBvaW50IiwicCIsImlzU3RhdGljIiwicmVkdWNlZE1vdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/context/MotionContext/create.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/context/MotionContext/create.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useCreateMotionContext: () => (/* binding */ useCreateMotionContext)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/MotionContext/index.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs\");\n\n\n\nfunction useCreateMotionContext(props) {\n    const { initial, animate } = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.getCurrentTreeVariants)(props, (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_index_mjs__WEBPACK_IMPORTED_MODULE_2__.MotionContext));\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            initial,\n            animate\n        }), [\n        variantLabelsAsDependency(initial),\n        variantLabelsAsDependency(animate)\n    ]);\n}\nfunction variantLabelsAsDependency(prop) {\n    return Array.isArray(prop) ? prop.join(\" \") : prop;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvTW90aW9uQ29udGV4dC9jcmVhdGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNEM7QUFDQTtBQUNTO0FBRXJELFNBQVNJLHVCQUF1QkMsS0FBSztJQUNqQyxNQUFNLEVBQUVDLE9BQU8sRUFBRUMsT0FBTyxFQUFFLEdBQUdKLGtFQUFzQkEsQ0FBQ0UsT0FBT0wsaURBQVVBLENBQUNFLHFEQUFhQTtJQUNuRixPQUFPRCw4Q0FBT0EsQ0FBQyxJQUFPO1lBQUVLO1lBQVNDO1FBQVEsSUFBSTtRQUFDQywwQkFBMEJGO1FBQVVFLDBCQUEwQkQ7S0FBUztBQUN6SDtBQUNBLFNBQVNDLDBCQUEwQkMsSUFBSTtJQUNuQyxPQUFPQyxNQUFNQyxPQUFPLENBQUNGLFFBQVFBLEtBQUtHLElBQUksQ0FBQyxPQUFPSDtBQUNsRDtBQUVrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9jb250ZXh0L01vdGlvbkNvbnRleHQvY3JlYXRlLm1qcz82MDdiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUNvbnRleHQsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBNb3Rpb25Db250ZXh0IH0gZnJvbSAnLi9pbmRleC5tanMnO1xuaW1wb3J0IHsgZ2V0Q3VycmVudFRyZWVWYXJpYW50cyB9IGZyb20gJy4vdXRpbHMubWpzJztcblxuZnVuY3Rpb24gdXNlQ3JlYXRlTW90aW9uQ29udGV4dChwcm9wcykge1xuICAgIGNvbnN0IHsgaW5pdGlhbCwgYW5pbWF0ZSB9ID0gZ2V0Q3VycmVudFRyZWVWYXJpYW50cyhwcm9wcywgdXNlQ29udGV4dChNb3Rpb25Db250ZXh0KSk7XG4gICAgcmV0dXJuIHVzZU1lbW8oKCkgPT4gKHsgaW5pdGlhbCwgYW5pbWF0ZSB9KSwgW3ZhcmlhbnRMYWJlbHNBc0RlcGVuZGVuY3koaW5pdGlhbCksIHZhcmlhbnRMYWJlbHNBc0RlcGVuZGVuY3koYW5pbWF0ZSldKTtcbn1cbmZ1bmN0aW9uIHZhcmlhbnRMYWJlbHNBc0RlcGVuZGVuY3kocHJvcCkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHByb3ApID8gcHJvcC5qb2luKFwiIFwiKSA6IHByb3A7XG59XG5cbmV4cG9ydCB7IHVzZUNyZWF0ZU1vdGlvbkNvbnRleHQgfTtcbiJdLCJuYW1lcyI6WyJ1c2VDb250ZXh0IiwidXNlTWVtbyIsIk1vdGlvbkNvbnRleHQiLCJnZXRDdXJyZW50VHJlZVZhcmlhbnRzIiwidXNlQ3JlYXRlTW90aW9uQ29udGV4dCIsInByb3BzIiwiaW5pdGlhbCIsImFuaW1hdGUiLCJ2YXJpYW50TGFiZWxzQXNEZXBlbmRlbmN5IiwicHJvcCIsIkFycmF5IiwiaXNBcnJheSIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/context/MotionContext/create.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/context/MotionContext/index.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/context/MotionContext/index.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MotionContext: () => (/* binding */ MotionContext)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nconst MotionContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvTW90aW9uQ29udGV4dC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBc0M7QUFFdEMsTUFBTUMsOEJBQWdCRCxvREFBYUEsQ0FBQyxDQUFDO0FBRVoiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvY29udGV4dC9Nb3Rpb25Db250ZXh0L2luZGV4Lm1qcz9mMTY2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IE1vdGlvbkNvbnRleHQgPSBjcmVhdGVDb250ZXh0KHt9KTtcblxuZXhwb3J0IHsgTW90aW9uQ29udGV4dCB9O1xuIl0sIm5hbWVzIjpbImNyZWF0ZUNvbnRleHQiLCJNb3Rpb25Db250ZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/context/MotionContext/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCurrentTreeVariants: () => (/* binding */ getCurrentTreeVariants)\n/* harmony export */ });\n/* harmony import */ var _render_utils_is_variant_label_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../render/utils/is-variant-label.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs\");\n/* harmony import */ var _render_utils_is_controlling_variants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../render/utils/is-controlling-variants.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs\");\n\n\nfunction getCurrentTreeVariants(props, context) {\n    if ((0,_render_utils_is_controlling_variants_mjs__WEBPACK_IMPORTED_MODULE_0__.isControllingVariants)(props)) {\n        const { initial, animate } = props;\n        return {\n            initial: initial === false || (0,_render_utils_is_variant_label_mjs__WEBPACK_IMPORTED_MODULE_1__.isVariantLabel)(initial) ? initial : undefined,\n            animate: (0,_render_utils_is_variant_label_mjs__WEBPACK_IMPORTED_MODULE_1__.isVariantLabel)(animate) ? animate : undefined\n        };\n    }\n    return props.inherit !== false ? context : {};\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvTW90aW9uQ29udGV4dC91dGlscy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXlFO0FBQ2M7QUFFdkYsU0FBU0UsdUJBQXVCQyxLQUFLLEVBQUVDLE9BQU87SUFDMUMsSUFBSUgsZ0dBQXFCQSxDQUFDRSxRQUFRO1FBQzlCLE1BQU0sRUFBRUUsT0FBTyxFQUFFQyxPQUFPLEVBQUUsR0FBR0g7UUFDN0IsT0FBTztZQUNIRSxTQUFTQSxZQUFZLFNBQVNMLGtGQUFjQSxDQUFDSyxXQUN2Q0EsVUFDQUU7WUFDTkQsU0FBU04sa0ZBQWNBLENBQUNNLFdBQVdBLFVBQVVDO1FBQ2pEO0lBQ0o7SUFDQSxPQUFPSixNQUFNSyxPQUFPLEtBQUssUUFBUUosVUFBVSxDQUFDO0FBQ2hEO0FBRWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvTW90aW9uQ29udGV4dC91dGlscy5tanM/ZjQwYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1ZhcmlhbnRMYWJlbCB9IGZyb20gJy4uLy4uL3JlbmRlci91dGlscy9pcy12YXJpYW50LWxhYmVsLm1qcyc7XG5pbXBvcnQgeyBpc0NvbnRyb2xsaW5nVmFyaWFudHMgfSBmcm9tICcuLi8uLi9yZW5kZXIvdXRpbHMvaXMtY29udHJvbGxpbmctdmFyaWFudHMubWpzJztcblxuZnVuY3Rpb24gZ2V0Q3VycmVudFRyZWVWYXJpYW50cyhwcm9wcywgY29udGV4dCkge1xuICAgIGlmIChpc0NvbnRyb2xsaW5nVmFyaWFudHMocHJvcHMpKSB7XG4gICAgICAgIGNvbnN0IHsgaW5pdGlhbCwgYW5pbWF0ZSB9ID0gcHJvcHM7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbml0aWFsOiBpbml0aWFsID09PSBmYWxzZSB8fCBpc1ZhcmlhbnRMYWJlbChpbml0aWFsKVxuICAgICAgICAgICAgICAgID8gaW5pdGlhbFxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgYW5pbWF0ZTogaXNWYXJpYW50TGFiZWwoYW5pbWF0ZSkgPyBhbmltYXRlIDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gcHJvcHMuaW5oZXJpdCAhPT0gZmFsc2UgPyBjb250ZXh0IDoge307XG59XG5cbmV4cG9ydCB7IGdldEN1cnJlbnRUcmVlVmFyaWFudHMgfTtcbiJdLCJuYW1lcyI6WyJpc1ZhcmlhbnRMYWJlbCIsImlzQ29udHJvbGxpbmdWYXJpYW50cyIsImdldEN1cnJlbnRUcmVlVmFyaWFudHMiLCJwcm9wcyIsImNvbnRleHQiLCJpbml0aWFsIiwiYW5pbWF0ZSIsInVuZGVmaW5lZCIsImluaGVyaXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/context/PresenceContext.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/context/PresenceContext.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PresenceContext: () => (/* binding */ PresenceContext)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * @public\n */ const PresenceContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvUHJlc2VuY2VDb250ZXh0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFzQztBQUV0Qzs7Q0FFQyxHQUNELE1BQU1DLGdDQUFrQkQsb0RBQWFBLENBQUM7QUFFWCIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9jb250ZXh0L1ByZXNlbmNlQ29udGV4dC5tanM/ZWMyNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuY29uc3QgUHJlc2VuY2VDb250ZXh0ID0gY3JlYXRlQ29udGV4dChudWxsKTtcblxuZXhwb3J0IHsgUHJlc2VuY2VDb250ZXh0IH07XG4iXSwibmFtZXMiOlsiY3JlYXRlQ29udGV4dCIsIlByZXNlbmNlQ29udGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/context/PresenceContext.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SwitchLayoutGroupContext: () => (/* binding */ SwitchLayoutGroupContext)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * Internal, exported only for usage in Framer\n */ const SwitchLayoutGroupContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvU3dpdGNoTGF5b3V0R3JvdXBDb250ZXh0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFzQztBQUV0Qzs7Q0FFQyxHQUNELE1BQU1DLHlDQUEyQkQsb0RBQWFBLENBQUMsQ0FBQztBQUVaIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvU3dpdGNoTGF5b3V0R3JvdXBDb250ZXh0Lm1qcz83OGE3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5cbi8qKlxuICogSW50ZXJuYWwsIGV4cG9ydGVkIG9ubHkgZm9yIHVzYWdlIGluIEZyYW1lclxuICovXG5jb25zdCBTd2l0Y2hMYXlvdXRHcm91cENvbnRleHQgPSBjcmVhdGVDb250ZXh0KHt9KTtcblxuZXhwb3J0IHsgU3dpdGNoTGF5b3V0R3JvdXBDb250ZXh0IH07XG4iXSwibmFtZXMiOlsiY3JlYXRlQ29udGV4dCIsIlN3aXRjaExheW91dEdyb3VwQ29udGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/debug/record.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/debug/record.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   record: () => (/* binding */ record)\n/* harmony export */ });\nfunction record(data) {\n    if (window.MotionDebug) {\n        window.MotionDebug.record(data);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2RlYnVnL3JlY29yZC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBLE9BQU9DLElBQUk7SUFDaEIsSUFBSUMsT0FBT0MsV0FBVyxFQUFFO1FBQ3BCRCxPQUFPQyxXQUFXLENBQUNILE1BQU0sQ0FBQ0M7SUFDOUI7QUFDSjtBQUVrQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9kZWJ1Zy9yZWNvcmQubWpzP2U5YjciXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gcmVjb3JkKGRhdGEpIHtcbiAgICBpZiAod2luZG93Lk1vdGlvbkRlYnVnKSB7XG4gICAgICAgIHdpbmRvdy5Nb3Rpb25EZWJ1Zy5yZWNvcmQoZGF0YSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyByZWNvcmQgfTtcbiJdLCJuYW1lcyI6WyJyZWNvcmQiLCJkYXRhIiwid2luZG93IiwiTW90aW9uRGVidWciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/debug/record.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/easing/anticipate.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/easing/anticipate.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   anticipate: () => (/* binding */ anticipate)\n/* harmony export */ });\n/* harmony import */ var _back_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./back.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/easing/back.mjs\");\n\nconst anticipate = (p)=>(p *= 2) < 1 ? 0.5 * (0,_back_mjs__WEBPACK_IMPORTED_MODULE_0__.backIn)(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2Vhc2luZy9hbnRpY2lwYXRlLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFvQztBQUVwQyxNQUFNQyxhQUFhLENBQUNDLElBQU0sQ0FBQ0EsS0FBSyxLQUFLLElBQUksTUFBTUYsaURBQU1BLENBQUNFLEtBQUssTUFBTyxLQUFJQyxLQUFLQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQU1GLENBQUFBLElBQUksR0FBRTtBQUV6RSIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9lYXNpbmcvYW50aWNpcGF0ZS5tanM/YTczOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBiYWNrSW4gfSBmcm9tICcuL2JhY2subWpzJztcblxuY29uc3QgYW50aWNpcGF0ZSA9IChwKSA9PiAocCAqPSAyKSA8IDEgPyAwLjUgKiBiYWNrSW4ocCkgOiAwLjUgKiAoMiAtIE1hdGgucG93KDIsIC0xMCAqIChwIC0gMSkpKTtcblxuZXhwb3J0IHsgYW50aWNpcGF0ZSB9O1xuIl0sIm5hbWVzIjpbImJhY2tJbiIsImFudGljaXBhdGUiLCJwIiwiTWF0aCIsInBvdyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/easing/anticipate.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/easing/back.mjs":
/*!************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/easing/back.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   backIn: () => (/* binding */ backIn),\n/* harmony export */   backInOut: () => (/* binding */ backInOut),\n/* harmony export */   backOut: () => (/* binding */ backOut)\n/* harmony export */ });\n/* harmony import */ var _cubic_bezier_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cubic-bezier.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/easing/cubic-bezier.mjs\");\n/* harmony import */ var _modifiers_mirror_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifiers/mirror.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/easing/modifiers/mirror.mjs\");\n/* harmony import */ var _modifiers_reverse_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifiers/reverse.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/easing/modifiers/reverse.mjs\");\n\n\n\nconst backOut = (0,_cubic_bezier_mjs__WEBPACK_IMPORTED_MODULE_0__.cubicBezier)(0.33, 1.53, 0.69, 0.99);\nconst backIn = (0,_modifiers_reverse_mjs__WEBPACK_IMPORTED_MODULE_1__.reverseEasing)(backOut);\nconst backInOut = (0,_modifiers_mirror_mjs__WEBPACK_IMPORTED_MODULE_2__.mirrorEasing)(backIn);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2Vhc2luZy9iYWNrLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBaUQ7QUFDSztBQUNFO0FBRXhELE1BQU1HLFVBQVVILDhEQUFXQSxDQUFDLE1BQU0sTUFBTSxNQUFNO0FBQzlDLE1BQU1JLFNBQVNGLHFFQUFhQSxDQUFDQztBQUM3QixNQUFNRSxZQUFZSixtRUFBWUEsQ0FBQ0c7QUFFTyIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9lYXNpbmcvYmFjay5tanM/NDRhZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjdWJpY0JlemllciB9IGZyb20gJy4vY3ViaWMtYmV6aWVyLm1qcyc7XG5pbXBvcnQgeyBtaXJyb3JFYXNpbmcgfSBmcm9tICcuL21vZGlmaWVycy9taXJyb3IubWpzJztcbmltcG9ydCB7IHJldmVyc2VFYXNpbmcgfSBmcm9tICcuL21vZGlmaWVycy9yZXZlcnNlLm1qcyc7XG5cbmNvbnN0IGJhY2tPdXQgPSBjdWJpY0JlemllcigwLjMzLCAxLjUzLCAwLjY5LCAwLjk5KTtcbmNvbnN0IGJhY2tJbiA9IHJldmVyc2VFYXNpbmcoYmFja091dCk7XG5jb25zdCBiYWNrSW5PdXQgPSBtaXJyb3JFYXNpbmcoYmFja0luKTtcblxuZXhwb3J0IHsgYmFja0luLCBiYWNrSW5PdXQsIGJhY2tPdXQgfTtcbiJdLCJuYW1lcyI6WyJjdWJpY0JlemllciIsIm1pcnJvckVhc2luZyIsInJldmVyc2VFYXNpbmciLCJiYWNrT3V0IiwiYmFja0luIiwiYmFja0luT3V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/easing/back.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/easing/circ.mjs":
/*!************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/easing/circ.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   circIn: () => (/* binding */ circIn),\n/* harmony export */   circInOut: () => (/* binding */ circInOut),\n/* harmony export */   circOut: () => (/* binding */ circOut)\n/* harmony export */ });\n/* harmony import */ var _modifiers_mirror_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifiers/mirror.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/easing/modifiers/mirror.mjs\");\n/* harmony import */ var _modifiers_reverse_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modifiers/reverse.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/easing/modifiers/reverse.mjs\");\n\n\nconst circIn = (p)=>1 - Math.sin(Math.acos(p));\nconst circOut = (0,_modifiers_reverse_mjs__WEBPACK_IMPORTED_MODULE_0__.reverseEasing)(circIn);\nconst circInOut = (0,_modifiers_mirror_mjs__WEBPACK_IMPORTED_MODULE_1__.mirrorEasing)(circIn);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2Vhc2luZy9jaXJjLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFzRDtBQUNFO0FBRXhELE1BQU1FLFNBQVMsQ0FBQ0MsSUFBTSxJQUFJQyxLQUFLQyxHQUFHLENBQUNELEtBQUtFLElBQUksQ0FBQ0g7QUFDN0MsTUFBTUksVUFBVU4scUVBQWFBLENBQUNDO0FBQzlCLE1BQU1NLFlBQVlSLG1FQUFZQSxDQUFDRTtBQUVPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2Vhc2luZy9jaXJjLm1qcz85MGYyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1pcnJvckVhc2luZyB9IGZyb20gJy4vbW9kaWZpZXJzL21pcnJvci5tanMnO1xuaW1wb3J0IHsgcmV2ZXJzZUVhc2luZyB9IGZyb20gJy4vbW9kaWZpZXJzL3JldmVyc2UubWpzJztcblxuY29uc3QgY2lyY0luID0gKHApID0+IDEgLSBNYXRoLnNpbihNYXRoLmFjb3MocCkpO1xuY29uc3QgY2lyY091dCA9IHJldmVyc2VFYXNpbmcoY2lyY0luKTtcbmNvbnN0IGNpcmNJbk91dCA9IG1pcnJvckVhc2luZyhjaXJjSW4pO1xuXG5leHBvcnQgeyBjaXJjSW4sIGNpcmNJbk91dCwgY2lyY091dCB9O1xuIl0sIm5hbWVzIjpbIm1pcnJvckVhc2luZyIsInJldmVyc2VFYXNpbmciLCJjaXJjSW4iLCJwIiwiTWF0aCIsInNpbiIsImFjb3MiLCJjaXJjT3V0IiwiY2lyY0luT3V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/easing/circ.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/easing/cubic-bezier.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/easing/cubic-bezier.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cubicBezier: () => (/* binding */ cubicBezier)\n/* harmony export */ });\n/* harmony import */ var _utils_noop_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/noop.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/noop.mjs\");\n\n/*\n  Bezier function generator\n  This has been modified from Gaëtan Renaudeau's BezierEasing\n  https://github.com/gre/bezier-easing/blob/master/src/index.js\n  https://github.com/gre/bezier-easing/blob/master/LICENSE\n  \n  I've removed the newtonRaphsonIterate algo because in benchmarking it\n  wasn't noticiably faster than binarySubdivision, indeed removing it\n  usually improved times, depending on the curve.\n  I also removed the lookup table, as for the added bundle size and loop we're\n  only cutting ~4 or so subdivision iterations. I bumped the max iterations up\n  to 12 to compensate and this still tended to be faster for no perceivable\n  loss in accuracy.\n  Usage\n    const easeOut = cubicBezier(.17,.67,.83,.67);\n    const x = easeOut(0.5); // returns 0.627...\n*/ // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nconst calcBezier = (t, a1, a2)=>(((1.0 - 3.0 * a2 + 3.0 * a1) * t + (3.0 * a2 - 6.0 * a1)) * t + 3.0 * a1) * t;\nconst subdivisionPrecision = 0.0000001;\nconst subdivisionMaxIterations = 12;\nfunction binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {\n    let currentX;\n    let currentT;\n    let i = 0;\n    do {\n        currentT = lowerBound + (upperBound - lowerBound) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - x;\n        if (currentX > 0.0) {\n            upperBound = currentT;\n        } else {\n            lowerBound = currentT;\n        }\n    }while (Math.abs(currentX) > subdivisionPrecision && ++i < subdivisionMaxIterations);\n    return currentT;\n}\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n    // If this is a linear gradient, return linear easing\n    if (mX1 === mY1 && mX2 === mY2) return _utils_noop_mjs__WEBPACK_IMPORTED_MODULE_0__.noop;\n    const getTForX = (aX)=>binarySubdivide(aX, 0, 1, mX1, mX2);\n    // If animation is at start/end, return t without easing\n    return (t)=>t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2Vhc2luZy9jdWJpYy1iZXppZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlDO0FBRXpDOzs7Ozs7Ozs7Ozs7Ozs7O0FBZ0JBLEdBQ0EsaUVBQWlFO0FBQ2pFLE1BQU1DLGFBQWEsQ0FBQ0MsR0FBR0MsSUFBSUMsS0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLE1BQU1BLEtBQUssTUFBTUQsRUFBQyxJQUFLRCxJQUFLLE9BQU1FLEtBQUssTUFBTUQsRUFBQyxDQUFDLElBQUtELElBQUksTUFBTUMsRUFBQyxJQUN0R0Q7QUFDSixNQUFNRyx1QkFBdUI7QUFDN0IsTUFBTUMsMkJBQTJCO0FBQ2pDLFNBQVNDLGdCQUFnQkMsQ0FBQyxFQUFFQyxVQUFVLEVBQUVDLFVBQVUsRUFBRUMsR0FBRyxFQUFFQyxHQUFHO0lBQ3hELElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJQyxJQUFJO0lBQ1IsR0FBRztRQUNDRCxXQUFXTCxhQUFhLENBQUNDLGFBQWFELFVBQVMsSUFBSztRQUNwREksV0FBV1osV0FBV2EsVUFBVUgsS0FBS0MsT0FBT0o7UUFDNUMsSUFBSUssV0FBVyxLQUFLO1lBQ2hCSCxhQUFhSTtRQUNqQixPQUNLO1lBQ0RMLGFBQWFLO1FBQ2pCO0lBQ0osUUFBU0UsS0FBS0MsR0FBRyxDQUFDSixZQUFZUix3QkFDMUIsRUFBRVUsSUFBSVQsMEJBQTBCO0lBQ3BDLE9BQU9RO0FBQ1g7QUFDQSxTQUFTSSxZQUFZUCxHQUFHLEVBQUVRLEdBQUcsRUFBRVAsR0FBRyxFQUFFUSxHQUFHO0lBQ25DLHFEQUFxRDtJQUNyRCxJQUFJVCxRQUFRUSxPQUFPUCxRQUFRUSxLQUN2QixPQUFPcEIsaURBQUlBO0lBQ2YsTUFBTXFCLFdBQVcsQ0FBQ0MsS0FBT2YsZ0JBQWdCZSxJQUFJLEdBQUcsR0FBR1gsS0FBS0M7SUFDeEQsd0RBQXdEO0lBQ3hELE9BQU8sQ0FBQ1YsSUFBTUEsTUFBTSxLQUFLQSxNQUFNLElBQUlBLElBQUlELFdBQVdvQixTQUFTbkIsSUFBSWlCLEtBQUtDO0FBQ3hFO0FBRXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2Vhc2luZy9jdWJpYy1iZXppZXIubWpzP2JiNWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4uL3V0aWxzL25vb3AubWpzJztcblxuLypcbiAgQmV6aWVyIGZ1bmN0aW9uIGdlbmVyYXRvclxuICBUaGlzIGhhcyBiZWVuIG1vZGlmaWVkIGZyb20gR2HDq3RhbiBSZW5hdWRlYXUncyBCZXppZXJFYXNpbmdcbiAgaHR0cHM6Ly9naXRodWIuY29tL2dyZS9iZXppZXItZWFzaW5nL2Jsb2IvbWFzdGVyL3NyYy9pbmRleC5qc1xuICBodHRwczovL2dpdGh1Yi5jb20vZ3JlL2Jlemllci1lYXNpbmcvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICBcbiAgSSd2ZSByZW1vdmVkIHRoZSBuZXd0b25SYXBoc29uSXRlcmF0ZSBhbGdvIGJlY2F1c2UgaW4gYmVuY2htYXJraW5nIGl0XG4gIHdhc24ndCBub3RpY2lhYmx5IGZhc3RlciB0aGFuIGJpbmFyeVN1YmRpdmlzaW9uLCBpbmRlZWQgcmVtb3ZpbmcgaXRcbiAgdXN1YWxseSBpbXByb3ZlZCB0aW1lcywgZGVwZW5kaW5nIG9uIHRoZSBjdXJ2ZS5cbiAgSSBhbHNvIHJlbW92ZWQgdGhlIGxvb2t1cCB0YWJsZSwgYXMgZm9yIHRoZSBhZGRlZCBidW5kbGUgc2l6ZSBhbmQgbG9vcCB3ZSdyZVxuICBvbmx5IGN1dHRpbmcgfjQgb3Igc28gc3ViZGl2aXNpb24gaXRlcmF0aW9ucy4gSSBidW1wZWQgdGhlIG1heCBpdGVyYXRpb25zIHVwXG4gIHRvIDEyIHRvIGNvbXBlbnNhdGUgYW5kIHRoaXMgc3RpbGwgdGVuZGVkIHRvIGJlIGZhc3RlciBmb3Igbm8gcGVyY2VpdmFibGVcbiAgbG9zcyBpbiBhY2N1cmFjeS5cbiAgVXNhZ2VcbiAgICBjb25zdCBlYXNlT3V0ID0gY3ViaWNCZXppZXIoLjE3LC42NywuODMsLjY3KTtcbiAgICBjb25zdCB4ID0gZWFzZU91dCgwLjUpOyAvLyByZXR1cm5zIDAuNjI3Li4uXG4qL1xuLy8gUmV0dXJucyB4KHQpIGdpdmVuIHQsIHgxLCBhbmQgeDIsIG9yIHkodCkgZ2l2ZW4gdCwgeTEsIGFuZCB5Mi5cbmNvbnN0IGNhbGNCZXppZXIgPSAodCwgYTEsIGEyKSA9PiAoKCgxLjAgLSAzLjAgKiBhMiArIDMuMCAqIGExKSAqIHQgKyAoMy4wICogYTIgLSA2LjAgKiBhMSkpICogdCArIDMuMCAqIGExKSAqXG4gICAgdDtcbmNvbnN0IHN1YmRpdmlzaW9uUHJlY2lzaW9uID0gMC4wMDAwMDAxO1xuY29uc3Qgc3ViZGl2aXNpb25NYXhJdGVyYXRpb25zID0gMTI7XG5mdW5jdGlvbiBiaW5hcnlTdWJkaXZpZGUoeCwgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCwgbVgxLCBtWDIpIHtcbiAgICBsZXQgY3VycmVudFg7XG4gICAgbGV0IGN1cnJlbnRUO1xuICAgIGxldCBpID0gMDtcbiAgICBkbyB7XG4gICAgICAgIGN1cnJlbnRUID0gbG93ZXJCb3VuZCArICh1cHBlckJvdW5kIC0gbG93ZXJCb3VuZCkgLyAyLjA7XG4gICAgICAgIGN1cnJlbnRYID0gY2FsY0JlemllcihjdXJyZW50VCwgbVgxLCBtWDIpIC0geDtcbiAgICAgICAgaWYgKGN1cnJlbnRYID4gMC4wKSB7XG4gICAgICAgICAgICB1cHBlckJvdW5kID0gY3VycmVudFQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsb3dlckJvdW5kID0gY3VycmVudFQ7XG4gICAgICAgIH1cbiAgICB9IHdoaWxlIChNYXRoLmFicyhjdXJyZW50WCkgPiBzdWJkaXZpc2lvblByZWNpc2lvbiAmJlxuICAgICAgICArK2kgPCBzdWJkaXZpc2lvbk1heEl0ZXJhdGlvbnMpO1xuICAgIHJldHVybiBjdXJyZW50VDtcbn1cbmZ1bmN0aW9uIGN1YmljQmV6aWVyKG1YMSwgbVkxLCBtWDIsIG1ZMikge1xuICAgIC8vIElmIHRoaXMgaXMgYSBsaW5lYXIgZ3JhZGllbnQsIHJldHVybiBsaW5lYXIgZWFzaW5nXG4gICAgaWYgKG1YMSA9PT0gbVkxICYmIG1YMiA9PT0gbVkyKVxuICAgICAgICByZXR1cm4gbm9vcDtcbiAgICBjb25zdCBnZXRURm9yWCA9IChhWCkgPT4gYmluYXJ5U3ViZGl2aWRlKGFYLCAwLCAxLCBtWDEsIG1YMik7XG4gICAgLy8gSWYgYW5pbWF0aW9uIGlzIGF0IHN0YXJ0L2VuZCwgcmV0dXJuIHQgd2l0aG91dCBlYXNpbmdcbiAgICByZXR1cm4gKHQpID0+IHQgPT09IDAgfHwgdCA9PT0gMSA/IHQgOiBjYWxjQmV6aWVyKGdldFRGb3JYKHQpLCBtWTEsIG1ZMik7XG59XG5cbmV4cG9ydCB7IGN1YmljQmV6aWVyIH07XG4iXSwibmFtZXMiOlsibm9vcCIsImNhbGNCZXppZXIiLCJ0IiwiYTEiLCJhMiIsInN1YmRpdmlzaW9uUHJlY2lzaW9uIiwic3ViZGl2aXNpb25NYXhJdGVyYXRpb25zIiwiYmluYXJ5U3ViZGl2aWRlIiwieCIsImxvd2VyQm91bmQiLCJ1cHBlckJvdW5kIiwibVgxIiwibVgyIiwiY3VycmVudFgiLCJjdXJyZW50VCIsImkiLCJNYXRoIiwiYWJzIiwiY3ViaWNCZXppZXIiLCJtWTEiLCJtWTIiLCJnZXRURm9yWCIsImFYIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/easing/cubic-bezier.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/easing/ease.mjs":
/*!************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/easing/ease.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   easeIn: () => (/* binding */ easeIn),\n/* harmony export */   easeInOut: () => (/* binding */ easeInOut),\n/* harmony export */   easeOut: () => (/* binding */ easeOut)\n/* harmony export */ });\n/* harmony import */ var _cubic_bezier_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cubic-bezier.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/easing/cubic-bezier.mjs\");\n\nconst easeIn = (0,_cubic_bezier_mjs__WEBPACK_IMPORTED_MODULE_0__.cubicBezier)(0.42, 0, 1, 1);\nconst easeOut = (0,_cubic_bezier_mjs__WEBPACK_IMPORTED_MODULE_0__.cubicBezier)(0, 0, 0.58, 1);\nconst easeInOut = (0,_cubic_bezier_mjs__WEBPACK_IMPORTED_MODULE_0__.cubicBezier)(0.42, 0, 0.58, 1);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2Vhc2luZy9lYXNlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWlEO0FBRWpELE1BQU1DLFNBQVNELDhEQUFXQSxDQUFDLE1BQU0sR0FBRyxHQUFHO0FBQ3ZDLE1BQU1FLFVBQVVGLDhEQUFXQSxDQUFDLEdBQUcsR0FBRyxNQUFNO0FBQ3hDLE1BQU1HLFlBQVlILDhEQUFXQSxDQUFDLE1BQU0sR0FBRyxNQUFNO0FBRVAiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZWFzaW5nL2Vhc2UubWpzPzRlNDEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3ViaWNCZXppZXIgfSBmcm9tICcuL2N1YmljLWJlemllci5tanMnO1xuXG5jb25zdCBlYXNlSW4gPSBjdWJpY0JlemllcigwLjQyLCAwLCAxLCAxKTtcbmNvbnN0IGVhc2VPdXQgPSBjdWJpY0JlemllcigwLCAwLCAwLjU4LCAxKTtcbmNvbnN0IGVhc2VJbk91dCA9IGN1YmljQmV6aWVyKDAuNDIsIDAsIDAuNTgsIDEpO1xuXG5leHBvcnQgeyBlYXNlSW4sIGVhc2VJbk91dCwgZWFzZU91dCB9O1xuIl0sIm5hbWVzIjpbImN1YmljQmV6aWVyIiwiZWFzZUluIiwiZWFzZU91dCIsImVhc2VJbk91dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/easing/ease.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/easing/modifiers/mirror.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/easing/modifiers/mirror.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mirrorEasing: () => (/* binding */ mirrorEasing)\n/* harmony export */ });\n// Accepts an easing function and returns a new one that outputs mirrored values for\n// the second half of the animation. Turns easeIn into easeInOut.\nconst mirrorEasing = (easing)=>(p)=>p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2Vhc2luZy9tb2RpZmllcnMvbWlycm9yLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsb0ZBQW9GO0FBQ3BGLGlFQUFpRTtBQUNqRSxNQUFNQSxlQUFlLENBQUNDLFNBQVcsQ0FBQ0MsSUFBTUEsS0FBSyxNQUFNRCxPQUFPLElBQUlDLEtBQUssSUFBSSxDQUFDLElBQUlELE9BQU8sSUFBSyxLQUFJQyxDQUFBQSxFQUFFLElBQUs7QUFFM0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZWFzaW5nL21vZGlmaWVycy9taXJyb3IubWpzP2Q2ODkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQWNjZXB0cyBhbiBlYXNpbmcgZnVuY3Rpb24gYW5kIHJldHVybnMgYSBuZXcgb25lIHRoYXQgb3V0cHV0cyBtaXJyb3JlZCB2YWx1ZXMgZm9yXG4vLyB0aGUgc2Vjb25kIGhhbGYgb2YgdGhlIGFuaW1hdGlvbi4gVHVybnMgZWFzZUluIGludG8gZWFzZUluT3V0LlxuY29uc3QgbWlycm9yRWFzaW5nID0gKGVhc2luZykgPT4gKHApID0+IHAgPD0gMC41ID8gZWFzaW5nKDIgKiBwKSAvIDIgOiAoMiAtIGVhc2luZygyICogKDEgLSBwKSkpIC8gMjtcblxuZXhwb3J0IHsgbWlycm9yRWFzaW5nIH07XG4iXSwibmFtZXMiOlsibWlycm9yRWFzaW5nIiwiZWFzaW5nIiwicCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/easing/modifiers/mirror.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/easing/modifiers/reverse.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/easing/modifiers/reverse.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   reverseEasing: () => (/* binding */ reverseEasing)\n/* harmony export */ });\n// Accepts an easing function and returns a new one that outputs reversed values.\n// Turns easeIn into easeOut.\nconst reverseEasing = (easing)=>(p)=>1 - easing(1 - p);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2Vhc2luZy9tb2RpZmllcnMvcmV2ZXJzZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlGQUFpRjtBQUNqRiw2QkFBNkI7QUFDN0IsTUFBTUEsZ0JBQWdCLENBQUNDLFNBQVcsQ0FBQ0MsSUFBTSxJQUFJRCxPQUFPLElBQUlDO0FBRS9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2Vhc2luZy9tb2RpZmllcnMvcmV2ZXJzZS5tanM/NThkMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBY2NlcHRzIGFuIGVhc2luZyBmdW5jdGlvbiBhbmQgcmV0dXJucyBhIG5ldyBvbmUgdGhhdCBvdXRwdXRzIHJldmVyc2VkIHZhbHVlcy5cbi8vIFR1cm5zIGVhc2VJbiBpbnRvIGVhc2VPdXQuXG5jb25zdCByZXZlcnNlRWFzaW5nID0gKGVhc2luZykgPT4gKHApID0+IDEgLSBlYXNpbmcoMSAtIHApO1xuXG5leHBvcnQgeyByZXZlcnNlRWFzaW5nIH07XG4iXSwibmFtZXMiOlsicmV2ZXJzZUVhc2luZyIsImVhc2luZyIsInAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/easing/modifiers/reverse.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/easing/utils/is-bezier-definition.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/easing/utils/is-bezier-definition.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isBezierDefinition: () => (/* binding */ isBezierDefinition)\n/* harmony export */ });\nconst isBezierDefinition = (easing)=>Array.isArray(easing) && typeof easing[0] === \"number\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2Vhc2luZy91dGlscy9pcy1iZXppZXItZGVmaW5pdGlvbi5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLHFCQUFxQixDQUFDQyxTQUFXQyxNQUFNQyxPQUFPLENBQUNGLFdBQVcsT0FBT0EsTUFBTSxDQUFDLEVBQUUsS0FBSztBQUV2RCIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9lYXNpbmcvdXRpbHMvaXMtYmV6aWVyLWRlZmluaXRpb24ubWpzP2Q5ZGMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgaXNCZXppZXJEZWZpbml0aW9uID0gKGVhc2luZykgPT4gQXJyYXkuaXNBcnJheShlYXNpbmcpICYmIHR5cGVvZiBlYXNpbmdbMF0gPT09IFwibnVtYmVyXCI7XG5cbmV4cG9ydCB7IGlzQmV6aWVyRGVmaW5pdGlvbiB9O1xuIl0sIm5hbWVzIjpbImlzQmV6aWVyRGVmaW5pdGlvbiIsImVhc2luZyIsIkFycmF5IiwiaXNBcnJheSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/easing/utils/is-bezier-definition.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/easing/utils/is-easing-array.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/easing/utils/is-easing-array.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isEasingArray: () => (/* binding */ isEasingArray)\n/* harmony export */ });\nconst isEasingArray = (ease)=>{\n    return Array.isArray(ease) && typeof ease[0] !== \"number\";\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2Vhc2luZy91dGlscy9pcy1lYXNpbmctYXJyYXkubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxnQkFBZ0IsQ0FBQ0M7SUFDbkIsT0FBT0MsTUFBTUMsT0FBTyxDQUFDRixTQUFTLE9BQU9BLElBQUksQ0FBQyxFQUFFLEtBQUs7QUFDckQ7QUFFeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZWFzaW5nL3V0aWxzL2lzLWVhc2luZy1hcnJheS5tanM/ZjA1NyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBpc0Vhc2luZ0FycmF5ID0gKGVhc2UpID0+IHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShlYXNlKSAmJiB0eXBlb2YgZWFzZVswXSAhPT0gXCJudW1iZXJcIjtcbn07XG5cbmV4cG9ydCB7IGlzRWFzaW5nQXJyYXkgfTtcbiJdLCJuYW1lcyI6WyJpc0Vhc2luZ0FycmF5IiwiZWFzZSIsIkFycmF5IiwiaXNBcnJheSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/easing/utils/is-easing-array.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/easing/utils/map.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/easing/utils/map.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   easingDefinitionToFunction: () => (/* binding */ easingDefinitionToFunction)\n/* harmony export */ });\n/* harmony import */ var _utils_errors_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/errors.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/errors.mjs\");\n/* harmony import */ var _cubic_bezier_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../cubic-bezier.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/easing/cubic-bezier.mjs\");\n/* harmony import */ var _utils_noop_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/noop.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/noop.mjs\");\n/* harmony import */ var _ease_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ease.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/easing/ease.mjs\");\n/* harmony import */ var _circ_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../circ.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/easing/circ.mjs\");\n/* harmony import */ var _back_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../back.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/easing/back.mjs\");\n/* harmony import */ var _anticipate_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../anticipate.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/easing/anticipate.mjs\");\n\n\n\n\n\n\n\nconst easingLookup = {\n    linear: _utils_noop_mjs__WEBPACK_IMPORTED_MODULE_0__.noop,\n    easeIn: _ease_mjs__WEBPACK_IMPORTED_MODULE_1__.easeIn,\n    easeInOut: _ease_mjs__WEBPACK_IMPORTED_MODULE_1__.easeInOut,\n    easeOut: _ease_mjs__WEBPACK_IMPORTED_MODULE_1__.easeOut,\n    circIn: _circ_mjs__WEBPACK_IMPORTED_MODULE_2__.circIn,\n    circInOut: _circ_mjs__WEBPACK_IMPORTED_MODULE_2__.circInOut,\n    circOut: _circ_mjs__WEBPACK_IMPORTED_MODULE_2__.circOut,\n    backIn: _back_mjs__WEBPACK_IMPORTED_MODULE_3__.backIn,\n    backInOut: _back_mjs__WEBPACK_IMPORTED_MODULE_3__.backInOut,\n    backOut: _back_mjs__WEBPACK_IMPORTED_MODULE_3__.backOut,\n    anticipate: _anticipate_mjs__WEBPACK_IMPORTED_MODULE_4__.anticipate\n};\nconst easingDefinitionToFunction = (definition)=>{\n    if (Array.isArray(definition)) {\n        // If cubic bezier definition, create bezier curve\n        (0,_utils_errors_mjs__WEBPACK_IMPORTED_MODULE_5__.invariant)(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);\n        const [x1, y1, x2, y2] = definition;\n        return (0,_cubic_bezier_mjs__WEBPACK_IMPORTED_MODULE_6__.cubicBezier)(x1, y1, x2, y2);\n    } else if (typeof definition === \"string\") {\n        // Else lookup from table\n        (0,_utils_errors_mjs__WEBPACK_IMPORTED_MODULE_5__.invariant)(easingLookup[definition] !== undefined, `Invalid easing type '${definition}'`);\n        return easingLookup[definition];\n    }\n    return definition;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2Vhc2luZy91dGlscy9tYXAubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQW1EO0FBQ0Q7QUFDTjtBQUNhO0FBQ0E7QUFDQTtBQUNWO0FBRS9DLE1BQU1hLGVBQWU7SUFDakJDLFFBQVFaLGlEQUFJQTtJQUNaQyxNQUFNQSwrQ0FBQUE7SUFDTkMsU0FBU0Esa0RBQUFBO0lBQ1RDLE9BQU9BLGdEQUFBQTtJQUNQQyxNQUFNQSwrQ0FBQUE7SUFDTkMsU0FBU0Esa0RBQUFBO0lBQ1RDLE9BQU9BLGdEQUFBQTtJQUNQQyxNQUFNQSwrQ0FBQUE7SUFDTkMsU0FBU0Esa0RBQUFBO0lBQ1RDLE9BQU9BLGdEQUFBQTtJQUNQQyxVQUFVQSx5REFBQUE7QUFDZDtBQUNBLE1BQU1HLDZCQUE2QixDQUFDQztJQUNoQyxJQUFJQyxNQUFNQyxPQUFPLENBQUNGLGFBQWE7UUFDM0Isa0RBQWtEO1FBQ2xEaEIsNERBQVNBLENBQUNnQixXQUFXRyxNQUFNLEtBQUssR0FBRyxDQUFDLHVEQUF1RCxDQUFDO1FBQzVGLE1BQU0sQ0FBQ0MsSUFBSUMsSUFBSUMsSUFBSUMsR0FBRyxHQUFHUDtRQUN6QixPQUFPZiw4REFBV0EsQ0FBQ21CLElBQUlDLElBQUlDLElBQUlDO0lBQ25DLE9BQ0ssSUFBSSxPQUFPUCxlQUFlLFVBQVU7UUFDckMseUJBQXlCO1FBQ3pCaEIsNERBQVNBLENBQUNhLFlBQVksQ0FBQ0csV0FBVyxLQUFLUSxXQUFXLENBQUMscUJBQXFCLEVBQUVSLFdBQVcsQ0FBQyxDQUFDO1FBQ3ZGLE9BQU9ILFlBQVksQ0FBQ0csV0FBVztJQUNuQztJQUNBLE9BQU9BO0FBQ1g7QUFFc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZWFzaW5nL3V0aWxzL21hcC5tanM/YzlkMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tICcuLi8uLi91dGlscy9lcnJvcnMubWpzJztcbmltcG9ydCB7IGN1YmljQmV6aWVyIH0gZnJvbSAnLi4vY3ViaWMtYmV6aWVyLm1qcyc7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi4vLi4vdXRpbHMvbm9vcC5tanMnO1xuaW1wb3J0IHsgZWFzZUluLCBlYXNlSW5PdXQsIGVhc2VPdXQgfSBmcm9tICcuLi9lYXNlLm1qcyc7XG5pbXBvcnQgeyBjaXJjSW4sIGNpcmNJbk91dCwgY2lyY091dCB9IGZyb20gJy4uL2NpcmMubWpzJztcbmltcG9ydCB7IGJhY2tJbiwgYmFja0luT3V0LCBiYWNrT3V0IH0gZnJvbSAnLi4vYmFjay5tanMnO1xuaW1wb3J0IHsgYW50aWNpcGF0ZSB9IGZyb20gJy4uL2FudGljaXBhdGUubWpzJztcblxuY29uc3QgZWFzaW5nTG9va3VwID0ge1xuICAgIGxpbmVhcjogbm9vcCxcbiAgICBlYXNlSW4sXG4gICAgZWFzZUluT3V0LFxuICAgIGVhc2VPdXQsXG4gICAgY2lyY0luLFxuICAgIGNpcmNJbk91dCxcbiAgICBjaXJjT3V0LFxuICAgIGJhY2tJbixcbiAgICBiYWNrSW5PdXQsXG4gICAgYmFja091dCxcbiAgICBhbnRpY2lwYXRlLFxufTtcbmNvbnN0IGVhc2luZ0RlZmluaXRpb25Ub0Z1bmN0aW9uID0gKGRlZmluaXRpb24pID0+IHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShkZWZpbml0aW9uKSkge1xuICAgICAgICAvLyBJZiBjdWJpYyBiZXppZXIgZGVmaW5pdGlvbiwgY3JlYXRlIGJlemllciBjdXJ2ZVxuICAgICAgICBpbnZhcmlhbnQoZGVmaW5pdGlvbi5sZW5ndGggPT09IDQsIGBDdWJpYyBiZXppZXIgYXJyYXlzIG11c3QgY29udGFpbiBmb3VyIG51bWVyaWNhbCB2YWx1ZXMuYCk7XG4gICAgICAgIGNvbnN0IFt4MSwgeTEsIHgyLCB5Ml0gPSBkZWZpbml0aW9uO1xuICAgICAgICByZXR1cm4gY3ViaWNCZXppZXIoeDEsIHkxLCB4MiwgeTIpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgZGVmaW5pdGlvbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAvLyBFbHNlIGxvb2t1cCBmcm9tIHRhYmxlXG4gICAgICAgIGludmFyaWFudChlYXNpbmdMb29rdXBbZGVmaW5pdGlvbl0gIT09IHVuZGVmaW5lZCwgYEludmFsaWQgZWFzaW5nIHR5cGUgJyR7ZGVmaW5pdGlvbn0nYCk7XG4gICAgICAgIHJldHVybiBlYXNpbmdMb29rdXBbZGVmaW5pdGlvbl07XG4gICAgfVxuICAgIHJldHVybiBkZWZpbml0aW9uO1xufTtcblxuZXhwb3J0IHsgZWFzaW5nRGVmaW5pdGlvblRvRnVuY3Rpb24gfTtcbiJdLCJuYW1lcyI6WyJpbnZhcmlhbnQiLCJjdWJpY0JlemllciIsIm5vb3AiLCJlYXNlSW4iLCJlYXNlSW5PdXQiLCJlYXNlT3V0IiwiY2lyY0luIiwiY2lyY0luT3V0IiwiY2lyY091dCIsImJhY2tJbiIsImJhY2tJbk91dCIsImJhY2tPdXQiLCJhbnRpY2lwYXRlIiwiZWFzaW5nTG9va3VwIiwibGluZWFyIiwiZWFzaW5nRGVmaW5pdGlvblRvRnVuY3Rpb24iLCJkZWZpbml0aW9uIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwieDEiLCJ5MSIsIngyIiwieTIiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/easing/utils/map.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/events/add-dom-event.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/events/add-dom-event.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addDomEvent: () => (/* binding */ addDomEvent)\n/* harmony export */ });\nfunction addDomEvent(target, eventName, handler, options = {\n    passive: true\n}) {\n    target.addEventListener(eventName, handler, options);\n    return ()=>target.removeEventListener(eventName, handler);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2V2ZW50cy9hZGQtZG9tLWV2ZW50Lm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsU0FBU0EsWUFBWUMsTUFBTSxFQUFFQyxTQUFTLEVBQUVDLE9BQU8sRUFBRUMsVUFBVTtJQUFFQyxTQUFTO0FBQUssQ0FBQztJQUN4RUosT0FBT0ssZ0JBQWdCLENBQUNKLFdBQVdDLFNBQVNDO0lBQzVDLE9BQU8sSUFBTUgsT0FBT00sbUJBQW1CLENBQUNMLFdBQVdDO0FBQ3ZEO0FBRXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2V2ZW50cy9hZGQtZG9tLWV2ZW50Lm1qcz9kNWRlIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGFkZERvbUV2ZW50KHRhcmdldCwgZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zID0geyBwYXNzaXZlOiB0cnVlIH0pIHtcbiAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIHJldHVybiAoKSA9PiB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIpO1xufVxuXG5leHBvcnQgeyBhZGREb21FdmVudCB9O1xuIl0sIm5hbWVzIjpbImFkZERvbUV2ZW50IiwidGFyZ2V0IiwiZXZlbnROYW1lIiwiaGFuZGxlciIsIm9wdGlvbnMiLCJwYXNzaXZlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/events/add-dom-event.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/events/add-pointer-event.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/events/add-pointer-event.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addPointerEvent: () => (/* binding */ addPointerEvent)\n/* harmony export */ });\n/* harmony import */ var _add_dom_event_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./add-dom-event.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/events/add-dom-event.mjs\");\n/* harmony import */ var _event_info_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./event-info.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/events/event-info.mjs\");\n\n\nfunction addPointerEvent(target, eventName, handler, options) {\n    return (0,_add_dom_event_mjs__WEBPACK_IMPORTED_MODULE_0__.addDomEvent)(target, eventName, (0,_event_info_mjs__WEBPACK_IMPORTED_MODULE_1__.addPointerInfo)(handler), options);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2V2ZW50cy9hZGQtcG9pbnRlci1ldmVudC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWtEO0FBQ0E7QUFFbEQsU0FBU0UsZ0JBQWdCQyxNQUFNLEVBQUVDLFNBQVMsRUFBRUMsT0FBTyxFQUFFQyxPQUFPO0lBQ3hELE9BQU9OLCtEQUFXQSxDQUFDRyxRQUFRQyxXQUFXSCwrREFBY0EsQ0FBQ0ksVUFBVUM7QUFDbkU7QUFFMkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZXZlbnRzL2FkZC1wb2ludGVyLWV2ZW50Lm1qcz83MTM4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFkZERvbUV2ZW50IH0gZnJvbSAnLi9hZGQtZG9tLWV2ZW50Lm1qcyc7XG5pbXBvcnQgeyBhZGRQb2ludGVySW5mbyB9IGZyb20gJy4vZXZlbnQtaW5mby5tanMnO1xuXG5mdW5jdGlvbiBhZGRQb2ludGVyRXZlbnQodGFyZ2V0LCBldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gYWRkRG9tRXZlbnQodGFyZ2V0LCBldmVudE5hbWUsIGFkZFBvaW50ZXJJbmZvKGhhbmRsZXIpLCBvcHRpb25zKTtcbn1cblxuZXhwb3J0IHsgYWRkUG9pbnRlckV2ZW50IH07XG4iXSwibmFtZXMiOlsiYWRkRG9tRXZlbnQiLCJhZGRQb2ludGVySW5mbyIsImFkZFBvaW50ZXJFdmVudCIsInRhcmdldCIsImV2ZW50TmFtZSIsImhhbmRsZXIiLCJvcHRpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/events/add-pointer-event.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/events/event-info.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/events/event-info.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addPointerInfo: () => (/* binding */ addPointerInfo),\n/* harmony export */   extractEventInfo: () => (/* binding */ extractEventInfo)\n/* harmony export */ });\n/* harmony import */ var _utils_is_primary_pointer_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/is-primary-pointer.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.mjs\");\n\nfunction extractEventInfo(event, pointType = \"page\") {\n    return {\n        point: {\n            x: event[pointType + \"X\"],\n            y: event[pointType + \"Y\"]\n        }\n    };\n}\nconst addPointerInfo = (handler)=>{\n    return (event)=>(0,_utils_is_primary_pointer_mjs__WEBPACK_IMPORTED_MODULE_0__.isPrimaryPointer)(event) && handler(event, extractEventInfo(event));\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2V2ZW50cy9ldmVudC1pbmZvLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBa0U7QUFFbEUsU0FBU0MsaUJBQWlCQyxLQUFLLEVBQUVDLFlBQVksTUFBTTtJQUMvQyxPQUFPO1FBQ0hDLE9BQU87WUFDSEMsR0FBR0gsS0FBSyxDQUFDQyxZQUFZLElBQUk7WUFDekJHLEdBQUdKLEtBQUssQ0FBQ0MsWUFBWSxJQUFJO1FBQzdCO0lBQ0o7QUFDSjtBQUNBLE1BQU1JLGlCQUFpQixDQUFDQztJQUNwQixPQUFPLENBQUNOLFFBQVVGLCtFQUFnQkEsQ0FBQ0UsVUFBVU0sUUFBUU4sT0FBT0QsaUJBQWlCQztBQUNqRjtBQUU0QyIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9ldmVudHMvZXZlbnQtaW5mby5tanM/MjYyNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1ByaW1hcnlQb2ludGVyIH0gZnJvbSAnLi91dGlscy9pcy1wcmltYXJ5LXBvaW50ZXIubWpzJztcblxuZnVuY3Rpb24gZXh0cmFjdEV2ZW50SW5mbyhldmVudCwgcG9pbnRUeXBlID0gXCJwYWdlXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBwb2ludDoge1xuICAgICAgICAgICAgeDogZXZlbnRbcG9pbnRUeXBlICsgXCJYXCJdLFxuICAgICAgICAgICAgeTogZXZlbnRbcG9pbnRUeXBlICsgXCJZXCJdLFxuICAgICAgICB9LFxuICAgIH07XG59XG5jb25zdCBhZGRQb2ludGVySW5mbyA9IChoYW5kbGVyKSA9PiB7XG4gICAgcmV0dXJuIChldmVudCkgPT4gaXNQcmltYXJ5UG9pbnRlcihldmVudCkgJiYgaGFuZGxlcihldmVudCwgZXh0cmFjdEV2ZW50SW5mbyhldmVudCkpO1xufTtcblxuZXhwb3J0IHsgYWRkUG9pbnRlckluZm8sIGV4dHJhY3RFdmVudEluZm8gfTtcbiJdLCJuYW1lcyI6WyJpc1ByaW1hcnlQb2ludGVyIiwiZXh0cmFjdEV2ZW50SW5mbyIsImV2ZW50IiwicG9pbnRUeXBlIiwicG9pbnQiLCJ4IiwieSIsImFkZFBvaW50ZXJJbmZvIiwiaGFuZGxlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/events/event-info.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isPrimaryPointer: () => (/* binding */ isPrimaryPointer)\n/* harmony export */ });\nconst isPrimaryPointer = (event)=>{\n    if (event.pointerType === \"mouse\") {\n        return typeof event.button !== \"number\" || event.button <= 0;\n    } else {\n        /**\n         * isPrimary is true for all mice buttons, whereas every touch point\n         * is regarded as its own input. So subsequent concurrent touch points\n         * will be false.\n         *\n         * Specifically match against false here as incomplete versions of\n         * PointerEvents in very old browser might have it set as undefined.\n         */ return event.isPrimary !== false;\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2V2ZW50cy91dGlscy9pcy1wcmltYXJ5LXBvaW50ZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxtQkFBbUIsQ0FBQ0M7SUFDdEIsSUFBSUEsTUFBTUMsV0FBVyxLQUFLLFNBQVM7UUFDL0IsT0FBTyxPQUFPRCxNQUFNRSxNQUFNLEtBQUssWUFBWUYsTUFBTUUsTUFBTSxJQUFJO0lBQy9ELE9BQ0s7UUFDRDs7Ozs7OztTQU9DLEdBQ0QsT0FBT0YsTUFBTUcsU0FBUyxLQUFLO0lBQy9CO0FBQ0o7QUFFNEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZXZlbnRzL3V0aWxzL2lzLXByaW1hcnktcG9pbnRlci5tanM/ZDBiNyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBpc1ByaW1hcnlQb2ludGVyID0gKGV2ZW50KSA9PiB7XG4gICAgaWYgKGV2ZW50LnBvaW50ZXJUeXBlID09PSBcIm1vdXNlXCIpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBldmVudC5idXR0b24gIT09IFwibnVtYmVyXCIgfHwgZXZlbnQuYnV0dG9uIDw9IDA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvKipcbiAgICAgICAgICogaXNQcmltYXJ5IGlzIHRydWUgZm9yIGFsbCBtaWNlIGJ1dHRvbnMsIHdoZXJlYXMgZXZlcnkgdG91Y2ggcG9pbnRcbiAgICAgICAgICogaXMgcmVnYXJkZWQgYXMgaXRzIG93biBpbnB1dC4gU28gc3Vic2VxdWVudCBjb25jdXJyZW50IHRvdWNoIHBvaW50c1xuICAgICAgICAgKiB3aWxsIGJlIGZhbHNlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTcGVjaWZpY2FsbHkgbWF0Y2ggYWdhaW5zdCBmYWxzZSBoZXJlIGFzIGluY29tcGxldGUgdmVyc2lvbnMgb2ZcbiAgICAgICAgICogUG9pbnRlckV2ZW50cyBpbiB2ZXJ5IG9sZCBicm93c2VyIG1pZ2h0IGhhdmUgaXQgc2V0IGFzIHVuZGVmaW5lZC5cbiAgICAgICAgICovXG4gICAgICAgIHJldHVybiBldmVudC5pc1ByaW1hcnkgIT09IGZhbHNlO1xuICAgIH1cbn07XG5cbmV4cG9ydCB7IGlzUHJpbWFyeVBvaW50ZXIgfTtcbiJdLCJuYW1lcyI6WyJpc1ByaW1hcnlQb2ludGVyIiwiZXZlbnQiLCJwb2ludGVyVHlwZSIsImJ1dHRvbiIsImlzUHJpbWFyeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/frameloop/batcher.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/frameloop/batcher.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createRenderBatcher: () => (/* binding */ createRenderBatcher),\n/* harmony export */   stepsOrder: () => (/* binding */ stepsOrder)\n/* harmony export */ });\n/* harmony import */ var _render_step_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./render-step.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/frameloop/render-step.mjs\");\n\nconst stepsOrder = [\n    \"prepare\",\n    \"read\",\n    \"update\",\n    \"preRender\",\n    \"render\",\n    \"postRender\"\n];\nconst maxElapsed = 40;\nfunction createRenderBatcher(scheduleNextBatch, allowKeepAlive) {\n    let runNextFrame = false;\n    let useDefaultElapsed = true;\n    const state = {\n        delta: 0,\n        timestamp: 0,\n        isProcessing: false\n    };\n    const steps = stepsOrder.reduce((acc, key)=>{\n        acc[key] = (0,_render_step_mjs__WEBPACK_IMPORTED_MODULE_0__.createRenderStep)(()=>runNextFrame = true);\n        return acc;\n    }, {});\n    const processStep = (stepId)=>steps[stepId].process(state);\n    const processBatch = ()=>{\n        const timestamp = performance.now();\n        runNextFrame = false;\n        state.delta = useDefaultElapsed ? 1000 / 60 : Math.max(Math.min(timestamp - state.timestamp, maxElapsed), 1);\n        state.timestamp = timestamp;\n        state.isProcessing = true;\n        stepsOrder.forEach(processStep);\n        state.isProcessing = false;\n        if (runNextFrame && allowKeepAlive) {\n            useDefaultElapsed = false;\n            scheduleNextBatch(processBatch);\n        }\n    };\n    const wake = ()=>{\n        runNextFrame = true;\n        useDefaultElapsed = true;\n        if (!state.isProcessing) {\n            scheduleNextBatch(processBatch);\n        }\n    };\n    const schedule = stepsOrder.reduce((acc, key)=>{\n        const step = steps[key];\n        acc[key] = (process, keepAlive = false, immediate = false)=>{\n            if (!runNextFrame) wake();\n            return step.schedule(process, keepAlive, immediate);\n        };\n        return acc;\n    }, {});\n    const cancel = (process)=>stepsOrder.forEach((key)=>steps[key].cancel(process));\n    return {\n        schedule,\n        cancel,\n        state,\n        steps\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2ZyYW1lbG9vcC9iYXRjaGVyLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBcUQ7QUFFckQsTUFBTUMsYUFBYTtJQUNmO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNIO0FBQ0QsTUFBTUMsYUFBYTtBQUNuQixTQUFTQyxvQkFBb0JDLGlCQUFpQixFQUFFQyxjQUFjO0lBQzFELElBQUlDLGVBQWU7SUFDbkIsSUFBSUMsb0JBQW9CO0lBQ3hCLE1BQU1DLFFBQVE7UUFDVkMsT0FBTztRQUNQQyxXQUFXO1FBQ1hDLGNBQWM7SUFDbEI7SUFDQSxNQUFNQyxRQUFRWCxXQUFXWSxNQUFNLENBQUMsQ0FBQ0MsS0FBS0M7UUFDbENELEdBQUcsQ0FBQ0MsSUFBSSxHQUFHZixrRUFBZ0JBLENBQUMsSUFBT00sZUFBZTtRQUNsRCxPQUFPUTtJQUNYLEdBQUcsQ0FBQztJQUNKLE1BQU1FLGNBQWMsQ0FBQ0MsU0FBV0wsS0FBSyxDQUFDSyxPQUFPLENBQUNDLE9BQU8sQ0FBQ1Y7SUFDdEQsTUFBTVcsZUFBZTtRQUNqQixNQUFNVCxZQUFZVSxZQUFZQyxHQUFHO1FBQ2pDZixlQUFlO1FBQ2ZFLE1BQU1DLEtBQUssR0FBR0Ysb0JBQ1IsT0FBTyxLQUNQZSxLQUFLQyxHQUFHLENBQUNELEtBQUtFLEdBQUcsQ0FBQ2QsWUFBWUYsTUFBTUUsU0FBUyxFQUFFUixhQUFhO1FBQ2xFTSxNQUFNRSxTQUFTLEdBQUdBO1FBQ2xCRixNQUFNRyxZQUFZLEdBQUc7UUFDckJWLFdBQVd3QixPQUFPLENBQUNUO1FBQ25CUixNQUFNRyxZQUFZLEdBQUc7UUFDckIsSUFBSUwsZ0JBQWdCRCxnQkFBZ0I7WUFDaENFLG9CQUFvQjtZQUNwQkgsa0JBQWtCZTtRQUN0QjtJQUNKO0lBQ0EsTUFBTU8sT0FBTztRQUNUcEIsZUFBZTtRQUNmQyxvQkFBb0I7UUFDcEIsSUFBSSxDQUFDQyxNQUFNRyxZQUFZLEVBQUU7WUFDckJQLGtCQUFrQmU7UUFDdEI7SUFDSjtJQUNBLE1BQU1RLFdBQVcxQixXQUFXWSxNQUFNLENBQUMsQ0FBQ0MsS0FBS0M7UUFDckMsTUFBTWEsT0FBT2hCLEtBQUssQ0FBQ0csSUFBSTtRQUN2QkQsR0FBRyxDQUFDQyxJQUFJLEdBQUcsQ0FBQ0csU0FBU1csWUFBWSxLQUFLLEVBQUVDLFlBQVksS0FBSztZQUNyRCxJQUFJLENBQUN4QixjQUNEb0I7WUFDSixPQUFPRSxLQUFLRCxRQUFRLENBQUNULFNBQVNXLFdBQVdDO1FBQzdDO1FBQ0EsT0FBT2hCO0lBQ1gsR0FBRyxDQUFDO0lBQ0osTUFBTWlCLFNBQVMsQ0FBQ2IsVUFBWWpCLFdBQVd3QixPQUFPLENBQUMsQ0FBQ1YsTUFBUUgsS0FBSyxDQUFDRyxJQUFJLENBQUNnQixNQUFNLENBQUNiO0lBQzFFLE9BQU87UUFBRVM7UUFBVUk7UUFBUXZCO1FBQU9JO0lBQU07QUFDNUM7QUFFMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZnJhbWVsb29wL2JhdGNoZXIubWpzP2I2MTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlUmVuZGVyU3RlcCB9IGZyb20gJy4vcmVuZGVyLXN0ZXAubWpzJztcblxuY29uc3Qgc3RlcHNPcmRlciA9IFtcbiAgICBcInByZXBhcmVcIixcbiAgICBcInJlYWRcIixcbiAgICBcInVwZGF0ZVwiLFxuICAgIFwicHJlUmVuZGVyXCIsXG4gICAgXCJyZW5kZXJcIixcbiAgICBcInBvc3RSZW5kZXJcIixcbl07XG5jb25zdCBtYXhFbGFwc2VkID0gNDA7XG5mdW5jdGlvbiBjcmVhdGVSZW5kZXJCYXRjaGVyKHNjaGVkdWxlTmV4dEJhdGNoLCBhbGxvd0tlZXBBbGl2ZSkge1xuICAgIGxldCBydW5OZXh0RnJhbWUgPSBmYWxzZTtcbiAgICBsZXQgdXNlRGVmYXVsdEVsYXBzZWQgPSB0cnVlO1xuICAgIGNvbnN0IHN0YXRlID0ge1xuICAgICAgICBkZWx0YTogMCxcbiAgICAgICAgdGltZXN0YW1wOiAwLFxuICAgICAgICBpc1Byb2Nlc3Npbmc6IGZhbHNlLFxuICAgIH07XG4gICAgY29uc3Qgc3RlcHMgPSBzdGVwc09yZGVyLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICAgICAgYWNjW2tleV0gPSBjcmVhdGVSZW5kZXJTdGVwKCgpID0+IChydW5OZXh0RnJhbWUgPSB0cnVlKSk7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICAgIGNvbnN0IHByb2Nlc3NTdGVwID0gKHN0ZXBJZCkgPT4gc3RlcHNbc3RlcElkXS5wcm9jZXNzKHN0YXRlKTtcbiAgICBjb25zdCBwcm9jZXNzQmF0Y2ggPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICBydW5OZXh0RnJhbWUgPSBmYWxzZTtcbiAgICAgICAgc3RhdGUuZGVsdGEgPSB1c2VEZWZhdWx0RWxhcHNlZFxuICAgICAgICAgICAgPyAxMDAwIC8gNjBcbiAgICAgICAgICAgIDogTWF0aC5tYXgoTWF0aC5taW4odGltZXN0YW1wIC0gc3RhdGUudGltZXN0YW1wLCBtYXhFbGFwc2VkKSwgMSk7XG4gICAgICAgIHN0YXRlLnRpbWVzdGFtcCA9IHRpbWVzdGFtcDtcbiAgICAgICAgc3RhdGUuaXNQcm9jZXNzaW5nID0gdHJ1ZTtcbiAgICAgICAgc3RlcHNPcmRlci5mb3JFYWNoKHByb2Nlc3NTdGVwKTtcbiAgICAgICAgc3RhdGUuaXNQcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgICAgIGlmIChydW5OZXh0RnJhbWUgJiYgYWxsb3dLZWVwQWxpdmUpIHtcbiAgICAgICAgICAgIHVzZURlZmF1bHRFbGFwc2VkID0gZmFsc2U7XG4gICAgICAgICAgICBzY2hlZHVsZU5leHRCYXRjaChwcm9jZXNzQmF0Y2gpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCB3YWtlID0gKCkgPT4ge1xuICAgICAgICBydW5OZXh0RnJhbWUgPSB0cnVlO1xuICAgICAgICB1c2VEZWZhdWx0RWxhcHNlZCA9IHRydWU7XG4gICAgICAgIGlmICghc3RhdGUuaXNQcm9jZXNzaW5nKSB7XG4gICAgICAgICAgICBzY2hlZHVsZU5leHRCYXRjaChwcm9jZXNzQmF0Y2gpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBzY2hlZHVsZSA9IHN0ZXBzT3JkZXIucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgICAgICBjb25zdCBzdGVwID0gc3RlcHNba2V5XTtcbiAgICAgICAgYWNjW2tleV0gPSAocHJvY2Vzcywga2VlcEFsaXZlID0gZmFsc2UsIGltbWVkaWF0ZSA9IGZhbHNlKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXJ1bk5leHRGcmFtZSlcbiAgICAgICAgICAgICAgICB3YWtlKCk7XG4gICAgICAgICAgICByZXR1cm4gc3RlcC5zY2hlZHVsZShwcm9jZXNzLCBrZWVwQWxpdmUsIGltbWVkaWF0ZSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICAgIGNvbnN0IGNhbmNlbCA9IChwcm9jZXNzKSA9PiBzdGVwc09yZGVyLmZvckVhY2goKGtleSkgPT4gc3RlcHNba2V5XS5jYW5jZWwocHJvY2VzcykpO1xuICAgIHJldHVybiB7IHNjaGVkdWxlLCBjYW5jZWwsIHN0YXRlLCBzdGVwcyB9O1xufVxuXG5leHBvcnQgeyBjcmVhdGVSZW5kZXJCYXRjaGVyLCBzdGVwc09yZGVyIH07XG4iXSwibmFtZXMiOlsiY3JlYXRlUmVuZGVyU3RlcCIsInN0ZXBzT3JkZXIiLCJtYXhFbGFwc2VkIiwiY3JlYXRlUmVuZGVyQmF0Y2hlciIsInNjaGVkdWxlTmV4dEJhdGNoIiwiYWxsb3dLZWVwQWxpdmUiLCJydW5OZXh0RnJhbWUiLCJ1c2VEZWZhdWx0RWxhcHNlZCIsInN0YXRlIiwiZGVsdGEiLCJ0aW1lc3RhbXAiLCJpc1Byb2Nlc3NpbmciLCJzdGVwcyIsInJlZHVjZSIsImFjYyIsImtleSIsInByb2Nlc3NTdGVwIiwic3RlcElkIiwicHJvY2VzcyIsInByb2Nlc3NCYXRjaCIsInBlcmZvcm1hbmNlIiwibm93IiwiTWF0aCIsIm1heCIsIm1pbiIsImZvckVhY2giLCJ3YWtlIiwic2NoZWR1bGUiLCJzdGVwIiwia2VlcEFsaXZlIiwiaW1tZWRpYXRlIiwiY2FuY2VsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/frameloop/batcher.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/frameloop/frame.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/frameloop/frame.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cancelFrame: () => (/* binding */ cancelFrame),\n/* harmony export */   frame: () => (/* binding */ frame),\n/* harmony export */   frameData: () => (/* binding */ frameData),\n/* harmony export */   steps: () => (/* binding */ steps)\n/* harmony export */ });\n/* harmony import */ var _utils_noop_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/noop.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/noop.mjs\");\n/* harmony import */ var _batcher_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./batcher.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/frameloop/batcher.mjs\");\n\n\nconst { schedule: frame, cancel: cancelFrame, state: frameData, steps } = (0,_batcher_mjs__WEBPACK_IMPORTED_MODULE_0__.createRenderBatcher)(typeof requestAnimationFrame !== \"undefined\" ? requestAnimationFrame : _utils_noop_mjs__WEBPACK_IMPORTED_MODULE_1__.noop, true);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2ZyYW1lbG9vcC9mcmFtZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQXlDO0FBQ1c7QUFFcEQsTUFBTSxFQUFFRSxVQUFVQyxLQUFLLEVBQUVDLFFBQVFDLFdBQVcsRUFBRUMsT0FBT0MsU0FBUyxFQUFFQyxLQUFLLEVBQUcsR0FBR1AsaUVBQW1CQSxDQUFDLE9BQU9RLDBCQUEwQixjQUFjQSx3QkFBd0JULGlEQUFJQSxFQUFFO0FBRTVIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2ZyYW1lbG9vcC9mcmFtZS5tanM/ZThmMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBub29wIH0gZnJvbSAnLi4vdXRpbHMvbm9vcC5tanMnO1xuaW1wb3J0IHsgY3JlYXRlUmVuZGVyQmF0Y2hlciB9IGZyb20gJy4vYmF0Y2hlci5tanMnO1xuXG5jb25zdCB7IHNjaGVkdWxlOiBmcmFtZSwgY2FuY2VsOiBjYW5jZWxGcmFtZSwgc3RhdGU6IGZyYW1lRGF0YSwgc3RlcHMsIH0gPSBjcmVhdGVSZW5kZXJCYXRjaGVyKHR5cGVvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgIT09IFwidW5kZWZpbmVkXCIgPyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgOiBub29wLCB0cnVlKTtcblxuZXhwb3J0IHsgY2FuY2VsRnJhbWUsIGZyYW1lLCBmcmFtZURhdGEsIHN0ZXBzIH07XG4iXSwibmFtZXMiOlsibm9vcCIsImNyZWF0ZVJlbmRlckJhdGNoZXIiLCJzY2hlZHVsZSIsImZyYW1lIiwiY2FuY2VsIiwiY2FuY2VsRnJhbWUiLCJzdGF0ZSIsImZyYW1lRGF0YSIsInN0ZXBzIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/frameloop/frame.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/frameloop/render-step.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/frameloop/render-step.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createRenderStep: () => (/* binding */ createRenderStep)\n/* harmony export */ });\nclass Queue {\n    constructor(){\n        this.order = [];\n        this.scheduled = new Set();\n    }\n    add(process) {\n        if (!this.scheduled.has(process)) {\n            this.scheduled.add(process);\n            this.order.push(process);\n            return true;\n        }\n    }\n    remove(process) {\n        const index = this.order.indexOf(process);\n        if (index !== -1) {\n            this.order.splice(index, 1);\n            this.scheduled.delete(process);\n        }\n    }\n    clear() {\n        this.order.length = 0;\n        this.scheduled.clear();\n    }\n}\nfunction createRenderStep(runNextFrame) {\n    /**\n     * We create and reuse two queues, one to queue jobs for the current frame\n     * and one for the next. We reuse to avoid triggering GC after x frames.\n     */ let thisFrame = new Queue();\n    let nextFrame = new Queue();\n    let numToRun = 0;\n    /**\n     * Track whether we're currently processing jobs in this step. This way\n     * we can decide whether to schedule new jobs for this frame or next.\n     */ let isProcessing = false;\n    let flushNextFrame = false;\n    /**\n     * A set of processes which were marked keepAlive when scheduled.\n     */ const toKeepAlive = new WeakSet();\n    const step = {\n        /**\n         * Schedule a process to run on the next frame.\n         */ schedule: (callback, keepAlive = false, immediate = false)=>{\n            const addToCurrentFrame = immediate && isProcessing;\n            const queue = addToCurrentFrame ? thisFrame : nextFrame;\n            if (keepAlive) toKeepAlive.add(callback);\n            if (queue.add(callback) && addToCurrentFrame && isProcessing) {\n                // If we're adding it to the currently running queue, update its measured size\n                numToRun = thisFrame.order.length;\n            }\n            return callback;\n        },\n        /**\n         * Cancel the provided callback from running on the next frame.\n         */ cancel: (callback)=>{\n            nextFrame.remove(callback);\n            toKeepAlive.delete(callback);\n        },\n        /**\n         * Execute all schedule callbacks.\n         */ process: (frameData)=>{\n            /**\n             * If we're already processing we've probably been triggered by a flushSync\n             * inside an existing process. Instead of executing, mark flushNextFrame\n             * as true and ensure we flush the following frame at the end of this one.\n             */ if (isProcessing) {\n                flushNextFrame = true;\n                return;\n            }\n            isProcessing = true;\n            [thisFrame, nextFrame] = [\n                nextFrame,\n                thisFrame\n            ];\n            // Clear the next frame queue\n            nextFrame.clear();\n            // Execute this frame\n            numToRun = thisFrame.order.length;\n            if (numToRun) {\n                for(let i = 0; i < numToRun; i++){\n                    const callback = thisFrame.order[i];\n                    callback(frameData);\n                    if (toKeepAlive.has(callback)) {\n                        step.schedule(callback);\n                        runNextFrame();\n                    }\n                }\n            }\n            isProcessing = false;\n            if (flushNextFrame) {\n                flushNextFrame = false;\n                step.process(frameData);\n            }\n        }\n    };\n    return step;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2ZyYW1lbG9vcC9yZW5kZXItc3RlcC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BO0lBQ0ZDLGFBQWM7UUFDVixJQUFJLENBQUNDLEtBQUssR0FBRyxFQUFFO1FBQ2YsSUFBSSxDQUFDQyxTQUFTLEdBQUcsSUFBSUM7SUFDekI7SUFDQUMsSUFBSUMsT0FBTyxFQUFFO1FBQ1QsSUFBSSxDQUFDLElBQUksQ0FBQ0gsU0FBUyxDQUFDSSxHQUFHLENBQUNELFVBQVU7WUFDOUIsSUFBSSxDQUFDSCxTQUFTLENBQUNFLEdBQUcsQ0FBQ0M7WUFDbkIsSUFBSSxDQUFDSixLQUFLLENBQUNNLElBQUksQ0FBQ0Y7WUFDaEIsT0FBTztRQUNYO0lBQ0o7SUFDQUcsT0FBT0gsT0FBTyxFQUFFO1FBQ1osTUFBTUksUUFBUSxJQUFJLENBQUNSLEtBQUssQ0FBQ1MsT0FBTyxDQUFDTDtRQUNqQyxJQUFJSSxVQUFVLENBQUMsR0FBRztZQUNkLElBQUksQ0FBQ1IsS0FBSyxDQUFDVSxNQUFNLENBQUNGLE9BQU87WUFDekIsSUFBSSxDQUFDUCxTQUFTLENBQUNVLE1BQU0sQ0FBQ1A7UUFDMUI7SUFDSjtJQUNBUSxRQUFRO1FBQ0osSUFBSSxDQUFDWixLQUFLLENBQUNhLE1BQU0sR0FBRztRQUNwQixJQUFJLENBQUNaLFNBQVMsQ0FBQ1csS0FBSztJQUN4QjtBQUNKO0FBQ0EsU0FBU0UsaUJBQWlCQyxZQUFZO0lBQ2xDOzs7S0FHQyxHQUNELElBQUlDLFlBQVksSUFBSWxCO0lBQ3BCLElBQUltQixZQUFZLElBQUluQjtJQUNwQixJQUFJb0IsV0FBVztJQUNmOzs7S0FHQyxHQUNELElBQUlDLGVBQWU7SUFDbkIsSUFBSUMsaUJBQWlCO0lBQ3JCOztLQUVDLEdBQ0QsTUFBTUMsY0FBYyxJQUFJQztJQUN4QixNQUFNQyxPQUFPO1FBQ1Q7O1NBRUMsR0FDREMsVUFBVSxDQUFDQyxVQUFVQyxZQUFZLEtBQUssRUFBRUMsWUFBWSxLQUFLO1lBQ3JELE1BQU1DLG9CQUFvQkQsYUFBYVI7WUFDdkMsTUFBTVUsUUFBUUQsb0JBQW9CWixZQUFZQztZQUM5QyxJQUFJUyxXQUNBTCxZQUFZbEIsR0FBRyxDQUFDc0I7WUFDcEIsSUFBSUksTUFBTTFCLEdBQUcsQ0FBQ3NCLGFBQWFHLHFCQUFxQlQsY0FBYztnQkFDMUQsOEVBQThFO2dCQUM5RUQsV0FBV0YsVUFBVWhCLEtBQUssQ0FBQ2EsTUFBTTtZQUNyQztZQUNBLE9BQU9ZO1FBQ1g7UUFDQTs7U0FFQyxHQUNESyxRQUFRLENBQUNMO1lBQ0xSLFVBQVVWLE1BQU0sQ0FBQ2tCO1lBQ2pCSixZQUFZVixNQUFNLENBQUNjO1FBQ3ZCO1FBQ0E7O1NBRUMsR0FDRHJCLFNBQVMsQ0FBQzJCO1lBQ047Ozs7YUFJQyxHQUNELElBQUlaLGNBQWM7Z0JBQ2RDLGlCQUFpQjtnQkFDakI7WUFDSjtZQUNBRCxlQUFlO1lBQ2YsQ0FBQ0gsV0FBV0MsVUFBVSxHQUFHO2dCQUFDQTtnQkFBV0Q7YUFBVTtZQUMvQyw2QkFBNkI7WUFDN0JDLFVBQVVMLEtBQUs7WUFDZixxQkFBcUI7WUFDckJNLFdBQVdGLFVBQVVoQixLQUFLLENBQUNhLE1BQU07WUFDakMsSUFBSUssVUFBVTtnQkFDVixJQUFLLElBQUljLElBQUksR0FBR0EsSUFBSWQsVUFBVWMsSUFBSztvQkFDL0IsTUFBTVAsV0FBV1QsVUFBVWhCLEtBQUssQ0FBQ2dDLEVBQUU7b0JBQ25DUCxTQUFTTTtvQkFDVCxJQUFJVixZQUFZaEIsR0FBRyxDQUFDb0IsV0FBVzt3QkFDM0JGLEtBQUtDLFFBQVEsQ0FBQ0M7d0JBQ2RWO29CQUNKO2dCQUNKO1lBQ0o7WUFDQUksZUFBZTtZQUNmLElBQUlDLGdCQUFnQjtnQkFDaEJBLGlCQUFpQjtnQkFDakJHLEtBQUtuQixPQUFPLENBQUMyQjtZQUNqQjtRQUNKO0lBQ0o7SUFDQSxPQUFPUjtBQUNYO0FBRTRCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2ZyYW1lbG9vcC9yZW5kZXItc3RlcC5tanM/NjgwZCJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBRdWV1ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMub3JkZXIgPSBbXTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZWQgPSBuZXcgU2V0KCk7XG4gICAgfVxuICAgIGFkZChwcm9jZXNzKSB7XG4gICAgICAgIGlmICghdGhpcy5zY2hlZHVsZWQuaGFzKHByb2Nlc3MpKSB7XG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlZC5hZGQocHJvY2Vzcyk7XG4gICAgICAgICAgICB0aGlzLm9yZGVyLnB1c2gocHJvY2Vzcyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW1vdmUocHJvY2Vzcykge1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMub3JkZXIuaW5kZXhPZihwcm9jZXNzKTtcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgdGhpcy5vcmRlci5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZWQuZGVsZXRlKHByb2Nlc3MpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLm9yZGVyLmxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVkLmNsZWFyKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlUmVuZGVyU3RlcChydW5OZXh0RnJhbWUpIHtcbiAgICAvKipcbiAgICAgKiBXZSBjcmVhdGUgYW5kIHJldXNlIHR3byBxdWV1ZXMsIG9uZSB0byBxdWV1ZSBqb2JzIGZvciB0aGUgY3VycmVudCBmcmFtZVxuICAgICAqIGFuZCBvbmUgZm9yIHRoZSBuZXh0LiBXZSByZXVzZSB0byBhdm9pZCB0cmlnZ2VyaW5nIEdDIGFmdGVyIHggZnJhbWVzLlxuICAgICAqL1xuICAgIGxldCB0aGlzRnJhbWUgPSBuZXcgUXVldWUoKTtcbiAgICBsZXQgbmV4dEZyYW1lID0gbmV3IFF1ZXVlKCk7XG4gICAgbGV0IG51bVRvUnVuID0gMDtcbiAgICAvKipcbiAgICAgKiBUcmFjayB3aGV0aGVyIHdlJ3JlIGN1cnJlbnRseSBwcm9jZXNzaW5nIGpvYnMgaW4gdGhpcyBzdGVwLiBUaGlzIHdheVxuICAgICAqIHdlIGNhbiBkZWNpZGUgd2hldGhlciB0byBzY2hlZHVsZSBuZXcgam9icyBmb3IgdGhpcyBmcmFtZSBvciBuZXh0LlxuICAgICAqL1xuICAgIGxldCBpc1Byb2Nlc3NpbmcgPSBmYWxzZTtcbiAgICBsZXQgZmx1c2hOZXh0RnJhbWUgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBBIHNldCBvZiBwcm9jZXNzZXMgd2hpY2ggd2VyZSBtYXJrZWQga2VlcEFsaXZlIHdoZW4gc2NoZWR1bGVkLlxuICAgICAqL1xuICAgIGNvbnN0IHRvS2VlcEFsaXZlID0gbmV3IFdlYWtTZXQoKTtcbiAgICBjb25zdCBzdGVwID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogU2NoZWR1bGUgYSBwcm9jZXNzIHRvIHJ1biBvbiB0aGUgbmV4dCBmcmFtZS5cbiAgICAgICAgICovXG4gICAgICAgIHNjaGVkdWxlOiAoY2FsbGJhY2ssIGtlZXBBbGl2ZSA9IGZhbHNlLCBpbW1lZGlhdGUgPSBmYWxzZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYWRkVG9DdXJyZW50RnJhbWUgPSBpbW1lZGlhdGUgJiYgaXNQcm9jZXNzaW5nO1xuICAgICAgICAgICAgY29uc3QgcXVldWUgPSBhZGRUb0N1cnJlbnRGcmFtZSA/IHRoaXNGcmFtZSA6IG5leHRGcmFtZTtcbiAgICAgICAgICAgIGlmIChrZWVwQWxpdmUpXG4gICAgICAgICAgICAgICAgdG9LZWVwQWxpdmUuYWRkKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIGlmIChxdWV1ZS5hZGQoY2FsbGJhY2spICYmIGFkZFRvQ3VycmVudEZyYW1lICYmIGlzUHJvY2Vzc2luZykge1xuICAgICAgICAgICAgICAgIC8vIElmIHdlJ3JlIGFkZGluZyBpdCB0byB0aGUgY3VycmVudGx5IHJ1bm5pbmcgcXVldWUsIHVwZGF0ZSBpdHMgbWVhc3VyZWQgc2l6ZVxuICAgICAgICAgICAgICAgIG51bVRvUnVuID0gdGhpc0ZyYW1lLm9yZGVyLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbmNlbCB0aGUgcHJvdmlkZWQgY2FsbGJhY2sgZnJvbSBydW5uaW5nIG9uIHRoZSBuZXh0IGZyYW1lLlxuICAgICAgICAgKi9cbiAgICAgICAgY2FuY2VsOiAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIG5leHRGcmFtZS5yZW1vdmUoY2FsbGJhY2spO1xuICAgICAgICAgICAgdG9LZWVwQWxpdmUuZGVsZXRlKGNhbGxiYWNrKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEV4ZWN1dGUgYWxsIHNjaGVkdWxlIGNhbGxiYWNrcy5cbiAgICAgICAgICovXG4gICAgICAgIHByb2Nlc3M6IChmcmFtZURhdGEpID0+IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgd2UncmUgYWxyZWFkeSBwcm9jZXNzaW5nIHdlJ3ZlIHByb2JhYmx5IGJlZW4gdHJpZ2dlcmVkIGJ5IGEgZmx1c2hTeW5jXG4gICAgICAgICAgICAgKiBpbnNpZGUgYW4gZXhpc3RpbmcgcHJvY2Vzcy4gSW5zdGVhZCBvZiBleGVjdXRpbmcsIG1hcmsgZmx1c2hOZXh0RnJhbWVcbiAgICAgICAgICAgICAqIGFzIHRydWUgYW5kIGVuc3VyZSB3ZSBmbHVzaCB0aGUgZm9sbG93aW5nIGZyYW1lIGF0IHRoZSBlbmQgb2YgdGhpcyBvbmUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChpc1Byb2Nlc3NpbmcpIHtcbiAgICAgICAgICAgICAgICBmbHVzaE5leHRGcmFtZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXNQcm9jZXNzaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIFt0aGlzRnJhbWUsIG5leHRGcmFtZV0gPSBbbmV4dEZyYW1lLCB0aGlzRnJhbWVdO1xuICAgICAgICAgICAgLy8gQ2xlYXIgdGhlIG5leHQgZnJhbWUgcXVldWVcbiAgICAgICAgICAgIG5leHRGcmFtZS5jbGVhcigpO1xuICAgICAgICAgICAgLy8gRXhlY3V0ZSB0aGlzIGZyYW1lXG4gICAgICAgICAgICBudW1Ub1J1biA9IHRoaXNGcmFtZS5vcmRlci5sZW5ndGg7XG4gICAgICAgICAgICBpZiAobnVtVG9SdW4pIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVRvUnVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSB0aGlzRnJhbWUub3JkZXJbaV07XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGZyYW1lRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0b0tlZXBBbGl2ZS5oYXMoY2FsbGJhY2spKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGVwLnNjaGVkdWxlKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bk5leHRGcmFtZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXNQcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoZmx1c2hOZXh0RnJhbWUpIHtcbiAgICAgICAgICAgICAgICBmbHVzaE5leHRGcmFtZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHN0ZXAucHJvY2VzcyhmcmFtZURhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH07XG4gICAgcmV0dXJuIHN0ZXA7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVJlbmRlclN0ZXAgfTtcbiJdLCJuYW1lcyI6WyJRdWV1ZSIsImNvbnN0cnVjdG9yIiwib3JkZXIiLCJzY2hlZHVsZWQiLCJTZXQiLCJhZGQiLCJwcm9jZXNzIiwiaGFzIiwicHVzaCIsInJlbW92ZSIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsImRlbGV0ZSIsImNsZWFyIiwibGVuZ3RoIiwiY3JlYXRlUmVuZGVyU3RlcCIsInJ1bk5leHRGcmFtZSIsInRoaXNGcmFtZSIsIm5leHRGcmFtZSIsIm51bVRvUnVuIiwiaXNQcm9jZXNzaW5nIiwiZmx1c2hOZXh0RnJhbWUiLCJ0b0tlZXBBbGl2ZSIsIldlYWtTZXQiLCJzdGVwIiwic2NoZWR1bGUiLCJjYWxsYmFjayIsImtlZXBBbGl2ZSIsImltbWVkaWF0ZSIsImFkZFRvQ3VycmVudEZyYW1lIiwicXVldWUiLCJjYW5jZWwiLCJmcmFtZURhdGEiLCJpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/frameloop/render-step.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs":
/*!****************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VisualElementDragControls: () => (/* binding */ VisualElementDragControls),\n/* harmony export */   elementDragControls: () => (/* binding */ elementDragControls)\n/* harmony export */ });\n/* harmony import */ var _utils_errors_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../utils/errors.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/errors.mjs\");\n/* harmony import */ var _pan_PanSession_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../pan/PanSession.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs\");\n/* harmony import */ var _utils_lock_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/lock.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs\");\n/* harmony import */ var _utils_is_ref_object_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utils/is-ref-object.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/is-ref-object.mjs\");\n/* harmony import */ var _events_add_pointer_event_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../events/add-pointer-event.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/events/add-pointer-event.mjs\");\n/* harmony import */ var _utils_constraints_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/constraints.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs\");\n/* harmony import */ var _projection_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../projection/geometry/models.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/models.mjs\");\n/* harmony import */ var _projection_utils_each_axis_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../projection/utils/each-axis.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs\");\n/* harmony import */ var _projection_utils_measure_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../projection/utils/measure.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/utils/measure.mjs\");\n/* harmony import */ var _events_event_info_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../events/event-info.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/events/event-info.mjs\");\n/* harmony import */ var _projection_geometry_conversion_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../projection/geometry/conversion.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs\");\n/* harmony import */ var _events_add_dom_event_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../events/add-dom-event.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/events/add-dom-event.mjs\");\n/* harmony import */ var _projection_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../projection/geometry/delta-calc.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs\");\n/* harmony import */ var _utils_mix_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../utils/mix.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/mix.mjs\");\n/* harmony import */ var _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../value/types/numbers/units.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/numbers/units.mjs\");\n/* harmony import */ var _animation_interfaces_motion_value_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../animation/interfaces/motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs\");\n/* harmony import */ var _utils_get_context_window_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utils/get-context-window.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/get-context-window.mjs\");\n/* harmony import */ var _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../frameloop/frame.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/frameloop/frame.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */ // let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement){\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = {\n            x: 0,\n            y: 0\n        };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */ this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */ this.elastic = (0,_projection_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_0__.createBox)();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */ const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false) return;\n        const onSessionStart = (event)=>{\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor((0,_events_event_info_mjs__WEBPACK_IMPORTED_MODULE_1__.extractEventInfo)(event, \"page\").point);\n            }\n        };\n        const onStart = (event, info)=>{\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openGlobalLock) this.openGlobalLock();\n                this.openGlobalLock = (0,_utils_lock_mjs__WEBPACK_IMPORTED_MODULE_2__.getGlobalLock)(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openGlobalLock) return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */ (0,_projection_utils_each_axis_mjs__WEBPACK_IMPORTED_MODULE_3__.eachAxis)((axis)=>{\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */ if (_value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_4__.percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = (0,_projection_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_5__.calcLength)(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_6__.frame.update(()=>onDragStart(event, info), false, true);\n            }\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info)=>{\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openGlobalLock) return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */ this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */ onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info)=>this.stop(event, info);\n        this.panSession = new _pan_PanSession_mjs__WEBPACK_IMPORTED_MODULE_7__.PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd\n        }, {\n            transformPagePoint: this.visualElement.getTransformPagePoint(),\n            contextWindow: (0,_utils_get_context_window_mjs__WEBPACK_IMPORTED_MODULE_8__.getContextWindow)(this.visualElement)\n        });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging) return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_6__.frame.update(()=>onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection)) return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = (0,_utils_constraints_mjs__WEBPACK_IMPORTED_MODULE_9__.applyConstraints)(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        var _a;\n        const { dragConstraints, dragElastic } = this.getProps();\n        const layout = this.visualElement.projection && !this.visualElement.projection.layout ? this.visualElement.projection.measure(false) : (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout;\n        const prevConstraints = this.constraints;\n        if (dragConstraints && (0,_utils_is_ref_object_mjs__WEBPACK_IMPORTED_MODULE_10__.isRefObject)(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        } else {\n            if (dragConstraints && layout) {\n                this.constraints = (0,_utils_constraints_mjs__WEBPACK_IMPORTED_MODULE_9__.calcRelativeConstraints)(layout.layoutBox, dragConstraints);\n            } else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = (0,_utils_constraints_mjs__WEBPACK_IMPORTED_MODULE_9__.resolveDragElastic)(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */ if (prevConstraints !== this.constraints && layout && this.constraints && !this.hasMutatedConstraints) {\n            (0,_projection_utils_each_axis_mjs__WEBPACK_IMPORTED_MODULE_3__.eachAxis)((axis)=>{\n                if (this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = (0,_utils_constraints_mjs__WEBPACK_IMPORTED_MODULE_9__.rebaseAxisConstraints)(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !(0,_utils_is_ref_object_mjs__WEBPACK_IMPORTED_MODULE_10__.isRefObject)(constraints)) return false;\n        const constraintsElement = constraints.current;\n        (0,_utils_errors_mjs__WEBPACK_IMPORTED_MODULE_11__.invariant)(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout) return false;\n        const constraintsBox = (0,_projection_utils_measure_mjs__WEBPACK_IMPORTED_MODULE_12__.measurePageBox)(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = (0,_utils_constraints_mjs__WEBPACK_IMPORTED_MODULE_9__.calcViewportConstraints)(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */ if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints((0,_projection_geometry_conversion_mjs__WEBPACK_IMPORTED_MODULE_13__.convertBoxToBoundingBox)(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = (0,_projection_geometry_conversion_mjs__WEBPACK_IMPORTED_MODULE_13__.convertBoundingBoxToBox)(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = (0,_projection_utils_each_axis_mjs__WEBPACK_IMPORTED_MODULE_3__.eachAxis)((axis)=>{\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = constraints && constraints[axis] || {};\n            if (dragSnapToOrigin) transition = {\n                min: 0,\n                max: 0\n            };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */ const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        return axisValue.start((0,_animation_interfaces_motion_value_mjs__WEBPACK_IMPORTED_MODULE_14__.animateMotionValue)(axis, axisValue, 0, transition));\n    }\n    stopAnimation() {\n        (0,_projection_utils_each_axis_mjs__WEBPACK_IMPORTED_MODULE_3__.eachAxis)((axis)=>this.getAxisMotionValue(axis).stop());\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */ getAxisMotionValue(axis) {\n        const dragKey = \"_drag\" + axis.toUpperCase();\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n    }\n    snapToCursor(point) {\n        (0,_projection_utils_each_axis_mjs__WEBPACK_IMPORTED_MODULE_3__.eachAxis)((axis)=>{\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection)) return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - (0,_utils_mix_mjs__WEBPACK_IMPORTED_MODULE_15__.mix)(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */ scalePositionWithinConstraints() {\n        if (!this.visualElement.current) return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!(0,_utils_is_ref_object_mjs__WEBPACK_IMPORTED_MODULE_10__.isRefObject)(dragConstraints) || !projection || !this.constraints) return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */ this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */ const boxProgress = {\n            x: 0,\n            y: 0\n        };\n        (0,_projection_utils_each_axis_mjs__WEBPACK_IMPORTED_MODULE_3__.eachAxis)((axis)=>{\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue) {\n                const latest = axisValue.get();\n                boxProgress[axis] = (0,_utils_constraints_mjs__WEBPACK_IMPORTED_MODULE_9__.calcOrigin)({\n                    min: latest,\n                    max: latest\n                }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */ const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */ (0,_projection_utils_each_axis_mjs__WEBPACK_IMPORTED_MODULE_3__.eachAxis)((axis)=>{\n            if (!shouldDrag(axis, drag, null)) return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */ const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set((0,_utils_mix_mjs__WEBPACK_IMPORTED_MODULE_15__.mix)(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current) return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */ const stopPointerListener = (0,_events_add_pointer_event_mjs__WEBPACK_IMPORTED_MODULE_16__.addPointerEvent)(element, \"pointerdown\", (event)=>{\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = ()=>{\n            const { dragConstraints } = this.getProps();\n            if ((0,_utils_is_ref_object_mjs__WEBPACK_IMPORTED_MODULE_10__.isRefObject)(dragConstraints)) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        measureDragConstraints();\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */ const stopResizeListener = (0,_events_add_dom_event_mjs__WEBPACK_IMPORTED_MODULE_17__.addDomEvent)(window, \"resize\", ()=>this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */ const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged })=>{\n            if (this.isDragging && hasLayoutChanged) {\n                (0,_projection_utils_each_axis_mjs__WEBPACK_IMPORTED_MODULE_3__.eachAxis)((axis)=>{\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue) return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        });\n        return ()=>{\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = _utils_constraints_mjs__WEBPACK_IMPORTED_MODULE_9__.defaultElastic, dragMomentum = true } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return (drag === true || drag === direction) && (currentDirection === null || currentDirection === direction);\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */ function getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    } else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/gestures/drag/index.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/gestures/drag/index.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DragGesture: () => (/* binding */ DragGesture)\n/* harmony export */ });\n/* harmony import */ var _motion_features_Feature_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../motion/features/Feature.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/Feature.mjs\");\n/* harmony import */ var _utils_noop_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/noop.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/noop.mjs\");\n/* harmony import */ var _VisualElementDragControls_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./VisualElementDragControls.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs\");\n\n\n\nclass DragGesture extends _motion_features_Feature_mjs__WEBPACK_IMPORTED_MODULE_0__.Feature {\n    constructor(node){\n        super(node);\n        this.removeGroupControls = _utils_noop_mjs__WEBPACK_IMPORTED_MODULE_1__.noop;\n        this.removeListeners = _utils_noop_mjs__WEBPACK_IMPORTED_MODULE_1__.noop;\n        this.controls = new _VisualElementDragControls_mjs__WEBPACK_IMPORTED_MODULE_2__.VisualElementDragControls(node);\n    }\n    mount() {\n        // If we've been provided a DragControls for manual control over the drag gesture,\n        // subscribe this component to it on mount.\n        const { dragControls } = this.node.getProps();\n        if (dragControls) {\n            this.removeGroupControls = dragControls.subscribe(this.controls);\n        }\n        this.removeListeners = this.controls.addListeners() || _utils_noop_mjs__WEBPACK_IMPORTED_MODULE_1__.noop;\n    }\n    unmount() {\n        this.removeGroupControls();\n        this.removeListeners();\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL2RyYWcvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNEQ7QUFDaEI7QUFDZ0M7QUFFNUUsTUFBTUcsb0JBQW9CSCxpRUFBT0E7SUFDN0JJLFlBQVlDLElBQUksQ0FBRTtRQUNkLEtBQUssQ0FBQ0E7UUFDTixJQUFJLENBQUNDLG1CQUFtQixHQUFHTCxpREFBSUE7UUFDL0IsSUFBSSxDQUFDTSxlQUFlLEdBQUdOLGlEQUFJQTtRQUMzQixJQUFJLENBQUNPLFFBQVEsR0FBRyxJQUFJTixxRkFBeUJBLENBQUNHO0lBQ2xEO0lBQ0FJLFFBQVE7UUFDSixrRkFBa0Y7UUFDbEYsMkNBQTJDO1FBQzNDLE1BQU0sRUFBRUMsWUFBWSxFQUFFLEdBQUcsSUFBSSxDQUFDTCxJQUFJLENBQUNNLFFBQVE7UUFDM0MsSUFBSUQsY0FBYztZQUNkLElBQUksQ0FBQ0osbUJBQW1CLEdBQUdJLGFBQWFFLFNBQVMsQ0FBQyxJQUFJLENBQUNKLFFBQVE7UUFDbkU7UUFDQSxJQUFJLENBQUNELGVBQWUsR0FBRyxJQUFJLENBQUNDLFFBQVEsQ0FBQ0ssWUFBWSxNQUFNWixpREFBSUE7SUFDL0Q7SUFDQWEsVUFBVTtRQUNOLElBQUksQ0FBQ1IsbUJBQW1CO1FBQ3hCLElBQUksQ0FBQ0MsZUFBZTtJQUN4QjtBQUNKO0FBRXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL2RyYWcvaW5kZXgubWpzPzdhNDYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmVhdHVyZSB9IGZyb20gJy4uLy4uL21vdGlvbi9mZWF0dXJlcy9GZWF0dXJlLm1qcyc7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi4vLi4vdXRpbHMvbm9vcC5tanMnO1xuaW1wb3J0IHsgVmlzdWFsRWxlbWVudERyYWdDb250cm9scyB9IGZyb20gJy4vVmlzdWFsRWxlbWVudERyYWdDb250cm9scy5tanMnO1xuXG5jbGFzcyBEcmFnR2VzdHVyZSBleHRlbmRzIEZlYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKG5vZGUpIHtcbiAgICAgICAgc3VwZXIobm9kZSk7XG4gICAgICAgIHRoaXMucmVtb3ZlR3JvdXBDb250cm9scyA9IG5vb3A7XG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXJzID0gbm9vcDtcbiAgICAgICAgdGhpcy5jb250cm9scyA9IG5ldyBWaXN1YWxFbGVtZW50RHJhZ0NvbnRyb2xzKG5vZGUpO1xuICAgIH1cbiAgICBtb3VudCgpIHtcbiAgICAgICAgLy8gSWYgd2UndmUgYmVlbiBwcm92aWRlZCBhIERyYWdDb250cm9scyBmb3IgbWFudWFsIGNvbnRyb2wgb3ZlciB0aGUgZHJhZyBnZXN0dXJlLFxuICAgICAgICAvLyBzdWJzY3JpYmUgdGhpcyBjb21wb25lbnQgdG8gaXQgb24gbW91bnQuXG4gICAgICAgIGNvbnN0IHsgZHJhZ0NvbnRyb2xzIH0gPSB0aGlzLm5vZGUuZ2V0UHJvcHMoKTtcbiAgICAgICAgaWYgKGRyYWdDb250cm9scykge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVHcm91cENvbnRyb2xzID0gZHJhZ0NvbnRyb2xzLnN1YnNjcmliZSh0aGlzLmNvbnRyb2xzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVycyA9IHRoaXMuY29udHJvbHMuYWRkTGlzdGVuZXJzKCkgfHwgbm9vcDtcbiAgICB9XG4gICAgdW5tb3VudCgpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVHcm91cENvbnRyb2xzKCk7XG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXJzKCk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBEcmFnR2VzdHVyZSB9O1xuIl0sIm5hbWVzIjpbIkZlYXR1cmUiLCJub29wIiwiVmlzdWFsRWxlbWVudERyYWdDb250cm9scyIsIkRyYWdHZXN0dXJlIiwiY29uc3RydWN0b3IiLCJub2RlIiwicmVtb3ZlR3JvdXBDb250cm9scyIsInJlbW92ZUxpc3RlbmVycyIsImNvbnRyb2xzIiwibW91bnQiLCJkcmFnQ29udHJvbHMiLCJnZXRQcm9wcyIsInN1YnNjcmliZSIsImFkZExpc3RlbmVycyIsInVubW91bnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/gestures/drag/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyConstraints: () => (/* binding */ applyConstraints),\n/* harmony export */   calcOrigin: () => (/* binding */ calcOrigin),\n/* harmony export */   calcRelativeAxisConstraints: () => (/* binding */ calcRelativeAxisConstraints),\n/* harmony export */   calcRelativeConstraints: () => (/* binding */ calcRelativeConstraints),\n/* harmony export */   calcViewportAxisConstraints: () => (/* binding */ calcViewportAxisConstraints),\n/* harmony export */   calcViewportConstraints: () => (/* binding */ calcViewportConstraints),\n/* harmony export */   defaultElastic: () => (/* binding */ defaultElastic),\n/* harmony export */   rebaseAxisConstraints: () => (/* binding */ rebaseAxisConstraints),\n/* harmony export */   resolveAxisElastic: () => (/* binding */ resolveAxisElastic),\n/* harmony export */   resolveDragElastic: () => (/* binding */ resolveDragElastic),\n/* harmony export */   resolvePointElastic: () => (/* binding */ resolvePointElastic)\n/* harmony export */ });\n/* harmony import */ var _utils_progress_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/progress.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/progress.mjs\");\n/* harmony import */ var _projection_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../projection/geometry/delta-calc.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs\");\n/* harmony import */ var _utils_clamp_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utils/clamp.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/clamp.mjs\");\n/* harmony import */ var _utils_mix_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/mix.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/mix.mjs\");\n\n\n\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */ function applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic ? (0,_utils_mix_mjs__WEBPACK_IMPORTED_MODULE_0__.mix)(min, point, elastic.min) : Math.max(point, min);\n    } else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic ? (0,_utils_mix_mjs__WEBPACK_IMPORTED_MODULE_0__.mix)(max, point, elastic.max) : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */ function calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined ? axis.max + max - (axis.max - axis.min) : undefined\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */ function calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom)\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */ function calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) {\n        [min, max] = [\n            max,\n            min\n        ];\n    }\n    return {\n        min,\n        max\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */ function calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y)\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */ function calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = (0,_projection_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_1__.calcLength)(source);\n    const targetLength = (0,_projection_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_1__.calcLength)(target);\n    if (targetLength > sourceLength) {\n        origin = (0,_utils_progress_mjs__WEBPACK_IMPORTED_MODULE_2__.progress)(target.min, target.max - sourceLength, source.min);\n    } else if (sourceLength > targetLength) {\n        origin = (0,_utils_progress_mjs__WEBPACK_IMPORTED_MODULE_2__.progress)(source.min, source.max - targetLength, target.min);\n    }\n    return (0,_utils_clamp_mjs__WEBPACK_IMPORTED_MODULE_3__.clamp)(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */ function rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */ function resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    } else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\")\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel)\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\" ? dragElastic : dragElastic[label] || 0;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createLock: () => (/* binding */ createLock),\n/* harmony export */   getGlobalLock: () => (/* binding */ getGlobalLock),\n/* harmony export */   isDragActive: () => (/* binding */ isDragActive)\n/* harmony export */ });\nfunction createLock(name) {\n    let lock = null;\n    return ()=>{\n        const openLock = ()=>{\n            lock = null;\n        };\n        if (lock === null) {\n            lock = name;\n            return openLock;\n        }\n        return false;\n    };\n}\nconst globalHorizontalLock = createLock(\"dragHorizontal\");\nconst globalVerticalLock = createLock(\"dragVertical\");\nfunction getGlobalLock(drag) {\n    let lock = false;\n    if (drag === \"y\") {\n        lock = globalVerticalLock();\n    } else if (drag === \"x\") {\n        lock = globalHorizontalLock();\n    } else {\n        const openHorizontal = globalHorizontalLock();\n        const openVertical = globalVerticalLock();\n        if (openHorizontal && openVertical) {\n            lock = ()=>{\n                openHorizontal();\n                openVertical();\n            };\n        } else {\n            // Release the locks because we don't use them\n            if (openHorizontal) openHorizontal();\n            if (openVertical) openVertical();\n        }\n    }\n    return lock;\n}\nfunction isDragActive() {\n    // Check the gesture lock - if we get it, it means no drag gesture is active\n    // and we can safely fire the tap gesture.\n    const openGestureLock = getGlobalLock(true);\n    if (!openGestureLock) return true;\n    openGestureLock();\n    return false;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL2RyYWcvdXRpbHMvbG9jay5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsU0FBU0EsV0FBV0MsSUFBSTtJQUNwQixJQUFJQyxPQUFPO0lBQ1gsT0FBTztRQUNILE1BQU1DLFdBQVc7WUFDYkQsT0FBTztRQUNYO1FBQ0EsSUFBSUEsU0FBUyxNQUFNO1lBQ2ZBLE9BQU9EO1lBQ1AsT0FBT0U7UUFDWDtRQUNBLE9BQU87SUFDWDtBQUNKO0FBQ0EsTUFBTUMsdUJBQXVCSixXQUFXO0FBQ3hDLE1BQU1LLHFCQUFxQkwsV0FBVztBQUN0QyxTQUFTTSxjQUFjQyxJQUFJO0lBQ3ZCLElBQUlMLE9BQU87SUFDWCxJQUFJSyxTQUFTLEtBQUs7UUFDZEwsT0FBT0c7SUFDWCxPQUNLLElBQUlFLFNBQVMsS0FBSztRQUNuQkwsT0FBT0U7SUFDWCxPQUNLO1FBQ0QsTUFBTUksaUJBQWlCSjtRQUN2QixNQUFNSyxlQUFlSjtRQUNyQixJQUFJRyxrQkFBa0JDLGNBQWM7WUFDaENQLE9BQU87Z0JBQ0hNO2dCQUNBQztZQUNKO1FBQ0osT0FDSztZQUNELDhDQUE4QztZQUM5QyxJQUFJRCxnQkFDQUE7WUFDSixJQUFJQyxjQUNBQTtRQUNSO0lBQ0o7SUFDQSxPQUFPUDtBQUNYO0FBQ0EsU0FBU1E7SUFDTCw0RUFBNEU7SUFDNUUsMENBQTBDO0lBQzFDLE1BQU1DLGtCQUFrQkwsY0FBYztJQUN0QyxJQUFJLENBQUNLLGlCQUNELE9BQU87SUFDWEE7SUFDQSxPQUFPO0FBQ1g7QUFFbUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZ2VzdHVyZXMvZHJhZy91dGlscy9sb2NrLm1qcz83OGNiIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGNyZWF0ZUxvY2sobmFtZSkge1xuICAgIGxldCBsb2NrID0gbnVsbDtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBjb25zdCBvcGVuTG9jayA9ICgpID0+IHtcbiAgICAgICAgICAgIGxvY2sgPSBudWxsO1xuICAgICAgICB9O1xuICAgICAgICBpZiAobG9jayA9PT0gbnVsbCkge1xuICAgICAgICAgICAgbG9jayA9IG5hbWU7XG4gICAgICAgICAgICByZXR1cm4gb3BlbkxvY2s7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG59XG5jb25zdCBnbG9iYWxIb3Jpem9udGFsTG9jayA9IGNyZWF0ZUxvY2soXCJkcmFnSG9yaXpvbnRhbFwiKTtcbmNvbnN0IGdsb2JhbFZlcnRpY2FsTG9jayA9IGNyZWF0ZUxvY2soXCJkcmFnVmVydGljYWxcIik7XG5mdW5jdGlvbiBnZXRHbG9iYWxMb2NrKGRyYWcpIHtcbiAgICBsZXQgbG9jayA9IGZhbHNlO1xuICAgIGlmIChkcmFnID09PSBcInlcIikge1xuICAgICAgICBsb2NrID0gZ2xvYmFsVmVydGljYWxMb2NrKCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGRyYWcgPT09IFwieFwiKSB7XG4gICAgICAgIGxvY2sgPSBnbG9iYWxIb3Jpem9udGFsTG9jaygpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3Qgb3Blbkhvcml6b250YWwgPSBnbG9iYWxIb3Jpem9udGFsTG9jaygpO1xuICAgICAgICBjb25zdCBvcGVuVmVydGljYWwgPSBnbG9iYWxWZXJ0aWNhbExvY2soKTtcbiAgICAgICAgaWYgKG9wZW5Ib3Jpem9udGFsICYmIG9wZW5WZXJ0aWNhbCkge1xuICAgICAgICAgICAgbG9jayA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBvcGVuSG9yaXpvbnRhbCgpO1xuICAgICAgICAgICAgICAgIG9wZW5WZXJ0aWNhbCgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFJlbGVhc2UgdGhlIGxvY2tzIGJlY2F1c2Ugd2UgZG9uJ3QgdXNlIHRoZW1cbiAgICAgICAgICAgIGlmIChvcGVuSG9yaXpvbnRhbClcbiAgICAgICAgICAgICAgICBvcGVuSG9yaXpvbnRhbCgpO1xuICAgICAgICAgICAgaWYgKG9wZW5WZXJ0aWNhbClcbiAgICAgICAgICAgICAgICBvcGVuVmVydGljYWwoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbG9jaztcbn1cbmZ1bmN0aW9uIGlzRHJhZ0FjdGl2ZSgpIHtcbiAgICAvLyBDaGVjayB0aGUgZ2VzdHVyZSBsb2NrIC0gaWYgd2UgZ2V0IGl0LCBpdCBtZWFucyBubyBkcmFnIGdlc3R1cmUgaXMgYWN0aXZlXG4gICAgLy8gYW5kIHdlIGNhbiBzYWZlbHkgZmlyZSB0aGUgdGFwIGdlc3R1cmUuXG4gICAgY29uc3Qgb3Blbkdlc3R1cmVMb2NrID0gZ2V0R2xvYmFsTG9jayh0cnVlKTtcbiAgICBpZiAoIW9wZW5HZXN0dXJlTG9jaylcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgb3Blbkdlc3R1cmVMb2NrKCk7XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgeyBjcmVhdGVMb2NrLCBnZXRHbG9iYWxMb2NrLCBpc0RyYWdBY3RpdmUgfTtcbiJdLCJuYW1lcyI6WyJjcmVhdGVMb2NrIiwibmFtZSIsImxvY2siLCJvcGVuTG9jayIsImdsb2JhbEhvcml6b250YWxMb2NrIiwiZ2xvYmFsVmVydGljYWxMb2NrIiwiZ2V0R2xvYmFsTG9jayIsImRyYWciLCJvcGVuSG9yaXpvbnRhbCIsIm9wZW5WZXJ0aWNhbCIsImlzRHJhZ0FjdGl2ZSIsIm9wZW5HZXN0dXJlTG9jayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/gestures/focus.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/gestures/focus.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FocusGesture: () => (/* binding */ FocusGesture)\n/* harmony export */ });\n/* harmony import */ var _events_add_dom_event_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events/add-dom-event.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/events/add-dom-event.mjs\");\n/* harmony import */ var _motion_features_Feature_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../motion/features/Feature.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/Feature.mjs\");\n/* harmony import */ var _utils_pipe_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/pipe.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/pipe.mjs\");\n\n\n\nclass FocusGesture extends _motion_features_Feature_mjs__WEBPACK_IMPORTED_MODULE_0__.Feature {\n    constructor(){\n        super(...arguments);\n        this.isActive = false;\n    }\n    onFocus() {\n        let isFocusVisible = false;\n        /**\n         * If this element doesn't match focus-visible then don't\n         * apply whileHover. But, if matches throws that focus-visible\n         * is not a valid selector then in that browser outline styles will be applied\n         * to the element by default and we want to match that behaviour with whileFocus.\n         */ try {\n            isFocusVisible = this.node.current.matches(\":focus-visible\");\n        } catch (e) {\n            isFocusVisible = true;\n        }\n        if (!isFocusVisible || !this.node.animationState) return;\n        this.node.animationState.setActive(\"whileFocus\", true);\n        this.isActive = true;\n    }\n    onBlur() {\n        if (!this.isActive || !this.node.animationState) return;\n        this.node.animationState.setActive(\"whileFocus\", false);\n        this.isActive = false;\n    }\n    mount() {\n        this.unmount = (0,_utils_pipe_mjs__WEBPACK_IMPORTED_MODULE_1__.pipe)((0,_events_add_dom_event_mjs__WEBPACK_IMPORTED_MODULE_2__.addDomEvent)(this.node.current, \"focus\", ()=>this.onFocus()), (0,_events_add_dom_event_mjs__WEBPACK_IMPORTED_MODULE_2__.addDomEvent)(this.node.current, \"blur\", ()=>this.onBlur()));\n    }\n    unmount() {}\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL2ZvY3VzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTBEO0FBQ0Q7QUFDaEI7QUFFekMsTUFBTUcscUJBQXFCRixpRUFBT0E7SUFDOUJHLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDQyxRQUFRLEdBQUc7SUFDcEI7SUFDQUMsVUFBVTtRQUNOLElBQUlDLGlCQUFpQjtRQUNyQjs7Ozs7U0FLQyxHQUNELElBQUk7WUFDQUEsaUJBQWlCLElBQUksQ0FBQ0MsSUFBSSxDQUFDQyxPQUFPLENBQUNDLE9BQU8sQ0FBQztRQUMvQyxFQUNBLE9BQU9DLEdBQUc7WUFDTkosaUJBQWlCO1FBQ3JCO1FBQ0EsSUFBSSxDQUFDQSxrQkFBa0IsQ0FBQyxJQUFJLENBQUNDLElBQUksQ0FBQ0ksY0FBYyxFQUM1QztRQUNKLElBQUksQ0FBQ0osSUFBSSxDQUFDSSxjQUFjLENBQUNDLFNBQVMsQ0FBQyxjQUFjO1FBQ2pELElBQUksQ0FBQ1IsUUFBUSxHQUFHO0lBQ3BCO0lBQ0FTLFNBQVM7UUFDTCxJQUFJLENBQUMsSUFBSSxDQUFDVCxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUNHLElBQUksQ0FBQ0ksY0FBYyxFQUMzQztRQUNKLElBQUksQ0FBQ0osSUFBSSxDQUFDSSxjQUFjLENBQUNDLFNBQVMsQ0FBQyxjQUFjO1FBQ2pELElBQUksQ0FBQ1IsUUFBUSxHQUFHO0lBQ3BCO0lBQ0FVLFFBQVE7UUFDSixJQUFJLENBQUNDLE9BQU8sR0FBR2YscURBQUlBLENBQUNGLHNFQUFXQSxDQUFDLElBQUksQ0FBQ1MsSUFBSSxDQUFDQyxPQUFPLEVBQUUsU0FBUyxJQUFNLElBQUksQ0FBQ0gsT0FBTyxLQUFLUCxzRUFBV0EsQ0FBQyxJQUFJLENBQUNTLElBQUksQ0FBQ0MsT0FBTyxFQUFFLFFBQVEsSUFBTSxJQUFJLENBQUNLLE1BQU07SUFDL0k7SUFDQUUsVUFBVSxDQUFFO0FBQ2hCO0FBRXdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL2ZvY3VzLm1qcz8xNjg3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFkZERvbUV2ZW50IH0gZnJvbSAnLi4vZXZlbnRzL2FkZC1kb20tZXZlbnQubWpzJztcbmltcG9ydCB7IEZlYXR1cmUgfSBmcm9tICcuLi9tb3Rpb24vZmVhdHVyZXMvRmVhdHVyZS5tanMnO1xuaW1wb3J0IHsgcGlwZSB9IGZyb20gJy4uL3V0aWxzL3BpcGUubWpzJztcblxuY2xhc3MgRm9jdXNHZXN0dXJlIGV4dGVuZHMgRmVhdHVyZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICB9XG4gICAgb25Gb2N1cygpIHtcbiAgICAgICAgbGV0IGlzRm9jdXNWaXNpYmxlID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0aGlzIGVsZW1lbnQgZG9lc24ndCBtYXRjaCBmb2N1cy12aXNpYmxlIHRoZW4gZG9uJ3RcbiAgICAgICAgICogYXBwbHkgd2hpbGVIb3Zlci4gQnV0LCBpZiBtYXRjaGVzIHRocm93cyB0aGF0IGZvY3VzLXZpc2libGVcbiAgICAgICAgICogaXMgbm90IGEgdmFsaWQgc2VsZWN0b3IgdGhlbiBpbiB0aGF0IGJyb3dzZXIgb3V0bGluZSBzdHlsZXMgd2lsbCBiZSBhcHBsaWVkXG4gICAgICAgICAqIHRvIHRoZSBlbGVtZW50IGJ5IGRlZmF1bHQgYW5kIHdlIHdhbnQgdG8gbWF0Y2ggdGhhdCBiZWhhdmlvdXIgd2l0aCB3aGlsZUZvY3VzLlxuICAgICAgICAgKi9cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlzRm9jdXNWaXNpYmxlID0gdGhpcy5ub2RlLmN1cnJlbnQubWF0Y2hlcyhcIjpmb2N1cy12aXNpYmxlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpc0ZvY3VzVmlzaWJsZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0ZvY3VzVmlzaWJsZSB8fCAhdGhpcy5ub2RlLmFuaW1hdGlvblN0YXRlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLm5vZGUuYW5pbWF0aW9uU3RhdGUuc2V0QWN0aXZlKFwid2hpbGVGb2N1c1wiLCB0cnVlKTtcbiAgICAgICAgdGhpcy5pc0FjdGl2ZSA9IHRydWU7XG4gICAgfVxuICAgIG9uQmx1cigpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzQWN0aXZlIHx8ICF0aGlzLm5vZGUuYW5pbWF0aW9uU3RhdGUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMubm9kZS5hbmltYXRpb25TdGF0ZS5zZXRBY3RpdmUoXCJ3aGlsZUZvY3VzXCIsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgIH1cbiAgICBtb3VudCgpIHtcbiAgICAgICAgdGhpcy51bm1vdW50ID0gcGlwZShhZGREb21FdmVudCh0aGlzLm5vZGUuY3VycmVudCwgXCJmb2N1c1wiLCAoKSA9PiB0aGlzLm9uRm9jdXMoKSksIGFkZERvbUV2ZW50KHRoaXMubm9kZS5jdXJyZW50LCBcImJsdXJcIiwgKCkgPT4gdGhpcy5vbkJsdXIoKSkpO1xuICAgIH1cbiAgICB1bm1vdW50KCkgeyB9XG59XG5cbmV4cG9ydCB7IEZvY3VzR2VzdHVyZSB9O1xuIl0sIm5hbWVzIjpbImFkZERvbUV2ZW50IiwiRmVhdHVyZSIsInBpcGUiLCJGb2N1c0dlc3R1cmUiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsImlzQWN0aXZlIiwib25Gb2N1cyIsImlzRm9jdXNWaXNpYmxlIiwibm9kZSIsImN1cnJlbnQiLCJtYXRjaGVzIiwiZSIsImFuaW1hdGlvblN0YXRlIiwic2V0QWN0aXZlIiwib25CbHVyIiwibW91bnQiLCJ1bm1vdW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/gestures/focus.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/gestures/hover.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/gestures/hover.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HoverGesture: () => (/* binding */ HoverGesture)\n/* harmony export */ });\n/* harmony import */ var _events_add_pointer_event_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events/add-pointer-event.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/events/add-pointer-event.mjs\");\n/* harmony import */ var _utils_pipe_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/pipe.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/pipe.mjs\");\n/* harmony import */ var _drag_utils_lock_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./drag/utils/lock.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs\");\n/* harmony import */ var _motion_features_Feature_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../motion/features/Feature.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/Feature.mjs\");\n/* harmony import */ var _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../frameloop/frame.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/frameloop/frame.mjs\");\n\n\n\n\n\nfunction addHoverEvent(node, isActive) {\n    const eventName = \"pointer\" + (isActive ? \"enter\" : \"leave\");\n    const callbackName = \"onHover\" + (isActive ? \"Start\" : \"End\");\n    const handleEvent = (event, info)=>{\n        if (event.type === \"touch\" || (0,_drag_utils_lock_mjs__WEBPACK_IMPORTED_MODULE_0__.isDragActive)()) return;\n        const props = node.getProps();\n        if (node.animationState && props.whileHover) {\n            node.animationState.setActive(\"whileHover\", isActive);\n        }\n        if (props[callbackName]) {\n            _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_1__.frame.update(()=>props[callbackName](event, info));\n        }\n    };\n    return (0,_events_add_pointer_event_mjs__WEBPACK_IMPORTED_MODULE_2__.addPointerEvent)(node.current, eventName, handleEvent, {\n        passive: !node.getProps()[callbackName]\n    });\n}\nclass HoverGesture extends _motion_features_Feature_mjs__WEBPACK_IMPORTED_MODULE_3__.Feature {\n    mount() {\n        this.unmount = (0,_utils_pipe_mjs__WEBPACK_IMPORTED_MODULE_4__.pipe)(addHoverEvent(this.node, true), addHoverEvent(this.node, false));\n    }\n    unmount() {}\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL2hvdmVyLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBa0U7QUFDekI7QUFDWTtBQUNJO0FBQ1Y7QUFFL0MsU0FBU0ssY0FBY0MsSUFBSSxFQUFFQyxRQUFRO0lBQ2pDLE1BQU1DLFlBQVksWUFBYUQsQ0FBQUEsV0FBVyxVQUFVLE9BQU07SUFDMUQsTUFBTUUsZUFBZSxZQUFhRixDQUFBQSxXQUFXLFVBQVUsS0FBSTtJQUMzRCxNQUFNRyxjQUFjLENBQUNDLE9BQU9DO1FBQ3hCLElBQUlELE1BQU1FLElBQUksS0FBSyxXQUFXWCxrRUFBWUEsSUFDdEM7UUFDSixNQUFNWSxRQUFRUixLQUFLUyxRQUFRO1FBQzNCLElBQUlULEtBQUtVLGNBQWMsSUFBSUYsTUFBTUcsVUFBVSxFQUFFO1lBQ3pDWCxLQUFLVSxjQUFjLENBQUNFLFNBQVMsQ0FBQyxjQUFjWDtRQUNoRDtRQUNBLElBQUlPLEtBQUssQ0FBQ0wsYUFBYSxFQUFFO1lBQ3JCTCx1REFBS0EsQ0FBQ2UsTUFBTSxDQUFDLElBQU1MLEtBQUssQ0FBQ0wsYUFBYSxDQUFDRSxPQUFPQztRQUNsRDtJQUNKO0lBQ0EsT0FBT1osOEVBQWVBLENBQUNNLEtBQUtjLE9BQU8sRUFBRVosV0FBV0UsYUFBYTtRQUN6RFcsU0FBUyxDQUFDZixLQUFLUyxRQUFRLEVBQUUsQ0FBQ04sYUFBYTtJQUMzQztBQUNKO0FBQ0EsTUFBTWEscUJBQXFCbkIsaUVBQU9BO0lBQzlCb0IsUUFBUTtRQUNKLElBQUksQ0FBQ0MsT0FBTyxHQUFHdkIscURBQUlBLENBQUNJLGNBQWMsSUFBSSxDQUFDQyxJQUFJLEVBQUUsT0FBT0QsY0FBYyxJQUFJLENBQUNDLElBQUksRUFBRTtJQUNqRjtJQUNBa0IsVUFBVSxDQUFFO0FBQ2hCO0FBRXdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL2hvdmVyLm1qcz83OGZkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFkZFBvaW50ZXJFdmVudCB9IGZyb20gJy4uL2V2ZW50cy9hZGQtcG9pbnRlci1ldmVudC5tanMnO1xuaW1wb3J0IHsgcGlwZSB9IGZyb20gJy4uL3V0aWxzL3BpcGUubWpzJztcbmltcG9ydCB7IGlzRHJhZ0FjdGl2ZSB9IGZyb20gJy4vZHJhZy91dGlscy9sb2NrLm1qcyc7XG5pbXBvcnQgeyBGZWF0dXJlIH0gZnJvbSAnLi4vbW90aW9uL2ZlYXR1cmVzL0ZlYXR1cmUubWpzJztcbmltcG9ydCB7IGZyYW1lIH0gZnJvbSAnLi4vZnJhbWVsb29wL2ZyYW1lLm1qcyc7XG5cbmZ1bmN0aW9uIGFkZEhvdmVyRXZlbnQobm9kZSwgaXNBY3RpdmUpIHtcbiAgICBjb25zdCBldmVudE5hbWUgPSBcInBvaW50ZXJcIiArIChpc0FjdGl2ZSA/IFwiZW50ZXJcIiA6IFwibGVhdmVcIik7XG4gICAgY29uc3QgY2FsbGJhY2tOYW1lID0gXCJvbkhvdmVyXCIgKyAoaXNBY3RpdmUgPyBcIlN0YXJ0XCIgOiBcIkVuZFwiKTtcbiAgICBjb25zdCBoYW5kbGVFdmVudCA9IChldmVudCwgaW5mbykgPT4ge1xuICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gXCJ0b3VjaFwiIHx8IGlzRHJhZ0FjdGl2ZSgpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBwcm9wcyA9IG5vZGUuZ2V0UHJvcHMoKTtcbiAgICAgICAgaWYgKG5vZGUuYW5pbWF0aW9uU3RhdGUgJiYgcHJvcHMud2hpbGVIb3Zlcikge1xuICAgICAgICAgICAgbm9kZS5hbmltYXRpb25TdGF0ZS5zZXRBY3RpdmUoXCJ3aGlsZUhvdmVyXCIsIGlzQWN0aXZlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcHNbY2FsbGJhY2tOYW1lXSkge1xuICAgICAgICAgICAgZnJhbWUudXBkYXRlKCgpID0+IHByb3BzW2NhbGxiYWNrTmFtZV0oZXZlbnQsIGluZm8pKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIGFkZFBvaW50ZXJFdmVudChub2RlLmN1cnJlbnQsIGV2ZW50TmFtZSwgaGFuZGxlRXZlbnQsIHtcbiAgICAgICAgcGFzc2l2ZTogIW5vZGUuZ2V0UHJvcHMoKVtjYWxsYmFja05hbWVdLFxuICAgIH0pO1xufVxuY2xhc3MgSG92ZXJHZXN0dXJlIGV4dGVuZHMgRmVhdHVyZSB7XG4gICAgbW91bnQoKSB7XG4gICAgICAgIHRoaXMudW5tb3VudCA9IHBpcGUoYWRkSG92ZXJFdmVudCh0aGlzLm5vZGUsIHRydWUpLCBhZGRIb3ZlckV2ZW50KHRoaXMubm9kZSwgZmFsc2UpKTtcbiAgICB9XG4gICAgdW5tb3VudCgpIHsgfVxufVxuXG5leHBvcnQgeyBIb3Zlckdlc3R1cmUgfTtcbiJdLCJuYW1lcyI6WyJhZGRQb2ludGVyRXZlbnQiLCJwaXBlIiwiaXNEcmFnQWN0aXZlIiwiRmVhdHVyZSIsImZyYW1lIiwiYWRkSG92ZXJFdmVudCIsIm5vZGUiLCJpc0FjdGl2ZSIsImV2ZW50TmFtZSIsImNhbGxiYWNrTmFtZSIsImhhbmRsZUV2ZW50IiwiZXZlbnQiLCJpbmZvIiwidHlwZSIsInByb3BzIiwiZ2V0UHJvcHMiLCJhbmltYXRpb25TdGF0ZSIsIndoaWxlSG92ZXIiLCJzZXRBY3RpdmUiLCJ1cGRhdGUiLCJjdXJyZW50IiwicGFzc2l2ZSIsIkhvdmVyR2VzdHVyZSIsIm1vdW50IiwidW5tb3VudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/gestures/hover.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PanSession: () => (/* binding */ PanSession)\n/* harmony export */ });\n/* harmony import */ var _events_event_info_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../events/event-info.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/events/event-info.mjs\");\n/* harmony import */ var _utils_time_conversion_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/time-conversion.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/time-conversion.mjs\");\n/* harmony import */ var _events_add_pointer_event_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../events/add-pointer-event.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/events/add-pointer-event.mjs\");\n/* harmony import */ var _utils_pipe_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/pipe.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/pipe.mjs\");\n/* harmony import */ var _utils_distance_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/distance.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/distance.mjs\");\n/* harmony import */ var _events_utils_is_primary_pointer_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../events/utils/is-primary-pointer.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.mjs\");\n/* harmony import */ var _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../frameloop/frame.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/frameloop/frame.mjs\");\n\n\n\n\n\n\n\n/**\n * @internal\n */ class PanSession {\n    constructor(event, handlers, { transformPagePoint, contextWindow } = {}){\n        /**\n         * @internal\n         */ this.startEvent = null;\n        /**\n         * @internal\n         */ this.lastMoveEvent = null;\n        /**\n         * @internal\n         */ this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */ this.handlers = {};\n        /**\n         * @internal\n         */ this.contextWindow = window;\n        this.updatePoint = ()=>{\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo)) return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            const isDistancePastThreshold = (0,_utils_distance_mjs__WEBPACK_IMPORTED_MODULE_0__.distance2D)(info.offset, {\n                x: 0,\n                y: 0\n            }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold) return;\n            const { point } = info;\n            const { timestamp } = _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_1__.frameData;\n            this.history.push({\n                ...point,\n                timestamp\n            });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info)=>{\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_1__.frame.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info)=>{\n            this.end();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo)) return;\n            const { onEnd, onSessionEnd } = this.handlers;\n            const panInfo = getPanInfo(event.type === \"pointercancel\" ? this.lastMoveEventInfo : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!(0,_events_utils_is_primary_pointer_mjs__WEBPACK_IMPORTED_MODULE_2__.isPrimaryPointer)(event)) return;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        this.contextWindow = contextWindow || window;\n        const info = (0,_events_event_info_mjs__WEBPACK_IMPORTED_MODULE_3__.extractEventInfo)(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_1__.frameData;\n        this.history = [\n            {\n                ...point,\n                timestamp\n            }\n        ];\n        const { onSessionStart } = handlers;\n        onSessionStart && onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = (0,_utils_pipe_mjs__WEBPACK_IMPORTED_MODULE_4__.pipe)((0,_events_add_pointer_event_mjs__WEBPACK_IMPORTED_MODULE_5__.addPointerEvent)(this.contextWindow, \"pointermove\", this.handlePointerMove), (0,_events_add_pointer_event_mjs__WEBPACK_IMPORTED_MODULE_5__.addPointerEvent)(this.contextWindow, \"pointerup\", this.handlePointerUp), (0,_events_add_pointer_event_mjs__WEBPACK_IMPORTED_MODULE_5__.addPointerEvent)(this.contextWindow, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        (0,_frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_1__.cancelFrame)(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? {\n        point: transformPagePoint(info.point)\n    } : info;\n}\nfunction subtractPoint(a, b) {\n    return {\n        x: a.x - b.x,\n        y: a.y - b.y\n    };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1)\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return {\n            x: 0,\n            y: 0\n        };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while(i >= 0){\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp > (0,_utils_time_conversion_mjs__WEBPACK_IMPORTED_MODULE_6__.secondsToMilliseconds)(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return {\n            x: 0,\n            y: 0\n        };\n    }\n    const time = (0,_utils_time_conversion_mjs__WEBPACK_IMPORTED_MODULE_6__.millisecondsToSeconds)(lastPoint.timestamp - timestampedPoint.timestamp);\n    if (time === 0) {\n        return {\n            x: 0,\n            y: 0\n        };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/gestures/pan/index.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/gestures/pan/index.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PanGesture: () => (/* binding */ PanGesture)\n/* harmony export */ });\n/* harmony import */ var _PanSession_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./PanSession.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs\");\n/* harmony import */ var _events_add_pointer_event_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../events/add-pointer-event.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/events/add-pointer-event.mjs\");\n/* harmony import */ var _motion_features_Feature_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../motion/features/Feature.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/Feature.mjs\");\n/* harmony import */ var _utils_noop_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/noop.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/noop.mjs\");\n/* harmony import */ var _utils_get_context_window_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/get-context-window.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/get-context-window.mjs\");\n/* harmony import */ var _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../frameloop/frame.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/frameloop/frame.mjs\");\n\n\n\n\n\n\nconst asyncHandler = (handler)=>(event, info)=>{\n        if (handler) {\n            _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_0__.frame.update(()=>handler(event, info));\n        }\n    };\nclass PanGesture extends _motion_features_Feature_mjs__WEBPACK_IMPORTED_MODULE_1__.Feature {\n    constructor(){\n        super(...arguments);\n        this.removePointerDownListener = _utils_noop_mjs__WEBPACK_IMPORTED_MODULE_2__.noop;\n    }\n    onPointerDown(pointerDownEvent) {\n        this.session = new _PanSession_mjs__WEBPACK_IMPORTED_MODULE_3__.PanSession(pointerDownEvent, this.createPanHandlers(), {\n            transformPagePoint: this.node.getTransformPagePoint(),\n            contextWindow: (0,_utils_get_context_window_mjs__WEBPACK_IMPORTED_MODULE_4__.getContextWindow)(this.node)\n        });\n    }\n    createPanHandlers() {\n        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();\n        return {\n            onSessionStart: asyncHandler(onPanSessionStart),\n            onStart: asyncHandler(onPanStart),\n            onMove: onPan,\n            onEnd: (event, info)=>{\n                delete this.session;\n                if (onPanEnd) {\n                    _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_0__.frame.update(()=>onPanEnd(event, info));\n                }\n            }\n        };\n    }\n    mount() {\n        this.removePointerDownListener = (0,_events_add_pointer_event_mjs__WEBPACK_IMPORTED_MODULE_5__.addPointerEvent)(this.node.current, \"pointerdown\", (event)=>this.onPointerDown(event));\n    }\n    update() {\n        this.session && this.session.updateHandlers(this.createPanHandlers());\n    }\n    unmount() {\n        this.removePointerDownListener();\n        this.session && this.session.end();\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL3Bhbi9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUE4QztBQUN1QjtBQUNUO0FBQ2hCO0FBQzBCO0FBQ3BCO0FBRWxELE1BQU1NLGVBQWUsQ0FBQ0MsVUFBWSxDQUFDQyxPQUFPQztRQUN0QyxJQUFJRixTQUFTO1lBQ1RGLHVEQUFLQSxDQUFDSyxNQUFNLENBQUMsSUFBTUgsUUFBUUMsT0FBT0M7UUFDdEM7SUFDSjtBQUNBLE1BQU1FLG1CQUFtQlQsaUVBQU9BO0lBQzVCVSxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0MseUJBQXlCLEdBQUdYLGlEQUFJQTtJQUN6QztJQUNBWSxjQUFjQyxnQkFBZ0IsRUFBRTtRQUM1QixJQUFJLENBQUNDLE9BQU8sR0FBRyxJQUFJakIsdURBQVVBLENBQUNnQixrQkFBa0IsSUFBSSxDQUFDRSxpQkFBaUIsSUFBSTtZQUN0RUMsb0JBQW9CLElBQUksQ0FBQ0MsSUFBSSxDQUFDQyxxQkFBcUI7WUFDbkRDLGVBQWVsQiwrRUFBZ0JBLENBQUMsSUFBSSxDQUFDZ0IsSUFBSTtRQUM3QztJQUNKO0lBQ0FGLG9CQUFvQjtRQUNoQixNQUFNLEVBQUVLLGlCQUFpQixFQUFFQyxVQUFVLEVBQUVDLEtBQUssRUFBRUMsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDTixJQUFJLENBQUNPLFFBQVE7UUFDN0UsT0FBTztZQUNIQyxnQkFBZ0J0QixhQUFhaUI7WUFDN0JNLFNBQVN2QixhQUFha0I7WUFDdEJNLFFBQVFMO1lBQ1JNLE9BQU8sQ0FBQ3ZCLE9BQU9DO2dCQUNYLE9BQU8sSUFBSSxDQUFDUSxPQUFPO2dCQUNuQixJQUFJUyxVQUFVO29CQUNWckIsdURBQUtBLENBQUNLLE1BQU0sQ0FBQyxJQUFNZ0IsU0FBU2xCLE9BQU9DO2dCQUN2QztZQUNKO1FBQ0o7SUFDSjtJQUNBdUIsUUFBUTtRQUNKLElBQUksQ0FBQ2xCLHlCQUF5QixHQUFHYiw4RUFBZUEsQ0FBQyxJQUFJLENBQUNtQixJQUFJLENBQUNhLE9BQU8sRUFBRSxlQUFlLENBQUN6QixRQUFVLElBQUksQ0FBQ08sYUFBYSxDQUFDUDtJQUNySDtJQUNBRSxTQUFTO1FBQ0wsSUFBSSxDQUFDTyxPQUFPLElBQUksSUFBSSxDQUFDQSxPQUFPLENBQUNpQixjQUFjLENBQUMsSUFBSSxDQUFDaEIsaUJBQWlCO0lBQ3RFO0lBQ0FpQixVQUFVO1FBQ04sSUFBSSxDQUFDckIseUJBQXlCO1FBQzlCLElBQUksQ0FBQ0csT0FBTyxJQUFJLElBQUksQ0FBQ0EsT0FBTyxDQUFDbUIsR0FBRztJQUNwQztBQUNKO0FBRXNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL3Bhbi9pbmRleC5tanM/MTI5YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYW5TZXNzaW9uIH0gZnJvbSAnLi9QYW5TZXNzaW9uLm1qcyc7XG5pbXBvcnQgeyBhZGRQb2ludGVyRXZlbnQgfSBmcm9tICcuLi8uLi9ldmVudHMvYWRkLXBvaW50ZXItZXZlbnQubWpzJztcbmltcG9ydCB7IEZlYXR1cmUgfSBmcm9tICcuLi8uLi9tb3Rpb24vZmVhdHVyZXMvRmVhdHVyZS5tanMnO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4uLy4uL3V0aWxzL25vb3AubWpzJztcbmltcG9ydCB7IGdldENvbnRleHRXaW5kb3cgfSBmcm9tICcuLi8uLi91dGlscy9nZXQtY29udGV4dC13aW5kb3cubWpzJztcbmltcG9ydCB7IGZyYW1lIH0gZnJvbSAnLi4vLi4vZnJhbWVsb29wL2ZyYW1lLm1qcyc7XG5cbmNvbnN0IGFzeW5jSGFuZGxlciA9IChoYW5kbGVyKSA9PiAoZXZlbnQsIGluZm8pID0+IHtcbiAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICBmcmFtZS51cGRhdGUoKCkgPT4gaGFuZGxlcihldmVudCwgaW5mbykpO1xuICAgIH1cbn07XG5jbGFzcyBQYW5HZXN0dXJlIGV4dGVuZHMgRmVhdHVyZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMucmVtb3ZlUG9pbnRlckRvd25MaXN0ZW5lciA9IG5vb3A7XG4gICAgfVxuICAgIG9uUG9pbnRlckRvd24ocG9pbnRlckRvd25FdmVudCkge1xuICAgICAgICB0aGlzLnNlc3Npb24gPSBuZXcgUGFuU2Vzc2lvbihwb2ludGVyRG93bkV2ZW50LCB0aGlzLmNyZWF0ZVBhbkhhbmRsZXJzKCksIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybVBhZ2VQb2ludDogdGhpcy5ub2RlLmdldFRyYW5zZm9ybVBhZ2VQb2ludCgpLFxuICAgICAgICAgICAgY29udGV4dFdpbmRvdzogZ2V0Q29udGV4dFdpbmRvdyh0aGlzLm5vZGUpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY3JlYXRlUGFuSGFuZGxlcnMoKSB7XG4gICAgICAgIGNvbnN0IHsgb25QYW5TZXNzaW9uU3RhcnQsIG9uUGFuU3RhcnQsIG9uUGFuLCBvblBhbkVuZCB9ID0gdGhpcy5ub2RlLmdldFByb3BzKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvblNlc3Npb25TdGFydDogYXN5bmNIYW5kbGVyKG9uUGFuU2Vzc2lvblN0YXJ0KSxcbiAgICAgICAgICAgIG9uU3RhcnQ6IGFzeW5jSGFuZGxlcihvblBhblN0YXJ0KSxcbiAgICAgICAgICAgIG9uTW92ZTogb25QYW4sXG4gICAgICAgICAgICBvbkVuZDogKGV2ZW50LCBpbmZvKSA9PiB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuc2Vzc2lvbjtcbiAgICAgICAgICAgICAgICBpZiAob25QYW5FbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgZnJhbWUudXBkYXRlKCgpID0+IG9uUGFuRW5kKGV2ZW50LCBpbmZvKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgbW91bnQoKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlUG9pbnRlckRvd25MaXN0ZW5lciA9IGFkZFBvaW50ZXJFdmVudCh0aGlzLm5vZGUuY3VycmVudCwgXCJwb2ludGVyZG93blwiLCAoZXZlbnQpID0+IHRoaXMub25Qb2ludGVyRG93bihldmVudCkpO1xuICAgIH1cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIHRoaXMuc2Vzc2lvbiAmJiB0aGlzLnNlc3Npb24udXBkYXRlSGFuZGxlcnModGhpcy5jcmVhdGVQYW5IYW5kbGVycygpKTtcbiAgICB9XG4gICAgdW5tb3VudCgpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVQb2ludGVyRG93bkxpc3RlbmVyKCk7XG4gICAgICAgIHRoaXMuc2Vzc2lvbiAmJiB0aGlzLnNlc3Npb24uZW5kKCk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBQYW5HZXN0dXJlIH07XG4iXSwibmFtZXMiOlsiUGFuU2Vzc2lvbiIsImFkZFBvaW50ZXJFdmVudCIsIkZlYXR1cmUiLCJub29wIiwiZ2V0Q29udGV4dFdpbmRvdyIsImZyYW1lIiwiYXN5bmNIYW5kbGVyIiwiaGFuZGxlciIsImV2ZW50IiwiaW5mbyIsInVwZGF0ZSIsIlBhbkdlc3R1cmUiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsInJlbW92ZVBvaW50ZXJEb3duTGlzdGVuZXIiLCJvblBvaW50ZXJEb3duIiwicG9pbnRlckRvd25FdmVudCIsInNlc3Npb24iLCJjcmVhdGVQYW5IYW5kbGVycyIsInRyYW5zZm9ybVBhZ2VQb2ludCIsIm5vZGUiLCJnZXRUcmFuc2Zvcm1QYWdlUG9pbnQiLCJjb250ZXh0V2luZG93Iiwib25QYW5TZXNzaW9uU3RhcnQiLCJvblBhblN0YXJ0Iiwib25QYW4iLCJvblBhbkVuZCIsImdldFByb3BzIiwib25TZXNzaW9uU3RhcnQiLCJvblN0YXJ0Iiwib25Nb3ZlIiwib25FbmQiLCJtb3VudCIsImN1cnJlbnQiLCJ1cGRhdGVIYW5kbGVycyIsInVubW91bnQiLCJlbmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/gestures/pan/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/gestures/press.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/gestures/press.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PressGesture: () => (/* binding */ PressGesture)\n/* harmony export */ });\n/* harmony import */ var _events_event_info_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events/event-info.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/events/event-info.mjs\");\n/* harmony import */ var _events_add_dom_event_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../events/add-dom-event.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/events/add-dom-event.mjs\");\n/* harmony import */ var _events_add_pointer_event_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../events/add-pointer-event.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/events/add-pointer-event.mjs\");\n/* harmony import */ var _motion_features_Feature_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../motion/features/Feature.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/Feature.mjs\");\n/* harmony import */ var _utils_pipe_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/pipe.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/pipe.mjs\");\n/* harmony import */ var _drag_utils_lock_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./drag/utils/lock.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs\");\n/* harmony import */ var _utils_is_node_or_child_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/is-node-or-child.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs\");\n/* harmony import */ var _utils_noop_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/noop.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/noop.mjs\");\n/* harmony import */ var _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../frameloop/frame.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/frameloop/frame.mjs\");\n\n\n\n\n\n\n\n\n\nfunction fireSyntheticPointerEvent(name, handler) {\n    if (!handler) return;\n    const syntheticPointerEvent = new PointerEvent(\"pointer\" + name);\n    handler(syntheticPointerEvent, (0,_events_event_info_mjs__WEBPACK_IMPORTED_MODULE_0__.extractEventInfo)(syntheticPointerEvent));\n}\nclass PressGesture extends _motion_features_Feature_mjs__WEBPACK_IMPORTED_MODULE_1__.Feature {\n    constructor(){\n        super(...arguments);\n        this.removeStartListeners = _utils_noop_mjs__WEBPACK_IMPORTED_MODULE_2__.noop;\n        this.removeEndListeners = _utils_noop_mjs__WEBPACK_IMPORTED_MODULE_2__.noop;\n        this.removeAccessibleListeners = _utils_noop_mjs__WEBPACK_IMPORTED_MODULE_2__.noop;\n        this.startPointerPress = (startEvent, startInfo)=>{\n            this.removeEndListeners();\n            if (this.isPressing) return;\n            const props = this.node.getProps();\n            const endPointerPress = (endEvent, endInfo)=>{\n                if (!this.checkPressEnd()) return;\n                const { onTap, onTapCancel } = this.node.getProps();\n                _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__.frame.update(()=>{\n                    /**\n                     * We only count this as a tap gesture if the event.target is the same\n                     * as, or a child of, this component's element\n                     */ !(0,_utils_is_node_or_child_mjs__WEBPACK_IMPORTED_MODULE_4__.isNodeOrChild)(this.node.current, endEvent.target) ? onTapCancel && onTapCancel(endEvent, endInfo) : onTap && onTap(endEvent, endInfo);\n                });\n            };\n            const removePointerUpListener = (0,_events_add_pointer_event_mjs__WEBPACK_IMPORTED_MODULE_5__.addPointerEvent)(window, \"pointerup\", endPointerPress, {\n                passive: !(props.onTap || props[\"onPointerUp\"])\n            });\n            const removePointerCancelListener = (0,_events_add_pointer_event_mjs__WEBPACK_IMPORTED_MODULE_5__.addPointerEvent)(window, \"pointercancel\", (cancelEvent, cancelInfo)=>this.cancelPress(cancelEvent, cancelInfo), {\n                passive: !(props.onTapCancel || props[\"onPointerCancel\"])\n            });\n            this.removeEndListeners = (0,_utils_pipe_mjs__WEBPACK_IMPORTED_MODULE_6__.pipe)(removePointerUpListener, removePointerCancelListener);\n            this.startPress(startEvent, startInfo);\n        };\n        this.startAccessiblePress = ()=>{\n            const handleKeydown = (keydownEvent)=>{\n                if (keydownEvent.key !== \"Enter\" || this.isPressing) return;\n                const handleKeyup = (keyupEvent)=>{\n                    if (keyupEvent.key !== \"Enter\" || !this.checkPressEnd()) return;\n                    fireSyntheticPointerEvent(\"up\", (event, info)=>{\n                        const { onTap } = this.node.getProps();\n                        if (onTap) {\n                            _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__.frame.update(()=>onTap(event, info));\n                        }\n                    });\n                };\n                this.removeEndListeners();\n                this.removeEndListeners = (0,_events_add_dom_event_mjs__WEBPACK_IMPORTED_MODULE_7__.addDomEvent)(this.node.current, \"keyup\", handleKeyup);\n                fireSyntheticPointerEvent(\"down\", (event, info)=>{\n                    this.startPress(event, info);\n                });\n            };\n            const removeKeydownListener = (0,_events_add_dom_event_mjs__WEBPACK_IMPORTED_MODULE_7__.addDomEvent)(this.node.current, \"keydown\", handleKeydown);\n            const handleBlur = ()=>{\n                if (!this.isPressing) return;\n                fireSyntheticPointerEvent(\"cancel\", (cancelEvent, cancelInfo)=>this.cancelPress(cancelEvent, cancelInfo));\n            };\n            const removeBlurListener = (0,_events_add_dom_event_mjs__WEBPACK_IMPORTED_MODULE_7__.addDomEvent)(this.node.current, \"blur\", handleBlur);\n            this.removeAccessibleListeners = (0,_utils_pipe_mjs__WEBPACK_IMPORTED_MODULE_6__.pipe)(removeKeydownListener, removeBlurListener);\n        };\n    }\n    startPress(event, info) {\n        this.isPressing = true;\n        const { onTapStart, whileTap } = this.node.getProps();\n        /**\n         * Ensure we trigger animations before firing event callback\n         */ if (whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", true);\n        }\n        if (onTapStart) {\n            _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__.frame.update(()=>onTapStart(event, info));\n        }\n    }\n    checkPressEnd() {\n        this.removeEndListeners();\n        this.isPressing = false;\n        const props = this.node.getProps();\n        if (props.whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", false);\n        }\n        return !(0,_drag_utils_lock_mjs__WEBPACK_IMPORTED_MODULE_8__.isDragActive)();\n    }\n    cancelPress(event, info) {\n        if (!this.checkPressEnd()) return;\n        const { onTapCancel } = this.node.getProps();\n        if (onTapCancel) {\n            _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__.frame.update(()=>onTapCancel(event, info));\n        }\n    }\n    mount() {\n        const props = this.node.getProps();\n        const removePointerListener = (0,_events_add_pointer_event_mjs__WEBPACK_IMPORTED_MODULE_5__.addPointerEvent)(this.node.current, \"pointerdown\", this.startPointerPress, {\n            passive: !(props.onTapStart || props[\"onPointerStart\"])\n        });\n        const removeFocusListener = (0,_events_add_dom_event_mjs__WEBPACK_IMPORTED_MODULE_7__.addDomEvent)(this.node.current, \"focus\", this.startAccessiblePress);\n        this.removeStartListeners = (0,_utils_pipe_mjs__WEBPACK_IMPORTED_MODULE_6__.pipe)(removePointerListener, removeFocusListener);\n    }\n    unmount() {\n        this.removeStartListeners();\n        this.removeEndListeners();\n        this.removeAccessibleListeners();\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/gestures/press.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNodeOrChild: () => (/* binding */ isNodeOrChild)\n/* harmony export */ });\n/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */ const isNodeOrChild = (parent, child)=>{\n    if (!child) {\n        return false;\n    } else if (parent === child) {\n        return true;\n    } else {\n        return isNodeOrChild(parent, child.parentElement);\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL3V0aWxzL2lzLW5vZGUtb3ItY2hpbGQubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7O0NBTUMsR0FDRCxNQUFNQSxnQkFBZ0IsQ0FBQ0MsUUFBUUM7SUFDM0IsSUFBSSxDQUFDQSxPQUFPO1FBQ1IsT0FBTztJQUNYLE9BQ0ssSUFBSUQsV0FBV0MsT0FBTztRQUN2QixPQUFPO0lBQ1gsT0FDSztRQUNELE9BQU9GLGNBQWNDLFFBQVFDLE1BQU1DLGFBQWE7SUFDcEQ7QUFDSjtBQUV5QiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9nZXN0dXJlcy91dGlscy9pcy1ub2RlLW9yLWNoaWxkLm1qcz81MWM4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmVjdXJzaXZlbHkgdHJhdmVyc2UgdXAgdGhlIHRyZWUgdG8gY2hlY2sgd2hldGhlciB0aGUgcHJvdmlkZWQgY2hpbGQgbm9kZVxuICogaXMgdGhlIHBhcmVudCBvciBhIGRlc2NlbmRhbnQgb2YgaXQuXG4gKlxuICogQHBhcmFtIHBhcmVudCAtIEVsZW1lbnQgdG8gZmluZFxuICogQHBhcmFtIGNoaWxkIC0gRWxlbWVudCB0byB0ZXN0IGFnYWluc3QgcGFyZW50XG4gKi9cbmNvbnN0IGlzTm9kZU9yQ2hpbGQgPSAocGFyZW50LCBjaGlsZCkgPT4ge1xuICAgIGlmICghY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIGlmIChwYXJlbnQgPT09IGNoaWxkKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGlzTm9kZU9yQ2hpbGQocGFyZW50LCBjaGlsZC5wYXJlbnRFbGVtZW50KTtcbiAgICB9XG59O1xuXG5leHBvcnQgeyBpc05vZGVPckNoaWxkIH07XG4iXSwibmFtZXMiOlsiaXNOb2RlT3JDaGlsZCIsInBhcmVudCIsImNoaWxkIiwicGFyZW50RWxlbWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/features/Feature.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/features/Feature.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Feature: () => (/* binding */ Feature)\n/* harmony export */ });\nclass Feature {\n    constructor(node){\n        this.isMounted = false;\n        this.node = node;\n    }\n    update() {}\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy9GZWF0dXJlLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUE7SUFDRkMsWUFBWUMsSUFBSSxDQUFFO1FBQ2QsSUFBSSxDQUFDQyxTQUFTLEdBQUc7UUFDakIsSUFBSSxDQUFDRCxJQUFJLEdBQUdBO0lBQ2hCO0lBQ0FFLFNBQVMsQ0FBRTtBQUNmO0FBRW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy9GZWF0dXJlLm1qcz83MzE0Il0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIEZlYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKG5vZGUpIHtcbiAgICAgICAgdGhpcy5pc01vdW50ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5ub2RlID0gbm9kZTtcbiAgICB9XG4gICAgdXBkYXRlKCkgeyB9XG59XG5cbmV4cG9ydCB7IEZlYXR1cmUgfTtcbiJdLCJuYW1lcyI6WyJGZWF0dXJlIiwiY29uc3RydWN0b3IiLCJub2RlIiwiaXNNb3VudGVkIiwidXBkYXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/features/Feature.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExitAnimationFeature: () => (/* binding */ ExitAnimationFeature)\n/* harmony export */ });\n/* harmony import */ var _Feature_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Feature.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/Feature.mjs\");\n\nlet id = 0;\nclass ExitAnimationFeature extends _Feature_mjs__WEBPACK_IMPORTED_MODULE_0__.Feature {\n    constructor(){\n        super(...arguments);\n        this.id = id++;\n    }\n    update() {\n        if (!this.node.presenceContext) return;\n        const { isPresent, onExitComplete, custom } = this.node.presenceContext;\n        const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};\n        if (!this.node.animationState || isPresent === prevIsPresent) {\n            return;\n        }\n        const exitAnimation = this.node.animationState.setActive(\"exit\", !isPresent, {\n            custom: custom !== null && custom !== void 0 ? custom : this.node.getProps().custom\n        });\n        if (onExitComplete && !isPresent) {\n            exitAnimation.then(()=>onExitComplete(this.id));\n        }\n    }\n    mount() {\n        const { register } = this.node.presenceContext || {};\n        if (register) {\n            this.unmount = register(this.id);\n        }\n    }\n    unmount() {}\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy9hbmltYXRpb24vZXhpdC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBeUM7QUFFekMsSUFBSUMsS0FBSztBQUNULE1BQU1DLDZCQUE2QkYsaURBQU9BO0lBQ3RDRyxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0gsRUFBRSxHQUFHQTtJQUNkO0lBQ0FJLFNBQVM7UUFDTCxJQUFJLENBQUMsSUFBSSxDQUFDQyxJQUFJLENBQUNDLGVBQWUsRUFDMUI7UUFDSixNQUFNLEVBQUVDLFNBQVMsRUFBRUMsY0FBYyxFQUFFQyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUNKLElBQUksQ0FBQ0MsZUFBZTtRQUN2RSxNQUFNLEVBQUVDLFdBQVdHLGFBQWEsRUFBRSxHQUFHLElBQUksQ0FBQ0wsSUFBSSxDQUFDTSxtQkFBbUIsSUFBSSxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxJQUFJLENBQUNOLElBQUksQ0FBQ08sY0FBYyxJQUFJTCxjQUFjRyxlQUFlO1lBQzFEO1FBQ0o7UUFDQSxNQUFNRyxnQkFBZ0IsSUFBSSxDQUFDUixJQUFJLENBQUNPLGNBQWMsQ0FBQ0UsU0FBUyxDQUFDLFFBQVEsQ0FBQ1AsV0FBVztZQUFFRSxRQUFRQSxXQUFXLFFBQVFBLFdBQVcsS0FBSyxJQUFJQSxTQUFTLElBQUksQ0FBQ0osSUFBSSxDQUFDVSxRQUFRLEdBQUdOLE1BQU07UUFBQztRQUNuSyxJQUFJRCxrQkFBa0IsQ0FBQ0QsV0FBVztZQUM5Qk0sY0FBY0csSUFBSSxDQUFDLElBQU1SLGVBQWUsSUFBSSxDQUFDUixFQUFFO1FBQ25EO0lBQ0o7SUFDQWlCLFFBQVE7UUFDSixNQUFNLEVBQUVDLFFBQVEsRUFBRSxHQUFHLElBQUksQ0FBQ2IsSUFBSSxDQUFDQyxlQUFlLElBQUksQ0FBQztRQUNuRCxJQUFJWSxVQUFVO1lBQ1YsSUFBSSxDQUFDQyxPQUFPLEdBQUdELFNBQVMsSUFBSSxDQUFDbEIsRUFBRTtRQUNuQztJQUNKO0lBQ0FtQixVQUFVLENBQUU7QUFDaEI7QUFFZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL2ZlYXR1cmVzL2FuaW1hdGlvbi9leGl0Lm1qcz9iYzdlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZlYXR1cmUgfSBmcm9tICcuLi9GZWF0dXJlLm1qcyc7XG5cbmxldCBpZCA9IDA7XG5jbGFzcyBFeGl0QW5pbWF0aW9uRmVhdHVyZSBleHRlbmRzIEZlYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmlkID0gaWQrKztcbiAgICB9XG4gICAgdXBkYXRlKCkge1xuICAgICAgICBpZiAoIXRoaXMubm9kZS5wcmVzZW5jZUNvbnRleHQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHsgaXNQcmVzZW50LCBvbkV4aXRDb21wbGV0ZSwgY3VzdG9tIH0gPSB0aGlzLm5vZGUucHJlc2VuY2VDb250ZXh0O1xuICAgICAgICBjb25zdCB7IGlzUHJlc2VudDogcHJldklzUHJlc2VudCB9ID0gdGhpcy5ub2RlLnByZXZQcmVzZW5jZUNvbnRleHQgfHwge307XG4gICAgICAgIGlmICghdGhpcy5ub2RlLmFuaW1hdGlvblN0YXRlIHx8IGlzUHJlc2VudCA9PT0gcHJldklzUHJlc2VudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGV4aXRBbmltYXRpb24gPSB0aGlzLm5vZGUuYW5pbWF0aW9uU3RhdGUuc2V0QWN0aXZlKFwiZXhpdFwiLCAhaXNQcmVzZW50LCB7IGN1c3RvbTogY3VzdG9tICE9PSBudWxsICYmIGN1c3RvbSAhPT0gdm9pZCAwID8gY3VzdG9tIDogdGhpcy5ub2RlLmdldFByb3BzKCkuY3VzdG9tIH0pO1xuICAgICAgICBpZiAob25FeGl0Q29tcGxldGUgJiYgIWlzUHJlc2VudCkge1xuICAgICAgICAgICAgZXhpdEFuaW1hdGlvbi50aGVuKCgpID0+IG9uRXhpdENvbXBsZXRlKHRoaXMuaWQpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBtb3VudCgpIHtcbiAgICAgICAgY29uc3QgeyByZWdpc3RlciB9ID0gdGhpcy5ub2RlLnByZXNlbmNlQ29udGV4dCB8fCB7fTtcbiAgICAgICAgaWYgKHJlZ2lzdGVyKSB7XG4gICAgICAgICAgICB0aGlzLnVubW91bnQgPSByZWdpc3Rlcih0aGlzLmlkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB1bm1vdW50KCkgeyB9XG59XG5cbmV4cG9ydCB7IEV4aXRBbmltYXRpb25GZWF0dXJlIH07XG4iXSwibmFtZXMiOlsiRmVhdHVyZSIsImlkIiwiRXhpdEFuaW1hdGlvbkZlYXR1cmUiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsInVwZGF0ZSIsIm5vZGUiLCJwcmVzZW5jZUNvbnRleHQiLCJpc1ByZXNlbnQiLCJvbkV4aXRDb21wbGV0ZSIsImN1c3RvbSIsInByZXZJc1ByZXNlbnQiLCJwcmV2UHJlc2VuY2VDb250ZXh0IiwiYW5pbWF0aW9uU3RhdGUiLCJleGl0QW5pbWF0aW9uIiwic2V0QWN0aXZlIiwiZ2V0UHJvcHMiLCJ0aGVuIiwibW91bnQiLCJyZWdpc3RlciIsInVubW91bnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/features/animation/index.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/features/animation/index.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnimationFeature: () => (/* binding */ AnimationFeature)\n/* harmony export */ });\n/* harmony import */ var _animation_utils_is_animation_controls_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../animation/utils/is-animation-controls.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs\");\n/* harmony import */ var _render_utils_animation_state_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../render/utils/animation-state.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/animation-state.mjs\");\n/* harmony import */ var _Feature_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Feature.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/Feature.mjs\");\n\n\n\nclass AnimationFeature extends _Feature_mjs__WEBPACK_IMPORTED_MODULE_0__.Feature {\n    /**\n     * We dynamically generate the AnimationState manager as it contains a reference\n     * to the underlying animation library. We only want to load that if we load this,\n     * so people can optionally code split it out using the `m` component.\n     */ constructor(node){\n        super(node);\n        node.animationState || (node.animationState = (0,_render_utils_animation_state_mjs__WEBPACK_IMPORTED_MODULE_1__.createAnimationState)(node));\n    }\n    updateAnimationControlsSubscription() {\n        const { animate } = this.node.getProps();\n        this.unmount();\n        if ((0,_animation_utils_is_animation_controls_mjs__WEBPACK_IMPORTED_MODULE_2__.isAnimationControls)(animate)) {\n            this.unmount = animate.subscribe(this.node);\n        }\n    }\n    /**\n     * Subscribe any provided AnimationControls to the component's VisualElement\n     */ mount() {\n        this.updateAnimationControlsSubscription();\n    }\n    update() {\n        const { animate } = this.node.getProps();\n        const { animate: prevAnimate } = this.node.prevProps || {};\n        if (animate !== prevAnimate) {\n            this.updateAnimationControlsSubscription();\n        }\n    }\n    unmount() {}\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy9hbmltYXRpb24vaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBeUY7QUFDUjtBQUN4QztBQUV6QyxNQUFNRyx5QkFBeUJELGlEQUFPQTtJQUNsQzs7OztLQUlDLEdBQ0RFLFlBQVlDLElBQUksQ0FBRTtRQUNkLEtBQUssQ0FBQ0E7UUFDTkEsS0FBS0MsY0FBYyxJQUFLRCxDQUFBQSxLQUFLQyxjQUFjLEdBQUdMLHVGQUFvQkEsQ0FBQ0ksS0FBSTtJQUMzRTtJQUNBRSxzQ0FBc0M7UUFDbEMsTUFBTSxFQUFFQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUNILElBQUksQ0FBQ0ksUUFBUTtRQUN0QyxJQUFJLENBQUNDLE9BQU87UUFDWixJQUFJViwrRkFBbUJBLENBQUNRLFVBQVU7WUFDOUIsSUFBSSxDQUFDRSxPQUFPLEdBQUdGLFFBQVFHLFNBQVMsQ0FBQyxJQUFJLENBQUNOLElBQUk7UUFDOUM7SUFDSjtJQUNBOztLQUVDLEdBQ0RPLFFBQVE7UUFDSixJQUFJLENBQUNMLG1DQUFtQztJQUM1QztJQUNBTSxTQUFTO1FBQ0wsTUFBTSxFQUFFTCxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUNILElBQUksQ0FBQ0ksUUFBUTtRQUN0QyxNQUFNLEVBQUVELFNBQVNNLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQ1QsSUFBSSxDQUFDVSxTQUFTLElBQUksQ0FBQztRQUN6RCxJQUFJUCxZQUFZTSxhQUFhO1lBQ3pCLElBQUksQ0FBQ1AsbUNBQW1DO1FBQzVDO0lBQ0o7SUFDQUcsVUFBVSxDQUFFO0FBQ2hCO0FBRTRCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy9hbmltYXRpb24vaW5kZXgubWpzP2E4MzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNBbmltYXRpb25Db250cm9scyB9IGZyb20gJy4uLy4uLy4uL2FuaW1hdGlvbi91dGlscy9pcy1hbmltYXRpb24tY29udHJvbHMubWpzJztcbmltcG9ydCB7IGNyZWF0ZUFuaW1hdGlvblN0YXRlIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyL3V0aWxzL2FuaW1hdGlvbi1zdGF0ZS5tanMnO1xuaW1wb3J0IHsgRmVhdHVyZSB9IGZyb20gJy4uL0ZlYXR1cmUubWpzJztcblxuY2xhc3MgQW5pbWF0aW9uRmVhdHVyZSBleHRlbmRzIEZlYXR1cmUge1xuICAgIC8qKlxuICAgICAqIFdlIGR5bmFtaWNhbGx5IGdlbmVyYXRlIHRoZSBBbmltYXRpb25TdGF0ZSBtYW5hZ2VyIGFzIGl0IGNvbnRhaW5zIGEgcmVmZXJlbmNlXG4gICAgICogdG8gdGhlIHVuZGVybHlpbmcgYW5pbWF0aW9uIGxpYnJhcnkuIFdlIG9ubHkgd2FudCB0byBsb2FkIHRoYXQgaWYgd2UgbG9hZCB0aGlzLFxuICAgICAqIHNvIHBlb3BsZSBjYW4gb3B0aW9uYWxseSBjb2RlIHNwbGl0IGl0IG91dCB1c2luZyB0aGUgYG1gIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihub2RlKSB7XG4gICAgICAgIHN1cGVyKG5vZGUpO1xuICAgICAgICBub2RlLmFuaW1hdGlvblN0YXRlIHx8IChub2RlLmFuaW1hdGlvblN0YXRlID0gY3JlYXRlQW5pbWF0aW9uU3RhdGUobm9kZSkpO1xuICAgIH1cbiAgICB1cGRhdGVBbmltYXRpb25Db250cm9sc1N1YnNjcmlwdGlvbigpIHtcbiAgICAgICAgY29uc3QgeyBhbmltYXRlIH0gPSB0aGlzLm5vZGUuZ2V0UHJvcHMoKTtcbiAgICAgICAgdGhpcy51bm1vdW50KCk7XG4gICAgICAgIGlmIChpc0FuaW1hdGlvbkNvbnRyb2xzKGFuaW1hdGUpKSB7XG4gICAgICAgICAgICB0aGlzLnVubW91bnQgPSBhbmltYXRlLnN1YnNjcmliZSh0aGlzLm5vZGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZSBhbnkgcHJvdmlkZWQgQW5pbWF0aW9uQ29udHJvbHMgdG8gdGhlIGNvbXBvbmVudCdzIFZpc3VhbEVsZW1lbnRcbiAgICAgKi9cbiAgICBtb3VudCgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVBbmltYXRpb25Db250cm9sc1N1YnNjcmlwdGlvbigpO1xuICAgIH1cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIGNvbnN0IHsgYW5pbWF0ZSB9ID0gdGhpcy5ub2RlLmdldFByb3BzKCk7XG4gICAgICAgIGNvbnN0IHsgYW5pbWF0ZTogcHJldkFuaW1hdGUgfSA9IHRoaXMubm9kZS5wcmV2UHJvcHMgfHwge307XG4gICAgICAgIGlmIChhbmltYXRlICE9PSBwcmV2QW5pbWF0ZSkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVBbmltYXRpb25Db250cm9sc1N1YnNjcmlwdGlvbigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVubW91bnQoKSB7IH1cbn1cblxuZXhwb3J0IHsgQW5pbWF0aW9uRmVhdHVyZSB9O1xuIl0sIm5hbWVzIjpbImlzQW5pbWF0aW9uQ29udHJvbHMiLCJjcmVhdGVBbmltYXRpb25TdGF0ZSIsIkZlYXR1cmUiLCJBbmltYXRpb25GZWF0dXJlIiwiY29uc3RydWN0b3IiLCJub2RlIiwiYW5pbWF0aW9uU3RhdGUiLCJ1cGRhdGVBbmltYXRpb25Db250cm9sc1N1YnNjcmlwdGlvbiIsImFuaW1hdGUiLCJnZXRQcm9wcyIsInVubW91bnQiLCJzdWJzY3JpYmUiLCJtb3VudCIsInVwZGF0ZSIsInByZXZBbmltYXRlIiwicHJldlByb3BzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/features/animation/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/features/animations.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/features/animations.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   animations: () => (/* binding */ animations)\n/* harmony export */ });\n/* harmony import */ var _animation_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./animation/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/animation/index.mjs\");\n/* harmony import */ var _animation_exit_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./animation/exit.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs\");\n\n\nconst animations = {\n    animation: {\n        Feature: _animation_index_mjs__WEBPACK_IMPORTED_MODULE_0__.AnimationFeature\n    },\n    exit: {\n        Feature: _animation_exit_mjs__WEBPACK_IMPORTED_MODULE_1__.ExitAnimationFeature\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy9hbmltYXRpb25zLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBeUQ7QUFDRztBQUU1RCxNQUFNRSxhQUFhO0lBQ2ZDLFdBQVc7UUFDUEMsU0FBU0osa0VBQWdCQTtJQUM3QjtJQUNBSyxNQUFNO1FBQ0ZELFNBQVNILHFFQUFvQkE7SUFDakM7QUFDSjtBQUVzQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9tb3Rpb24vZmVhdHVyZXMvYW5pbWF0aW9ucy5tanM/MjI0NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBbmltYXRpb25GZWF0dXJlIH0gZnJvbSAnLi9hbmltYXRpb24vaW5kZXgubWpzJztcbmltcG9ydCB7IEV4aXRBbmltYXRpb25GZWF0dXJlIH0gZnJvbSAnLi9hbmltYXRpb24vZXhpdC5tanMnO1xuXG5jb25zdCBhbmltYXRpb25zID0ge1xuICAgIGFuaW1hdGlvbjoge1xuICAgICAgICBGZWF0dXJlOiBBbmltYXRpb25GZWF0dXJlLFxuICAgIH0sXG4gICAgZXhpdDoge1xuICAgICAgICBGZWF0dXJlOiBFeGl0QW5pbWF0aW9uRmVhdHVyZSxcbiAgICB9LFxufTtcblxuZXhwb3J0IHsgYW5pbWF0aW9ucyB9O1xuIl0sIm5hbWVzIjpbIkFuaW1hdGlvbkZlYXR1cmUiLCJFeGl0QW5pbWF0aW9uRmVhdHVyZSIsImFuaW1hdGlvbnMiLCJhbmltYXRpb24iLCJGZWF0dXJlIiwiZXhpdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/features/animations.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/features/definitions.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/features/definitions.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   featureDefinitions: () => (/* binding */ featureDefinitions)\n/* harmony export */ });\nconst featureProps = {\n    animation: [\n        \"animate\",\n        \"variants\",\n        \"whileHover\",\n        \"whileTap\",\n        \"exit\",\n        \"whileInView\",\n        \"whileFocus\",\n        \"whileDrag\"\n    ],\n    exit: [\n        \"exit\"\n    ],\n    drag: [\n        \"drag\",\n        \"dragControls\"\n    ],\n    focus: [\n        \"whileFocus\"\n    ],\n    hover: [\n        \"whileHover\",\n        \"onHoverStart\",\n        \"onHoverEnd\"\n    ],\n    tap: [\n        \"whileTap\",\n        \"onTap\",\n        \"onTapStart\",\n        \"onTapCancel\"\n    ],\n    pan: [\n        \"onPan\",\n        \"onPanStart\",\n        \"onPanSessionStart\",\n        \"onPanEnd\"\n    ],\n    inView: [\n        \"whileInView\",\n        \"onViewportEnter\",\n        \"onViewportLeave\"\n    ],\n    layout: [\n        \"layout\",\n        \"layoutId\"\n    ]\n};\nconst featureDefinitions = {};\nfor(const key in featureProps){\n    featureDefinitions[key] = {\n        isEnabled: (props)=>featureProps[key].some((name)=>!!props[name])\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy9kZWZpbml0aW9ucy5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLGVBQWU7SUFDakJDLFdBQVc7UUFDUDtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO0tBQ0g7SUFDREMsTUFBTTtRQUFDO0tBQU87SUFDZEMsTUFBTTtRQUFDO1FBQVE7S0FBZTtJQUM5QkMsT0FBTztRQUFDO0tBQWE7SUFDckJDLE9BQU87UUFBQztRQUFjO1FBQWdCO0tBQWE7SUFDbkRDLEtBQUs7UUFBQztRQUFZO1FBQVM7UUFBYztLQUFjO0lBQ3ZEQyxLQUFLO1FBQUM7UUFBUztRQUFjO1FBQXFCO0tBQVc7SUFDN0RDLFFBQVE7UUFBQztRQUFlO1FBQW1CO0tBQWtCO0lBQzdEQyxRQUFRO1FBQUM7UUFBVTtLQUFXO0FBQ2xDO0FBQ0EsTUFBTUMscUJBQXFCLENBQUM7QUFDNUIsSUFBSyxNQUFNQyxPQUFPWCxhQUFjO0lBQzVCVSxrQkFBa0IsQ0FBQ0MsSUFBSSxHQUFHO1FBQ3RCQyxXQUFXLENBQUNDLFFBQVViLFlBQVksQ0FBQ1csSUFBSSxDQUFDRyxJQUFJLENBQUMsQ0FBQ0MsT0FBUyxDQUFDLENBQUNGLEtBQUssQ0FBQ0UsS0FBSztJQUN4RTtBQUNKO0FBRThCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy9kZWZpbml0aW9ucy5tanM/ZGEzMSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBmZWF0dXJlUHJvcHMgPSB7XG4gICAgYW5pbWF0aW9uOiBbXG4gICAgICAgIFwiYW5pbWF0ZVwiLFxuICAgICAgICBcInZhcmlhbnRzXCIsXG4gICAgICAgIFwid2hpbGVIb3ZlclwiLFxuICAgICAgICBcIndoaWxlVGFwXCIsXG4gICAgICAgIFwiZXhpdFwiLFxuICAgICAgICBcIndoaWxlSW5WaWV3XCIsXG4gICAgICAgIFwid2hpbGVGb2N1c1wiLFxuICAgICAgICBcIndoaWxlRHJhZ1wiLFxuICAgIF0sXG4gICAgZXhpdDogW1wiZXhpdFwiXSxcbiAgICBkcmFnOiBbXCJkcmFnXCIsIFwiZHJhZ0NvbnRyb2xzXCJdLFxuICAgIGZvY3VzOiBbXCJ3aGlsZUZvY3VzXCJdLFxuICAgIGhvdmVyOiBbXCJ3aGlsZUhvdmVyXCIsIFwib25Ib3ZlclN0YXJ0XCIsIFwib25Ib3ZlckVuZFwiXSxcbiAgICB0YXA6IFtcIndoaWxlVGFwXCIsIFwib25UYXBcIiwgXCJvblRhcFN0YXJ0XCIsIFwib25UYXBDYW5jZWxcIl0sXG4gICAgcGFuOiBbXCJvblBhblwiLCBcIm9uUGFuU3RhcnRcIiwgXCJvblBhblNlc3Npb25TdGFydFwiLCBcIm9uUGFuRW5kXCJdLFxuICAgIGluVmlldzogW1wid2hpbGVJblZpZXdcIiwgXCJvblZpZXdwb3J0RW50ZXJcIiwgXCJvblZpZXdwb3J0TGVhdmVcIl0sXG4gICAgbGF5b3V0OiBbXCJsYXlvdXRcIiwgXCJsYXlvdXRJZFwiXSxcbn07XG5jb25zdCBmZWF0dXJlRGVmaW5pdGlvbnMgPSB7fTtcbmZvciAoY29uc3Qga2V5IGluIGZlYXR1cmVQcm9wcykge1xuICAgIGZlYXR1cmVEZWZpbml0aW9uc1trZXldID0ge1xuICAgICAgICBpc0VuYWJsZWQ6IChwcm9wcykgPT4gZmVhdHVyZVByb3BzW2tleV0uc29tZSgobmFtZSkgPT4gISFwcm9wc1tuYW1lXSksXG4gICAgfTtcbn1cblxuZXhwb3J0IHsgZmVhdHVyZURlZmluaXRpb25zIH07XG4iXSwibmFtZXMiOlsiZmVhdHVyZVByb3BzIiwiYW5pbWF0aW9uIiwiZXhpdCIsImRyYWciLCJmb2N1cyIsImhvdmVyIiwidGFwIiwicGFuIiwiaW5WaWV3IiwibGF5b3V0IiwiZmVhdHVyZURlZmluaXRpb25zIiwia2V5IiwiaXNFbmFibGVkIiwicHJvcHMiLCJzb21lIiwibmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/features/definitions.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/features/drag.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/features/drag.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   drag: () => (/* binding */ drag)\n/* harmony export */ });\n/* harmony import */ var _gestures_drag_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../gestures/drag/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/gestures/drag/index.mjs\");\n/* harmony import */ var _gestures_pan_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../gestures/pan/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/gestures/pan/index.mjs\");\n/* harmony import */ var _layout_MeasureLayout_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./layout/MeasureLayout.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs\");\n/* harmony import */ var _projection_node_HTMLProjectionNode_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../projection/node/HTMLProjectionNode.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs\");\n\n\n\n\nconst drag = {\n    pan: {\n        Feature: _gestures_pan_index_mjs__WEBPACK_IMPORTED_MODULE_0__.PanGesture\n    },\n    drag: {\n        Feature: _gestures_drag_index_mjs__WEBPACK_IMPORTED_MODULE_1__.DragGesture,\n        ProjectionNode: _projection_node_HTMLProjectionNode_mjs__WEBPACK_IMPORTED_MODULE_2__.HTMLProjectionNode,\n        MeasureLayout: _layout_MeasureLayout_mjs__WEBPACK_IMPORTED_MODULE_3__.MeasureLayout\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy9kcmFnLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE0RDtBQUNGO0FBQ0M7QUFDdUI7QUFFbEYsTUFBTUksT0FBTztJQUNUQyxLQUFLO1FBQ0RDLFNBQVNMLCtEQUFVQTtJQUN2QjtJQUNBRyxNQUFNO1FBQ0ZFLFNBQVNOLGlFQUFXQTtRQUNwQk8sZ0JBQWdCSix1RkFBa0JBO1FBQ2xDRCxhQUFhQSxzRUFBQUE7SUFDakI7QUFDSjtBQUVnQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9tb3Rpb24vZmVhdHVyZXMvZHJhZy5tanM/NjM1YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEcmFnR2VzdHVyZSB9IGZyb20gJy4uLy4uL2dlc3R1cmVzL2RyYWcvaW5kZXgubWpzJztcbmltcG9ydCB7IFBhbkdlc3R1cmUgfSBmcm9tICcuLi8uLi9nZXN0dXJlcy9wYW4vaW5kZXgubWpzJztcbmltcG9ydCB7IE1lYXN1cmVMYXlvdXQgfSBmcm9tICcuL2xheW91dC9NZWFzdXJlTGF5b3V0Lm1qcyc7XG5pbXBvcnQgeyBIVE1MUHJvamVjdGlvbk5vZGUgfSBmcm9tICcuLi8uLi9wcm9qZWN0aW9uL25vZGUvSFRNTFByb2plY3Rpb25Ob2RlLm1qcyc7XG5cbmNvbnN0IGRyYWcgPSB7XG4gICAgcGFuOiB7XG4gICAgICAgIEZlYXR1cmU6IFBhbkdlc3R1cmUsXG4gICAgfSxcbiAgICBkcmFnOiB7XG4gICAgICAgIEZlYXR1cmU6IERyYWdHZXN0dXJlLFxuICAgICAgICBQcm9qZWN0aW9uTm9kZTogSFRNTFByb2plY3Rpb25Ob2RlLFxuICAgICAgICBNZWFzdXJlTGF5b3V0LFxuICAgIH0sXG59O1xuXG5leHBvcnQgeyBkcmFnIH07XG4iXSwibmFtZXMiOlsiRHJhZ0dlc3R1cmUiLCJQYW5HZXN0dXJlIiwiTWVhc3VyZUxheW91dCIsIkhUTUxQcm9qZWN0aW9uTm9kZSIsImRyYWciLCJwYW4iLCJGZWF0dXJlIiwiUHJvamVjdGlvbk5vZGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/features/drag.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/features/gestures.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/features/gestures.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   gestureAnimations: () => (/* binding */ gestureAnimations)\n/* harmony export */ });\n/* harmony import */ var _gestures_hover_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../gestures/hover.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/gestures/hover.mjs\");\n/* harmony import */ var _gestures_focus_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../gestures/focus.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/gestures/focus.mjs\");\n/* harmony import */ var _gestures_press_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../gestures/press.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/gestures/press.mjs\");\n/* harmony import */ var _viewport_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./viewport/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs\");\n\n\n\n\nconst gestureAnimations = {\n    inView: {\n        Feature: _viewport_index_mjs__WEBPACK_IMPORTED_MODULE_0__.InViewFeature\n    },\n    tap: {\n        Feature: _gestures_press_mjs__WEBPACK_IMPORTED_MODULE_1__.PressGesture\n    },\n    focus: {\n        Feature: _gestures_focus_mjs__WEBPACK_IMPORTED_MODULE_2__.FocusGesture\n    },\n    hover: {\n        Feature: _gestures_hover_mjs__WEBPACK_IMPORTED_MODULE_3__.HoverGesture\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy9nZXN0dXJlcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBd0Q7QUFDQTtBQUNBO0FBQ0g7QUFFckQsTUFBTUksb0JBQW9CO0lBQ3RCQyxRQUFRO1FBQ0pDLFNBQVNILDhEQUFhQTtJQUMxQjtJQUNBSSxLQUFLO1FBQ0RELFNBQVNKLDZEQUFZQTtJQUN6QjtJQUNBTSxPQUFPO1FBQ0hGLFNBQVNMLDZEQUFZQTtJQUN6QjtJQUNBUSxPQUFPO1FBQ0hILFNBQVNOLDZEQUFZQTtJQUN6QjtBQUNKO0FBRTZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy9nZXN0dXJlcy5tanM/ODFlMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIb3Zlckdlc3R1cmUgfSBmcm9tICcuLi8uLi9nZXN0dXJlcy9ob3Zlci5tanMnO1xuaW1wb3J0IHsgRm9jdXNHZXN0dXJlIH0gZnJvbSAnLi4vLi4vZ2VzdHVyZXMvZm9jdXMubWpzJztcbmltcG9ydCB7IFByZXNzR2VzdHVyZSB9IGZyb20gJy4uLy4uL2dlc3R1cmVzL3ByZXNzLm1qcyc7XG5pbXBvcnQgeyBJblZpZXdGZWF0dXJlIH0gZnJvbSAnLi92aWV3cG9ydC9pbmRleC5tanMnO1xuXG5jb25zdCBnZXN0dXJlQW5pbWF0aW9ucyA9IHtcbiAgICBpblZpZXc6IHtcbiAgICAgICAgRmVhdHVyZTogSW5WaWV3RmVhdHVyZSxcbiAgICB9LFxuICAgIHRhcDoge1xuICAgICAgICBGZWF0dXJlOiBQcmVzc0dlc3R1cmUsXG4gICAgfSxcbiAgICBmb2N1czoge1xuICAgICAgICBGZWF0dXJlOiBGb2N1c0dlc3R1cmUsXG4gICAgfSxcbiAgICBob3Zlcjoge1xuICAgICAgICBGZWF0dXJlOiBIb3Zlckdlc3R1cmUsXG4gICAgfSxcbn07XG5cbmV4cG9ydCB7IGdlc3R1cmVBbmltYXRpb25zIH07XG4iXSwibmFtZXMiOlsiSG92ZXJHZXN0dXJlIiwiRm9jdXNHZXN0dXJlIiwiUHJlc3NHZXN0dXJlIiwiSW5WaWV3RmVhdHVyZSIsImdlc3R1cmVBbmltYXRpb25zIiwiaW5WaWV3IiwiRmVhdHVyZSIsInRhcCIsImZvY3VzIiwiaG92ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/features/gestures.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/features/layout.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/features/layout.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   layout: () => (/* binding */ layout)\n/* harmony export */ });\n/* harmony import */ var _projection_node_HTMLProjectionNode_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../projection/node/HTMLProjectionNode.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs\");\n/* harmony import */ var _layout_MeasureLayout_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./layout/MeasureLayout.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs\");\n\n\nconst layout = {\n    layout: {\n        ProjectionNode: _projection_node_HTMLProjectionNode_mjs__WEBPACK_IMPORTED_MODULE_0__.HTMLProjectionNode,\n        MeasureLayout: _layout_MeasureLayout_mjs__WEBPACK_IMPORTED_MODULE_1__.MeasureLayout\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy9sYXlvdXQubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFrRjtBQUN2QjtBQUUzRCxNQUFNRSxTQUFTO0lBQ1hBLFFBQVE7UUFDSkMsZ0JBQWdCSCx1RkFBa0JBO1FBQ2xDQyxhQUFhQSxzRUFBQUE7SUFDakI7QUFDSjtBQUVrQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9tb3Rpb24vZmVhdHVyZXMvbGF5b3V0Lm1qcz82ZWZkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhUTUxQcm9qZWN0aW9uTm9kZSB9IGZyb20gJy4uLy4uL3Byb2plY3Rpb24vbm9kZS9IVE1MUHJvamVjdGlvbk5vZGUubWpzJztcbmltcG9ydCB7IE1lYXN1cmVMYXlvdXQgfSBmcm9tICcuL2xheW91dC9NZWFzdXJlTGF5b3V0Lm1qcyc7XG5cbmNvbnN0IGxheW91dCA9IHtcbiAgICBsYXlvdXQ6IHtcbiAgICAgICAgUHJvamVjdGlvbk5vZGU6IEhUTUxQcm9qZWN0aW9uTm9kZSxcbiAgICAgICAgTWVhc3VyZUxheW91dCxcbiAgICB9LFxufTtcblxuZXhwb3J0IHsgbGF5b3V0IH07XG4iXSwibmFtZXMiOlsiSFRNTFByb2plY3Rpb25Ob2RlIiwiTWVhc3VyZUxheW91dCIsImxheW91dCIsIlByb2plY3Rpb25Ob2RlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/features/layout.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs":
/*!*************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MeasureLayout: () => (/* binding */ MeasureLayout)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_AnimatePresence_use_presence_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../components/AnimatePresence/use-presence.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs\");\n/* harmony import */ var _context_LayoutGroupContext_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../context/LayoutGroupContext.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs\");\n/* harmony import */ var _context_SwitchLayoutGroupContext_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../context/SwitchLayoutGroupContext.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs\");\n/* harmony import */ var _projection_node_state_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../projection/node/state.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/node/state.mjs\");\n/* harmony import */ var _projection_styles_scale_border_radius_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../projection/styles/scale-border-radius.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs\");\n/* harmony import */ var _projection_styles_scale_box_shadow_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../projection/styles/scale-box-shadow.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs\");\n/* harmony import */ var _projection_styles_scale_correction_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../projection/styles/scale-correction.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs\");\n/* harmony import */ var _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../frameloop/frame.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/frameloop/frame.mjs\");\n\n\n\n\n\n\n\n\n\nclass MeasureLayoutWithContext extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */ componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        (0,_projection_styles_scale_correction_mjs__WEBPACK_IMPORTED_MODULE_1__.addScaleCorrector)(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group) layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", ()=>{\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: ()=>this.safeToRemove()\n            });\n        }\n        _projection_node_state_mjs__WEBPACK_IMPORTED_MODULE_2__.globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const projection = visualElement.projection;\n        if (!projection) return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */ projection.isPresent = isPresent;\n        if (drag || prevProps.layoutDependency !== layoutDependency || layoutDependency === undefined) {\n            projection.willUpdate();\n        } else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            } else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */ _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__.frame.postRender(()=>{\n                    const stack = projection.getStack();\n                    if (!stack || !stack.members.length) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            queueMicrotask(()=>{\n                if (!projection.currentAnimation && projection.isLead()) {\n                    this.safeToRemove();\n                }\n            });\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup && layoutGroup.group) layoutGroup.group.remove(projection);\n            if (promoteContext && promoteContext.deregister) promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove && safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = (0,_components_AnimatePresence_use_presence_mjs__WEBPACK_IMPORTED_MODULE_4__.usePresence)();\n    const layoutGroup = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_LayoutGroupContext_mjs__WEBPACK_IMPORTED_MODULE_5__.LayoutGroupContext);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MeasureLayoutWithContext, {\n        ...props,\n        layoutGroup: layoutGroup,\n        switchLayoutGroup: (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_SwitchLayoutGroupContext_mjs__WEBPACK_IMPORTED_MODULE_6__.SwitchLayoutGroupContext),\n        isPresent: isPresent,\n        safeToRemove: safeToRemove\n    });\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ..._projection_styles_scale_border_radius_mjs__WEBPACK_IMPORTED_MODULE_7__.correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\"\n        ]\n    },\n    borderTopLeftRadius: _projection_styles_scale_border_radius_mjs__WEBPACK_IMPORTED_MODULE_7__.correctBorderRadius,\n    borderTopRightRadius: _projection_styles_scale_border_radius_mjs__WEBPACK_IMPORTED_MODULE_7__.correctBorderRadius,\n    borderBottomLeftRadius: _projection_styles_scale_border_radius_mjs__WEBPACK_IMPORTED_MODULE_7__.correctBorderRadius,\n    borderBottomRightRadius: _projection_styles_scale_border_radius_mjs__WEBPACK_IMPORTED_MODULE_7__.correctBorderRadius,\n    boxShadow: _projection_styles_scale_box_shadow_mjs__WEBPACK_IMPORTED_MODULE_8__.correctBoxShadow\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/features/load-features.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/features/load-features.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadFeatures: () => (/* binding */ loadFeatures)\n/* harmony export */ });\n/* harmony import */ var _definitions_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./definitions.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/definitions.mjs\");\n\nfunction loadFeatures(features) {\n    for(const key in features){\n        _definitions_mjs__WEBPACK_IMPORTED_MODULE_0__.featureDefinitions[key] = {\n            ..._definitions_mjs__WEBPACK_IMPORTED_MODULE_0__.featureDefinitions[key],\n            ...features[key]\n        };\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy9sb2FkLWZlYXR1cmVzLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF1RDtBQUV2RCxTQUFTQyxhQUFhQyxRQUFRO0lBQzFCLElBQUssTUFBTUMsT0FBT0QsU0FBVTtRQUN4QkYsZ0VBQWtCLENBQUNHLElBQUksR0FBRztZQUN0QixHQUFHSCxnRUFBa0IsQ0FBQ0csSUFBSTtZQUMxQixHQUFHRCxRQUFRLENBQUNDLElBQUk7UUFDcEI7SUFDSjtBQUNKO0FBRXdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy9sb2FkLWZlYXR1cmVzLm1qcz8yZjZmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZlYXR1cmVEZWZpbml0aW9ucyB9IGZyb20gJy4vZGVmaW5pdGlvbnMubWpzJztcblxuZnVuY3Rpb24gbG9hZEZlYXR1cmVzKGZlYXR1cmVzKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gZmVhdHVyZXMpIHtcbiAgICAgICAgZmVhdHVyZURlZmluaXRpb25zW2tleV0gPSB7XG4gICAgICAgICAgICAuLi5mZWF0dXJlRGVmaW5pdGlvbnNba2V5XSxcbiAgICAgICAgICAgIC4uLmZlYXR1cmVzW2tleV0sXG4gICAgICAgIH07XG4gICAgfVxufVxuXG5leHBvcnQgeyBsb2FkRmVhdHVyZXMgfTtcbiJdLCJuYW1lcyI6WyJmZWF0dXJlRGVmaW5pdGlvbnMiLCJsb2FkRmVhdHVyZXMiLCJmZWF0dXJlcyIsImtleSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/features/load-features.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InViewFeature: () => (/* binding */ InViewFeature)\n/* harmony export */ });\n/* harmony import */ var _Feature_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Feature.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/Feature.mjs\");\n/* harmony import */ var _observers_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./observers.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs\");\n\n\nconst thresholdNames = {\n    some: 0,\n    all: 1\n};\nclass InViewFeature extends _Feature_mjs__WEBPACK_IMPORTED_MODULE_0__.Feature {\n    constructor(){\n        super(...arguments);\n        this.hasEnteredView = false;\n        this.isInView = false;\n    }\n    startObserver() {\n        this.unmount();\n        const { viewport = {} } = this.node.getProps();\n        const { root, margin: rootMargin, amount = \"some\", once } = viewport;\n        const options = {\n            root: root ? root.current : undefined,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount]\n        };\n        const onIntersectionUpdate = (entry)=>{\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */ if (this.isInView === isIntersecting) return;\n            this.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */ if (once && !isIntersecting && this.hasEnteredView) {\n                return;\n            } else if (isIntersecting) {\n                this.hasEnteredView = true;\n            }\n            if (this.node.animationState) {\n                this.node.animationState.setActive(\"whileInView\", isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */ const { onViewportEnter, onViewportLeave } = this.node.getProps();\n            const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n            callback && callback(entry);\n        };\n        return (0,_observers_mjs__WEBPACK_IMPORTED_MODULE_1__.observeIntersection)(this.node.current, options, onIntersectionUpdate);\n    }\n    mount() {\n        this.startObserver();\n    }\n    update() {\n        if (typeof IntersectionObserver === \"undefined\") return;\n        const { props, prevProps } = this.node;\n        const hasOptionsChanged = [\n            \"amount\",\n            \"margin\",\n            \"root\"\n        ].some(hasViewportOptionChanged(props, prevProps));\n        if (hasOptionsChanged) {\n            this.startObserver();\n        }\n    }\n    unmount() {}\n}\nfunction hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {\n    return (name)=>viewport[name] !== prevViewport[name];\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy92aWV3cG9ydC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXlDO0FBQ2E7QUFFdEQsTUFBTUUsaUJBQWlCO0lBQ25CQyxNQUFNO0lBQ05DLEtBQUs7QUFDVDtBQUNBLE1BQU1DLHNCQUFzQkwsaURBQU9BO0lBQy9CTSxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0MsY0FBYyxHQUFHO1FBQ3RCLElBQUksQ0FBQ0MsUUFBUSxHQUFHO0lBQ3BCO0lBQ0FDLGdCQUFnQjtRQUNaLElBQUksQ0FBQ0MsT0FBTztRQUNaLE1BQU0sRUFBRUMsV0FBVyxDQUFDLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQ0MsSUFBSSxDQUFDQyxRQUFRO1FBQzVDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxRQUFRQyxVQUFVLEVBQUVDLFNBQVMsTUFBTSxFQUFFQyxJQUFJLEVBQUUsR0FBR1A7UUFDNUQsTUFBTVEsVUFBVTtZQUNaTCxNQUFNQSxPQUFPQSxLQUFLTSxPQUFPLEdBQUdDO1lBQzVCTDtZQUNBTSxXQUFXLE9BQU9MLFdBQVcsV0FBV0EsU0FBU2hCLGNBQWMsQ0FBQ2dCLE9BQU87UUFDM0U7UUFDQSxNQUFNTSx1QkFBdUIsQ0FBQ0M7WUFDMUIsTUFBTSxFQUFFQyxjQUFjLEVBQUUsR0FBR0Q7WUFDM0I7O2FBRUMsR0FDRCxJQUFJLElBQUksQ0FBQ2hCLFFBQVEsS0FBS2lCLGdCQUNsQjtZQUNKLElBQUksQ0FBQ2pCLFFBQVEsR0FBR2lCO1lBQ2hCOzs7YUFHQyxHQUNELElBQUlQLFFBQVEsQ0FBQ08sa0JBQWtCLElBQUksQ0FBQ2xCLGNBQWMsRUFBRTtnQkFDaEQ7WUFDSixPQUNLLElBQUlrQixnQkFBZ0I7Z0JBQ3JCLElBQUksQ0FBQ2xCLGNBQWMsR0FBRztZQUMxQjtZQUNBLElBQUksSUFBSSxDQUFDSyxJQUFJLENBQUNjLGNBQWMsRUFBRTtnQkFDMUIsSUFBSSxDQUFDZCxJQUFJLENBQUNjLGNBQWMsQ0FBQ0MsU0FBUyxDQUFDLGVBQWVGO1lBQ3REO1lBQ0E7OzthQUdDLEdBQ0QsTUFBTSxFQUFFRyxlQUFlLEVBQUVDLGVBQWUsRUFBRSxHQUFHLElBQUksQ0FBQ2pCLElBQUksQ0FBQ0MsUUFBUTtZQUMvRCxNQUFNaUIsV0FBV0wsaUJBQWlCRyxrQkFBa0JDO1lBQ3BEQyxZQUFZQSxTQUFTTjtRQUN6QjtRQUNBLE9BQU94QixtRUFBbUJBLENBQUMsSUFBSSxDQUFDWSxJQUFJLENBQUNRLE9BQU8sRUFBRUQsU0FBU0k7SUFDM0Q7SUFDQVEsUUFBUTtRQUNKLElBQUksQ0FBQ3RCLGFBQWE7SUFDdEI7SUFDQXVCLFNBQVM7UUFDTCxJQUFJLE9BQU9DLHlCQUF5QixhQUNoQztRQUNKLE1BQU0sRUFBRUMsS0FBSyxFQUFFQyxTQUFTLEVBQUUsR0FBRyxJQUFJLENBQUN2QixJQUFJO1FBQ3RDLE1BQU13QixvQkFBb0I7WUFBQztZQUFVO1lBQVU7U0FBTyxDQUFDbEMsSUFBSSxDQUFDbUMseUJBQXlCSCxPQUFPQztRQUM1RixJQUFJQyxtQkFBbUI7WUFDbkIsSUFBSSxDQUFDM0IsYUFBYTtRQUN0QjtJQUNKO0lBQ0FDLFVBQVUsQ0FBRTtBQUNoQjtBQUNBLFNBQVMyQix5QkFBeUIsRUFBRTFCLFdBQVcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFQSxVQUFVMkIsZUFBZSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNyRixPQUFPLENBQUNDLE9BQVM1QixRQUFRLENBQUM0QixLQUFLLEtBQUtELFlBQVksQ0FBQ0MsS0FBSztBQUMxRDtBQUV5QiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9tb3Rpb24vZmVhdHVyZXMvdmlld3BvcnQvaW5kZXgubWpzP2I3OGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmVhdHVyZSB9IGZyb20gJy4uL0ZlYXR1cmUubWpzJztcbmltcG9ydCB7IG9ic2VydmVJbnRlcnNlY3Rpb24gfSBmcm9tICcuL29ic2VydmVycy5tanMnO1xuXG5jb25zdCB0aHJlc2hvbGROYW1lcyA9IHtcbiAgICBzb21lOiAwLFxuICAgIGFsbDogMSxcbn07XG5jbGFzcyBJblZpZXdGZWF0dXJlIGV4dGVuZHMgRmVhdHVyZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuaGFzRW50ZXJlZFZpZXcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc0luVmlldyA9IGZhbHNlO1xuICAgIH1cbiAgICBzdGFydE9ic2VydmVyKCkge1xuICAgICAgICB0aGlzLnVubW91bnQoKTtcbiAgICAgICAgY29uc3QgeyB2aWV3cG9ydCA9IHt9IH0gPSB0aGlzLm5vZGUuZ2V0UHJvcHMoKTtcbiAgICAgICAgY29uc3QgeyByb290LCBtYXJnaW46IHJvb3RNYXJnaW4sIGFtb3VudCA9IFwic29tZVwiLCBvbmNlIH0gPSB2aWV3cG9ydDtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHJvb3Q6IHJvb3QgPyByb290LmN1cnJlbnQgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICByb290TWFyZ2luLFxuICAgICAgICAgICAgdGhyZXNob2xkOiB0eXBlb2YgYW1vdW50ID09PSBcIm51bWJlclwiID8gYW1vdW50IDogdGhyZXNob2xkTmFtZXNbYW1vdW50XSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgb25JbnRlcnNlY3Rpb25VcGRhdGUgPSAoZW50cnkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgaXNJbnRlcnNlY3RpbmcgfSA9IGVudHJ5O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGVyZSdzIGJlZW4gbm8gY2hhbmdlIGluIHRoZSB2aWV3cG9ydCBzdGF0ZSwgZWFybHkgcmV0dXJuLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAodGhpcy5pc0luVmlldyA9PT0gaXNJbnRlcnNlY3RpbmcpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5pc0luVmlldyA9IGlzSW50ZXJzZWN0aW5nO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBIYW5kbGUgaGFzRW50ZXJlZFZpZXcuIElmIHRoaXMgaXMgb25seSBtZWFudCB0byBydW4gb25jZSwgYW5kXG4gICAgICAgICAgICAgKiBlbGVtZW50IGlzbid0IHZpc2libGUsIGVhcmx5IHJldHVybi4gT3RoZXJ3aXNlIHNldCBoYXNFbnRlcmVkVmlldyB0byB0cnVlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAob25jZSAmJiAhaXNJbnRlcnNlY3RpbmcgJiYgdGhpcy5oYXNFbnRlcmVkVmlldykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYXNFbnRlcmVkVmlldyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5ub2RlLmFuaW1hdGlvblN0YXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ub2RlLmFuaW1hdGlvblN0YXRlLnNldEFjdGl2ZShcIndoaWxlSW5WaWV3XCIsIGlzSW50ZXJzZWN0aW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVXNlIHRoZSBsYXRlc3QgY29tbWl0dGVkIHByb3BzIHJhdGhlciB0aGFuIHRoZSBvbmVzIGluIHNjb3BlXG4gICAgICAgICAgICAgKiB3aGVuIHRoaXMgb2JzZXJ2ZXIgaXMgY3JlYXRlZFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdCB7IG9uVmlld3BvcnRFbnRlciwgb25WaWV3cG9ydExlYXZlIH0gPSB0aGlzLm5vZGUuZ2V0UHJvcHMoKTtcbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gaXNJbnRlcnNlY3RpbmcgPyBvblZpZXdwb3J0RW50ZXIgOiBvblZpZXdwb3J0TGVhdmU7XG4gICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhlbnRyeSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBvYnNlcnZlSW50ZXJzZWN0aW9uKHRoaXMubm9kZS5jdXJyZW50LCBvcHRpb25zLCBvbkludGVyc2VjdGlvblVwZGF0ZSk7XG4gICAgfVxuICAgIG1vdW50KCkge1xuICAgICAgICB0aGlzLnN0YXJ0T2JzZXJ2ZXIoKTtcbiAgICB9XG4gICAgdXBkYXRlKCkge1xuICAgICAgICBpZiAodHlwZW9mIEludGVyc2VjdGlvbk9ic2VydmVyID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCB7IHByb3BzLCBwcmV2UHJvcHMgfSA9IHRoaXMubm9kZTtcbiAgICAgICAgY29uc3QgaGFzT3B0aW9uc0NoYW5nZWQgPSBbXCJhbW91bnRcIiwgXCJtYXJnaW5cIiwgXCJyb290XCJdLnNvbWUoaGFzVmlld3BvcnRPcHRpb25DaGFuZ2VkKHByb3BzLCBwcmV2UHJvcHMpKTtcbiAgICAgICAgaWYgKGhhc09wdGlvbnNDaGFuZ2VkKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0T2JzZXJ2ZXIoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB1bm1vdW50KCkgeyB9XG59XG5mdW5jdGlvbiBoYXNWaWV3cG9ydE9wdGlvbkNoYW5nZWQoeyB2aWV3cG9ydCA9IHt9IH0sIHsgdmlld3BvcnQ6IHByZXZWaWV3cG9ydCA9IHt9IH0gPSB7fSkge1xuICAgIHJldHVybiAobmFtZSkgPT4gdmlld3BvcnRbbmFtZV0gIT09IHByZXZWaWV3cG9ydFtuYW1lXTtcbn1cblxuZXhwb3J0IHsgSW5WaWV3RmVhdHVyZSB9O1xuIl0sIm5hbWVzIjpbIkZlYXR1cmUiLCJvYnNlcnZlSW50ZXJzZWN0aW9uIiwidGhyZXNob2xkTmFtZXMiLCJzb21lIiwiYWxsIiwiSW5WaWV3RmVhdHVyZSIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwiaGFzRW50ZXJlZFZpZXciLCJpc0luVmlldyIsInN0YXJ0T2JzZXJ2ZXIiLCJ1bm1vdW50Iiwidmlld3BvcnQiLCJub2RlIiwiZ2V0UHJvcHMiLCJyb290IiwibWFyZ2luIiwicm9vdE1hcmdpbiIsImFtb3VudCIsIm9uY2UiLCJvcHRpb25zIiwiY3VycmVudCIsInVuZGVmaW5lZCIsInRocmVzaG9sZCIsIm9uSW50ZXJzZWN0aW9uVXBkYXRlIiwiZW50cnkiLCJpc0ludGVyc2VjdGluZyIsImFuaW1hdGlvblN0YXRlIiwic2V0QWN0aXZlIiwib25WaWV3cG9ydEVudGVyIiwib25WaWV3cG9ydExlYXZlIiwiY2FsbGJhY2siLCJtb3VudCIsInVwZGF0ZSIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwicHJvcHMiLCJwcmV2UHJvcHMiLCJoYXNPcHRpb25zQ2hhbmdlZCIsImhhc1ZpZXdwb3J0T3B0aW9uQ2hhbmdlZCIsInByZXZWaWV3cG9ydCIsIm5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   observeIntersection: () => (/* binding */ observeIntersection)\n/* harmony export */ });\n/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */ const observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */ const observers = new WeakMap();\nconst fireObserverCallback = (entry)=>{\n    const callback = observerCallbacks.get(entry.target);\n    callback && callback(entry);\n};\nconst fireAllObserverCallbacks = (entries)=>{\n    entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver({ root, ...options }) {\n    const lookupRoot = root || document;\n    /**\n     * If we don't have an observer lookup map for this root, create one.\n     */ if (!observers.has(lookupRoot)) {\n        observers.set(lookupRoot, {});\n    }\n    const rootObservers = observers.get(lookupRoot);\n    const key = JSON.stringify(options);\n    /**\n     * If we don't have an observer for this combination of root and settings,\n     * create one.\n     */ if (!rootObservers[key]) {\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, {\n            root,\n            ...options\n        });\n    }\n    return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n    const rootInteresectionObserver = initIntersectionObserver(options);\n    observerCallbacks.set(element, callback);\n    rootInteresectionObserver.observe(element);\n    return ()=>{\n        observerCallbacks.delete(element);\n        rootInteresectionObserver.unobserve(element);\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy92aWV3cG9ydC9vYnNlcnZlcnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7OztDQUlDLEdBQ0QsTUFBTUEsb0JBQW9CLElBQUlDO0FBQzlCOzs7O0NBSUMsR0FDRCxNQUFNQyxZQUFZLElBQUlEO0FBQ3RCLE1BQU1FLHVCQUF1QixDQUFDQztJQUMxQixNQUFNQyxXQUFXTCxrQkFBa0JNLEdBQUcsQ0FBQ0YsTUFBTUcsTUFBTTtJQUNuREYsWUFBWUEsU0FBU0Q7QUFDekI7QUFDQSxNQUFNSSwyQkFBMkIsQ0FBQ0M7SUFDOUJBLFFBQVFDLE9BQU8sQ0FBQ1A7QUFDcEI7QUFDQSxTQUFTUSx5QkFBeUIsRUFBRUMsSUFBSSxFQUFFLEdBQUdDLFNBQVM7SUFDbEQsTUFBTUMsYUFBYUYsUUFBUUc7SUFDM0I7O0tBRUMsR0FDRCxJQUFJLENBQUNiLFVBQVVjLEdBQUcsQ0FBQ0YsYUFBYTtRQUM1QlosVUFBVWUsR0FBRyxDQUFDSCxZQUFZLENBQUM7SUFDL0I7SUFDQSxNQUFNSSxnQkFBZ0JoQixVQUFVSSxHQUFHLENBQUNRO0lBQ3BDLE1BQU1LLE1BQU1DLEtBQUtDLFNBQVMsQ0FBQ1I7SUFDM0I7OztLQUdDLEdBQ0QsSUFBSSxDQUFDSyxhQUFhLENBQUNDLElBQUksRUFBRTtRQUNyQkQsYUFBYSxDQUFDQyxJQUFJLEdBQUcsSUFBSUcscUJBQXFCZCwwQkFBMEI7WUFBRUk7WUFBTSxHQUFHQyxPQUFPO1FBQUM7SUFDL0Y7SUFDQSxPQUFPSyxhQUFhLENBQUNDLElBQUk7QUFDN0I7QUFDQSxTQUFTSSxvQkFBb0JDLE9BQU8sRUFBRVgsT0FBTyxFQUFFUixRQUFRO0lBQ25ELE1BQU1vQiw0QkFBNEJkLHlCQUF5QkU7SUFDM0RiLGtCQUFrQmlCLEdBQUcsQ0FBQ08sU0FBU25CO0lBQy9Cb0IsMEJBQTBCQyxPQUFPLENBQUNGO0lBQ2xDLE9BQU87UUFDSHhCLGtCQUFrQjJCLE1BQU0sQ0FBQ0g7UUFDekJDLDBCQUEwQkcsU0FBUyxDQUFDSjtJQUN4QztBQUNKO0FBRStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy92aWV3cG9ydC9vYnNlcnZlcnMubWpzP2ZiMDUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBNYXAgYW4gSW50ZXJzZWN0aW9uSGFuZGxlciBjYWxsYmFjayB0byBhbiBlbGVtZW50LiBXZSBvbmx5IGV2ZXIgbWFrZSBvbmUgaGFuZGxlciBmb3Igb25lXG4gKiBlbGVtZW50LCBzbyBldmVuIHRob3VnaCB0aGVzZSBoYW5kbGVycyBtaWdodCBhbGwgYmUgdHJpZ2dlcmVkIGJ5IGRpZmZlcmVudFxuICogb2JzZXJ2ZXJzLCB3ZSBjYW4ga2VlcCB0aGVtIGluIHRoZSBzYW1lIG1hcC5cbiAqL1xuY29uc3Qgb2JzZXJ2ZXJDYWxsYmFja3MgPSBuZXcgV2Vha01hcCgpO1xuLyoqXG4gKiBNdWx0aXBsZSBvYnNlcnZlcnMgY2FuIGJlIGNyZWF0ZWQgZm9yIG11bHRpcGxlIGVsZW1lbnQvZG9jdW1lbnQgcm9vdHMuIEVhY2ggd2l0aFxuICogZGlmZmVyZW50IHNldHRpbmdzLiBTbyBoZXJlIHdlIHN0b3JlIGRpY3Rpb25hcmllcyBvZiBvYnNlcnZlcnMgdG8gZWFjaCByb290LFxuICogdXNpbmcgc2VyaWFsaXNlZCBzZXR0aW5ncyAodGhyZXNob2xkL21hcmdpbikgYXMgbG9va3VwIGtleXMuXG4gKi9cbmNvbnN0IG9ic2VydmVycyA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCBmaXJlT2JzZXJ2ZXJDYWxsYmFjayA9IChlbnRyeSkgPT4ge1xuICAgIGNvbnN0IGNhbGxiYWNrID0gb2JzZXJ2ZXJDYWxsYmFja3MuZ2V0KGVudHJ5LnRhcmdldCk7XG4gICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soZW50cnkpO1xufTtcbmNvbnN0IGZpcmVBbGxPYnNlcnZlckNhbGxiYWNrcyA9IChlbnRyaWVzKSA9PiB7XG4gICAgZW50cmllcy5mb3JFYWNoKGZpcmVPYnNlcnZlckNhbGxiYWNrKTtcbn07XG5mdW5jdGlvbiBpbml0SW50ZXJzZWN0aW9uT2JzZXJ2ZXIoeyByb290LCAuLi5vcHRpb25zIH0pIHtcbiAgICBjb25zdCBsb29rdXBSb290ID0gcm9vdCB8fCBkb2N1bWVudDtcbiAgICAvKipcbiAgICAgKiBJZiB3ZSBkb24ndCBoYXZlIGFuIG9ic2VydmVyIGxvb2t1cCBtYXAgZm9yIHRoaXMgcm9vdCwgY3JlYXRlIG9uZS5cbiAgICAgKi9cbiAgICBpZiAoIW9ic2VydmVycy5oYXMobG9va3VwUm9vdCkpIHtcbiAgICAgICAgb2JzZXJ2ZXJzLnNldChsb29rdXBSb290LCB7fSk7XG4gICAgfVxuICAgIGNvbnN0IHJvb3RPYnNlcnZlcnMgPSBvYnNlcnZlcnMuZ2V0KGxvb2t1cFJvb3QpO1xuICAgIGNvbnN0IGtleSA9IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpO1xuICAgIC8qKlxuICAgICAqIElmIHdlIGRvbid0IGhhdmUgYW4gb2JzZXJ2ZXIgZm9yIHRoaXMgY29tYmluYXRpb24gb2Ygcm9vdCBhbmQgc2V0dGluZ3MsXG4gICAgICogY3JlYXRlIG9uZS5cbiAgICAgKi9cbiAgICBpZiAoIXJvb3RPYnNlcnZlcnNba2V5XSkge1xuICAgICAgICByb290T2JzZXJ2ZXJzW2tleV0gPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoZmlyZUFsbE9ic2VydmVyQ2FsbGJhY2tzLCB7IHJvb3QsIC4uLm9wdGlvbnMgfSk7XG4gICAgfVxuICAgIHJldHVybiByb290T2JzZXJ2ZXJzW2tleV07XG59XG5mdW5jdGlvbiBvYnNlcnZlSW50ZXJzZWN0aW9uKGVsZW1lbnQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgY29uc3Qgcm9vdEludGVyZXNlY3Rpb25PYnNlcnZlciA9IGluaXRJbnRlcnNlY3Rpb25PYnNlcnZlcihvcHRpb25zKTtcbiAgICBvYnNlcnZlckNhbGxiYWNrcy5zZXQoZWxlbWVudCwgY2FsbGJhY2spO1xuICAgIHJvb3RJbnRlcmVzZWN0aW9uT2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBvYnNlcnZlckNhbGxiYWNrcy5kZWxldGUoZWxlbWVudCk7XG4gICAgICAgIHJvb3RJbnRlcmVzZWN0aW9uT2JzZXJ2ZXIudW5vYnNlcnZlKGVsZW1lbnQpO1xuICAgIH07XG59XG5cbmV4cG9ydCB7IG9ic2VydmVJbnRlcnNlY3Rpb24gfTtcbiJdLCJuYW1lcyI6WyJvYnNlcnZlckNhbGxiYWNrcyIsIldlYWtNYXAiLCJvYnNlcnZlcnMiLCJmaXJlT2JzZXJ2ZXJDYWxsYmFjayIsImVudHJ5IiwiY2FsbGJhY2siLCJnZXQiLCJ0YXJnZXQiLCJmaXJlQWxsT2JzZXJ2ZXJDYWxsYmFja3MiLCJlbnRyaWVzIiwiZm9yRWFjaCIsImluaXRJbnRlcnNlY3Rpb25PYnNlcnZlciIsInJvb3QiLCJvcHRpb25zIiwibG9va3VwUm9vdCIsImRvY3VtZW50IiwiaGFzIiwic2V0Iiwicm9vdE9ic2VydmVycyIsImtleSIsIkpTT04iLCJzdHJpbmdpZnkiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsIm9ic2VydmVJbnRlcnNlY3Rpb24iLCJlbGVtZW50Iiwicm9vdEludGVyZXNlY3Rpb25PYnNlcnZlciIsIm9ic2VydmUiLCJkZWxldGUiLCJ1bm9ic2VydmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/index.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/index.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createMotionComponent: () => (/* binding */ createMotionComponent)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _context_MotionConfigContext_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../context/MotionConfigContext.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs\");\n/* harmony import */ var _context_MotionContext_index_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../context/MotionContext/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/MotionContext/index.mjs\");\n/* harmony import */ var _utils_use_visual_element_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/use-visual-element.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs\");\n/* harmony import */ var _utils_use_motion_ref_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/use-motion-ref.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs\");\n/* harmony import */ var _context_MotionContext_create_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../context/MotionContext/create.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/MotionContext/create.mjs\");\n/* harmony import */ var _features_load_features_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./features/load-features.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/load-features.mjs\");\n/* harmony import */ var _utils_is_browser_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/is-browser.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/is-browser.mjs\");\n/* harmony import */ var _context_LayoutGroupContext_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../context/LayoutGroupContext.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs\");\n/* harmony import */ var _context_LazyContext_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../context/LazyContext.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/LazyContext.mjs\");\n/* harmony import */ var _context_SwitchLayoutGroupContext_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../context/SwitchLayoutGroupContext.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs\");\n/* harmony import */ var _utils_symbol_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/symbol.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/utils/symbol.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Create a `motion` component.\n *\n * This function accepts a Component argument, which can be either a string (ie \"div\"\n * for `motion.div`), or an actual React component.\n *\n * Alongside this is a config option which provides a way of rendering the provided\n * component \"offline\", or outside the React render cycle.\n */ function createMotionComponent({ preloadedFeatures, createVisualElement, useRender, useVisualState, Component }) {\n    preloadedFeatures && (0,_features_load_features_mjs__WEBPACK_IMPORTED_MODULE_1__.loadFeatures)(preloadedFeatures);\n    function MotionComponent(props, externalRef) {\n        /**\n         * If we need to measure the element we load this functionality in a\n         * separate class component in order to gain access to getSnapshotBeforeUpdate.\n         */ let MeasureLayout;\n        const configAndProps = {\n            ...(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_MotionConfigContext_mjs__WEBPACK_IMPORTED_MODULE_2__.MotionConfigContext),\n            ...props,\n            layoutId: useLayoutId(props)\n        };\n        const { isStatic } = configAndProps;\n        const context = (0,_context_MotionContext_create_mjs__WEBPACK_IMPORTED_MODULE_3__.useCreateMotionContext)(props);\n        const visualState = useVisualState(props, isStatic);\n        if (!isStatic && _utils_is_browser_mjs__WEBPACK_IMPORTED_MODULE_4__.isBrowser) {\n            /**\n             * Create a VisualElement for this component. A VisualElement provides a common\n             * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as\n             * providing a way of rendering to these APIs outside of the React render loop\n             * for more performant animations and interactions\n             */ context.visualElement = (0,_utils_use_visual_element_mjs__WEBPACK_IMPORTED_MODULE_5__.useVisualElement)(Component, visualState, configAndProps, createVisualElement);\n            /**\n             * Load Motion gesture and animation features. These are rendered as renderless\n             * components so each feature can optionally make use of React lifecycle methods.\n             */ const initialLayoutGroupConfig = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_SwitchLayoutGroupContext_mjs__WEBPACK_IMPORTED_MODULE_6__.SwitchLayoutGroupContext);\n            const isStrict = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_LazyContext_mjs__WEBPACK_IMPORTED_MODULE_7__.LazyContext).strict;\n            if (context.visualElement) {\n                MeasureLayout = context.visualElement.loadFeatures(// Note: Pass the full new combined props to correctly re-render dynamic feature components.\n                configAndProps, isStrict, preloadedFeatures, initialLayoutGroupConfig);\n            }\n        }\n        /**\n         * The mount order and hierarchy is specific to ensure our element ref\n         * is hydrated by the time features fire their effects.\n         */ return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_context_MotionContext_index_mjs__WEBPACK_IMPORTED_MODULE_8__.MotionContext.Provider, {\n            value: context\n        }, MeasureLayout && context.visualElement ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MeasureLayout, {\n            visualElement: context.visualElement,\n            ...configAndProps\n        }) : null, useRender(Component, props, (0,_utils_use_motion_ref_mjs__WEBPACK_IMPORTED_MODULE_9__.useMotionRef)(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement));\n    }\n    const ForwardRefComponent = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(MotionComponent);\n    ForwardRefComponent[_utils_symbol_mjs__WEBPACK_IMPORTED_MODULE_10__.motionComponentSymbol] = Component;\n    return ForwardRefComponent;\n}\nfunction useLayoutId({ layoutId }) {\n    const layoutGroupId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_LayoutGroupContext_mjs__WEBPACK_IMPORTED_MODULE_11__.LayoutGroupContext).id;\n    return layoutGroupId && layoutId !== undefined ? layoutGroupId + \"-\" + layoutId : layoutId;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs":
/*!************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isForcedMotionValue: () => (/* binding */ isForcedMotionValue)\n/* harmony export */ });\n/* harmony import */ var _projection_styles_scale_correction_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../projection/styles/scale-correction.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs\");\n/* harmony import */ var _render_html_utils_transform_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../render/html/utils/transform.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/transform.mjs\");\n\n\nfunction isForcedMotionValue(key, { layout, layoutId }) {\n    return _render_html_utils_transform_mjs__WEBPACK_IMPORTED_MODULE_0__.transformProps.has(key) || key.startsWith(\"origin\") || (layout || layoutId !== undefined) && (!!_projection_styles_scale_correction_mjs__WEBPACK_IMPORTED_MODULE_1__.scaleCorrectors[key] || key === \"opacity\");\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi91dGlscy9pcy1mb3JjZWQtbW90aW9uLXZhbHVlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBK0U7QUFDUjtBQUV2RSxTQUFTRSxvQkFBb0JDLEdBQUcsRUFBRSxFQUFFQyxNQUFNLEVBQUVDLFFBQVEsRUFBRTtJQUNsRCxPQUFRSiw0RUFBY0EsQ0FBQ0ssR0FBRyxDQUFDSCxRQUN2QkEsSUFBSUksVUFBVSxDQUFDLGFBQ2QsQ0FBQ0gsVUFBVUMsYUFBYUcsU0FBUSxLQUM1QixFQUFDLENBQUNSLG9GQUFlLENBQUNHLElBQUksSUFBSUEsUUFBUSxTQUFRO0FBQ3ZEO0FBRStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi91dGlscy9pcy1mb3JjZWQtbW90aW9uLXZhbHVlLm1qcz8zOTliIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNjYWxlQ29ycmVjdG9ycyB9IGZyb20gJy4uLy4uL3Byb2plY3Rpb24vc3R5bGVzL3NjYWxlLWNvcnJlY3Rpb24ubWpzJztcbmltcG9ydCB7IHRyYW5zZm9ybVByb3BzIH0gZnJvbSAnLi4vLi4vcmVuZGVyL2h0bWwvdXRpbHMvdHJhbnNmb3JtLm1qcyc7XG5cbmZ1bmN0aW9uIGlzRm9yY2VkTW90aW9uVmFsdWUoa2V5LCB7IGxheW91dCwgbGF5b3V0SWQgfSkge1xuICAgIHJldHVybiAodHJhbnNmb3JtUHJvcHMuaGFzKGtleSkgfHxcbiAgICAgICAga2V5LnN0YXJ0c1dpdGgoXCJvcmlnaW5cIikgfHxcbiAgICAgICAgKChsYXlvdXQgfHwgbGF5b3V0SWQgIT09IHVuZGVmaW5lZCkgJiZcbiAgICAgICAgICAgICghIXNjYWxlQ29ycmVjdG9yc1trZXldIHx8IGtleSA9PT0gXCJvcGFjaXR5XCIpKSk7XG59XG5cbmV4cG9ydCB7IGlzRm9yY2VkTW90aW9uVmFsdWUgfTtcbiJdLCJuYW1lcyI6WyJzY2FsZUNvcnJlY3RvcnMiLCJ0cmFuc2Zvcm1Qcm9wcyIsImlzRm9yY2VkTW90aW9uVmFsdWUiLCJrZXkiLCJsYXlvdXQiLCJsYXlvdXRJZCIsImhhcyIsInN0YXJ0c1dpdGgiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/utils/symbol.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/utils/symbol.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   motionComponentSymbol: () => (/* binding */ motionComponentSymbol)\n/* harmony export */ });\nconst motionComponentSymbol = Symbol.for(\"motionComponentSymbol\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi91dGlscy9zeW1ib2wubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSx3QkFBd0JDLE9BQU9DLEdBQUcsQ0FBQztBQUVSIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi91dGlscy9zeW1ib2wubWpzP2RmYjciXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbW90aW9uQ29tcG9uZW50U3ltYm9sID0gU3ltYm9sLmZvcihcIm1vdGlvbkNvbXBvbmVudFN5bWJvbFwiKTtcblxuZXhwb3J0IHsgbW90aW9uQ29tcG9uZW50U3ltYm9sIH07XG4iXSwibmFtZXMiOlsibW90aW9uQ29tcG9uZW50U3ltYm9sIiwiU3ltYm9sIiwiZm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/utils/symbol.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useMotionRef: () => (/* binding */ useMotionRef)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _utils_is_ref_object_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is-ref-object.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/is-ref-object.mjs\");\n\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */ function useMotionRef(visualState, visualElement, externalRef) {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((instance)=>{\n        instance && visualState.mount && visualState.mount(instance);\n        if (visualElement) {\n            instance ? visualElement.mount(instance) : visualElement.unmount();\n        }\n        if (externalRef) {\n            if (typeof externalRef === \"function\") {\n                externalRef(instance);\n            } else if ((0,_utils_is_ref_object_mjs__WEBPACK_IMPORTED_MODULE_1__.isRefObject)(externalRef)) {\n                externalRef.current = instance;\n            }\n        }\n    }, /**\n     * Only pass a new ref callback to React if we've received a visual element\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\n     * or other dependencies change.\n     */ [\n        visualElement\n    ]);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi91dGlscy91c2UtbW90aW9uLXJlZi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW9DO0FBQ3dCO0FBRTVEOzs7Q0FHQyxHQUNELFNBQVNFLGFBQWFDLFdBQVcsRUFBRUMsYUFBYSxFQUFFQyxXQUFXO0lBQ3pELE9BQU9MLGtEQUFXQSxDQUFDLENBQUNNO1FBQ2hCQSxZQUFZSCxZQUFZSSxLQUFLLElBQUlKLFlBQVlJLEtBQUssQ0FBQ0Q7UUFDbkQsSUFBSUYsZUFBZTtZQUNmRSxXQUNNRixjQUFjRyxLQUFLLENBQUNELFlBQ3BCRixjQUFjSSxPQUFPO1FBQy9CO1FBQ0EsSUFBSUgsYUFBYTtZQUNiLElBQUksT0FBT0EsZ0JBQWdCLFlBQVk7Z0JBQ25DQSxZQUFZQztZQUNoQixPQUNLLElBQUlMLHFFQUFXQSxDQUFDSSxjQUFjO2dCQUMvQkEsWUFBWUksT0FBTyxHQUFHSDtZQUMxQjtRQUNKO0lBQ0osR0FDQTs7OztLQUlDLEdBQ0Q7UUFBQ0Y7S0FBYztBQUNuQjtBQUV3QiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9tb3Rpb24vdXRpbHMvdXNlLW1vdGlvbi1yZWYubWpzPzliOTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc1JlZk9iamVjdCB9IGZyb20gJy4uLy4uL3V0aWxzL2lzLXJlZi1vYmplY3QubWpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgcmVmIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLCBoeWRyYXRlcyB0aGUgcHJvdmlkZWRcbiAqIGV4dGVybmFsIHJlZiBhbmQgVmlzdWFsRWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gdXNlTW90aW9uUmVmKHZpc3VhbFN0YXRlLCB2aXN1YWxFbGVtZW50LCBleHRlcm5hbFJlZikge1xuICAgIHJldHVybiB1c2VDYWxsYmFjaygoaW5zdGFuY2UpID0+IHtcbiAgICAgICAgaW5zdGFuY2UgJiYgdmlzdWFsU3RhdGUubW91bnQgJiYgdmlzdWFsU3RhdGUubW91bnQoaW5zdGFuY2UpO1xuICAgICAgICBpZiAodmlzdWFsRWxlbWVudCkge1xuICAgICAgICAgICAgaW5zdGFuY2VcbiAgICAgICAgICAgICAgICA/IHZpc3VhbEVsZW1lbnQubW91bnQoaW5zdGFuY2UpXG4gICAgICAgICAgICAgICAgOiB2aXN1YWxFbGVtZW50LnVubW91bnQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXh0ZXJuYWxSZWYpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXh0ZXJuYWxSZWYgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIGV4dGVybmFsUmVmKGluc3RhbmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzUmVmT2JqZWN0KGV4dGVybmFsUmVmKSkge1xuICAgICAgICAgICAgICAgIGV4dGVybmFsUmVmLmN1cnJlbnQgPSBpbnN0YW5jZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIFxuICAgIC8qKlxuICAgICAqIE9ubHkgcGFzcyBhIG5ldyByZWYgY2FsbGJhY2sgdG8gUmVhY3QgaWYgd2UndmUgcmVjZWl2ZWQgYSB2aXN1YWwgZWxlbWVudFxuICAgICAqIGZhY3RvcnkuIE90aGVyd2lzZSB3ZSdsbCBiZSBtb3VudGluZy9yZW1vdW50aW5nIGV2ZXJ5IHRpbWUgZXh0ZXJuYWxSZWZcbiAgICAgKiBvciBvdGhlciBkZXBlbmRlbmNpZXMgY2hhbmdlLlxuICAgICAqL1xuICAgIFt2aXN1YWxFbGVtZW50XSk7XG59XG5cbmV4cG9ydCB7IHVzZU1vdGlvblJlZiB9O1xuIl0sIm5hbWVzIjpbInVzZUNhbGxiYWNrIiwiaXNSZWZPYmplY3QiLCJ1c2VNb3Rpb25SZWYiLCJ2aXN1YWxTdGF0ZSIsInZpc3VhbEVsZW1lbnQiLCJleHRlcm5hbFJlZiIsImluc3RhbmNlIiwibW91bnQiLCJ1bm1vdW50IiwiY3VycmVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useVisualElement: () => (/* binding */ useVisualElement)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _context_PresenceContext_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../context/PresenceContext.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/PresenceContext.mjs\");\n/* harmony import */ var _context_MotionContext_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../context/MotionContext/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/MotionContext/index.mjs\");\n/* harmony import */ var _utils_use_isomorphic_effect_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/use-isomorphic-effect.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs\");\n/* harmony import */ var _context_LazyContext_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../context/LazyContext.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/LazyContext.mjs\");\n/* harmony import */ var _context_MotionConfigContext_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../context/MotionConfigContext.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs\");\n/* harmony import */ var _animation_optimized_appear_data_id_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../animation/optimized-appear/data-id.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs\");\n\n\n\n\n\n\n\nfunction useVisualElement(Component, visualState, props, createVisualElement) {\n    const { visualElement: parent } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_MotionContext_index_mjs__WEBPACK_IMPORTED_MODULE_1__.MotionContext);\n    const lazyContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_LazyContext_mjs__WEBPACK_IMPORTED_MODULE_2__.LazyContext);\n    const presenceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_PresenceContext_mjs__WEBPACK_IMPORTED_MODULE_3__.PresenceContext);\n    const reducedMotionConfig = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_MotionConfigContext_mjs__WEBPACK_IMPORTED_MODULE_4__.MotionConfigContext).reducedMotion;\n    const visualElementRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    /**\n     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n     */ createVisualElement = createVisualElement || lazyContext.renderer;\n    if (!visualElementRef.current && createVisualElement) {\n        visualElementRef.current = createVisualElement(Component, {\n            visualState,\n            parent,\n            props,\n            presenceContext,\n            blockInitialAnimation: presenceContext ? presenceContext.initial === false : false,\n            reducedMotionConfig\n        });\n    }\n    const visualElement = visualElementRef.current;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useInsertionEffect)(()=>{\n        visualElement && visualElement.update(props, presenceContext);\n    });\n    /**\n     * Cache this value as we want to know whether HandoffAppearAnimations\n     * was present on initial render - it will be deleted after this.\n     */ const wantsHandoff = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(Boolean(props[_animation_optimized_appear_data_id_mjs__WEBPACK_IMPORTED_MODULE_5__.optimizedAppearDataAttribute] && !window.HandoffComplete));\n    (0,_utils_use_isomorphic_effect_mjs__WEBPACK_IMPORTED_MODULE_6__.useIsomorphicLayoutEffect)(()=>{\n        if (!visualElement) return;\n        visualElement.render();\n        /**\n         * Ideally this function would always run in a useEffect.\n         *\n         * However, if we have optimised appear animations to handoff from,\n         * it needs to happen synchronously to ensure there's no flash of\n         * incorrect styles in the event of a hydration error.\n         *\n         * So if we detect a situtation where optimised appear animations\n         * are running, we use useLayoutEffect to trigger animations.\n         */ if (wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!visualElement) return;\n        visualElement.updateFeatures();\n        if (!wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n        if (wantsHandoff.current) {\n            wantsHandoff.current = false;\n            // This ensures all future calls to animateChanges() will run in useEffect\n            window.HandoffComplete = true;\n        }\n    });\n    return visualElement;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi91dGlscy91c2UtdmlzdWFsLWVsZW1lbnQubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQTBFO0FBQ047QUFDRTtBQUNZO0FBQ3RCO0FBQ2dCO0FBQ2dCO0FBRTVGLFNBQVNVLGlCQUFpQkMsU0FBUyxFQUFFQyxXQUFXLEVBQUVDLEtBQUssRUFBRUMsbUJBQW1CO0lBQ3hFLE1BQU0sRUFBRUMsZUFBZUMsTUFBTSxFQUFFLEdBQUdoQixpREFBVUEsQ0FBQ0ssMkVBQWFBO0lBQzFELE1BQU1ZLGNBQWNqQixpREFBVUEsQ0FBQ08saUVBQVdBO0lBQzFDLE1BQU1XLGtCQUFrQmxCLGlEQUFVQSxDQUFDSSx5RUFBZUE7SUFDbEQsTUFBTWUsc0JBQXNCbkIsaURBQVVBLENBQUNRLGlGQUFtQkEsRUFBRVksYUFBYTtJQUN6RSxNQUFNQyxtQkFBbUJwQiw2Q0FBTUE7SUFDL0I7O0tBRUMsR0FDRGEsc0JBQXNCQSx1QkFBdUJHLFlBQVlLLFFBQVE7SUFDakUsSUFBSSxDQUFDRCxpQkFBaUJFLE9BQU8sSUFBSVQscUJBQXFCO1FBQ2xETyxpQkFBaUJFLE9BQU8sR0FBR1Qsb0JBQW9CSCxXQUFXO1lBQ3REQztZQUNBSTtZQUNBSDtZQUNBSztZQUNBTSx1QkFBdUJOLGtCQUNqQkEsZ0JBQWdCTyxPQUFPLEtBQUssUUFDNUI7WUFDTk47UUFDSjtJQUNKO0lBQ0EsTUFBTUosZ0JBQWdCTSxpQkFBaUJFLE9BQU87SUFDOUNyQix5REFBa0JBLENBQUM7UUFDZmEsaUJBQWlCQSxjQUFjVyxNQUFNLENBQUNiLE9BQU9LO0lBQ2pEO0lBQ0E7OztLQUdDLEdBQ0QsTUFBTVMsZUFBZTFCLDZDQUFNQSxDQUFDMkIsUUFBUWYsS0FBSyxDQUFDSixpR0FBNEJBLENBQUMsSUFBSSxDQUFDb0IsT0FBT0MsZUFBZTtJQUNsR3hCLDJGQUF5QkEsQ0FBQztRQUN0QixJQUFJLENBQUNTLGVBQ0Q7UUFDSkEsY0FBY2dCLE1BQU07UUFDcEI7Ozs7Ozs7OztTQVNDLEdBQ0QsSUFBSUosYUFBYUosT0FBTyxJQUFJUixjQUFjaUIsY0FBYyxFQUFFO1lBQ3REakIsY0FBY2lCLGNBQWMsQ0FBQ0MsY0FBYztRQUMvQztJQUNKO0lBQ0E5QixnREFBU0EsQ0FBQztRQUNOLElBQUksQ0FBQ1ksZUFDRDtRQUNKQSxjQUFjbUIsY0FBYztRQUM1QixJQUFJLENBQUNQLGFBQWFKLE9BQU8sSUFBSVIsY0FBY2lCLGNBQWMsRUFBRTtZQUN2RGpCLGNBQWNpQixjQUFjLENBQUNDLGNBQWM7UUFDL0M7UUFDQSxJQUFJTixhQUFhSixPQUFPLEVBQUU7WUFDdEJJLGFBQWFKLE9BQU8sR0FBRztZQUN2QiwwRUFBMEU7WUFDMUVNLE9BQU9DLGVBQWUsR0FBRztRQUM3QjtJQUNKO0lBQ0EsT0FBT2Y7QUFDWDtBQUU0QiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9tb3Rpb24vdXRpbHMvdXNlLXZpc3VhbC1lbGVtZW50Lm1qcz9kYzQ1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUNvbnRleHQsIHVzZVJlZiwgdXNlSW5zZXJ0aW9uRWZmZWN0LCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBQcmVzZW5jZUNvbnRleHQgfSBmcm9tICcuLi8uLi9jb250ZXh0L1ByZXNlbmNlQ29udGV4dC5tanMnO1xuaW1wb3J0IHsgTW90aW9uQ29udGV4dCB9IGZyb20gJy4uLy4uL2NvbnRleHQvTW90aW9uQ29udGV4dC9pbmRleC5tanMnO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uLy4uL3V0aWxzL3VzZS1pc29tb3JwaGljLWVmZmVjdC5tanMnO1xuaW1wb3J0IHsgTGF6eUNvbnRleHQgfSBmcm9tICcuLi8uLi9jb250ZXh0L0xhenlDb250ZXh0Lm1qcyc7XG5pbXBvcnQgeyBNb3Rpb25Db25maWdDb250ZXh0IH0gZnJvbSAnLi4vLi4vY29udGV4dC9Nb3Rpb25Db25maWdDb250ZXh0Lm1qcyc7XG5pbXBvcnQgeyBvcHRpbWl6ZWRBcHBlYXJEYXRhQXR0cmlidXRlIH0gZnJvbSAnLi4vLi4vYW5pbWF0aW9uL29wdGltaXplZC1hcHBlYXIvZGF0YS1pZC5tanMnO1xuXG5mdW5jdGlvbiB1c2VWaXN1YWxFbGVtZW50KENvbXBvbmVudCwgdmlzdWFsU3RhdGUsIHByb3BzLCBjcmVhdGVWaXN1YWxFbGVtZW50KSB7XG4gICAgY29uc3QgeyB2aXN1YWxFbGVtZW50OiBwYXJlbnQgfSA9IHVzZUNvbnRleHQoTW90aW9uQ29udGV4dCk7XG4gICAgY29uc3QgbGF6eUNvbnRleHQgPSB1c2VDb250ZXh0KExhenlDb250ZXh0KTtcbiAgICBjb25zdCBwcmVzZW5jZUNvbnRleHQgPSB1c2VDb250ZXh0KFByZXNlbmNlQ29udGV4dCk7XG4gICAgY29uc3QgcmVkdWNlZE1vdGlvbkNvbmZpZyA9IHVzZUNvbnRleHQoTW90aW9uQ29uZmlnQ29udGV4dCkucmVkdWNlZE1vdGlvbjtcbiAgICBjb25zdCB2aXN1YWxFbGVtZW50UmVmID0gdXNlUmVmKCk7XG4gICAgLyoqXG4gICAgICogSWYgd2UgaGF2ZW4ndCBwcmVsb2FkZWQgYSByZW5kZXJlciwgY2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgb25lIGxhenktbG9hZGVkXG4gICAgICovXG4gICAgY3JlYXRlVmlzdWFsRWxlbWVudCA9IGNyZWF0ZVZpc3VhbEVsZW1lbnQgfHwgbGF6eUNvbnRleHQucmVuZGVyZXI7XG4gICAgaWYgKCF2aXN1YWxFbGVtZW50UmVmLmN1cnJlbnQgJiYgY3JlYXRlVmlzdWFsRWxlbWVudCkge1xuICAgICAgICB2aXN1YWxFbGVtZW50UmVmLmN1cnJlbnQgPSBjcmVhdGVWaXN1YWxFbGVtZW50KENvbXBvbmVudCwge1xuICAgICAgICAgICAgdmlzdWFsU3RhdGUsXG4gICAgICAgICAgICBwYXJlbnQsXG4gICAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICAgIHByZXNlbmNlQ29udGV4dCxcbiAgICAgICAgICAgIGJsb2NrSW5pdGlhbEFuaW1hdGlvbjogcHJlc2VuY2VDb250ZXh0XG4gICAgICAgICAgICAgICAgPyBwcmVzZW5jZUNvbnRleHQuaW5pdGlhbCA9PT0gZmFsc2VcbiAgICAgICAgICAgICAgICA6IGZhbHNlLFxuICAgICAgICAgICAgcmVkdWNlZE1vdGlvbkNvbmZpZyxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IHZpc3VhbEVsZW1lbnQgPSB2aXN1YWxFbGVtZW50UmVmLmN1cnJlbnQ7XG4gICAgdXNlSW5zZXJ0aW9uRWZmZWN0KCgpID0+IHtcbiAgICAgICAgdmlzdWFsRWxlbWVudCAmJiB2aXN1YWxFbGVtZW50LnVwZGF0ZShwcm9wcywgcHJlc2VuY2VDb250ZXh0KTtcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBDYWNoZSB0aGlzIHZhbHVlIGFzIHdlIHdhbnQgdG8ga25vdyB3aGV0aGVyIEhhbmRvZmZBcHBlYXJBbmltYXRpb25zXG4gICAgICogd2FzIHByZXNlbnQgb24gaW5pdGlhbCByZW5kZXIgLSBpdCB3aWxsIGJlIGRlbGV0ZWQgYWZ0ZXIgdGhpcy5cbiAgICAgKi9cbiAgICBjb25zdCB3YW50c0hhbmRvZmYgPSB1c2VSZWYoQm9vbGVhbihwcm9wc1tvcHRpbWl6ZWRBcHBlYXJEYXRhQXR0cmlidXRlXSAmJiAhd2luZG93LkhhbmRvZmZDb21wbGV0ZSkpO1xuICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIXZpc3VhbEVsZW1lbnQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZpc3VhbEVsZW1lbnQucmVuZGVyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZGVhbGx5IHRoaXMgZnVuY3Rpb24gd291bGQgYWx3YXlzIHJ1biBpbiBhIHVzZUVmZmVjdC5cbiAgICAgICAgICpcbiAgICAgICAgICogSG93ZXZlciwgaWYgd2UgaGF2ZSBvcHRpbWlzZWQgYXBwZWFyIGFuaW1hdGlvbnMgdG8gaGFuZG9mZiBmcm9tLFxuICAgICAgICAgKiBpdCBuZWVkcyB0byBoYXBwZW4gc3luY2hyb25vdXNseSB0byBlbnN1cmUgdGhlcmUncyBubyBmbGFzaCBvZlxuICAgICAgICAgKiBpbmNvcnJlY3Qgc3R5bGVzIGluIHRoZSBldmVudCBvZiBhIGh5ZHJhdGlvbiBlcnJvci5cbiAgICAgICAgICpcbiAgICAgICAgICogU28gaWYgd2UgZGV0ZWN0IGEgc2l0dXRhdGlvbiB3aGVyZSBvcHRpbWlzZWQgYXBwZWFyIGFuaW1hdGlvbnNcbiAgICAgICAgICogYXJlIHJ1bm5pbmcsIHdlIHVzZSB1c2VMYXlvdXRFZmZlY3QgdG8gdHJpZ2dlciBhbmltYXRpb25zLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHdhbnRzSGFuZG9mZi5jdXJyZW50ICYmIHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUpIHtcbiAgICAgICAgICAgIHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUuYW5pbWF0ZUNoYW5nZXMoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICghdmlzdWFsRWxlbWVudClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmlzdWFsRWxlbWVudC51cGRhdGVGZWF0dXJlcygpO1xuICAgICAgICBpZiAoIXdhbnRzSGFuZG9mZi5jdXJyZW50ICYmIHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUpIHtcbiAgICAgICAgICAgIHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUuYW5pbWF0ZUNoYW5nZXMoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAod2FudHNIYW5kb2ZmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHdhbnRzSGFuZG9mZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAvLyBUaGlzIGVuc3VyZXMgYWxsIGZ1dHVyZSBjYWxscyB0byBhbmltYXRlQ2hhbmdlcygpIHdpbGwgcnVuIGluIHVzZUVmZmVjdFxuICAgICAgICAgICAgd2luZG93LkhhbmRvZmZDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdmlzdWFsRWxlbWVudDtcbn1cblxuZXhwb3J0IHsgdXNlVmlzdWFsRWxlbWVudCB9O1xuIl0sIm5hbWVzIjpbInVzZUNvbnRleHQiLCJ1c2VSZWYiLCJ1c2VJbnNlcnRpb25FZmZlY3QiLCJ1c2VFZmZlY3QiLCJQcmVzZW5jZUNvbnRleHQiLCJNb3Rpb25Db250ZXh0IiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsIkxhenlDb250ZXh0IiwiTW90aW9uQ29uZmlnQ29udGV4dCIsIm9wdGltaXplZEFwcGVhckRhdGFBdHRyaWJ1dGUiLCJ1c2VWaXN1YWxFbGVtZW50IiwiQ29tcG9uZW50IiwidmlzdWFsU3RhdGUiLCJwcm9wcyIsImNyZWF0ZVZpc3VhbEVsZW1lbnQiLCJ2aXN1YWxFbGVtZW50IiwicGFyZW50IiwibGF6eUNvbnRleHQiLCJwcmVzZW5jZUNvbnRleHQiLCJyZWR1Y2VkTW90aW9uQ29uZmlnIiwicmVkdWNlZE1vdGlvbiIsInZpc3VhbEVsZW1lbnRSZWYiLCJyZW5kZXJlciIsImN1cnJlbnQiLCJibG9ja0luaXRpYWxBbmltYXRpb24iLCJpbml0aWFsIiwidXBkYXRlIiwid2FudHNIYW5kb2ZmIiwiQm9vbGVhbiIsIndpbmRvdyIsIkhhbmRvZmZDb21wbGV0ZSIsInJlbmRlciIsImFuaW1hdGlvblN0YXRlIiwiYW5pbWF0ZUNoYW5nZXMiLCJ1cGRhdGVGZWF0dXJlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeUseVisualState: () => (/* binding */ makeUseVisualState)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _animation_utils_is_animation_controls_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../animation/utils/is-animation-controls.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs\");\n/* harmony import */ var _context_PresenceContext_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../context/PresenceContext.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/PresenceContext.mjs\");\n/* harmony import */ var _render_utils_resolve_variants_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../render/utils/resolve-variants.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs\");\n/* harmony import */ var _utils_use_constant_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/use-constant.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-constant.mjs\");\n/* harmony import */ var _value_utils_resolve_motion_value_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../value/utils/resolve-motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs\");\n/* harmony import */ var _context_MotionContext_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../context/MotionContext/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/MotionContext/index.mjs\");\n/* harmony import */ var _render_utils_is_controlling_variants_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../render/utils/is-controlling-variants.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs\");\n\n\n\n\n\n\n\n\nfunction makeState({ scrapeMotionValuesFromProps, createRenderState, onMount }, props, context, presenceContext) {\n    const state = {\n        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n        renderState: createRenderState()\n    };\n    if (onMount) {\n        state.mount = (instance)=>onMount(props, instance, state);\n    }\n    return state;\n}\nconst makeUseVisualState = (config)=>(props, isStatic)=>{\n        const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_MotionContext_index_mjs__WEBPACK_IMPORTED_MODULE_1__.MotionContext);\n        const presenceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_PresenceContext_mjs__WEBPACK_IMPORTED_MODULE_2__.PresenceContext);\n        const make = ()=>makeState(config, props, context, presenceContext);\n        return isStatic ? make() : (0,_utils_use_constant_mjs__WEBPACK_IMPORTED_MODULE_3__.useConstant)(make);\n    };\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n    const values = {};\n    const motionValues = scrapeMotionValues(props, {});\n    for(const key in motionValues){\n        values[key] = (0,_value_utils_resolve_motion_value_mjs__WEBPACK_IMPORTED_MODULE_4__.resolveMotionValue)(motionValues[key]);\n    }\n    let { initial, animate } = props;\n    const isControllingVariants$1 = (0,_render_utils_is_controlling_variants_mjs__WEBPACK_IMPORTED_MODULE_5__.isControllingVariants)(props);\n    const isVariantNode$1 = (0,_render_utils_is_controlling_variants_mjs__WEBPACK_IMPORTED_MODULE_5__.isVariantNode)(props);\n    if (context && isVariantNode$1 && !isControllingVariants$1 && props.inherit !== false) {\n        if (initial === undefined) initial = context.initial;\n        if (animate === undefined) animate = context.animate;\n    }\n    let isInitialAnimationBlocked = presenceContext ? presenceContext.initial === false : false;\n    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n    const variantToSet = isInitialAnimationBlocked ? animate : initial;\n    if (variantToSet && typeof variantToSet !== \"boolean\" && !(0,_animation_utils_is_animation_controls_mjs__WEBPACK_IMPORTED_MODULE_6__.isAnimationControls)(variantToSet)) {\n        const list = Array.isArray(variantToSet) ? variantToSet : [\n            variantToSet\n        ];\n        list.forEach((definition)=>{\n            const resolved = (0,_render_utils_resolve_variants_mjs__WEBPACK_IMPORTED_MODULE_7__.resolveVariantFromProps)(props, definition);\n            if (!resolved) return;\n            const { transitionEnd, transition, ...target } = resolved;\n            for(const key in target){\n                let valueTarget = target[key];\n                if (Array.isArray(valueTarget)) {\n                    /**\n                     * Take final keyframe if the initial animation is blocked because\n                     * we want to initialise at the end of that blocked animation.\n                     */ const index = isInitialAnimationBlocked ? valueTarget.length - 1 : 0;\n                    valueTarget = valueTarget[index];\n                }\n                if (valueTarget !== null) {\n                    values[key] = valueTarget;\n                }\n            }\n            for(const key in transitionEnd)values[key] = transitionEnd[key];\n        });\n    }\n    return values;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isValidMotionProp: () => (/* binding */ isValidMotionProp)\n/* harmony export */ });\n/**\n * A list of all valid MotionProps.\n *\n * @privateRemarks\n * This doesn't throw if a `MotionProp` name is missing - it should.\n */ const validMotionProps = new Set([\n    \"animate\",\n    \"exit\",\n    \"variants\",\n    \"initial\",\n    \"style\",\n    \"values\",\n    \"variants\",\n    \"transition\",\n    \"transformTemplate\",\n    \"transformValues\",\n    \"custom\",\n    \"inherit\",\n    \"onLayoutAnimationStart\",\n    \"onLayoutAnimationComplete\",\n    \"onLayoutMeasure\",\n    \"onBeforeLayoutMeasure\",\n    \"onAnimationStart\",\n    \"onAnimationComplete\",\n    \"onUpdate\",\n    \"onDragStart\",\n    \"onDrag\",\n    \"onDragEnd\",\n    \"onMeasureDragConstraints\",\n    \"onDirectionLock\",\n    \"onDragTransitionEnd\",\n    \"_dragX\",\n    \"_dragY\",\n    \"onHoverStart\",\n    \"onHoverEnd\",\n    \"onViewportEnter\",\n    \"onViewportLeave\",\n    \"ignoreStrict\",\n    \"viewport\"\n]);\n/**\n * Check whether a prop name is a valid `MotionProp` key.\n *\n * @param key - Name of the property to check\n * @returns `true` is key is a valid `MotionProp`.\n *\n * @public\n */ function isValidMotionProp(key) {\n    return key.startsWith(\"while\") || key.startsWith(\"drag\") && key !== \"draggable\" || key.startsWith(\"layout\") || key.startsWith(\"onTap\") || key.startsWith(\"onPan\") || validMotionProps.has(key);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi91dGlscy92YWxpZC1wcm9wLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7O0NBS0MsR0FDRCxNQUFNQSxtQkFBbUIsSUFBSUMsSUFBSTtJQUM3QjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDSDtBQUNEOzs7Ozs7O0NBT0MsR0FDRCxTQUFTQyxrQkFBa0JDLEdBQUc7SUFDMUIsT0FBUUEsSUFBSUMsVUFBVSxDQUFDLFlBQ2xCRCxJQUFJQyxVQUFVLENBQUMsV0FBV0QsUUFBUSxlQUNuQ0EsSUFBSUMsVUFBVSxDQUFDLGFBQ2ZELElBQUlDLFVBQVUsQ0FBQyxZQUNmRCxJQUFJQyxVQUFVLENBQUMsWUFDZkosaUJBQWlCSyxHQUFHLENBQUNGO0FBQzdCO0FBRTZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi91dGlscy92YWxpZC1wcm9wLm1qcz8xYmRkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBsaXN0IG9mIGFsbCB2YWxpZCBNb3Rpb25Qcm9wcy5cbiAqXG4gKiBAcHJpdmF0ZVJlbWFya3NcbiAqIFRoaXMgZG9lc24ndCB0aHJvdyBpZiBhIGBNb3Rpb25Qcm9wYCBuYW1lIGlzIG1pc3NpbmcgLSBpdCBzaG91bGQuXG4gKi9cbmNvbnN0IHZhbGlkTW90aW9uUHJvcHMgPSBuZXcgU2V0KFtcbiAgICBcImFuaW1hdGVcIixcbiAgICBcImV4aXRcIixcbiAgICBcInZhcmlhbnRzXCIsXG4gICAgXCJpbml0aWFsXCIsXG4gICAgXCJzdHlsZVwiLFxuICAgIFwidmFsdWVzXCIsXG4gICAgXCJ2YXJpYW50c1wiLFxuICAgIFwidHJhbnNpdGlvblwiLFxuICAgIFwidHJhbnNmb3JtVGVtcGxhdGVcIixcbiAgICBcInRyYW5zZm9ybVZhbHVlc1wiLFxuICAgIFwiY3VzdG9tXCIsXG4gICAgXCJpbmhlcml0XCIsXG4gICAgXCJvbkxheW91dEFuaW1hdGlvblN0YXJ0XCIsXG4gICAgXCJvbkxheW91dEFuaW1hdGlvbkNvbXBsZXRlXCIsXG4gICAgXCJvbkxheW91dE1lYXN1cmVcIixcbiAgICBcIm9uQmVmb3JlTGF5b3V0TWVhc3VyZVwiLFxuICAgIFwib25BbmltYXRpb25TdGFydFwiLFxuICAgIFwib25BbmltYXRpb25Db21wbGV0ZVwiLFxuICAgIFwib25VcGRhdGVcIixcbiAgICBcIm9uRHJhZ1N0YXJ0XCIsXG4gICAgXCJvbkRyYWdcIixcbiAgICBcIm9uRHJhZ0VuZFwiLFxuICAgIFwib25NZWFzdXJlRHJhZ0NvbnN0cmFpbnRzXCIsXG4gICAgXCJvbkRpcmVjdGlvbkxvY2tcIixcbiAgICBcIm9uRHJhZ1RyYW5zaXRpb25FbmRcIixcbiAgICBcIl9kcmFnWFwiLFxuICAgIFwiX2RyYWdZXCIsXG4gICAgXCJvbkhvdmVyU3RhcnRcIixcbiAgICBcIm9uSG92ZXJFbmRcIixcbiAgICBcIm9uVmlld3BvcnRFbnRlclwiLFxuICAgIFwib25WaWV3cG9ydExlYXZlXCIsXG4gICAgXCJpZ25vcmVTdHJpY3RcIixcbiAgICBcInZpZXdwb3J0XCIsXG5dKTtcbi8qKlxuICogQ2hlY2sgd2hldGhlciBhIHByb3AgbmFtZSBpcyBhIHZhbGlkIGBNb3Rpb25Qcm9wYCBrZXkuXG4gKlxuICogQHBhcmFtIGtleSAtIE5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIGNoZWNrXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaXMga2V5IGlzIGEgdmFsaWQgYE1vdGlvblByb3BgLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gaXNWYWxpZE1vdGlvblByb3Aoa2V5KSB7XG4gICAgcmV0dXJuIChrZXkuc3RhcnRzV2l0aChcIndoaWxlXCIpIHx8XG4gICAgICAgIChrZXkuc3RhcnRzV2l0aChcImRyYWdcIikgJiYga2V5ICE9PSBcImRyYWdnYWJsZVwiKSB8fFxuICAgICAgICBrZXkuc3RhcnRzV2l0aChcImxheW91dFwiKSB8fFxuICAgICAgICBrZXkuc3RhcnRzV2l0aChcIm9uVGFwXCIpIHx8XG4gICAgICAgIGtleS5zdGFydHNXaXRoKFwib25QYW5cIikgfHxcbiAgICAgICAgdmFsaWRNb3Rpb25Qcm9wcy5oYXMoa2V5KSk7XG59XG5cbmV4cG9ydCB7IGlzVmFsaWRNb3Rpb25Qcm9wIH07XG4iXSwibmFtZXMiOlsidmFsaWRNb3Rpb25Qcm9wcyIsIlNldCIsImlzVmFsaWRNb3Rpb25Qcm9wIiwia2V5Iiwic3RhcnRzV2l0aCIsImhhcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mixValues: () => (/* binding */ mixValues)\n/* harmony export */ });\n/* harmony import */ var _easing_circ_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../easing/circ.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/easing/circ.mjs\");\n/* harmony import */ var _utils_progress_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/progress.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/progress.mjs\");\n/* harmony import */ var _utils_mix_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/mix.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/mix.mjs\");\n/* harmony import */ var _utils_noop_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/noop.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/noop.mjs\");\n/* harmony import */ var _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../value/types/numbers/units.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/numbers/units.mjs\");\n\n\n\n\n\nconst borders = [\n    \"TopLeft\",\n    \"TopRight\",\n    \"BottomLeft\",\n    \"BottomRight\"\n];\nconst numBorders = borders.length;\nconst asNumber = (value)=>typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value)=>typeof value === \"number\" || _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = (0,_utils_mix_mjs__WEBPACK_IMPORTED_MODULE_1__.mix)(0, // TODO Reinstate this if only child\n        lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));\n        target.opacityExit = (0,_utils_mix_mjs__WEBPACK_IMPORTED_MODULE_1__.mix)(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));\n    } else if (isOnlyMember) {\n        target.opacity = (0,_utils_mix_mjs__WEBPACK_IMPORTED_MODULE_1__.mix)(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);\n    }\n    /**\n     * Mix border radius\n     */ for(let i = 0; i < numBorders; i++){\n        const borderLabel = `border${borders[i]}Radius`;\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined) continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 || leadRadius === 0 || isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max((0,_utils_mix_mjs__WEBPACK_IMPORTED_MODULE_1__.mix)(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (_value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.percent.test(leadRadius) || _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        } else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */ if (follow.rotate || lead.rotate) {\n        target.rotate = (0,_utils_mix_mjs__WEBPACK_IMPORTED_MODULE_1__.mix)(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined ? values[radiusName] : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = compress(0, 0.5, _easing_circ_mjs__WEBPACK_IMPORTED_MODULE_2__.circOut);\nconst easeCrossfadeOut = compress(0.5, 0.95, _utils_noop_mjs__WEBPACK_IMPORTED_MODULE_3__.noop);\nfunction compress(min, max, easing) {\n    return (p)=>{\n        // Could replace ifs with clamp\n        if (p < min) return 0;\n        if (p > max) return 1;\n        return easing((0,_utils_progress_mjs__WEBPACK_IMPORTED_MODULE_4__.progress)(min, max, p));\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertBoundingBoxToBox: () => (/* binding */ convertBoundingBoxToBox),\n/* harmony export */   convertBoxToBoundingBox: () => (/* binding */ convertBoxToBoundingBox),\n/* harmony export */   transformBoxPoints: () => (/* binding */ transformBoxPoints)\n/* harmony export */ });\n/**\n * Bounding boxes tend to be defined as top, left, right, bottom. For various operations\n * it's easier to consider each axis individually. This function returns a bounding box\n * as a map of single-axis min/max values.\n */ function convertBoundingBoxToBox({ top, left, right, bottom }) {\n    return {\n        x: {\n            min: left,\n            max: right\n        },\n        y: {\n            min: top,\n            max: bottom\n        }\n    };\n}\nfunction convertBoxToBoundingBox({ x, y }) {\n    return {\n        top: y.min,\n        right: x.max,\n        bottom: y.max,\n        left: x.min\n    };\n}\n/**\n * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function\n * provided by Framer to allow measured points to be corrected for device scaling. This is used\n * when measuring DOM elements and DOM event points.\n */ function transformBoxPoints(point, transformPoint) {\n    if (!transformPoint) return point;\n    const topLeft = transformPoint({\n        x: point.left,\n        y: point.top\n    });\n    const bottomRight = transformPoint({\n        x: point.right,\n        y: point.bottom\n    });\n    return {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvY29udmVyc2lvbi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7Q0FJQyxHQUNELFNBQVNBLHdCQUF3QixFQUFFQyxHQUFHLEVBQUVDLElBQUksRUFBRUMsS0FBSyxFQUFFQyxNQUFNLEVBQUc7SUFDMUQsT0FBTztRQUNIQyxHQUFHO1lBQUVDLEtBQUtKO1lBQU1LLEtBQUtKO1FBQU07UUFDM0JLLEdBQUc7WUFBRUYsS0FBS0w7WUFBS00sS0FBS0g7UUFBTztJQUMvQjtBQUNKO0FBQ0EsU0FBU0ssd0JBQXdCLEVBQUVKLENBQUMsRUFBRUcsQ0FBQyxFQUFFO0lBQ3JDLE9BQU87UUFBRVAsS0FBS08sRUFBRUYsR0FBRztRQUFFSCxPQUFPRSxFQUFFRSxHQUFHO1FBQUVILFFBQVFJLEVBQUVELEdBQUc7UUFBRUwsTUFBTUcsRUFBRUMsR0FBRztJQUFDO0FBQ2xFO0FBQ0E7Ozs7Q0FJQyxHQUNELFNBQVNJLG1CQUFtQkMsS0FBSyxFQUFFQyxjQUFjO0lBQzdDLElBQUksQ0FBQ0EsZ0JBQ0QsT0FBT0Q7SUFDWCxNQUFNRSxVQUFVRCxlQUFlO1FBQUVQLEdBQUdNLE1BQU1ULElBQUk7UUFBRU0sR0FBR0csTUFBTVYsR0FBRztJQUFDO0lBQzdELE1BQU1hLGNBQWNGLGVBQWU7UUFBRVAsR0FBR00sTUFBTVIsS0FBSztRQUFFSyxHQUFHRyxNQUFNUCxNQUFNO0lBQUM7SUFDckUsT0FBTztRQUNISCxLQUFLWSxRQUFRTCxDQUFDO1FBQ2ROLE1BQU1XLFFBQVFSLENBQUM7UUFDZkQsUUFBUVUsWUFBWU4sQ0FBQztRQUNyQkwsT0FBT1csWUFBWVQsQ0FBQztJQUN4QjtBQUNKO0FBRWdGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvY29udmVyc2lvbi5tanM/NGQ2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEJvdW5kaW5nIGJveGVzIHRlbmQgdG8gYmUgZGVmaW5lZCBhcyB0b3AsIGxlZnQsIHJpZ2h0LCBib3R0b20uIEZvciB2YXJpb3VzIG9wZXJhdGlvbnNcbiAqIGl0J3MgZWFzaWVyIHRvIGNvbnNpZGVyIGVhY2ggYXhpcyBpbmRpdmlkdWFsbHkuIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIGJvdW5kaW5nIGJveFxuICogYXMgYSBtYXAgb2Ygc2luZ2xlLWF4aXMgbWluL21heCB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRCb3VuZGluZ0JveFRvQm94KHsgdG9wLCBsZWZ0LCByaWdodCwgYm90dG9tLCB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogeyBtaW46IGxlZnQsIG1heDogcmlnaHQgfSxcbiAgICAgICAgeTogeyBtaW46IHRvcCwgbWF4OiBib3R0b20gfSxcbiAgICB9O1xufVxuZnVuY3Rpb24gY29udmVydEJveFRvQm91bmRpbmdCb3goeyB4LCB5IH0pIHtcbiAgICByZXR1cm4geyB0b3A6IHkubWluLCByaWdodDogeC5tYXgsIGJvdHRvbTogeS5tYXgsIGxlZnQ6IHgubWluIH07XG59XG4vKipcbiAqIEFwcGxpZXMgYSBUcmFuc2Zvcm1Qb2ludCBmdW5jdGlvbiB0byBhIGJvdW5kaW5nIGJveC4gVHJhbnNmb3JtUG9pbnQgaXMgdXN1YWxseSBhIGZ1bmN0aW9uXG4gKiBwcm92aWRlZCBieSBGcmFtZXIgdG8gYWxsb3cgbWVhc3VyZWQgcG9pbnRzIHRvIGJlIGNvcnJlY3RlZCBmb3IgZGV2aWNlIHNjYWxpbmcuIFRoaXMgaXMgdXNlZFxuICogd2hlbiBtZWFzdXJpbmcgRE9NIGVsZW1lbnRzIGFuZCBET00gZXZlbnQgcG9pbnRzLlxuICovXG5mdW5jdGlvbiB0cmFuc2Zvcm1Cb3hQb2ludHMocG9pbnQsIHRyYW5zZm9ybVBvaW50KSB7XG4gICAgaWYgKCF0cmFuc2Zvcm1Qb2ludClcbiAgICAgICAgcmV0dXJuIHBvaW50O1xuICAgIGNvbnN0IHRvcExlZnQgPSB0cmFuc2Zvcm1Qb2ludCh7IHg6IHBvaW50LmxlZnQsIHk6IHBvaW50LnRvcCB9KTtcbiAgICBjb25zdCBib3R0b21SaWdodCA9IHRyYW5zZm9ybVBvaW50KHsgeDogcG9pbnQucmlnaHQsIHk6IHBvaW50LmJvdHRvbSB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IHRvcExlZnQueSxcbiAgICAgICAgbGVmdDogdG9wTGVmdC54LFxuICAgICAgICBib3R0b206IGJvdHRvbVJpZ2h0LnksXG4gICAgICAgIHJpZ2h0OiBib3R0b21SaWdodC54LFxuICAgIH07XG59XG5cbmV4cG9ydCB7IGNvbnZlcnRCb3VuZGluZ0JveFRvQm94LCBjb252ZXJ0Qm94VG9Cb3VuZGluZ0JveCwgdHJhbnNmb3JtQm94UG9pbnRzIH07XG4iXSwibmFtZXMiOlsiY29udmVydEJvdW5kaW5nQm94VG9Cb3giLCJ0b3AiLCJsZWZ0IiwicmlnaHQiLCJib3R0b20iLCJ4IiwibWluIiwibWF4IiwieSIsImNvbnZlcnRCb3hUb0JvdW5kaW5nQm94IiwidHJhbnNmb3JtQm94UG9pbnRzIiwicG9pbnQiLCJ0cmFuc2Zvcm1Qb2ludCIsInRvcExlZnQiLCJib3R0b21SaWdodCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/copy.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/geometry/copy.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   copyAxisInto: () => (/* binding */ copyAxisInto),\n/* harmony export */   copyBoxInto: () => (/* binding */ copyBoxInto)\n/* harmony export */ });\n/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */ function copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */ function copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvY29weS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7OztDQUlDLEdBQ0QsU0FBU0EsYUFBYUMsSUFBSSxFQUFFQyxVQUFVO0lBQ2xDRCxLQUFLRSxHQUFHLEdBQUdELFdBQVdDLEdBQUc7SUFDekJGLEtBQUtHLEdBQUcsR0FBR0YsV0FBV0UsR0FBRztBQUM3QjtBQUNBOzs7O0NBSUMsR0FDRCxTQUFTQyxZQUFZQyxHQUFHLEVBQUVDLFNBQVM7SUFDL0JQLGFBQWFNLElBQUlFLENBQUMsRUFBRUQsVUFBVUMsQ0FBQztJQUMvQlIsYUFBYU0sSUFBSUcsQ0FBQyxFQUFFRixVQUFVRSxDQUFDO0FBQ25DO0FBRXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvY29weS5tanM/YzQ3MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJlc2V0IGFuIGF4aXMgdG8gdGhlIHByb3ZpZGVkIG9yaWdpbiBib3guXG4gKlxuICogVGhpcyBpcyBhIG11dGF0aXZlIG9wZXJhdGlvbi5cbiAqL1xuZnVuY3Rpb24gY29weUF4aXNJbnRvKGF4aXMsIG9yaWdpbkF4aXMpIHtcbiAgICBheGlzLm1pbiA9IG9yaWdpbkF4aXMubWluO1xuICAgIGF4aXMubWF4ID0gb3JpZ2luQXhpcy5tYXg7XG59XG4vKipcbiAqIFJlc2V0IGEgYm94IHRvIHRoZSBwcm92aWRlZCBvcmlnaW4gYm94LlxuICpcbiAqIFRoaXMgaXMgYSBtdXRhdGl2ZSBvcGVyYXRpb24uXG4gKi9cbmZ1bmN0aW9uIGNvcHlCb3hJbnRvKGJveCwgb3JpZ2luQm94KSB7XG4gICAgY29weUF4aXNJbnRvKGJveC54LCBvcmlnaW5Cb3gueCk7XG4gICAgY29weUF4aXNJbnRvKGJveC55LCBvcmlnaW5Cb3gueSk7XG59XG5cbmV4cG9ydCB7IGNvcHlBeGlzSW50bywgY29weUJveEludG8gfTtcbiJdLCJuYW1lcyI6WyJjb3B5QXhpc0ludG8iLCJheGlzIiwib3JpZ2luQXhpcyIsIm1pbiIsIm1heCIsImNvcHlCb3hJbnRvIiwiYm94Iiwib3JpZ2luQm94IiwieCIsInkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/copy.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyAxisDelta: () => (/* binding */ applyAxisDelta),\n/* harmony export */   applyBoxDelta: () => (/* binding */ applyBoxDelta),\n/* harmony export */   applyPointDelta: () => (/* binding */ applyPointDelta),\n/* harmony export */   applyTreeDeltas: () => (/* binding */ applyTreeDeltas),\n/* harmony export */   scalePoint: () => (/* binding */ scalePoint),\n/* harmony export */   transformAxis: () => (/* binding */ transformAxis),\n/* harmony export */   transformBox: () => (/* binding */ transformBox),\n/* harmony export */   translateAxis: () => (/* binding */ translateAxis)\n/* harmony export */ });\n/* harmony import */ var _utils_mix_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/mix.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/mix.mjs\");\n/* harmony import */ var _utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/has-transform.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs\");\n\n\n/**\n * Scales a point based on a factor and an originPoint\n */ function scalePoint(point, scale, originPoint) {\n    const distanceFromOrigin = point - originPoint;\n    const scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */ function applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */ function applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */ function applyBoxDelta(box, { x, y }) {\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */ function applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {\n    const treeLength = treePath.length;\n    if (!treeLength) return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    let node;\n    let delta;\n    for(let i = 0; i < treeLength; i++){\n        node = treePath[i];\n        delta = node.projectionDelta;\n        /**\n         * TODO: Prefer to remove this, but currently we have motion components with\n         * display: contents in Framer.\n         */ const instance = node.instance;\n        if (instance && instance.style && instance.style.display === \"contents\") {\n            continue;\n        }\n        if (isSharedTransition && node.options.layoutScroll && node.scroll && node !== node.root) {\n            transformBox(box, {\n                x: -node.scroll.offset.x,\n                y: -node.scroll.offset.y\n            });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && (0,_utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_0__.hasTransform)(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n    /**\n     * Snap tree scale back to 1 if it's within a non-perceivable threshold.\n     * This will help reduce useless scales getting rendered.\n     */ treeScale.x = snapToDefault(treeScale.x);\n    treeScale.y = snapToDefault(treeScale.y);\n}\nfunction snapToDefault(scale) {\n    if (Number.isInteger(scale)) return scale;\n    return scale > 1.0000000000001 || scale < 0.999999999999 ? scale : 1;\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */ function transformAxis(axis, transforms, [key, scaleKey, originKey]) {\n    const axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;\n    const originPoint = (0,_utils_mix_mjs__WEBPACK_IMPORTED_MODULE_1__.mix)(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */ const xKeys = [\n    \"x\",\n    \"scaleX\",\n    \"originX\"\n];\nconst yKeys = [\n    \"y\",\n    \"scaleY\",\n    \"originY\"\n];\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */ function transformBox(box, transform) {\n    transformAxis(box.x, transform, xKeys);\n    transformAxis(box.y, transform, yKeys);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calcAxisDelta: () => (/* binding */ calcAxisDelta),\n/* harmony export */   calcBoxDelta: () => (/* binding */ calcBoxDelta),\n/* harmony export */   calcLength: () => (/* binding */ calcLength),\n/* harmony export */   calcRelativeAxis: () => (/* binding */ calcRelativeAxis),\n/* harmony export */   calcRelativeAxisPosition: () => (/* binding */ calcRelativeAxisPosition),\n/* harmony export */   calcRelativeBox: () => (/* binding */ calcRelativeBox),\n/* harmony export */   calcRelativePosition: () => (/* binding */ calcRelativePosition),\n/* harmony export */   isNear: () => (/* binding */ isNear)\n/* harmony export */ });\n/* harmony import */ var _utils_mix_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/mix.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/mix.mjs\");\n\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target = 0, maxDistance = 0.01) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n    delta.origin = origin;\n    delta.originPoint = (0,_utils_mix_mjs__WEBPACK_IMPORTED_MODULE_0__.mix)(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    if (isNear(delta.scale, 1, 0.0001) || isNaN(delta.scale)) delta.scale = 1;\n    delta.translate = (0,_utils_mix_mjs__WEBPACK_IMPORTED_MODULE_0__.mix)(target.min, target.max, delta.origin) - delta.originPoint;\n    if (isNear(delta.translate) || isNaN(delta.translate)) delta.translate = 0;\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);\n    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvZGVsdGEtY2FsYy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQTBDO0FBRTFDLFNBQVNDLFdBQVdDLElBQUk7SUFDcEIsT0FBT0EsS0FBS0MsR0FBRyxHQUFHRCxLQUFLRSxHQUFHO0FBQzlCO0FBQ0EsU0FBU0MsT0FBT0MsS0FBSyxFQUFFQyxTQUFTLENBQUMsRUFBRUMsY0FBYyxJQUFJO0lBQ2pELE9BQU9DLEtBQUtDLEdBQUcsQ0FBQ0osUUFBUUMsV0FBV0M7QUFDdkM7QUFDQSxTQUFTRyxjQUFjQyxLQUFLLEVBQUVDLE1BQU0sRUFBRU4sTUFBTSxFQUFFTyxTQUFTLEdBQUc7SUFDdERGLE1BQU1FLE1BQU0sR0FBR0E7SUFDZkYsTUFBTUcsV0FBVyxHQUFHZixtREFBR0EsQ0FBQ2EsT0FBT1QsR0FBRyxFQUFFUyxPQUFPVixHQUFHLEVBQUVTLE1BQU1FLE1BQU07SUFDNURGLE1BQU1JLEtBQUssR0FBR2YsV0FBV00sVUFBVU4sV0FBV1k7SUFDOUMsSUFBSVIsT0FBT08sTUFBTUksS0FBSyxFQUFFLEdBQUcsV0FBV0MsTUFBTUwsTUFBTUksS0FBSyxHQUNuREosTUFBTUksS0FBSyxHQUFHO0lBQ2xCSixNQUFNTSxTQUFTLEdBQ1hsQixtREFBR0EsQ0FBQ08sT0FBT0gsR0FBRyxFQUFFRyxPQUFPSixHQUFHLEVBQUVTLE1BQU1FLE1BQU0sSUFBSUYsTUFBTUcsV0FBVztJQUNqRSxJQUFJVixPQUFPTyxNQUFNTSxTQUFTLEtBQUtELE1BQU1MLE1BQU1NLFNBQVMsR0FDaEROLE1BQU1NLFNBQVMsR0FBRztBQUMxQjtBQUNBLFNBQVNDLGFBQWFQLEtBQUssRUFBRUMsTUFBTSxFQUFFTixNQUFNLEVBQUVPLE1BQU07SUFDL0NILGNBQWNDLE1BQU1RLENBQUMsRUFBRVAsT0FBT08sQ0FBQyxFQUFFYixPQUFPYSxDQUFDLEVBQUVOLFNBQVNBLE9BQU9PLE9BQU8sR0FBR0M7SUFDckVYLGNBQWNDLE1BQU1XLENBQUMsRUFBRVYsT0FBT1UsQ0FBQyxFQUFFaEIsT0FBT2dCLENBQUMsRUFBRVQsU0FBU0EsT0FBT1UsT0FBTyxHQUFHRjtBQUN6RTtBQUNBLFNBQVNHLGlCQUFpQmxCLE1BQU0sRUFBRW1CLFFBQVEsRUFBRUMsTUFBTTtJQUM5Q3BCLE9BQU9ILEdBQUcsR0FBR3VCLE9BQU92QixHQUFHLEdBQUdzQixTQUFTdEIsR0FBRztJQUN0Q0csT0FBT0osR0FBRyxHQUFHSSxPQUFPSCxHQUFHLEdBQUdILFdBQVd5QjtBQUN6QztBQUNBLFNBQVNFLGdCQUFnQnJCLE1BQU0sRUFBRW1CLFFBQVEsRUFBRUMsTUFBTTtJQUM3Q0YsaUJBQWlCbEIsT0FBT2EsQ0FBQyxFQUFFTSxTQUFTTixDQUFDLEVBQUVPLE9BQU9QLENBQUM7SUFDL0NLLGlCQUFpQmxCLE9BQU9nQixDQUFDLEVBQUVHLFNBQVNILENBQUMsRUFBRUksT0FBT0osQ0FBQztBQUNuRDtBQUNBLFNBQVNNLHlCQUF5QnRCLE1BQU0sRUFBRXVCLE1BQU0sRUFBRUgsTUFBTTtJQUNwRHBCLE9BQU9ILEdBQUcsR0FBRzBCLE9BQU8xQixHQUFHLEdBQUd1QixPQUFPdkIsR0FBRztJQUNwQ0csT0FBT0osR0FBRyxHQUFHSSxPQUFPSCxHQUFHLEdBQUdILFdBQVc2QjtBQUN6QztBQUNBLFNBQVNDLHFCQUFxQnhCLE1BQU0sRUFBRXVCLE1BQU0sRUFBRUgsTUFBTTtJQUNoREUseUJBQXlCdEIsT0FBT2EsQ0FBQyxFQUFFVSxPQUFPVixDQUFDLEVBQUVPLE9BQU9QLENBQUM7SUFDckRTLHlCQUF5QnRCLE9BQU9nQixDQUFDLEVBQUVPLE9BQU9QLENBQUMsRUFBRUksT0FBT0osQ0FBQztBQUN6RDtBQUU4SSIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL2dlb21ldHJ5L2RlbHRhLWNhbGMubWpzPzk3YTQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWl4IH0gZnJvbSAnLi4vLi4vdXRpbHMvbWl4Lm1qcyc7XG5cbmZ1bmN0aW9uIGNhbGNMZW5ndGgoYXhpcykge1xuICAgIHJldHVybiBheGlzLm1heCAtIGF4aXMubWluO1xufVxuZnVuY3Rpb24gaXNOZWFyKHZhbHVlLCB0YXJnZXQgPSAwLCBtYXhEaXN0YW5jZSA9IDAuMDEpIHtcbiAgICByZXR1cm4gTWF0aC5hYnModmFsdWUgLSB0YXJnZXQpIDw9IG1heERpc3RhbmNlO1xufVxuZnVuY3Rpb24gY2FsY0F4aXNEZWx0YShkZWx0YSwgc291cmNlLCB0YXJnZXQsIG9yaWdpbiA9IDAuNSkge1xuICAgIGRlbHRhLm9yaWdpbiA9IG9yaWdpbjtcbiAgICBkZWx0YS5vcmlnaW5Qb2ludCA9IG1peChzb3VyY2UubWluLCBzb3VyY2UubWF4LCBkZWx0YS5vcmlnaW4pO1xuICAgIGRlbHRhLnNjYWxlID0gY2FsY0xlbmd0aCh0YXJnZXQpIC8gY2FsY0xlbmd0aChzb3VyY2UpO1xuICAgIGlmIChpc05lYXIoZGVsdGEuc2NhbGUsIDEsIDAuMDAwMSkgfHwgaXNOYU4oZGVsdGEuc2NhbGUpKVxuICAgICAgICBkZWx0YS5zY2FsZSA9IDE7XG4gICAgZGVsdGEudHJhbnNsYXRlID1cbiAgICAgICAgbWl4KHRhcmdldC5taW4sIHRhcmdldC5tYXgsIGRlbHRhLm9yaWdpbikgLSBkZWx0YS5vcmlnaW5Qb2ludDtcbiAgICBpZiAoaXNOZWFyKGRlbHRhLnRyYW5zbGF0ZSkgfHwgaXNOYU4oZGVsdGEudHJhbnNsYXRlKSlcbiAgICAgICAgZGVsdGEudHJhbnNsYXRlID0gMDtcbn1cbmZ1bmN0aW9uIGNhbGNCb3hEZWx0YShkZWx0YSwgc291cmNlLCB0YXJnZXQsIG9yaWdpbikge1xuICAgIGNhbGNBeGlzRGVsdGEoZGVsdGEueCwgc291cmNlLngsIHRhcmdldC54LCBvcmlnaW4gPyBvcmlnaW4ub3JpZ2luWCA6IHVuZGVmaW5lZCk7XG4gICAgY2FsY0F4aXNEZWx0YShkZWx0YS55LCBzb3VyY2UueSwgdGFyZ2V0LnksIG9yaWdpbiA/IG9yaWdpbi5vcmlnaW5ZIDogdW5kZWZpbmVkKTtcbn1cbmZ1bmN0aW9uIGNhbGNSZWxhdGl2ZUF4aXModGFyZ2V0LCByZWxhdGl2ZSwgcGFyZW50KSB7XG4gICAgdGFyZ2V0Lm1pbiA9IHBhcmVudC5taW4gKyByZWxhdGl2ZS5taW47XG4gICAgdGFyZ2V0Lm1heCA9IHRhcmdldC5taW4gKyBjYWxjTGVuZ3RoKHJlbGF0aXZlKTtcbn1cbmZ1bmN0aW9uIGNhbGNSZWxhdGl2ZUJveCh0YXJnZXQsIHJlbGF0aXZlLCBwYXJlbnQpIHtcbiAgICBjYWxjUmVsYXRpdmVBeGlzKHRhcmdldC54LCByZWxhdGl2ZS54LCBwYXJlbnQueCk7XG4gICAgY2FsY1JlbGF0aXZlQXhpcyh0YXJnZXQueSwgcmVsYXRpdmUueSwgcGFyZW50LnkpO1xufVxuZnVuY3Rpb24gY2FsY1JlbGF0aXZlQXhpc1Bvc2l0aW9uKHRhcmdldCwgbGF5b3V0LCBwYXJlbnQpIHtcbiAgICB0YXJnZXQubWluID0gbGF5b3V0Lm1pbiAtIHBhcmVudC5taW47XG4gICAgdGFyZ2V0Lm1heCA9IHRhcmdldC5taW4gKyBjYWxjTGVuZ3RoKGxheW91dCk7XG59XG5mdW5jdGlvbiBjYWxjUmVsYXRpdmVQb3NpdGlvbih0YXJnZXQsIGxheW91dCwgcGFyZW50KSB7XG4gICAgY2FsY1JlbGF0aXZlQXhpc1Bvc2l0aW9uKHRhcmdldC54LCBsYXlvdXQueCwgcGFyZW50LngpO1xuICAgIGNhbGNSZWxhdGl2ZUF4aXNQb3NpdGlvbih0YXJnZXQueSwgbGF5b3V0LnksIHBhcmVudC55KTtcbn1cblxuZXhwb3J0IHsgY2FsY0F4aXNEZWx0YSwgY2FsY0JveERlbHRhLCBjYWxjTGVuZ3RoLCBjYWxjUmVsYXRpdmVBeGlzLCBjYWxjUmVsYXRpdmVBeGlzUG9zaXRpb24sIGNhbGNSZWxhdGl2ZUJveCwgY2FsY1JlbGF0aXZlUG9zaXRpb24sIGlzTmVhciB9O1xuIl0sIm5hbWVzIjpbIm1peCIsImNhbGNMZW5ndGgiLCJheGlzIiwibWF4IiwibWluIiwiaXNOZWFyIiwidmFsdWUiLCJ0YXJnZXQiLCJtYXhEaXN0YW5jZSIsIk1hdGgiLCJhYnMiLCJjYWxjQXhpc0RlbHRhIiwiZGVsdGEiLCJzb3VyY2UiLCJvcmlnaW4iLCJvcmlnaW5Qb2ludCIsInNjYWxlIiwiaXNOYU4iLCJ0cmFuc2xhdGUiLCJjYWxjQm94RGVsdGEiLCJ4Iiwib3JpZ2luWCIsInVuZGVmaW5lZCIsInkiLCJvcmlnaW5ZIiwiY2FsY1JlbGF0aXZlQXhpcyIsInJlbGF0aXZlIiwicGFyZW50IiwiY2FsY1JlbGF0aXZlQm94IiwiY2FsY1JlbGF0aXZlQXhpc1Bvc2l0aW9uIiwibGF5b3V0IiwiY2FsY1JlbGF0aXZlUG9zaXRpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   removeAxisDelta: () => (/* binding */ removeAxisDelta),\n/* harmony export */   removeAxisTransforms: () => (/* binding */ removeAxisTransforms),\n/* harmony export */   removeBoxTransforms: () => (/* binding */ removeBoxTransforms),\n/* harmony export */   removePointDelta: () => (/* binding */ removePointDelta)\n/* harmony export */ });\n/* harmony import */ var _utils_mix_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/mix.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/mix.mjs\");\n/* harmony import */ var _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../value/types/numbers/units.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/numbers/units.mjs\");\n/* harmony import */ var _delta_apply_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./delta-apply.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs\");\n\n\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */ function removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = (0,_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_0__.scalePoint)(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = (0,_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_0__.scalePoint)(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */ function removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (_value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_1__.percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = (0,_utils_mix_mjs__WEBPACK_IMPORTED_MODULE_2__.mix)(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\") return;\n    let originPoint = (0,_utils_mix_mjs__WEBPACK_IMPORTED_MODULE_2__.mix)(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis) originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */ function removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */ const xKeys = [\n    \"x\",\n    \"scaleX\",\n    \"originX\"\n];\nconst yKeys = [\n    \"y\",\n    \"scaleY\",\n    \"originY\"\n];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */ function removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvZGVsdGEtcmVtb3ZlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQTBDO0FBQ29CO0FBQ2Y7QUFFL0M7O0NBRUMsR0FDRCxTQUFTRyxpQkFBaUJDLEtBQUssRUFBRUMsU0FBUyxFQUFFQyxLQUFLLEVBQUVDLFdBQVcsRUFBRUMsUUFBUTtJQUNwRUosU0FBU0M7SUFDVEQsUUFBUUYsNERBQVVBLENBQUNFLE9BQU8sSUFBSUUsT0FBT0M7SUFDckMsSUFBSUMsYUFBYUMsV0FBVztRQUN4QkwsUUFBUUYsNERBQVVBLENBQUNFLE9BQU8sSUFBSUksVUFBVUQ7SUFDNUM7SUFDQSxPQUFPSDtBQUNYO0FBQ0E7O0NBRUMsR0FDRCxTQUFTTSxnQkFBZ0JDLElBQUksRUFBRU4sWUFBWSxDQUFDLEVBQUVDLFFBQVEsQ0FBQyxFQUFFTSxTQUFTLEdBQUcsRUFBRUosUUFBUSxFQUFFSyxhQUFhRixJQUFJLEVBQUVHLGFBQWFILElBQUk7SUFDakgsSUFBSVYsbUVBQU9BLENBQUNjLElBQUksQ0FBQ1YsWUFBWTtRQUN6QkEsWUFBWVcsV0FBV1g7UUFDdkIsTUFBTVksbUJBQW1CakIsbURBQUdBLENBQUNjLFdBQVdJLEdBQUcsRUFBRUosV0FBV0ssR0FBRyxFQUFFZCxZQUFZO1FBQ3pFQSxZQUFZWSxtQkFBbUJILFdBQVdJLEdBQUc7SUFDakQ7SUFDQSxJQUFJLE9BQU9iLGNBQWMsVUFDckI7SUFDSixJQUFJRSxjQUFjUCxtREFBR0EsQ0FBQ2EsV0FBV0ssR0FBRyxFQUFFTCxXQUFXTSxHQUFHLEVBQUVQO0lBQ3RELElBQUlELFNBQVNFLFlBQ1ROLGVBQWVGO0lBQ25CTSxLQUFLTyxHQUFHLEdBQUdmLGlCQUFpQlEsS0FBS08sR0FBRyxFQUFFYixXQUFXQyxPQUFPQyxhQUFhQztJQUNyRUcsS0FBS1EsR0FBRyxHQUFHaEIsaUJBQWlCUSxLQUFLUSxHQUFHLEVBQUVkLFdBQVdDLE9BQU9DLGFBQWFDO0FBQ3pFO0FBQ0E7OztDQUdDLEdBQ0QsU0FBU1kscUJBQXFCVCxJQUFJLEVBQUVVLFVBQVUsRUFBRSxDQUFDQyxLQUFLQyxVQUFVQyxVQUFVLEVBQUVaLE1BQU0sRUFBRUUsVUFBVTtJQUMxRkosZ0JBQWdCQyxNQUFNVSxVQUFVLENBQUNDLElBQUksRUFBRUQsVUFBVSxDQUFDRSxTQUFTLEVBQUVGLFVBQVUsQ0FBQ0csVUFBVSxFQUFFSCxXQUFXZixLQUFLLEVBQUVNLFFBQVFFO0FBQ2xIO0FBQ0E7O0NBRUMsR0FDRCxNQUFNVyxRQUFRO0lBQUM7SUFBSztJQUFVO0NBQVU7QUFDeEMsTUFBTUMsUUFBUTtJQUFDO0lBQUs7SUFBVTtDQUFVO0FBQ3hDOzs7Q0FHQyxHQUNELFNBQVNDLG9CQUFvQkMsR0FBRyxFQUFFUCxVQUFVLEVBQUVRLFNBQVMsRUFBRUMsU0FBUztJQUM5RFYscUJBQXFCUSxJQUFJRyxDQUFDLEVBQUVWLFlBQVlJLE9BQU9JLFlBQVlBLFVBQVVFLENBQUMsR0FBR3RCLFdBQVdxQixZQUFZQSxVQUFVQyxDQUFDLEdBQUd0QjtJQUM5R1cscUJBQXFCUSxJQUFJSSxDQUFDLEVBQUVYLFlBQVlLLE9BQU9HLFlBQVlBLFVBQVVHLENBQUMsR0FBR3ZCLFdBQVdxQixZQUFZQSxVQUFVRSxDQUFDLEdBQUd2QjtBQUNsSDtBQUV3RiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL2dlb21ldHJ5L2RlbHRhLXJlbW92ZS5tanM/NDBlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtaXggfSBmcm9tICcuLi8uLi91dGlscy9taXgubWpzJztcbmltcG9ydCB7IHBlcmNlbnQgfSBmcm9tICcuLi8uLi92YWx1ZS90eXBlcy9udW1iZXJzL3VuaXRzLm1qcyc7XG5pbXBvcnQgeyBzY2FsZVBvaW50IH0gZnJvbSAnLi9kZWx0YS1hcHBseS5tanMnO1xuXG4vKipcbiAqIFJlbW92ZSBhIGRlbHRhIGZyb20gYSBwb2ludC4gVGhpcyBpcyBlc3NlbnRpYWxseSB0aGUgc3RlcHMgb2YgYXBwbHlQb2ludERlbHRhIGluIHJldmVyc2VcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlUG9pbnREZWx0YShwb2ludCwgdHJhbnNsYXRlLCBzY2FsZSwgb3JpZ2luUG9pbnQsIGJveFNjYWxlKSB7XG4gICAgcG9pbnQgLT0gdHJhbnNsYXRlO1xuICAgIHBvaW50ID0gc2NhbGVQb2ludChwb2ludCwgMSAvIHNjYWxlLCBvcmlnaW5Qb2ludCk7XG4gICAgaWYgKGJveFNjYWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcG9pbnQgPSBzY2FsZVBvaW50KHBvaW50LCAxIC8gYm94U2NhbGUsIG9yaWdpblBvaW50KTtcbiAgICB9XG4gICAgcmV0dXJuIHBvaW50O1xufVxuLyoqXG4gKiBSZW1vdmUgYSBkZWx0YSBmcm9tIGFuIGF4aXMuIFRoaXMgaXMgZXNzZW50aWFsbHkgdGhlIHN0ZXBzIG9mIGFwcGx5QXhpc0RlbHRhIGluIHJldmVyc2VcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQXhpc0RlbHRhKGF4aXMsIHRyYW5zbGF0ZSA9IDAsIHNjYWxlID0gMSwgb3JpZ2luID0gMC41LCBib3hTY2FsZSwgb3JpZ2luQXhpcyA9IGF4aXMsIHNvdXJjZUF4aXMgPSBheGlzKSB7XG4gICAgaWYgKHBlcmNlbnQudGVzdCh0cmFuc2xhdGUpKSB7XG4gICAgICAgIHRyYW5zbGF0ZSA9IHBhcnNlRmxvYXQodHJhbnNsYXRlKTtcbiAgICAgICAgY29uc3QgcmVsYXRpdmVQcm9ncmVzcyA9IG1peChzb3VyY2VBeGlzLm1pbiwgc291cmNlQXhpcy5tYXgsIHRyYW5zbGF0ZSAvIDEwMCk7XG4gICAgICAgIHRyYW5zbGF0ZSA9IHJlbGF0aXZlUHJvZ3Jlc3MgLSBzb3VyY2VBeGlzLm1pbjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB0cmFuc2xhdGUgIT09IFwibnVtYmVyXCIpXG4gICAgICAgIHJldHVybjtcbiAgICBsZXQgb3JpZ2luUG9pbnQgPSBtaXgob3JpZ2luQXhpcy5taW4sIG9yaWdpbkF4aXMubWF4LCBvcmlnaW4pO1xuICAgIGlmIChheGlzID09PSBvcmlnaW5BeGlzKVxuICAgICAgICBvcmlnaW5Qb2ludCAtPSB0cmFuc2xhdGU7XG4gICAgYXhpcy5taW4gPSByZW1vdmVQb2ludERlbHRhKGF4aXMubWluLCB0cmFuc2xhdGUsIHNjYWxlLCBvcmlnaW5Qb2ludCwgYm94U2NhbGUpO1xuICAgIGF4aXMubWF4ID0gcmVtb3ZlUG9pbnREZWx0YShheGlzLm1heCwgdHJhbnNsYXRlLCBzY2FsZSwgb3JpZ2luUG9pbnQsIGJveFNjYWxlKTtcbn1cbi8qKlxuICogUmVtb3ZlIGEgdHJhbnNmb3JtcyBmcm9tIGFuIGF4aXMuIFRoaXMgaXMgZXNzZW50aWFsbHkgdGhlIHN0ZXBzIG9mIGFwcGx5QXhpc1RyYW5zZm9ybXMgaW4gcmV2ZXJzZVxuICogYW5kIGFjdHMgYXMgYSBicmlkZ2UgYmV0d2VlbiBtb3Rpb24gdmFsdWVzIGFuZCByZW1vdmVBeGlzRGVsdGFcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQXhpc1RyYW5zZm9ybXMoYXhpcywgdHJhbnNmb3JtcywgW2tleSwgc2NhbGVLZXksIG9yaWdpbktleV0sIG9yaWdpbiwgc291cmNlQXhpcykge1xuICAgIHJlbW92ZUF4aXNEZWx0YShheGlzLCB0cmFuc2Zvcm1zW2tleV0sIHRyYW5zZm9ybXNbc2NhbGVLZXldLCB0cmFuc2Zvcm1zW29yaWdpbktleV0sIHRyYW5zZm9ybXMuc2NhbGUsIG9yaWdpbiwgc291cmNlQXhpcyk7XG59XG4vKipcbiAqIFRoZSBuYW1lcyBvZiB0aGUgbW90aW9uIHZhbHVlcyB3ZSB3YW50IHRvIGFwcGx5IGFzIHRyYW5zbGF0aW9uLCBzY2FsZSBhbmQgb3JpZ2luLlxuICovXG5jb25zdCB4S2V5cyA9IFtcInhcIiwgXCJzY2FsZVhcIiwgXCJvcmlnaW5YXCJdO1xuY29uc3QgeUtleXMgPSBbXCJ5XCIsIFwic2NhbGVZXCIsIFwib3JpZ2luWVwiXTtcbi8qKlxuICogUmVtb3ZlIGEgdHJhbnNmb3JtcyBmcm9tIGFuIGJveC4gVGhpcyBpcyBlc3NlbnRpYWxseSB0aGUgc3RlcHMgb2YgYXBwbHlBeGlzQm94IGluIHJldmVyc2VcbiAqIGFuZCBhY3RzIGFzIGEgYnJpZGdlIGJldHdlZW4gbW90aW9uIHZhbHVlcyBhbmQgcmVtb3ZlQXhpc0RlbHRhXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUJveFRyYW5zZm9ybXMoYm94LCB0cmFuc2Zvcm1zLCBvcmlnaW5Cb3gsIHNvdXJjZUJveCkge1xuICAgIHJlbW92ZUF4aXNUcmFuc2Zvcm1zKGJveC54LCB0cmFuc2Zvcm1zLCB4S2V5cywgb3JpZ2luQm94ID8gb3JpZ2luQm94LnggOiB1bmRlZmluZWQsIHNvdXJjZUJveCA/IHNvdXJjZUJveC54IDogdW5kZWZpbmVkKTtcbiAgICByZW1vdmVBeGlzVHJhbnNmb3Jtcyhib3gueSwgdHJhbnNmb3JtcywgeUtleXMsIG9yaWdpbkJveCA/IG9yaWdpbkJveC55IDogdW5kZWZpbmVkLCBzb3VyY2VCb3ggPyBzb3VyY2VCb3gueSA6IHVuZGVmaW5lZCk7XG59XG5cbmV4cG9ydCB7IHJlbW92ZUF4aXNEZWx0YSwgcmVtb3ZlQXhpc1RyYW5zZm9ybXMsIHJlbW92ZUJveFRyYW5zZm9ybXMsIHJlbW92ZVBvaW50RGVsdGEgfTtcbiJdLCJuYW1lcyI6WyJtaXgiLCJwZXJjZW50Iiwic2NhbGVQb2ludCIsInJlbW92ZVBvaW50RGVsdGEiLCJwb2ludCIsInRyYW5zbGF0ZSIsInNjYWxlIiwib3JpZ2luUG9pbnQiLCJib3hTY2FsZSIsInVuZGVmaW5lZCIsInJlbW92ZUF4aXNEZWx0YSIsImF4aXMiLCJvcmlnaW4iLCJvcmlnaW5BeGlzIiwic291cmNlQXhpcyIsInRlc3QiLCJwYXJzZUZsb2F0IiwicmVsYXRpdmVQcm9ncmVzcyIsIm1pbiIsIm1heCIsInJlbW92ZUF4aXNUcmFuc2Zvcm1zIiwidHJhbnNmb3JtcyIsImtleSIsInNjYWxlS2V5Iiwib3JpZ2luS2V5IiwieEtleXMiLCJ5S2V5cyIsInJlbW92ZUJveFRyYW5zZm9ybXMiLCJib3giLCJvcmlnaW5Cb3giLCJzb3VyY2VCb3giLCJ4IiwieSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/models.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/geometry/models.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAxis: () => (/* binding */ createAxis),\n/* harmony export */   createAxisDelta: () => (/* binding */ createAxisDelta),\n/* harmony export */   createBox: () => (/* binding */ createBox),\n/* harmony export */   createDelta: () => (/* binding */ createDelta)\n/* harmony export */ });\nconst createAxisDelta = ()=>({\n        translate: 0,\n        scale: 1,\n        origin: 0,\n        originPoint: 0\n    });\nconst createDelta = ()=>({\n        x: createAxisDelta(),\n        y: createAxisDelta()\n    });\nconst createAxis = ()=>({\n        min: 0,\n        max: 0\n    });\nconst createBox = ()=>({\n        x: createAxis(),\n        y: createAxis()\n    });\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvbW9kZWxzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsTUFBTUEsa0JBQWtCLElBQU87UUFDM0JDLFdBQVc7UUFDWEMsT0FBTztRQUNQQyxRQUFRO1FBQ1JDLGFBQWE7SUFDakI7QUFDQSxNQUFNQyxjQUFjLElBQU87UUFDdkJDLEdBQUdOO1FBQ0hPLEdBQUdQO0lBQ1A7QUFDQSxNQUFNUSxhQUFhLElBQU87UUFBRUMsS0FBSztRQUFHQyxLQUFLO0lBQUU7QUFDM0MsTUFBTUMsWUFBWSxJQUFPO1FBQ3JCTCxHQUFHRTtRQUNIRCxHQUFHQztJQUNQO0FBRStEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvbW9kZWxzLm1qcz8zOGM0Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNyZWF0ZUF4aXNEZWx0YSA9ICgpID0+ICh7XG4gICAgdHJhbnNsYXRlOiAwLFxuICAgIHNjYWxlOiAxLFxuICAgIG9yaWdpbjogMCxcbiAgICBvcmlnaW5Qb2ludDogMCxcbn0pO1xuY29uc3QgY3JlYXRlRGVsdGEgPSAoKSA9PiAoe1xuICAgIHg6IGNyZWF0ZUF4aXNEZWx0YSgpLFxuICAgIHk6IGNyZWF0ZUF4aXNEZWx0YSgpLFxufSk7XG5jb25zdCBjcmVhdGVBeGlzID0gKCkgPT4gKHsgbWluOiAwLCBtYXg6IDAgfSk7XG5jb25zdCBjcmVhdGVCb3ggPSAoKSA9PiAoe1xuICAgIHg6IGNyZWF0ZUF4aXMoKSxcbiAgICB5OiBjcmVhdGVBeGlzKCksXG59KTtcblxuZXhwb3J0IHsgY3JlYXRlQXhpcywgY3JlYXRlQXhpc0RlbHRhLCBjcmVhdGVCb3gsIGNyZWF0ZURlbHRhIH07XG4iXSwibmFtZXMiOlsiY3JlYXRlQXhpc0RlbHRhIiwidHJhbnNsYXRlIiwic2NhbGUiLCJvcmlnaW4iLCJvcmlnaW5Qb2ludCIsImNyZWF0ZURlbHRhIiwieCIsInkiLCJjcmVhdGVBeGlzIiwibWluIiwibWF4IiwiY3JlYXRlQm94Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/models.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/utils.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/geometry/utils.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   aspectRatio: () => (/* binding */ aspectRatio),\n/* harmony export */   boxEquals: () => (/* binding */ boxEquals),\n/* harmony export */   boxEqualsRounded: () => (/* binding */ boxEqualsRounded),\n/* harmony export */   isDeltaZero: () => (/* binding */ isDeltaZero)\n/* harmony export */ });\n/* harmony import */ var _delta_calc_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./delta-calc.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs\");\n\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction boxEquals(a, b) {\n    return a.x.min === b.x.min && a.x.max === b.x.max && a.y.min === b.y.min && a.y.max === b.y.max;\n}\nfunction boxEqualsRounded(a, b) {\n    return Math.round(a.x.min) === Math.round(b.x.min) && Math.round(a.x.max) === Math.round(b.x.max) && Math.round(a.y.min) === Math.round(b.y.min) && Math.round(a.y.max) === Math.round(b.y.max);\n}\nfunction aspectRatio(box) {\n    return (0,_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_0__.calcLength)(box.x) / (0,_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_0__.calcLength)(box.y);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvdXRpbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQThDO0FBRTlDLFNBQVNDLGdCQUFnQkMsS0FBSztJQUMxQixPQUFPQSxNQUFNQyxTQUFTLEtBQUssS0FBS0QsTUFBTUUsS0FBSyxLQUFLO0FBQ3BEO0FBQ0EsU0FBU0MsWUFBWUgsS0FBSztJQUN0QixPQUFPRCxnQkFBZ0JDLE1BQU1JLENBQUMsS0FBS0wsZ0JBQWdCQyxNQUFNSyxDQUFDO0FBQzlEO0FBQ0EsU0FBU0MsVUFBVUMsQ0FBQyxFQUFFQyxDQUFDO0lBQ25CLE9BQVFELEVBQUVILENBQUMsQ0FBQ0ssR0FBRyxLQUFLRCxFQUFFSixDQUFDLENBQUNLLEdBQUcsSUFDdkJGLEVBQUVILENBQUMsQ0FBQ00sR0FBRyxLQUFLRixFQUFFSixDQUFDLENBQUNNLEdBQUcsSUFDbkJILEVBQUVGLENBQUMsQ0FBQ0ksR0FBRyxLQUFLRCxFQUFFSCxDQUFDLENBQUNJLEdBQUcsSUFDbkJGLEVBQUVGLENBQUMsQ0FBQ0ssR0FBRyxLQUFLRixFQUFFSCxDQUFDLENBQUNLLEdBQUc7QUFDM0I7QUFDQSxTQUFTQyxpQkFBaUJKLENBQUMsRUFBRUMsQ0FBQztJQUMxQixPQUFRSSxLQUFLQyxLQUFLLENBQUNOLEVBQUVILENBQUMsQ0FBQ0ssR0FBRyxNQUFNRyxLQUFLQyxLQUFLLENBQUNMLEVBQUVKLENBQUMsQ0FBQ0ssR0FBRyxLQUM5Q0csS0FBS0MsS0FBSyxDQUFDTixFQUFFSCxDQUFDLENBQUNNLEdBQUcsTUFBTUUsS0FBS0MsS0FBSyxDQUFDTCxFQUFFSixDQUFDLENBQUNNLEdBQUcsS0FDMUNFLEtBQUtDLEtBQUssQ0FBQ04sRUFBRUYsQ0FBQyxDQUFDSSxHQUFHLE1BQU1HLEtBQUtDLEtBQUssQ0FBQ0wsRUFBRUgsQ0FBQyxDQUFDSSxHQUFHLEtBQzFDRyxLQUFLQyxLQUFLLENBQUNOLEVBQUVGLENBQUMsQ0FBQ0ssR0FBRyxNQUFNRSxLQUFLQyxLQUFLLENBQUNMLEVBQUVILENBQUMsQ0FBQ0ssR0FBRztBQUNsRDtBQUNBLFNBQVNJLFlBQVlDLEdBQUc7SUFDcEIsT0FBT2pCLDJEQUFVQSxDQUFDaUIsSUFBSVgsQ0FBQyxJQUFJTiwyREFBVUEsQ0FBQ2lCLElBQUlWLENBQUM7QUFDL0M7QUFFaUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9nZW9tZXRyeS91dGlscy5tanM/OGM2OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjYWxjTGVuZ3RoIH0gZnJvbSAnLi9kZWx0YS1jYWxjLm1qcyc7XG5cbmZ1bmN0aW9uIGlzQXhpc0RlbHRhWmVybyhkZWx0YSkge1xuICAgIHJldHVybiBkZWx0YS50cmFuc2xhdGUgPT09IDAgJiYgZGVsdGEuc2NhbGUgPT09IDE7XG59XG5mdW5jdGlvbiBpc0RlbHRhWmVybyhkZWx0YSkge1xuICAgIHJldHVybiBpc0F4aXNEZWx0YVplcm8oZGVsdGEueCkgJiYgaXNBeGlzRGVsdGFaZXJvKGRlbHRhLnkpO1xufVxuZnVuY3Rpb24gYm94RXF1YWxzKGEsIGIpIHtcbiAgICByZXR1cm4gKGEueC5taW4gPT09IGIueC5taW4gJiZcbiAgICAgICAgYS54Lm1heCA9PT0gYi54Lm1heCAmJlxuICAgICAgICBhLnkubWluID09PSBiLnkubWluICYmXG4gICAgICAgIGEueS5tYXggPT09IGIueS5tYXgpO1xufVxuZnVuY3Rpb24gYm94RXF1YWxzUm91bmRlZChhLCBiKSB7XG4gICAgcmV0dXJuIChNYXRoLnJvdW5kKGEueC5taW4pID09PSBNYXRoLnJvdW5kKGIueC5taW4pICYmXG4gICAgICAgIE1hdGgucm91bmQoYS54Lm1heCkgPT09IE1hdGgucm91bmQoYi54Lm1heCkgJiZcbiAgICAgICAgTWF0aC5yb3VuZChhLnkubWluKSA9PT0gTWF0aC5yb3VuZChiLnkubWluKSAmJlxuICAgICAgICBNYXRoLnJvdW5kKGEueS5tYXgpID09PSBNYXRoLnJvdW5kKGIueS5tYXgpKTtcbn1cbmZ1bmN0aW9uIGFzcGVjdFJhdGlvKGJveCkge1xuICAgIHJldHVybiBjYWxjTGVuZ3RoKGJveC54KSAvIGNhbGNMZW5ndGgoYm94LnkpO1xufVxuXG5leHBvcnQgeyBhc3BlY3RSYXRpbywgYm94RXF1YWxzLCBib3hFcXVhbHNSb3VuZGVkLCBpc0RlbHRhWmVybyB9O1xuIl0sIm5hbWVzIjpbImNhbGNMZW5ndGgiLCJpc0F4aXNEZWx0YVplcm8iLCJkZWx0YSIsInRyYW5zbGF0ZSIsInNjYWxlIiwiaXNEZWx0YVplcm8iLCJ4IiwieSIsImJveEVxdWFscyIsImEiLCJiIiwibWluIiwibWF4IiwiYm94RXF1YWxzUm91bmRlZCIsIk1hdGgiLCJyb3VuZCIsImFzcGVjdFJhdGlvIiwiYm94Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/utils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DocumentProjectionNode: () => (/* binding */ DocumentProjectionNode)\n/* harmony export */ });\n/* harmony import */ var _create_projection_node_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./create-projection-node.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs\");\n/* harmony import */ var _events_add_dom_event_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../events/add-dom-event.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/events/add-dom-event.mjs\");\n\n\nconst DocumentProjectionNode = (0,_create_projection_node_mjs__WEBPACK_IMPORTED_MODULE_0__.createProjectionNode)({\n    attachResizeListener: (ref, notify)=>(0,_events_add_dom_event_mjs__WEBPACK_IMPORTED_MODULE_1__.addDomEvent)(ref, \"resize\", notify),\n    measureScroll: ()=>({\n            x: document.documentElement.scrollLeft || document.body.scrollLeft,\n            y: document.documentElement.scrollTop || document.body.scrollTop\n        }),\n    checkIsScrollRoot: ()=>true\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vbm9kZS9Eb2N1bWVudFByb2plY3Rpb25Ob2RlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBb0U7QUFDUDtBQUU3RCxNQUFNRSx5QkFBeUJGLGlGQUFvQkEsQ0FBQztJQUNoREcsc0JBQXNCLENBQUNDLEtBQUtDLFNBQVdKLHNFQUFXQSxDQUFDRyxLQUFLLFVBQVVDO0lBQ2xFQyxlQUFlLElBQU87WUFDbEJDLEdBQUdDLFNBQVNDLGVBQWUsQ0FBQ0MsVUFBVSxJQUFJRixTQUFTRyxJQUFJLENBQUNELFVBQVU7WUFDbEVFLEdBQUdKLFNBQVNDLGVBQWUsQ0FBQ0ksU0FBUyxJQUFJTCxTQUFTRyxJQUFJLENBQUNFLFNBQVM7UUFDcEU7SUFDQUMsbUJBQW1CLElBQU07QUFDN0I7QUFFa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9ub2RlL0RvY3VtZW50UHJvamVjdGlvbk5vZGUubWpzPzNlZjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlUHJvamVjdGlvbk5vZGUgfSBmcm9tICcuL2NyZWF0ZS1wcm9qZWN0aW9uLW5vZGUubWpzJztcbmltcG9ydCB7IGFkZERvbUV2ZW50IH0gZnJvbSAnLi4vLi4vZXZlbnRzL2FkZC1kb20tZXZlbnQubWpzJztcblxuY29uc3QgRG9jdW1lbnRQcm9qZWN0aW9uTm9kZSA9IGNyZWF0ZVByb2plY3Rpb25Ob2RlKHtcbiAgICBhdHRhY2hSZXNpemVMaXN0ZW5lcjogKHJlZiwgbm90aWZ5KSA9PiBhZGREb21FdmVudChyZWYsIFwicmVzaXplXCIsIG5vdGlmeSksXG4gICAgbWVhc3VyZVNjcm9sbDogKCkgPT4gKHtcbiAgICAgICAgeDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0LFxuICAgICAgICB5OiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wLFxuICAgIH0pLFxuICAgIGNoZWNrSXNTY3JvbGxSb290OiAoKSA9PiB0cnVlLFxufSk7XG5cbmV4cG9ydCB7IERvY3VtZW50UHJvamVjdGlvbk5vZGUgfTtcbiJdLCJuYW1lcyI6WyJjcmVhdGVQcm9qZWN0aW9uTm9kZSIsImFkZERvbUV2ZW50IiwiRG9jdW1lbnRQcm9qZWN0aW9uTm9kZSIsImF0dGFjaFJlc2l6ZUxpc3RlbmVyIiwicmVmIiwibm90aWZ5IiwibWVhc3VyZVNjcm9sbCIsIngiLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsInNjcm9sbExlZnQiLCJib2R5IiwieSIsInNjcm9sbFRvcCIsImNoZWNrSXNTY3JvbGxSb290Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HTMLProjectionNode: () => (/* binding */ HTMLProjectionNode),\n/* harmony export */   rootProjectionNode: () => (/* binding */ rootProjectionNode)\n/* harmony export */ });\n/* harmony import */ var _create_projection_node_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./create-projection-node.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs\");\n/* harmony import */ var _DocumentProjectionNode_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DocumentProjectionNode.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs\");\n\n\nconst rootProjectionNode = {\n    current: undefined\n};\nconst HTMLProjectionNode = (0,_create_projection_node_mjs__WEBPACK_IMPORTED_MODULE_0__.createProjectionNode)({\n    measureScroll: (instance)=>({\n            x: instance.scrollLeft,\n            y: instance.scrollTop\n        }),\n    defaultParent: ()=>{\n        if (!rootProjectionNode.current) {\n            const documentNode = new _DocumentProjectionNode_mjs__WEBPACK_IMPORTED_MODULE_1__.DocumentProjectionNode({});\n            documentNode.mount(window);\n            documentNode.setOptions({\n                layoutScroll: true\n            });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value)=>{\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance)=>Boolean(window.getComputedStyle(instance).position === \"fixed\")\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vbm9kZS9IVE1MUHJvamVjdGlvbk5vZGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBb0U7QUFDRTtBQUV0RSxNQUFNRSxxQkFBcUI7SUFDdkJDLFNBQVNDO0FBQ2I7QUFDQSxNQUFNQyxxQkFBcUJMLGlGQUFvQkEsQ0FBQztJQUM1Q00sZUFBZSxDQUFDQyxXQUFjO1lBQzFCQyxHQUFHRCxTQUFTRSxVQUFVO1lBQ3RCQyxHQUFHSCxTQUFTSSxTQUFTO1FBQ3pCO0lBQ0FDLGVBQWU7UUFDWCxJQUFJLENBQUNWLG1CQUFtQkMsT0FBTyxFQUFFO1lBQzdCLE1BQU1VLGVBQWUsSUFBSVosK0VBQXNCQSxDQUFDLENBQUM7WUFDakRZLGFBQWFDLEtBQUssQ0FBQ0M7WUFDbkJGLGFBQWFHLFVBQVUsQ0FBQztnQkFBRUMsY0FBYztZQUFLO1lBQzdDZixtQkFBbUJDLE9BQU8sR0FBR1U7UUFDakM7UUFDQSxPQUFPWCxtQkFBbUJDLE9BQU87SUFDckM7SUFDQWUsZ0JBQWdCLENBQUNYLFVBQVVZO1FBQ3ZCWixTQUFTYSxLQUFLLENBQUNDLFNBQVMsR0FBR0YsVUFBVWYsWUFBWWUsUUFBUTtJQUM3RDtJQUNBRyxtQkFBbUIsQ0FBQ2YsV0FBYWdCLFFBQVFSLE9BQU9TLGdCQUFnQixDQUFDakIsVUFBVWtCLFFBQVEsS0FBSztBQUM1RjtBQUVrRCIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL25vZGUvSFRNTFByb2plY3Rpb25Ob2RlLm1qcz9iN2VkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVByb2plY3Rpb25Ob2RlIH0gZnJvbSAnLi9jcmVhdGUtcHJvamVjdGlvbi1ub2RlLm1qcyc7XG5pbXBvcnQgeyBEb2N1bWVudFByb2plY3Rpb25Ob2RlIH0gZnJvbSAnLi9Eb2N1bWVudFByb2plY3Rpb25Ob2RlLm1qcyc7XG5cbmNvbnN0IHJvb3RQcm9qZWN0aW9uTm9kZSA9IHtcbiAgICBjdXJyZW50OiB1bmRlZmluZWQsXG59O1xuY29uc3QgSFRNTFByb2plY3Rpb25Ob2RlID0gY3JlYXRlUHJvamVjdGlvbk5vZGUoe1xuICAgIG1lYXN1cmVTY3JvbGw6IChpbnN0YW5jZSkgPT4gKHtcbiAgICAgICAgeDogaW5zdGFuY2Uuc2Nyb2xsTGVmdCxcbiAgICAgICAgeTogaW5zdGFuY2Uuc2Nyb2xsVG9wLFxuICAgIH0pLFxuICAgIGRlZmF1bHRQYXJlbnQ6ICgpID0+IHtcbiAgICAgICAgaWYgKCFyb290UHJvamVjdGlvbk5vZGUuY3VycmVudCkge1xuICAgICAgICAgICAgY29uc3QgZG9jdW1lbnROb2RlID0gbmV3IERvY3VtZW50UHJvamVjdGlvbk5vZGUoe30pO1xuICAgICAgICAgICAgZG9jdW1lbnROb2RlLm1vdW50KHdpbmRvdyk7XG4gICAgICAgICAgICBkb2N1bWVudE5vZGUuc2V0T3B0aW9ucyh7IGxheW91dFNjcm9sbDogdHJ1ZSB9KTtcbiAgICAgICAgICAgIHJvb3RQcm9qZWN0aW9uTm9kZS5jdXJyZW50ID0gZG9jdW1lbnROb2RlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByb290UHJvamVjdGlvbk5vZGUuY3VycmVudDtcbiAgICB9LFxuICAgIHJlc2V0VHJhbnNmb3JtOiAoaW5zdGFuY2UsIHZhbHVlKSA9PiB7XG4gICAgICAgIGluc3RhbmNlLnN0eWxlLnRyYW5zZm9ybSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IFwibm9uZVwiO1xuICAgIH0sXG4gICAgY2hlY2tJc1Njcm9sbFJvb3Q6IChpbnN0YW5jZSkgPT4gQm9vbGVhbih3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShpbnN0YW5jZSkucG9zaXRpb24gPT09IFwiZml4ZWRcIiksXG59KTtcblxuZXhwb3J0IHsgSFRNTFByb2plY3Rpb25Ob2RlLCByb290UHJvamVjdGlvbk5vZGUgfTtcbiJdLCJuYW1lcyI6WyJjcmVhdGVQcm9qZWN0aW9uTm9kZSIsIkRvY3VtZW50UHJvamVjdGlvbk5vZGUiLCJyb290UHJvamVjdGlvbk5vZGUiLCJjdXJyZW50IiwidW5kZWZpbmVkIiwiSFRNTFByb2plY3Rpb25Ob2RlIiwibWVhc3VyZVNjcm9sbCIsImluc3RhbmNlIiwieCIsInNjcm9sbExlZnQiLCJ5Iiwic2Nyb2xsVG9wIiwiZGVmYXVsdFBhcmVudCIsImRvY3VtZW50Tm9kZSIsIm1vdW50Iiwid2luZG93Iiwic2V0T3B0aW9ucyIsImxheW91dFNjcm9sbCIsInJlc2V0VHJhbnNmb3JtIiwidmFsdWUiLCJzdHlsZSIsInRyYW5zZm9ybSIsImNoZWNrSXNTY3JvbGxSb290IiwiQm9vbGVhbiIsImdldENvbXB1dGVkU3R5bGUiLCJwb3NpdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cleanDirtyNodes: () => (/* binding */ cleanDirtyNodes),\n/* harmony export */   createProjectionNode: () => (/* binding */ createProjectionNode),\n/* harmony export */   mixAxis: () => (/* binding */ mixAxis),\n/* harmony export */   mixAxisDelta: () => (/* binding */ mixAxisDelta),\n/* harmony export */   mixBox: () => (/* binding */ mixBox),\n/* harmony export */   propagateDirtyNodes: () => (/* binding */ propagateDirtyNodes)\n/* harmony export */ });\n/* harmony import */ var _utils_subscription_manager_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/subscription-manager.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/subscription-manager.mjs\");\n/* harmony import */ var _animation_mix_values_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../animation/mix-values.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs\");\n/* harmony import */ var _geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../geometry/copy.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/copy.mjs\");\n/* harmony import */ var _geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../geometry/delta-apply.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs\");\n/* harmony import */ var _geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../geometry/delta-calc.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs\");\n/* harmony import */ var _geometry_delta_remove_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../geometry/delta-remove.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs\");\n/* harmony import */ var _geometry_models_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../geometry/models.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/models.mjs\");\n/* harmony import */ var _animation_utils_transitions_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../animation/utils/transitions.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/utils/transitions.mjs\");\n/* harmony import */ var _geometry_utils_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../geometry/utils.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/utils.mjs\");\n/* harmony import */ var _shared_stack_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../shared/stack.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/shared/stack.mjs\");\n/* harmony import */ var _styles_scale_correction_mjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../styles/scale-correction.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs\");\n/* harmony import */ var _styles_transform_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../styles/transform.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/styles/transform.mjs\");\n/* harmony import */ var _utils_each_axis_mjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../utils/each-axis.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs\");\n/* harmony import */ var _utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../utils/has-transform.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs\");\n/* harmony import */ var _render_utils_flat_tree_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../render/utils/flat-tree.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs\");\n/* harmony import */ var _value_utils_resolve_motion_value_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../value/utils/resolve-motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs\");\n/* harmony import */ var _state_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./state.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/node/state.mjs\");\n/* harmony import */ var _utils_delay_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/delay.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/delay.mjs\");\n/* harmony import */ var _utils_mix_mjs__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../utils/mix.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/mix.mjs\");\n/* harmony import */ var _debug_record_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../debug/record.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/debug/record.mjs\");\n/* harmony import */ var _render_dom_utils_is_svg_element_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../render/dom/utils/is-svg-element.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.mjs\");\n/* harmony import */ var _animation_interfaces_single_value_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../animation/interfaces/single-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/interfaces/single-value.mjs\");\n/* harmony import */ var _utils_clamp_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utils/clamp.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/clamp.mjs\");\n/* harmony import */ var _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../frameloop/frame.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/frameloop/frame.mjs\");\n/* harmony import */ var _utils_noop_mjs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../utils/noop.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/noop.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst transformAxes = [\n    \"\",\n    \"X\",\n    \"Y\",\n    \"Z\"\n];\nconst hiddenVisibility = {\n    visibility: \"hidden\"\n};\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */ const animationTarget = 1000;\nlet id = 0;\n/**\n * Use a mutable data object for debug data so as to not create a new\n * object every frame.\n */ const projectionFrameData = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0\n};\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()){\n            /**\n             * A unique ID generated for every projection node.\n             */ this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */ this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */ this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */ this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */ this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */ this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */ this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */ this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */ this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */ this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */ this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */ this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */ this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */ this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */ this.treeScale = {\n                x: 1,\n                y: 1\n            };\n            /**\n             *\n             */ this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.projectionUpdateScheduled = false;\n            this.checkUpdateFailed = ()=>{\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */ this.updateProjection = ()=>{\n                this.projectionUpdateScheduled = false;\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */ projectionFrameData.totalNodes = projectionFrameData.resolvedTargetDeltas = projectionFrameData.recalculatedProjection = 0;\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                (0,_debug_record_mjs__WEBPACK_IMPORTED_MODULE_0__.record)(projectionFrameData);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */ // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [\n                ...parent.path,\n                parent\n            ] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for(let i = 0; i < this.path.length; i++){\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this) this.nodes = new _render_utils_flat_tree_mjs__WEBPACK_IMPORTED_MODULE_1__.FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new _utils_subscription_manager_mjs__WEBPACK_IMPORTED_MODULE_2__.SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */ mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {\n            if (this.instance) return;\n            this.isSVG = (0,_render_dom_utils_is_svg_element_mjs__WEBPACK_IMPORTED_MODULE_3__.isSVGElement)(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = ()=>this.root.updateBlockedByResize = false;\n                attachResizeListener(instance, ()=>{\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = (0,_utils_delay_mjs__WEBPACK_IMPORTED_MODULE_4__.delay)(resizeUnblockUpdate, 250);\n                    if (_state_mjs__WEBPACK_IMPORTED_MODULE_5__.globalProjectionState.hasAnimatedSinceResize) {\n                        _state_mjs__WEBPACK_IMPORTED_MODULE_5__.globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout })=>{\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition || visualElement.getDefaultTransition() || defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */ const targetChanged = !this.targetLayout || !(0,_geometry_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.boxEqualsRounded)(this.targetLayout, newLayout) || hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */ const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot || this.resumeFrom && this.resumeFrom.instance || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !this.currentAnimation)) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...(0,_animation_utils_transitions_mjs__WEBPACK_IMPORTED_MODULE_7__.getValueTransition)(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete\n                        };\n                        if (visualElement.shouldReduceMotion || this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    } else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */ if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            (0,_frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_8__.cancelFrame)(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || false;\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked()) return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty) return;\n            this.isLayoutDirty = true;\n            for(let i = 0; i < this.path.length; i++){\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout) return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, \"\") : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            this.isUpdating = false;\n            /**\n             * Write\n             */ this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */ // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */ // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */ const now = performance.now();\n            _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_8__.frameData.delta = (0,_utils_clamp_mjs__WEBPACK_IMPORTED_MODULE_9__.clamp)(0, 1000 / 60, now - _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_8__.frameData.timestamp);\n            _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_8__.frameData.timestamp = now;\n            _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_8__.frameData.isProcessing = true;\n            _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_8__.steps.update.process(_frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_8__.frameData);\n            _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_8__.steps.preRender.process(_frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_8__.frameData);\n            _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_8__.steps.render.process(_frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_8__.frameData);\n            _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_8__.frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                queueMicrotask(()=>this.update());\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            if (!this.projectionUpdateScheduled) {\n                this.projectionUpdateScheduled = true;\n                _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_8__.frame.preRender(this.updateProjection, false, true);\n            }\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */ _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_8__.frame.postRender(()=>{\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                } else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */ updateSnapshot() {\n            if (this.snapshot || !this.instance) return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance) return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */ if (this.resumeFrom && !this.resumeFrom.instance) {\n                for(let i = 0; i < this.path.length; i++){\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_10__.createBox)();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement && visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot: checkIsScrollRoot(this.instance),\n                    offset: measureScroll(this.instance)\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform) return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !(0,_geometry_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.isDeltaZero)(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, \"\") : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested && (hasProjection || (0,_utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_11__.hasTransform)(this.latestValues) || transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */ if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement) return (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_10__.createBox)();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_12__.translateAxis)(box.x, scroll.offset.x);\n                (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_12__.translateAxis)(box.y, scroll.offset.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_10__.createBox)();\n            (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_13__.copyBoxInto)(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */ for(let i = 0; i < this.path.length; i++){\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */ if (scroll.isRoot) {\n                        (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_13__.copyBoxInto)(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */ if (rootScroll) {\n                            (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_12__.translateAxis)(boxWithoutScroll.x, -rootScroll.offset.x);\n                            (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_12__.translateAxis)(boxWithoutScroll.y, -rootScroll.offset.y);\n                        }\n                    }\n                    (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_12__.translateAxis)(boxWithoutScroll.x, scroll.offset.x);\n                    (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_12__.translateAxis)(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_10__.createBox)();\n            (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_13__.copyBoxInto)(withTransforms, box);\n            for(let i = 0; i < this.path.length; i++){\n                const node = this.path[i];\n                if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n                    (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_12__.transformBox)(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y\n                    });\n                }\n                if (!(0,_utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_11__.hasTransform)(node.latestValues)) continue;\n                (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_12__.transformBox)(withTransforms, node.latestValues);\n            }\n            if ((0,_utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_11__.hasTransform)(this.latestValues)) {\n                (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_12__.transformBox)(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_10__.createBox)();\n            (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_13__.copyBoxInto)(boxWithoutTransform, box);\n            for(let i = 0; i < this.path.length; i++){\n                const node = this.path[i];\n                if (!node.instance) continue;\n                if (!(0,_utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_11__.hasTransform)(node.latestValues)) continue;\n                (0,_utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_11__.hasScale)(node.latestValues) && node.updateSnapshot();\n                const sourceBox = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_10__.createBox)();\n                const nodeBox = node.measurePageBox();\n                (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_13__.copyBoxInto)(sourceBox, nodeBox);\n                (0,_geometry_delta_remove_mjs__WEBPACK_IMPORTED_MODULE_14__.removeBoxTransforms)(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if ((0,_utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_11__.hasTransform)(this.latestValues)) {\n                (0,_geometry_delta_remove_mjs__WEBPACK_IMPORTED_MODULE_14__.removeBoxTransforms)(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent) return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */ if (this.relativeParent.resolvedRelativeTargetAt !== _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_8__.frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */ const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */ const canSkip = !(forceRecalculation || isShared && this.isSharedProjectionDirty || this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) || this.attemptToResolveRelativeTarget);\n            if (canSkip) return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */ if (!this.layout || !(layout || layoutId)) return;\n            this.resolvedRelativeTargetAt = _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_8__.frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */ // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent && relativeParent.layout && this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_10__.createBox)();\n                    this.relativeTargetOrigin = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_10__.createBox)();\n                    (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_15__.calcRelativePosition)(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_13__.copyBoxInto)(this.relativeTarget, this.relativeTargetOrigin);\n                } else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */ if (!this.relativeTarget && !this.targetDelta) return;\n            /**\n             * Lazy-init target data structure\n             */ if (!this.target) {\n                this.target = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_10__.createBox)();\n                this.targetWithTransforms = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_10__.createBox)();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */ if (this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_15__.calcRelativeBox)(this.target, this.relativeTarget, this.relativeParent.target);\n            /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */ } else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                } else {\n                    (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_13__.copyBoxInto)(this.target, this.layout.layoutBox);\n                }\n                (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_12__.applyBoxDelta)(this.target, this.targetDelta);\n            } else {\n                /**\n                 * If no target, use own layout as target\n                 */ (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_13__.copyBoxInto)(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */ if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent && Boolean(relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !relativeParent.options.layoutScroll && relativeParent.target && this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_10__.createBox)();\n                    this.relativeTargetOrigin = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_10__.createBox)();\n                    (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_15__.calcRelativePosition)(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_13__.copyBoxInto)(this.relativeTarget, this.relativeTargetOrigin);\n                } else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */ projectionFrameData.resolvedTargetDeltas++;\n        }\n        getClosestProjectingParent() {\n            if (!this.parent || (0,_utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_11__.hasScale)(this.parent.latestValues) || (0,_utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_11__.has2DTranslate)(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            } else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout);\n        }\n        calcProjection() {\n            var _a;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */ if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */ if (isShared && (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */ if (this.resolvedRelativeTargetAt === _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_8__.frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip) return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */ this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId)) return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */ (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_13__.copyBoxInto)(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */ const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */ (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_12__.applyTreeDeltas)(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */ if (lead.layout && !lead.target && (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */ if (this.projectionTransform) {\n                    this.projectionDelta = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_10__.createDelta)();\n                    this.projectionTransform = \"none\";\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta) {\n                this.projectionDelta = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_10__.createDelta)();\n                this.projectionDeltaWithTransform = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_10__.createDelta)();\n            }\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */ (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_15__.calcBoxDelta)(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = (0,_styles_transform_mjs__WEBPACK_IMPORTED_MODULE_16__.buildProjectionTransform)(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */ projectionFrameData.recalculatedProjection++;\n        }\n        hide() {\n            this.isVisible = false;\n        // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n        // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.scheduleRender && this.options.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot ? snapshot.latestValues : {};\n            const mixedValues = {\n                ...this.latestValues\n            };\n            const targetDelta = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_10__.createDelta)();\n            if (!this.relativeParent || !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_10__.createBox)();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest)=>{\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget && this.relativeTargetOrigin && this.layout && this.relativeParent && this.relativeParent.layout) {\n                    (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_15__.calcRelativePosition)(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */ if (prevRelativeTarget && (0,_geometry_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.boxEquals)(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget) prevRelativeTarget = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_10__.createBox)();\n                    (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_13__.copyBoxInto)(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    (0,_animation_mix_values_mjs__WEBPACK_IMPORTED_MODULE_17__.mixValues)(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                (0,_frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_8__.cancelFrame)(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */ this.pendingAnimation = _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_8__.frame.update(()=>{\n                _state_mjs__WEBPACK_IMPORTED_MODULE_5__.globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = (0,_animation_interfaces_single_value_mjs__WEBPACK_IMPORTED_MODULE_18__.animateSingleValue)(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest)=>{\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: ()=>{\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    }\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout) return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */ if (this !== lead && this.layout && layout && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_10__.createBox)();\n                const xLength = (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_15__.calcLength)(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_15__.calcLength)(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_13__.copyBoxInto)(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */ (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_12__.transformBox)(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */ (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_15__.calcBoxDelta)(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new _shared_stack_mjs__WEBPACK_IMPORTED_MODULE_19__.NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity ? config.shouldPreserveFollowOpacity(node) : undefined\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId) return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity } = {}) {\n            const stack = this.getStack();\n            if (stack) stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition) this.setOptions({\n                transition\n            });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            } else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement) return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */ const { latestValues } = visualElement;\n            if (latestValues.rotate || latestValues.rotateX || latestValues.rotateY || latestValues.rotateZ) {\n                hasRotate = true;\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate) return;\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for(let i = 0; i < transformAxes.length; i++){\n                const key = \"rotate\" + transformAxes[i];\n                // Record the rotation and then temporarily set it to 0\n                if (latestValues[key]) {\n                    resetValues[key] = latestValues[key];\n                    visualElement.setStaticValue(key, 0);\n                }\n            }\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for(const key in resetValues){\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp) {\n            var _a, _b;\n            if (!this.instance || this.isSVG) return undefined;\n            if (!this.isVisible) {\n                return hiddenVisibility;\n            }\n            const styles = {\n                visibility: \"\"\n            };\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents = (0,_value_utils_resolve_motion_value_mjs__WEBPACK_IMPORTED_MODULE_20__.resolveMotionValue)(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity = this.latestValues.opacity !== undefined ? this.latestValues.opacity : 1;\n                    emptyStyles.pointerEvents = (0,_value_utils_resolve_motion_value_mjs__WEBPACK_IMPORTED_MODULE_20__.resolveMotionValue)(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !(0,_utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_11__.hasTransform)(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = (0,_styles_transform_mjs__WEBPACK_IMPORTED_MODULE_16__.buildProjectionTransform)(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */ styles.opacity = lead === this ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n            } else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */ styles.opacity = lead === this ? valuesToRender.opacity !== undefined ? valuesToRender.opacity : \"\" : valuesToRender.opacityExit !== undefined ? valuesToRender.opacityExit : 0;\n            }\n            /**\n             * Apply scale correction\n             */ for(const key in _styles_scale_correction_mjs__WEBPACK_IMPORTED_MODULE_21__.scaleCorrectors){\n                if (valuesToRender[key] === undefined) continue;\n                const { correct, applyTo } = _styles_scale_correction_mjs__WEBPACK_IMPORTED_MODULE_21__.scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */ const corrected = styles.transform === \"none\" ? valuesToRender[key] : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for(let i = 0; i < num; i++){\n                        styles[applyTo[i]] = corrected;\n                    }\n                } else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */ if (this.options.layoutId) {\n                styles.pointerEvents = lead === this ? (0,_value_utils_resolve_motion_value_mjs__WEBPACK_IMPORTED_MODULE_20__.resolveMotionValue)(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\" : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node)=>{\n                var _a;\n                return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n            });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            (0,_utils_each_axis_mjs__WEBPACK_IMPORTED_MODULE_22__.eachAxis)((axis)=>{\n                const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n                const length = (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_15__.calcLength)(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            (0,_utils_each_axis_mjs__WEBPACK_IMPORTED_MODULE_22__.eachAxis)((axis)=>{\n                const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n                const length = (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_15__.calcLength)(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */ if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max = node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_10__.createDelta)();\n        (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_15__.calcBoxDelta)(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_10__.createDelta)();\n        if (isShared) {\n            (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_15__.calcBoxDelta)(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        } else {\n            (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_15__.calcBoxDelta)(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !(0,_geometry_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.isDeltaZero)(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */ if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_10__.createBox)();\n                    (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_15__.calcRelativePosition)(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_10__.createBox)();\n                    (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_15__.calcRelativePosition)(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!(0,_geometry_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.boxEqualsRounded)(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged\n        });\n    } else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */ node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */ projectionFrameData.totalNodes++;\n    if (!node.parent) return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */ if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */ node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty || node.parent.isProjectionDirty || node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty = node.isSharedProjectionDirty = node.isTransformDirty = false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = (0,_utils_mix_mjs__WEBPACK_IMPORTED_MODULE_23__.mix)(delta.translate, 0, p);\n    output.scale = (0,_utils_mix_mjs__WEBPACK_IMPORTED_MODULE_23__.mix)(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = (0,_utils_mix_mjs__WEBPACK_IMPORTED_MODULE_23__.mix)(from.min, to.min, p);\n    output.max = (0,_utils_mix_mjs__WEBPACK_IMPORTED_MODULE_23__.mix)(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [\n        0.4,\n        0,\n        0.1,\n        1\n    ]\n};\nconst userAgentContains = (string)=>typeof navigator !== \"undefined\" && navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */ const roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\") ? Math.round : _utils_noop_mjs__WEBPACK_IMPORTED_MODULE_24__.noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return animationType === \"position\" || animationType === \"preserve-aspect\" && !(0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_15__.isNear)((0,_geometry_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.aspectRatio)(snapshot), (0,_geometry_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.aspectRatio)(layout), 0.2);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/node/state.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/node/state.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   globalProjectionState: () => (/* binding */ globalProjectionState)\n/* harmony export */ });\n/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */ const globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */ hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */ hasEverUpdated: false\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vbm9kZS9zdGF0ZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7O0NBSUMsR0FDRCxNQUFNQSx3QkFBd0I7SUFDMUI7OztLQUdDLEdBQ0RDLHdCQUF3QjtJQUN4Qjs7O0tBR0MsR0FDREMsZ0JBQWdCO0FBQ3BCO0FBRWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vbm9kZS9zdGF0ZS5tanM/OTAzNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgc2hvdWxkIG9ubHkgZXZlciBiZSBtb2RpZmllZCBvbiB0aGUgY2xpZW50IG90aGVyd2lzZSBpdCdsbFxuICogcGVyc2lzdCB0aHJvdWdoIHNlcnZlciByZXF1ZXN0cy4gSWYgd2UgbmVlZCBpbnN0YW5jZWQgc3RhdGVzIHdlXG4gKiBjb3VsZCBsYXp5LWluaXQgdmlhIHJvb3QuXG4gKi9cbmNvbnN0IGdsb2JhbFByb2plY3Rpb25TdGF0ZSA9IHtcbiAgICAvKipcbiAgICAgKiBHbG9iYWwgZmxhZyBhcyB0byB3aGV0aGVyIHRoZSB0cmVlIGhhcyBhbmltYXRlZCBzaW5jZSB0aGUgbGFzdCB0aW1lXG4gICAgICogd2UgcmVzaXplZCB0aGUgd2luZG93XG4gICAgICovXG4gICAgaGFzQW5pbWF0ZWRTaW5jZVJlc2l6ZTogdHJ1ZSxcbiAgICAvKipcbiAgICAgKiBXZSBzZXQgdGhpcyB0byB0cnVlIG9uY2UsIG9uIHRoZSBmaXJzdCB1cGRhdGUuIEFueSBub2RlcyBhZGRlZCB0byB0aGUgdHJlZSBiZXlvbmQgdGhhdFxuICAgICAqIHVwZGF0ZSB3aWxsIGJlIGdpdmVuIGEgYGRhdGEtcHJvamVjdGlvbi1pZGAgYXR0cmlidXRlLlxuICAgICAqL1xuICAgIGhhc0V2ZXJVcGRhdGVkOiBmYWxzZSxcbn07XG5cbmV4cG9ydCB7IGdsb2JhbFByb2plY3Rpb25TdGF0ZSB9O1xuIl0sIm5hbWVzIjpbImdsb2JhbFByb2plY3Rpb25TdGF0ZSIsImhhc0FuaW1hdGVkU2luY2VSZXNpemUiLCJoYXNFdmVyVXBkYXRlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/node/state.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/shared/stack.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/shared/stack.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NodeStack: () => (/* binding */ NodeStack)\n/* harmony export */ });\n/* harmony import */ var _utils_array_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/array.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/array.mjs\");\n\nclass NodeStack {\n    constructor(){\n        this.members = [];\n    }\n    add(node) {\n        (0,_utils_array_mjs__WEBPACK_IMPORTED_MODULE_0__.addUniqueItem)(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        (0,_utils_array_mjs__WEBPACK_IMPORTED_MODULE_0__.removeItem)(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member)=>node === member);\n        if (indexOfNode === 0) return false;\n        /**\n         * Find the next projection node that is present\n         */ let prevLead;\n        for(let i = indexOfNode; i >= 0; i--){\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        } else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead) return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n        /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */ }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node)=>{\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete && resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node)=>{\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */ removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vc2hhcmVkL3N0YWNrLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFrRTtBQUVsRSxNQUFNRTtJQUNGQyxhQUFjO1FBQ1YsSUFBSSxDQUFDQyxPQUFPLEdBQUcsRUFBRTtJQUNyQjtJQUNBQyxJQUFJQyxJQUFJLEVBQUU7UUFDTk4sK0RBQWFBLENBQUMsSUFBSSxDQUFDSSxPQUFPLEVBQUVFO1FBQzVCQSxLQUFLQyxjQUFjO0lBQ3ZCO0lBQ0FDLE9BQU9GLElBQUksRUFBRTtRQUNUTCw0REFBVUEsQ0FBQyxJQUFJLENBQUNHLE9BQU8sRUFBRUU7UUFDekIsSUFBSUEsU0FBUyxJQUFJLENBQUNHLFFBQVEsRUFBRTtZQUN4QixJQUFJLENBQUNBLFFBQVEsR0FBR0M7UUFDcEI7UUFDQSxJQUFJSixTQUFTLElBQUksQ0FBQ0ssSUFBSSxFQUFFO1lBQ3BCLE1BQU1GLFdBQVcsSUFBSSxDQUFDTCxPQUFPLENBQUMsSUFBSSxDQUFDQSxPQUFPLENBQUNRLE1BQU0sR0FBRyxFQUFFO1lBQ3RELElBQUlILFVBQVU7Z0JBQ1YsSUFBSSxDQUFDSSxPQUFPLENBQUNKO1lBQ2pCO1FBQ0o7SUFDSjtJQUNBSyxTQUFTUixJQUFJLEVBQUU7UUFDWCxNQUFNUyxjQUFjLElBQUksQ0FBQ1gsT0FBTyxDQUFDWSxTQUFTLENBQUMsQ0FBQ0MsU0FBV1gsU0FBU1c7UUFDaEUsSUFBSUYsZ0JBQWdCLEdBQ2hCLE9BQU87UUFDWDs7U0FFQyxHQUNELElBQUlOO1FBQ0osSUFBSyxJQUFJUyxJQUFJSCxhQUFhRyxLQUFLLEdBQUdBLElBQUs7WUFDbkMsTUFBTUQsU0FBUyxJQUFJLENBQUNiLE9BQU8sQ0FBQ2MsRUFBRTtZQUM5QixJQUFJRCxPQUFPRSxTQUFTLEtBQUssT0FBTztnQkFDNUJWLFdBQVdRO2dCQUNYO1lBQ0o7UUFDSjtRQUNBLElBQUlSLFVBQVU7WUFDVixJQUFJLENBQUNJLE9BQU8sQ0FBQ0o7WUFDYixPQUFPO1FBQ1gsT0FDSztZQUNELE9BQU87UUFDWDtJQUNKO0lBQ0FJLFFBQVFQLElBQUksRUFBRWMscUJBQXFCLEVBQUU7UUFDakMsTUFBTVgsV0FBVyxJQUFJLENBQUNFLElBQUk7UUFDMUIsSUFBSUwsU0FBU0csVUFDVDtRQUNKLElBQUksQ0FBQ0EsUUFBUSxHQUFHQTtRQUNoQixJQUFJLENBQUNFLElBQUksR0FBR0w7UUFDWkEsS0FBS2UsSUFBSTtRQUNULElBQUlaLFVBQVU7WUFDVkEsU0FBU2EsUUFBUSxJQUFJYixTQUFTRixjQUFjO1lBQzVDRCxLQUFLQyxjQUFjO1lBQ25CRCxLQUFLaUIsVUFBVSxHQUFHZDtZQUNsQixJQUFJVyx1QkFBdUI7Z0JBQ3ZCZCxLQUFLaUIsVUFBVSxDQUFDQyxlQUFlLEdBQUc7WUFDdEM7WUFDQSxJQUFJZixTQUFTZ0IsUUFBUSxFQUFFO2dCQUNuQm5CLEtBQUttQixRQUFRLEdBQUdoQixTQUFTZ0IsUUFBUTtnQkFDakNuQixLQUFLbUIsUUFBUSxDQUFDQyxZQUFZLEdBQ3RCakIsU0FBU2tCLGVBQWUsSUFBSWxCLFNBQVNpQixZQUFZO1lBQ3pEO1lBQ0EsSUFBSXBCLEtBQUtzQixJQUFJLElBQUl0QixLQUFLc0IsSUFBSSxDQUFDQyxVQUFVLEVBQUU7Z0JBQ25DdkIsS0FBS3dCLGFBQWEsR0FBRztZQUN6QjtZQUNBLE1BQU0sRUFBRUMsU0FBUyxFQUFFLEdBQUd6QixLQUFLMEIsT0FBTztZQUNsQyxJQUFJRCxjQUFjLE9BQU87Z0JBQ3JCdEIsU0FBU3dCLElBQUk7WUFDakI7UUFDQTs7Ozs7Ozs7Ozs7YUFXQyxHQUNMO0lBQ0o7SUFDQUMsd0JBQXdCO1FBQ3BCLElBQUksQ0FBQzlCLE9BQU8sQ0FBQytCLE9BQU8sQ0FBQyxDQUFDN0I7WUFDbEIsTUFBTSxFQUFFMEIsT0FBTyxFQUFFSSxZQUFZLEVBQUUsR0FBRzlCO1lBQ2xDMEIsUUFBUUssY0FBYyxJQUFJTCxRQUFRSyxjQUFjO1lBQ2hELElBQUlELGNBQWM7Z0JBQ2RBLGFBQWFKLE9BQU8sQ0FBQ0ssY0FBYyxJQUMvQkQsYUFBYUosT0FBTyxDQUFDSyxjQUFjO1lBQzNDO1FBQ0o7SUFDSjtJQUNBOUIsaUJBQWlCO1FBQ2IsSUFBSSxDQUFDSCxPQUFPLENBQUMrQixPQUFPLENBQUMsQ0FBQzdCO1lBQ2xCQSxLQUFLZ0IsUUFBUSxJQUFJaEIsS0FBS0MsY0FBYyxDQUFDO1FBQ3pDO0lBQ0o7SUFDQTs7O0tBR0MsR0FDRCtCLHFCQUFxQjtRQUNqQixJQUFJLElBQUksQ0FBQzNCLElBQUksSUFBSSxJQUFJLENBQUNBLElBQUksQ0FBQ2MsUUFBUSxFQUFFO1lBQ2pDLElBQUksQ0FBQ2QsSUFBSSxDQUFDYyxRQUFRLEdBQUdmO1FBQ3pCO0lBQ0o7QUFDSjtBQUVxQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL3NoYXJlZC9zdGFjay5tanM/OWQ5MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhZGRVbmlxdWVJdGVtLCByZW1vdmVJdGVtIH0gZnJvbSAnLi4vLi4vdXRpbHMvYXJyYXkubWpzJztcblxuY2xhc3MgTm9kZVN0YWNrIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5tZW1iZXJzID0gW107XG4gICAgfVxuICAgIGFkZChub2RlKSB7XG4gICAgICAgIGFkZFVuaXF1ZUl0ZW0odGhpcy5tZW1iZXJzLCBub2RlKTtcbiAgICAgICAgbm9kZS5zY2hlZHVsZVJlbmRlcigpO1xuICAgIH1cbiAgICByZW1vdmUobm9kZSkge1xuICAgICAgICByZW1vdmVJdGVtKHRoaXMubWVtYmVycywgbm9kZSk7XG4gICAgICAgIGlmIChub2RlID09PSB0aGlzLnByZXZMZWFkKSB7XG4gICAgICAgICAgICB0aGlzLnByZXZMZWFkID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChub2RlID09PSB0aGlzLmxlYWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHByZXZMZWFkID0gdGhpcy5tZW1iZXJzW3RoaXMubWVtYmVycy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGlmIChwcmV2TGVhZCkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvbW90ZShwcmV2TGVhZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVsZWdhdGUobm9kZSkge1xuICAgICAgICBjb25zdCBpbmRleE9mTm9kZSA9IHRoaXMubWVtYmVycy5maW5kSW5kZXgoKG1lbWJlcikgPT4gbm9kZSA9PT0gbWVtYmVyKTtcbiAgICAgICAgaWYgKGluZGV4T2ZOb2RlID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogRmluZCB0aGUgbmV4dCBwcm9qZWN0aW9uIG5vZGUgdGhhdCBpcyBwcmVzZW50XG4gICAgICAgICAqL1xuICAgICAgICBsZXQgcHJldkxlYWQ7XG4gICAgICAgIGZvciAobGV0IGkgPSBpbmRleE9mTm9kZTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGNvbnN0IG1lbWJlciA9IHRoaXMubWVtYmVyc1tpXTtcbiAgICAgICAgICAgIGlmIChtZW1iZXIuaXNQcmVzZW50ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHByZXZMZWFkID0gbWVtYmVyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwcmV2TGVhZCkge1xuICAgICAgICAgICAgdGhpcy5wcm9tb3RlKHByZXZMZWFkKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHByb21vdGUobm9kZSwgcHJlc2VydmVGb2xsb3dPcGFjaXR5KSB7XG4gICAgICAgIGNvbnN0IHByZXZMZWFkID0gdGhpcy5sZWFkO1xuICAgICAgICBpZiAobm9kZSA9PT0gcHJldkxlYWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMucHJldkxlYWQgPSBwcmV2TGVhZDtcbiAgICAgICAgdGhpcy5sZWFkID0gbm9kZTtcbiAgICAgICAgbm9kZS5zaG93KCk7XG4gICAgICAgIGlmIChwcmV2TGVhZCkge1xuICAgICAgICAgICAgcHJldkxlYWQuaW5zdGFuY2UgJiYgcHJldkxlYWQuc2NoZWR1bGVSZW5kZXIoKTtcbiAgICAgICAgICAgIG5vZGUuc2NoZWR1bGVSZW5kZXIoKTtcbiAgICAgICAgICAgIG5vZGUucmVzdW1lRnJvbSA9IHByZXZMZWFkO1xuICAgICAgICAgICAgaWYgKHByZXNlcnZlRm9sbG93T3BhY2l0eSkge1xuICAgICAgICAgICAgICAgIG5vZGUucmVzdW1lRnJvbS5wcmVzZXJ2ZU9wYWNpdHkgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByZXZMZWFkLnNuYXBzaG90KSB7XG4gICAgICAgICAgICAgICAgbm9kZS5zbmFwc2hvdCA9IHByZXZMZWFkLnNuYXBzaG90O1xuICAgICAgICAgICAgICAgIG5vZGUuc25hcHNob3QubGF0ZXN0VmFsdWVzID1cbiAgICAgICAgICAgICAgICAgICAgcHJldkxlYWQuYW5pbWF0aW9uVmFsdWVzIHx8IHByZXZMZWFkLmxhdGVzdFZhbHVlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub2RlLnJvb3QgJiYgbm9kZS5yb290LmlzVXBkYXRpbmcpIHtcbiAgICAgICAgICAgICAgICBub2RlLmlzTGF5b3V0RGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyBjcm9zc2ZhZGUgfSA9IG5vZGUub3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjcm9zc2ZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcHJldkxlYWQuaGlkZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUT0RPOlxuICAgICAgICAgICAgICogICAtIFRlc3QgYm9yZGVyIHJhZGl1cyB3aGVuIHByZXZpb3VzIG5vZGUgd2FzIGRlbGV0ZWRcbiAgICAgICAgICAgICAqICAgLSBib3hTaGFkb3cgbWl4aW5nXG4gICAgICAgICAgICAgKiAgIC0gU2hhcmVkIGJldHdlZW4gZWxlbWVudCBBIGluIHNjcm9sbGVkIGNvbnRhaW5lciBhbmQgZWxlbWVudCBCIChzY3JvbGwgc3RheXMgdGhlIHNhbWUgb3IgY2hhbmdlcylcbiAgICAgICAgICAgICAqICAgLSBTaGFyZWQgYmV0d2VlbiBlbGVtZW50IEEgaW4gdHJhbnNmb3JtZWQgY29udGFpbmVyIGFuZCBlbGVtZW50IEIgKHRyYW5zZm9ybSBzdGF5cyB0aGUgc2FtZSBvciBjaGFuZ2VzKVxuICAgICAgICAgICAgICogICAtIFNoYXJlZCBiZXR3ZWVuIGVsZW1lbnQgQSBpbiBzY3JvbGxlZCBwYWdlIGFuZCBlbGVtZW50IEIgKHNjcm9sbCBzdGF5cyB0aGUgc2FtZSBvciBjaGFuZ2VzKVxuICAgICAgICAgICAgICogLS0tXG4gICAgICAgICAgICAgKiAgIC0gQ3Jvc3NmYWRlIG9wYWNpdHkgb2Ygcm9vdCBub2Rlc1xuICAgICAgICAgICAgICogICAtIGxheW91dElkIGNoYW5nZXMgYWZ0ZXIgYW5pbWF0aW9uXG4gICAgICAgICAgICAgKiAgIC0gbGF5b3V0SWQgY2hhbmdlcyBtaWQgYW5pbWF0aW9uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgfVxuICAgIH1cbiAgICBleGl0QW5pbWF0aW9uQ29tcGxldGUoKSB7XG4gICAgICAgIHRoaXMubWVtYmVycy5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IG9wdGlvbnMsIHJlc3VtaW5nRnJvbSB9ID0gbm9kZTtcbiAgICAgICAgICAgIG9wdGlvbnMub25FeGl0Q29tcGxldGUgJiYgb3B0aW9ucy5vbkV4aXRDb21wbGV0ZSgpO1xuICAgICAgICAgICAgaWYgKHJlc3VtaW5nRnJvbSkge1xuICAgICAgICAgICAgICAgIHJlc3VtaW5nRnJvbS5vcHRpb25zLm9uRXhpdENvbXBsZXRlICYmXG4gICAgICAgICAgICAgICAgICAgIHJlc3VtaW5nRnJvbS5vcHRpb25zLm9uRXhpdENvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzY2hlZHVsZVJlbmRlcigpIHtcbiAgICAgICAgdGhpcy5tZW1iZXJzLmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgICAgICAgIG5vZGUuaW5zdGFuY2UgJiYgbm9kZS5zY2hlZHVsZVJlbmRlcihmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbGVhciBhbnkgbGVhZHMgdGhhdCBoYXZlIGJlZW4gcmVtb3ZlZCB0aGlzIHJlbmRlciB0byBwcmV2ZW50IHRoZW0gZnJvbSBiZWluZ1xuICAgICAqIHVzZWQgaW4gZnV0dXJlIGFuaW1hdGlvbnMgYW5kIHRvIHByZXZlbnQgbWVtb3J5IGxlYWtzXG4gICAgICovXG4gICAgcmVtb3ZlTGVhZFNuYXBzaG90KCkge1xuICAgICAgICBpZiAodGhpcy5sZWFkICYmIHRoaXMubGVhZC5zbmFwc2hvdCkge1xuICAgICAgICAgICAgdGhpcy5sZWFkLnNuYXBzaG90ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgeyBOb2RlU3RhY2sgfTtcbiJdLCJuYW1lcyI6WyJhZGRVbmlxdWVJdGVtIiwicmVtb3ZlSXRlbSIsIk5vZGVTdGFjayIsImNvbnN0cnVjdG9yIiwibWVtYmVycyIsImFkZCIsIm5vZGUiLCJzY2hlZHVsZVJlbmRlciIsInJlbW92ZSIsInByZXZMZWFkIiwidW5kZWZpbmVkIiwibGVhZCIsImxlbmd0aCIsInByb21vdGUiLCJyZWxlZ2F0ZSIsImluZGV4T2ZOb2RlIiwiZmluZEluZGV4IiwibWVtYmVyIiwiaSIsImlzUHJlc2VudCIsInByZXNlcnZlRm9sbG93T3BhY2l0eSIsInNob3ciLCJpbnN0YW5jZSIsInJlc3VtZUZyb20iLCJwcmVzZXJ2ZU9wYWNpdHkiLCJzbmFwc2hvdCIsImxhdGVzdFZhbHVlcyIsImFuaW1hdGlvblZhbHVlcyIsInJvb3QiLCJpc1VwZGF0aW5nIiwiaXNMYXlvdXREaXJ0eSIsImNyb3NzZmFkZSIsIm9wdGlvbnMiLCJoaWRlIiwiZXhpdEFuaW1hdGlvbkNvbXBsZXRlIiwiZm9yRWFjaCIsInJlc3VtaW5nRnJvbSIsIm9uRXhpdENvbXBsZXRlIiwicmVtb3ZlTGVhZFNuYXBzaG90Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/shared/stack.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs":
/*!**************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   correctBorderRadius: () => (/* binding */ correctBorderRadius),\n/* harmony export */   pixelsToPercent: () => (/* binding */ pixelsToPercent)\n/* harmony export */ });\n/* harmony import */ var _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../value/types/numbers/units.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/numbers/units.mjs\");\n\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min) return 0;\n    return pixels / (axis.max - axis.min) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */ const correctBorderRadius = {\n    correct: (latest, node)=>{\n        if (!node.target) return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */ if (typeof latest === \"string\") {\n            if (_value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px.test(latest)) {\n                latest = parseFloat(latest);\n            } else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */ const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return `${x}% ${y}%`;\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vc3R5bGVzL3NjYWxlLWJvcmRlci1yYWRpdXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF5RDtBQUV6RCxTQUFTQyxnQkFBZ0JDLE1BQU0sRUFBRUMsSUFBSTtJQUNqQyxJQUFJQSxLQUFLQyxHQUFHLEtBQUtELEtBQUtFLEdBQUcsRUFDckIsT0FBTztJQUNYLE9BQU8sU0FBV0YsQ0FBQUEsS0FBS0MsR0FBRyxHQUFHRCxLQUFLRSxHQUFHLElBQUs7QUFDOUM7QUFDQTs7Ozs7O0NBTUMsR0FDRCxNQUFNQyxzQkFBc0I7SUFDeEJDLFNBQVMsQ0FBQ0MsUUFBUUM7UUFDZCxJQUFJLENBQUNBLEtBQUtDLE1BQU0sRUFDWixPQUFPRjtRQUNYOzs7U0FHQyxHQUNELElBQUksT0FBT0EsV0FBVyxVQUFVO1lBQzVCLElBQUlSLDhEQUFFQSxDQUFDVyxJQUFJLENBQUNILFNBQVM7Z0JBQ2pCQSxTQUFTSSxXQUFXSjtZQUN4QixPQUNLO2dCQUNELE9BQU9BO1lBQ1g7UUFDSjtRQUNBOzs7U0FHQyxHQUNELE1BQU1LLElBQUlaLGdCQUFnQk8sUUFBUUMsS0FBS0MsTUFBTSxDQUFDRyxDQUFDO1FBQy9DLE1BQU1DLElBQUliLGdCQUFnQk8sUUFBUUMsS0FBS0MsTUFBTSxDQUFDSSxDQUFDO1FBQy9DLE9BQU8sQ0FBQyxFQUFFRCxFQUFFLEVBQUUsRUFBRUMsRUFBRSxDQUFDLENBQUM7SUFDeEI7QUFDSjtBQUVnRCIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL3N0eWxlcy9zY2FsZS1ib3JkZXItcmFkaXVzLm1qcz9hMjIyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHB4IH0gZnJvbSAnLi4vLi4vdmFsdWUvdHlwZXMvbnVtYmVycy91bml0cy5tanMnO1xuXG5mdW5jdGlvbiBwaXhlbHNUb1BlcmNlbnQocGl4ZWxzLCBheGlzKSB7XG4gICAgaWYgKGF4aXMubWF4ID09PSBheGlzLm1pbilcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgcmV0dXJuIChwaXhlbHMgLyAoYXhpcy5tYXggLSBheGlzLm1pbikpICogMTAwO1xufVxuLyoqXG4gKiBXZSBhbHdheXMgY29ycmVjdCBib3JkZXJSYWRpdXMgYXMgYSBwZXJjZW50YWdlIHJhdGhlciB0aGFuIHBpeGVscyB0byByZWR1Y2UgcGFpbnRzLlxuICogRm9yIGV4YW1wbGUsIGlmIHlvdSBhcmUgcHJvamVjdGluZyBhIGJveCB0aGF0IGlzIDEwMHB4IHdpZGUgd2l0aCBhIDEwcHggYm9yZGVyUmFkaXVzXG4gKiBpbnRvIGEgYm94IHRoYXQgaXMgMjAwcHggd2lkZSB3aXRoIGEgMjBweCBib3JkZXJSYWRpdXMsIHRoYXQgaXMgYWN0dWFsbHkgYSAxMCVcbiAqIGJvcmRlclJhZGl1cyBpbiBib3RoIHN0YXRlcy4gSWYgd2UgYW5pbWF0ZSBiZXR3ZWVuIHRoZSB0d28gaW4gcGl4ZWxzIHRoYXQgd2lsbCB0cmlnZ2VyXG4gKiBhIHBhaW50IGVhY2ggdGltZS4gSWYgd2UgYW5pbWF0ZSBiZXR3ZWVuIHRoZSB0d28gaW4gcGVyY2VudGFnZSB3ZSdsbCBhdm9pZCBhIHBhaW50LlxuICovXG5jb25zdCBjb3JyZWN0Qm9yZGVyUmFkaXVzID0ge1xuICAgIGNvcnJlY3Q6IChsYXRlc3QsIG5vZGUpID0+IHtcbiAgICAgICAgaWYgKCFub2RlLnRhcmdldClcbiAgICAgICAgICAgIHJldHVybiBsYXRlc3Q7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBsYXRlc3QgaXMgYSBzdHJpbmcsIGlmIGl0J3MgYSBwZXJjZW50YWdlIHdlIGNhbiByZXR1cm4gaW1tZWRpYXRlbHkgYXMgaXQnc1xuICAgICAgICAgKiBnb2luZyB0byBiZSBzdHJldGNoZWQgYXBwcm9wcmlhdGVseS4gT3RoZXJ3aXNlLCBpZiBpdCdzIGEgcGl4ZWwsIGNvbnZlcnQgaXQgdG8gYSBudW1iZXIuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAodHlwZW9mIGxhdGVzdCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgaWYgKHB4LnRlc3QobGF0ZXN0KSkge1xuICAgICAgICAgICAgICAgIGxhdGVzdCA9IHBhcnNlRmxvYXQobGF0ZXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBsYXRlc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGxhdGVzdCBpcyBhIG51bWJlciwgaXQncyBhIHBpeGVsIHZhbHVlLiBXZSB1c2UgdGhlIGN1cnJlbnQgdmlld3BvcnRCb3ggdG8gY2FsY3VsYXRlIHRoYXRcbiAgICAgICAgICogcGl4ZWwgdmFsdWUgYXMgYSBwZXJjZW50YWdlIG9mIGVhY2ggYXhpc1xuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgeCA9IHBpeGVsc1RvUGVyY2VudChsYXRlc3QsIG5vZGUudGFyZ2V0LngpO1xuICAgICAgICBjb25zdCB5ID0gcGl4ZWxzVG9QZXJjZW50KGxhdGVzdCwgbm9kZS50YXJnZXQueSk7XG4gICAgICAgIHJldHVybiBgJHt4fSUgJHt5fSVgO1xuICAgIH0sXG59O1xuXG5leHBvcnQgeyBjb3JyZWN0Qm9yZGVyUmFkaXVzLCBwaXhlbHNUb1BlcmNlbnQgfTtcbiJdLCJuYW1lcyI6WyJweCIsInBpeGVsc1RvUGVyY2VudCIsInBpeGVscyIsImF4aXMiLCJtYXgiLCJtaW4iLCJjb3JyZWN0Qm9yZGVyUmFkaXVzIiwiY29ycmVjdCIsImxhdGVzdCIsIm5vZGUiLCJ0YXJnZXQiLCJ0ZXN0IiwicGFyc2VGbG9hdCIsIngiLCJ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   correctBoxShadow: () => (/* binding */ correctBoxShadow)\n/* harmony export */ });\n/* harmony import */ var _utils_mix_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/mix.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/mix.mjs\");\n/* harmony import */ var _value_types_complex_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../value/types/complex/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/complex/index.mjs\");\n\n\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta })=>{\n        const original = latest;\n        const shadow = _value_types_complex_index_mjs__WEBPACK_IMPORTED_MODULE_0__.complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5) return original;\n        const template = _value_types_complex_index_mjs__WEBPACK_IMPORTED_MODULE_0__.complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */ const averageScale = (0,_utils_mix_mjs__WEBPACK_IMPORTED_MODULE_1__.mix)(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\") shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\") shadow[3 + offset] /= averageScale;\n        return template(shadow);\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vc3R5bGVzL3NjYWxlLWJveC1zaGFkb3cubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEwQztBQUNvQjtBQUU5RCxNQUFNRSxtQkFBbUI7SUFDckJDLFNBQVMsQ0FBQ0MsUUFBUSxFQUFFQyxTQUFTLEVBQUVDLGVBQWUsRUFBRTtRQUM1QyxNQUFNQyxXQUFXSDtRQUNqQixNQUFNSSxTQUFTUCxtRUFBT0EsQ0FBQ1EsS0FBSyxDQUFDTDtRQUM3Qix5Q0FBeUM7UUFDekMsSUFBSUksT0FBT0UsTUFBTSxHQUFHLEdBQ2hCLE9BQU9IO1FBQ1gsTUFBTUksV0FBV1YsbUVBQU9BLENBQUNXLGlCQUFpQixDQUFDUjtRQUMzQyxNQUFNUyxTQUFTLE9BQU9MLE1BQU0sQ0FBQyxFQUFFLEtBQUssV0FBVyxJQUFJO1FBQ25ELHNDQUFzQztRQUN0QyxNQUFNTSxTQUFTUixnQkFBZ0JTLENBQUMsQ0FBQ0MsS0FBSyxHQUFHWCxVQUFVVSxDQUFDO1FBQ3BELE1BQU1FLFNBQVNYLGdCQUFnQlksQ0FBQyxDQUFDRixLQUFLLEdBQUdYLFVBQVVhLENBQUM7UUFDcERWLE1BQU0sQ0FBQyxJQUFJSyxPQUFPLElBQUlDO1FBQ3RCTixNQUFNLENBQUMsSUFBSUssT0FBTyxJQUFJSTtRQUN0Qjs7Ozs7U0FLQyxHQUNELE1BQU1FLGVBQWVuQixtREFBR0EsQ0FBQ2MsUUFBUUcsUUFBUTtRQUN6QyxPQUFPO1FBQ1AsSUFBSSxPQUFPVCxNQUFNLENBQUMsSUFBSUssT0FBTyxLQUFLLFVBQzlCTCxNQUFNLENBQUMsSUFBSUssT0FBTyxJQUFJTTtRQUMxQixTQUFTO1FBQ1QsSUFBSSxPQUFPWCxNQUFNLENBQUMsSUFBSUssT0FBTyxLQUFLLFVBQzlCTCxNQUFNLENBQUMsSUFBSUssT0FBTyxJQUFJTTtRQUMxQixPQUFPUixTQUFTSDtJQUNwQjtBQUNKO0FBRTRCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vc3R5bGVzL3NjYWxlLWJveC1zaGFkb3cubWpzPzRiMTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWl4IH0gZnJvbSAnLi4vLi4vdXRpbHMvbWl4Lm1qcyc7XG5pbXBvcnQgeyBjb21wbGV4IH0gZnJvbSAnLi4vLi4vdmFsdWUvdHlwZXMvY29tcGxleC9pbmRleC5tanMnO1xuXG5jb25zdCBjb3JyZWN0Qm94U2hhZG93ID0ge1xuICAgIGNvcnJlY3Q6IChsYXRlc3QsIHsgdHJlZVNjYWxlLCBwcm9qZWN0aW9uRGVsdGEgfSkgPT4ge1xuICAgICAgICBjb25zdCBvcmlnaW5hbCA9IGxhdGVzdDtcbiAgICAgICAgY29uc3Qgc2hhZG93ID0gY29tcGxleC5wYXJzZShsYXRlc3QpO1xuICAgICAgICAvLyBUT0RPOiBEb2Vzbid0IHN1cHBvcnQgbXVsdGlwbGUgc2hhZG93c1xuICAgICAgICBpZiAoc2hhZG93Lmxlbmd0aCA+IDUpXG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWw7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlID0gY29tcGxleC5jcmVhdGVUcmFuc2Zvcm1lcihsYXRlc3QpO1xuICAgICAgICBjb25zdCBvZmZzZXQgPSB0eXBlb2Ygc2hhZG93WzBdICE9PSBcIm51bWJlclwiID8gMSA6IDA7XG4gICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgb3ZlcmFsbCBjb250ZXh0IHNjYWxlXG4gICAgICAgIGNvbnN0IHhTY2FsZSA9IHByb2plY3Rpb25EZWx0YS54LnNjYWxlICogdHJlZVNjYWxlLng7XG4gICAgICAgIGNvbnN0IHlTY2FsZSA9IHByb2plY3Rpb25EZWx0YS55LnNjYWxlICogdHJlZVNjYWxlLnk7XG4gICAgICAgIHNoYWRvd1swICsgb2Zmc2V0XSAvPSB4U2NhbGU7XG4gICAgICAgIHNoYWRvd1sxICsgb2Zmc2V0XSAvPSB5U2NhbGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZGVhbGx5IHdlJ2QgY29ycmVjdCB4IGFuZCB5IHNjYWxlcyBpbmRpdmlkdWFsbHksIGJ1dCBiZWNhdXNlIGJsdXIgYW5kXG4gICAgICAgICAqIHNwcmVhZCBhcHBseSB0byBib3RoIHdlIGhhdmUgdG8gdGFrZSBhIHNjYWxlIGF2ZXJhZ2UgYW5kIGFwcGx5IHRoYXQgaW5zdGVhZC5cbiAgICAgICAgICogV2UgY291bGQgcG90ZW50aWFsbHkgaW1wcm92ZSB0aGUgb3V0Y29tZSBvZiB0aGlzIGJ5IGluY29ycG9yYXRpbmcgdGhlIHJhdGlvIGJldHdlZW5cbiAgICAgICAgICogdGhlIHR3byBzY2FsZXMuXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBhdmVyYWdlU2NhbGUgPSBtaXgoeFNjYWxlLCB5U2NhbGUsIDAuNSk7XG4gICAgICAgIC8vIEJsdXJcbiAgICAgICAgaWYgKHR5cGVvZiBzaGFkb3dbMiArIG9mZnNldF0gPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICBzaGFkb3dbMiArIG9mZnNldF0gLz0gYXZlcmFnZVNjYWxlO1xuICAgICAgICAvLyBTcHJlYWRcbiAgICAgICAgaWYgKHR5cGVvZiBzaGFkb3dbMyArIG9mZnNldF0gPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICBzaGFkb3dbMyArIG9mZnNldF0gLz0gYXZlcmFnZVNjYWxlO1xuICAgICAgICByZXR1cm4gdGVtcGxhdGUoc2hhZG93KTtcbiAgICB9LFxufTtcblxuZXhwb3J0IHsgY29ycmVjdEJveFNoYWRvdyB9O1xuIl0sIm5hbWVzIjpbIm1peCIsImNvbXBsZXgiLCJjb3JyZWN0Qm94U2hhZG93IiwiY29ycmVjdCIsImxhdGVzdCIsInRyZWVTY2FsZSIsInByb2plY3Rpb25EZWx0YSIsIm9yaWdpbmFsIiwic2hhZG93IiwicGFyc2UiLCJsZW5ndGgiLCJ0ZW1wbGF0ZSIsImNyZWF0ZVRyYW5zZm9ybWVyIiwib2Zmc2V0IiwieFNjYWxlIiwieCIsInNjYWxlIiwieVNjYWxlIiwieSIsImF2ZXJhZ2VTY2FsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addScaleCorrector: () => (/* binding */ addScaleCorrector),\n/* harmony export */   scaleCorrectors: () => (/* binding */ scaleCorrectors)\n/* harmony export */ });\nconst scaleCorrectors = {};\nfunction addScaleCorrector(correctors) {\n    Object.assign(scaleCorrectors, correctors);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vc3R5bGVzL3NjYWxlLWNvcnJlY3Rpb24ubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsTUFBTUEsa0JBQWtCLENBQUM7QUFDekIsU0FBU0Msa0JBQWtCQyxVQUFVO0lBQ2pDQyxPQUFPQyxNQUFNLENBQUNKLGlCQUFpQkU7QUFDbkM7QUFFOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9zdHlsZXMvc2NhbGUtY29ycmVjdGlvbi5tanM/ZWFkYyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBzY2FsZUNvcnJlY3RvcnMgPSB7fTtcbmZ1bmN0aW9uIGFkZFNjYWxlQ29ycmVjdG9yKGNvcnJlY3RvcnMpIHtcbiAgICBPYmplY3QuYXNzaWduKHNjYWxlQ29ycmVjdG9ycywgY29ycmVjdG9ycyk7XG59XG5cbmV4cG9ydCB7IGFkZFNjYWxlQ29ycmVjdG9yLCBzY2FsZUNvcnJlY3RvcnMgfTtcbiJdLCJuYW1lcyI6WyJzY2FsZUNvcnJlY3RvcnMiLCJhZGRTY2FsZUNvcnJlY3RvciIsImNvcnJlY3RvcnMiLCJPYmplY3QiLCJhc3NpZ24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/styles/transform.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/styles/transform.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildProjectionTransform: () => (/* binding */ buildProjectionTransform)\n/* harmony export */ });\nfunction buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */ const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    if (xTranslate || yTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */ if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { rotate, rotateX, rotateY } = latestTransform;\n        if (rotate) transform += `rotate(${rotate}deg) `;\n        if (rotateX) transform += `rotateX(${rotateX}deg) `;\n        if (rotateY) transform += `rotateY(${rotateY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */ const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vc3R5bGVzL3RyYW5zZm9ybS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBLHlCQUF5QkMsS0FBSyxFQUFFQyxTQUFTLEVBQUVDLGVBQWU7SUFDL0QsSUFBSUMsWUFBWTtJQUNoQjs7Ozs7S0FLQyxHQUNELE1BQU1DLGFBQWFKLE1BQU1LLENBQUMsQ0FBQ0MsU0FBUyxHQUFHTCxVQUFVSSxDQUFDO0lBQ2xELE1BQU1FLGFBQWFQLE1BQU1RLENBQUMsQ0FBQ0YsU0FBUyxHQUFHTCxVQUFVTyxDQUFDO0lBQ2xELElBQUlKLGNBQWNHLFlBQVk7UUFDMUJKLFlBQVksQ0FBQyxZQUFZLEVBQUVDLFdBQVcsSUFBSSxFQUFFRyxXQUFXLE9BQU8sQ0FBQztJQUNuRTtJQUNBOzs7S0FHQyxHQUNELElBQUlOLFVBQVVJLENBQUMsS0FBSyxLQUFLSixVQUFVTyxDQUFDLEtBQUssR0FBRztRQUN4Q0wsYUFBYSxDQUFDLE1BQU0sRUFBRSxJQUFJRixVQUFVSSxDQUFDLENBQUMsRUFBRSxFQUFFLElBQUlKLFVBQVVPLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDakU7SUFDQSxJQUFJTixpQkFBaUI7UUFDakIsTUFBTSxFQUFFTyxNQUFNLEVBQUVDLE9BQU8sRUFBRUMsT0FBTyxFQUFFLEdBQUdUO1FBQ3JDLElBQUlPLFFBQ0FOLGFBQWEsQ0FBQyxPQUFPLEVBQUVNLE9BQU8sS0FBSyxDQUFDO1FBQ3hDLElBQUlDLFNBQ0FQLGFBQWEsQ0FBQyxRQUFRLEVBQUVPLFFBQVEsS0FBSyxDQUFDO1FBQzFDLElBQUlDLFNBQ0FSLGFBQWEsQ0FBQyxRQUFRLEVBQUVRLFFBQVEsS0FBSyxDQUFDO0lBQzlDO0lBQ0E7OztLQUdDLEdBQ0QsTUFBTUMsZ0JBQWdCWixNQUFNSyxDQUFDLENBQUNRLEtBQUssR0FBR1osVUFBVUksQ0FBQztJQUNqRCxNQUFNUyxnQkFBZ0JkLE1BQU1RLENBQUMsQ0FBQ0ssS0FBSyxHQUFHWixVQUFVTyxDQUFDO0lBQ2pELElBQUlJLGtCQUFrQixLQUFLRSxrQkFBa0IsR0FBRztRQUM1Q1gsYUFBYSxDQUFDLE1BQU0sRUFBRVMsY0FBYyxFQUFFLEVBQUVFLGNBQWMsQ0FBQyxDQUFDO0lBQzVEO0lBQ0EsT0FBT1gsYUFBYTtBQUN4QjtBQUVvQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL3N0eWxlcy90cmFuc2Zvcm0ubWpzPzlmZDYiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gYnVpbGRQcm9qZWN0aW9uVHJhbnNmb3JtKGRlbHRhLCB0cmVlU2NhbGUsIGxhdGVzdFRyYW5zZm9ybSkge1xuICAgIGxldCB0cmFuc2Zvcm0gPSBcIlwiO1xuICAgIC8qKlxuICAgICAqIFRoZSB0cmFuc2xhdGlvbnMgd2UgdXNlIHRvIGNhbGN1bGF0ZSBhcmUgYWx3YXlzIHJlbGF0aXZlIHRvIHRoZSB2aWV3cG9ydCBjb29yZGluYXRlIHNwYWNlLlxuICAgICAqIEJ1dCB3aGVuIHdlIGFwcGx5IHNjYWxlcywgd2UgYWxzbyBzY2FsZSB0aGUgY29vcmRpbmF0ZSBzcGFjZSBvZiBhbiBlbGVtZW50IGFuZCBpdHMgY2hpbGRyZW4uXG4gICAgICogRm9yIGluc3RhbmNlIGlmIHdlIGhhdmUgYSB0cmVlU2NhbGUgKHRoZSBjdWxtaW5hdGlvbiBvZiBhbGwgcGFyZW50IHNjYWxlcykgb2YgMC41IGFuZCB3ZSBuZWVkXG4gICAgICogdG8gbW92ZSBhbiBlbGVtZW50IDEwMCBwaXhlbHMsIHdlIGFjdHVhbGx5IG5lZWQgdG8gbW92ZSBpdCAyMDAgaW4gd2l0aGluIHRoYXQgc2NhbGVkIHNwYWNlLlxuICAgICAqL1xuICAgIGNvbnN0IHhUcmFuc2xhdGUgPSBkZWx0YS54LnRyYW5zbGF0ZSAvIHRyZWVTY2FsZS54O1xuICAgIGNvbnN0IHlUcmFuc2xhdGUgPSBkZWx0YS55LnRyYW5zbGF0ZSAvIHRyZWVTY2FsZS55O1xuICAgIGlmICh4VHJhbnNsYXRlIHx8IHlUcmFuc2xhdGUpIHtcbiAgICAgICAgdHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7eFRyYW5zbGF0ZX1weCwgJHt5VHJhbnNsYXRlfXB4LCAwKSBgO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBcHBseSBzY2FsZSBjb3JyZWN0aW9uIGZvciB0aGUgdHJlZSB0cmFuc2Zvcm0uXG4gICAgICogVGhpcyB3aWxsIGFwcGx5IHNjYWxlIHRvIHRoZSBzY3JlZW4tb3JpZW50YXRlZCBheGVzLlxuICAgICAqL1xuICAgIGlmICh0cmVlU2NhbGUueCAhPT0gMSB8fCB0cmVlU2NhbGUueSAhPT0gMSkge1xuICAgICAgICB0cmFuc2Zvcm0gKz0gYHNjYWxlKCR7MSAvIHRyZWVTY2FsZS54fSwgJHsxIC8gdHJlZVNjYWxlLnl9KSBgO1xuICAgIH1cbiAgICBpZiAobGF0ZXN0VHJhbnNmb3JtKSB7XG4gICAgICAgIGNvbnN0IHsgcm90YXRlLCByb3RhdGVYLCByb3RhdGVZIH0gPSBsYXRlc3RUcmFuc2Zvcm07XG4gICAgICAgIGlmIChyb3RhdGUpXG4gICAgICAgICAgICB0cmFuc2Zvcm0gKz0gYHJvdGF0ZSgke3JvdGF0ZX1kZWcpIGA7XG4gICAgICAgIGlmIChyb3RhdGVYKVxuICAgICAgICAgICAgdHJhbnNmb3JtICs9IGByb3RhdGVYKCR7cm90YXRlWH1kZWcpIGA7XG4gICAgICAgIGlmIChyb3RhdGVZKVxuICAgICAgICAgICAgdHJhbnNmb3JtICs9IGByb3RhdGVZKCR7cm90YXRlWX1kZWcpIGA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGx5IHNjYWxlIHRvIG1hdGNoIHRoZSBzaXplIG9mIHRoZSBlbGVtZW50IHRvIHRoZSBzaXplIHdlIHdhbnQgaXQuXG4gICAgICogVGhpcyB3aWxsIGFwcGx5IHNjYWxlIHRvIHRoZSBlbGVtZW50LW9yaWVudGF0ZWQgYXhlcy5cbiAgICAgKi9cbiAgICBjb25zdCBlbGVtZW50U2NhbGVYID0gZGVsdGEueC5zY2FsZSAqIHRyZWVTY2FsZS54O1xuICAgIGNvbnN0IGVsZW1lbnRTY2FsZVkgPSBkZWx0YS55LnNjYWxlICogdHJlZVNjYWxlLnk7XG4gICAgaWYgKGVsZW1lbnRTY2FsZVggIT09IDEgfHwgZWxlbWVudFNjYWxlWSAhPT0gMSkge1xuICAgICAgICB0cmFuc2Zvcm0gKz0gYHNjYWxlKCR7ZWxlbWVudFNjYWxlWH0sICR7ZWxlbWVudFNjYWxlWX0pYDtcbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zZm9ybSB8fCBcIm5vbmVcIjtcbn1cblxuZXhwb3J0IHsgYnVpbGRQcm9qZWN0aW9uVHJhbnNmb3JtIH07XG4iXSwibmFtZXMiOlsiYnVpbGRQcm9qZWN0aW9uVHJhbnNmb3JtIiwiZGVsdGEiLCJ0cmVlU2NhbGUiLCJsYXRlc3RUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm0iLCJ4VHJhbnNsYXRlIiwieCIsInRyYW5zbGF0ZSIsInlUcmFuc2xhdGUiLCJ5Iiwicm90YXRlIiwicm90YXRlWCIsInJvdGF0ZVkiLCJlbGVtZW50U2NhbGVYIiwic2NhbGUiLCJlbGVtZW50U2NhbGVZIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/styles/transform.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   eachAxis: () => (/* binding */ eachAxis)\n/* harmony export */ });\nfunction eachAxis(callback) {\n    return [\n        callback(\"x\"),\n        callback(\"y\")\n    ];\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vdXRpbHMvZWFjaC1heGlzLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsU0FBU0EsU0FBU0MsUUFBUTtJQUN0QixPQUFPO1FBQUNBLFNBQVM7UUFBTUEsU0FBUztLQUFLO0FBQ3pDO0FBRW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vdXRpbHMvZWFjaC1heGlzLm1qcz85MTAwIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGVhY2hBeGlzKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIFtjYWxsYmFjayhcInhcIiksIGNhbGxiYWNrKFwieVwiKV07XG59XG5cbmV4cG9ydCB7IGVhY2hBeGlzIH07XG4iXSwibmFtZXMiOlsiZWFjaEF4aXMiLCJjYWxsYmFjayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   has2DTranslate: () => (/* binding */ has2DTranslate),\n/* harmony export */   hasScale: () => (/* binding */ hasScale),\n/* harmony export */   hasTransform: () => (/* binding */ hasTransform)\n/* harmony export */ });\nfunction isIdentityScale(scale) {\n    return scale === undefined || scale === 1;\n}\nfunction hasScale({ scale, scaleX, scaleY }) {\n    return !isIdentityScale(scale) || !isIdentityScale(scaleX) || !isIdentityScale(scaleY);\n}\nfunction hasTransform(values) {\n    return hasScale(values) || has2DTranslate(values) || values.z || values.rotate || values.rotateX || values.rotateY;\n}\nfunction has2DTranslate(values) {\n    return is2DTranslate(values.x) || is2DTranslate(values.y);\n}\nfunction is2DTranslate(value) {\n    return value && value !== \"0%\";\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vdXRpbHMvaGFzLXRyYW5zZm9ybS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsU0FBU0EsZ0JBQWdCQyxLQUFLO0lBQzFCLE9BQU9BLFVBQVVDLGFBQWFELFVBQVU7QUFDNUM7QUFDQSxTQUFTRSxTQUFTLEVBQUVGLEtBQUssRUFBRUcsTUFBTSxFQUFFQyxNQUFNLEVBQUU7SUFDdkMsT0FBUSxDQUFDTCxnQkFBZ0JDLFVBQ3JCLENBQUNELGdCQUFnQkksV0FDakIsQ0FBQ0osZ0JBQWdCSztBQUN6QjtBQUNBLFNBQVNDLGFBQWFDLE1BQU07SUFDeEIsT0FBUUosU0FBU0ksV0FDYkMsZUFBZUQsV0FDZkEsT0FBT0UsQ0FBQyxJQUNSRixPQUFPRyxNQUFNLElBQ2JILE9BQU9JLE9BQU8sSUFDZEosT0FBT0ssT0FBTztBQUN0QjtBQUNBLFNBQVNKLGVBQWVELE1BQU07SUFDMUIsT0FBT00sY0FBY04sT0FBT08sQ0FBQyxLQUFLRCxjQUFjTixPQUFPUSxDQUFDO0FBQzVEO0FBQ0EsU0FBU0YsY0FBY0csS0FBSztJQUN4QixPQUFPQSxTQUFTQSxVQUFVO0FBQzlCO0FBRWtEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vdXRpbHMvaGFzLXRyYW5zZm9ybS5tanM/NjVjYSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpc0lkZW50aXR5U2NhbGUoc2NhbGUpIHtcbiAgICByZXR1cm4gc2NhbGUgPT09IHVuZGVmaW5lZCB8fCBzY2FsZSA9PT0gMTtcbn1cbmZ1bmN0aW9uIGhhc1NjYWxlKHsgc2NhbGUsIHNjYWxlWCwgc2NhbGVZIH0pIHtcbiAgICByZXR1cm4gKCFpc0lkZW50aXR5U2NhbGUoc2NhbGUpIHx8XG4gICAgICAgICFpc0lkZW50aXR5U2NhbGUoc2NhbGVYKSB8fFxuICAgICAgICAhaXNJZGVudGl0eVNjYWxlKHNjYWxlWSkpO1xufVxuZnVuY3Rpb24gaGFzVHJhbnNmb3JtKHZhbHVlcykge1xuICAgIHJldHVybiAoaGFzU2NhbGUodmFsdWVzKSB8fFxuICAgICAgICBoYXMyRFRyYW5zbGF0ZSh2YWx1ZXMpIHx8XG4gICAgICAgIHZhbHVlcy56IHx8XG4gICAgICAgIHZhbHVlcy5yb3RhdGUgfHxcbiAgICAgICAgdmFsdWVzLnJvdGF0ZVggfHxcbiAgICAgICAgdmFsdWVzLnJvdGF0ZVkpO1xufVxuZnVuY3Rpb24gaGFzMkRUcmFuc2xhdGUodmFsdWVzKSB7XG4gICAgcmV0dXJuIGlzMkRUcmFuc2xhdGUodmFsdWVzLngpIHx8IGlzMkRUcmFuc2xhdGUodmFsdWVzLnkpO1xufVxuZnVuY3Rpb24gaXMyRFRyYW5zbGF0ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiB2YWx1ZSAhPT0gXCIwJVwiO1xufVxuXG5leHBvcnQgeyBoYXMyRFRyYW5zbGF0ZSwgaGFzU2NhbGUsIGhhc1RyYW5zZm9ybSB9O1xuIl0sIm5hbWVzIjpbImlzSWRlbnRpdHlTY2FsZSIsInNjYWxlIiwidW5kZWZpbmVkIiwiaGFzU2NhbGUiLCJzY2FsZVgiLCJzY2FsZVkiLCJoYXNUcmFuc2Zvcm0iLCJ2YWx1ZXMiLCJoYXMyRFRyYW5zbGF0ZSIsInoiLCJyb3RhdGUiLCJyb3RhdGVYIiwicm90YXRlWSIsImlzMkRUcmFuc2xhdGUiLCJ4IiwieSIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/utils/measure.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/utils/measure.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   measurePageBox: () => (/* binding */ measurePageBox),\n/* harmony export */   measureViewportBox: () => (/* binding */ measureViewportBox)\n/* harmony export */ });\n/* harmony import */ var _geometry_conversion_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geometry/conversion.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs\");\n/* harmony import */ var _geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geometry/delta-apply.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs\");\n\n\nfunction measureViewportBox(instance, transformPoint) {\n    return (0,_geometry_conversion_mjs__WEBPACK_IMPORTED_MODULE_0__.convertBoundingBoxToBox)((0,_geometry_conversion_mjs__WEBPACK_IMPORTED_MODULE_0__.transformBoxPoints)(instance.getBoundingClientRect(), transformPoint));\n}\nfunction measurePageBox(element, rootProjectionNode, transformPagePoint) {\n    const viewportBox = measureViewportBox(element, transformPagePoint);\n    const { scroll } = rootProjectionNode;\n    if (scroll) {\n        (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_1__.translateAxis)(viewportBox.x, scroll.offset.x);\n        (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_1__.translateAxis)(viewportBox.y, scroll.offset.y);\n    }\n    return viewportBox;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vdXRpbHMvbWVhc3VyZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF5RjtBQUM3QjtBQUU1RCxTQUFTRyxtQkFBbUJDLFFBQVEsRUFBRUMsY0FBYztJQUNoRCxPQUFPTCxpRkFBdUJBLENBQUNDLDRFQUFrQkEsQ0FBQ0csU0FBU0UscUJBQXFCLElBQUlEO0FBQ3hGO0FBQ0EsU0FBU0UsZUFBZUMsT0FBTyxFQUFFQyxrQkFBa0IsRUFBRUMsa0JBQWtCO0lBQ25FLE1BQU1DLGNBQWNSLG1CQUFtQkssU0FBU0U7SUFDaEQsTUFBTSxFQUFFRSxNQUFNLEVBQUUsR0FBR0g7SUFDbkIsSUFBSUcsUUFBUTtRQUNSVix3RUFBYUEsQ0FBQ1MsWUFBWUUsQ0FBQyxFQUFFRCxPQUFPRSxNQUFNLENBQUNELENBQUM7UUFDNUNYLHdFQUFhQSxDQUFDUyxZQUFZSSxDQUFDLEVBQUVILE9BQU9FLE1BQU0sQ0FBQ0MsQ0FBQztJQUNoRDtJQUNBLE9BQU9KO0FBQ1g7QUFFOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi91dGlscy9tZWFzdXJlLm1qcz82MzVhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbnZlcnRCb3VuZGluZ0JveFRvQm94LCB0cmFuc2Zvcm1Cb3hQb2ludHMgfSBmcm9tICcuLi9nZW9tZXRyeS9jb252ZXJzaW9uLm1qcyc7XG5pbXBvcnQgeyB0cmFuc2xhdGVBeGlzIH0gZnJvbSAnLi4vZ2VvbWV0cnkvZGVsdGEtYXBwbHkubWpzJztcblxuZnVuY3Rpb24gbWVhc3VyZVZpZXdwb3J0Qm94KGluc3RhbmNlLCB0cmFuc2Zvcm1Qb2ludCkge1xuICAgIHJldHVybiBjb252ZXJ0Qm91bmRpbmdCb3hUb0JveCh0cmFuc2Zvcm1Cb3hQb2ludHMoaW5zdGFuY2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIHRyYW5zZm9ybVBvaW50KSk7XG59XG5mdW5jdGlvbiBtZWFzdXJlUGFnZUJveChlbGVtZW50LCByb290UHJvamVjdGlvbk5vZGUsIHRyYW5zZm9ybVBhZ2VQb2ludCkge1xuICAgIGNvbnN0IHZpZXdwb3J0Qm94ID0gbWVhc3VyZVZpZXdwb3J0Qm94KGVsZW1lbnQsIHRyYW5zZm9ybVBhZ2VQb2ludCk7XG4gICAgY29uc3QgeyBzY3JvbGwgfSA9IHJvb3RQcm9qZWN0aW9uTm9kZTtcbiAgICBpZiAoc2Nyb2xsKSB7XG4gICAgICAgIHRyYW5zbGF0ZUF4aXModmlld3BvcnRCb3gueCwgc2Nyb2xsLm9mZnNldC54KTtcbiAgICAgICAgdHJhbnNsYXRlQXhpcyh2aWV3cG9ydEJveC55LCBzY3JvbGwub2Zmc2V0LnkpO1xuICAgIH1cbiAgICByZXR1cm4gdmlld3BvcnRCb3g7XG59XG5cbmV4cG9ydCB7IG1lYXN1cmVQYWdlQm94LCBtZWFzdXJlVmlld3BvcnRCb3ggfTtcbiJdLCJuYW1lcyI6WyJjb252ZXJ0Qm91bmRpbmdCb3hUb0JveCIsInRyYW5zZm9ybUJveFBvaW50cyIsInRyYW5zbGF0ZUF4aXMiLCJtZWFzdXJlVmlld3BvcnRCb3giLCJpbnN0YW5jZSIsInRyYW5zZm9ybVBvaW50IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibWVhc3VyZVBhZ2VCb3giLCJlbGVtZW50Iiwicm9vdFByb2plY3Rpb25Ob2RlIiwidHJhbnNmb3JtUGFnZVBvaW50Iiwidmlld3BvcnRCb3giLCJzY3JvbGwiLCJ4Iiwib2Zmc2V0IiwieSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/utils/measure.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/VisualElement.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/VisualElement.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VisualElement: () => (/* binding */ VisualElement)\n/* harmony export */ });\n/* harmony import */ var _utils_errors_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../utils/errors.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/errors.mjs\");\n/* harmony import */ var _projection_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../projection/geometry/models.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/models.mjs\");\n/* harmony import */ var _utils_is_ref_object_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../utils/is-ref-object.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/is-ref-object.mjs\");\n/* harmony import */ var _utils_reduced_motion_index_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/reduced-motion/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs\");\n/* harmony import */ var _utils_reduced_motion_state_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/reduced-motion/state.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs\");\n/* harmony import */ var _utils_subscription_manager_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../utils/subscription-manager.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/subscription-manager.mjs\");\n/* harmony import */ var _value_index_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../value/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/index.mjs\");\n/* harmony import */ var _value_use_will_change_is_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../value/use-will-change/is.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/use-will-change/is.mjs\");\n/* harmony import */ var _value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../value/utils/is-motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs\");\n/* harmony import */ var _html_utils_transform_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./html/utils/transform.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/transform.mjs\");\n/* harmony import */ var _utils_is_controlling_variants_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/is-controlling-variants.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs\");\n/* harmony import */ var _utils_is_variant_label_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./utils/is-variant-label.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs\");\n/* harmony import */ var _utils_motion_values_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./utils/motion-values.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/motion-values.mjs\");\n/* harmony import */ var _utils_resolve_variants_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./utils/resolve-variants.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs\");\n/* harmony import */ var _utils_warn_once_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/warn-once.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/warn-once.mjs\");\n/* harmony import */ var _motion_features_definitions_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../motion/features/definitions.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/definitions.mjs\");\n/* harmony import */ var _utils_variant_props_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/variant-props.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/variant-props.mjs\");\n/* harmony import */ var _store_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./store.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/store.mjs\");\n/* harmony import */ var _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../frameloop/frame.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/frameloop/frame.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst featureNames = Object.keys(_motion_features_definitions_mjs__WEBPACK_IMPORTED_MODULE_0__.featureDefinitions);\nconst numFeatures = featureNames.length;\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\"\n];\nconst numVariantProps = _utils_variant_props_mjs__WEBPACK_IMPORTED_MODULE_1__.variantProps.length;\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */ class VisualElement {\n    constructor({ parent, props, presenceContext, reducedMotionConfig, visualState }, options = {}){\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */ this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */ this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */ this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */ this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */ this.values = new Map();\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */ this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */ this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */ this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */ this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */ this.propEventSubscriptions = {};\n        this.notifyUpdate = ()=>this.notify(\"Update\", this.latestValues);\n        this.render = ()=>{\n            if (!this.current) return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.scheduleRender = ()=>_frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_2__.frame.render(this.render, false, true);\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = {\n            ...latestValues\n        };\n        this.initialValues = props.initial ? {\n            ...latestValues\n        } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.isControllingVariants = (0,_utils_is_controlling_variants_mjs__WEBPACK_IMPORTED_MODULE_3__.isControllingVariants)(props);\n        this.isVariantNode = (0,_utils_is_controlling_variants_mjs__WEBPACK_IMPORTED_MODULE_3__.isVariantNode)(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */ const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {});\n        for(const key in initialMotionValues){\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && (0,_value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_4__.isMotionValue)(value)) {\n                value.set(latestValues[key], false);\n                if ((0,_value_use_will_change_is_mjs__WEBPACK_IMPORTED_MODULE_5__.isWillChangeMotionValue)(willChange)) {\n                    willChange.add(key);\n                }\n            }\n        }\n    }\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */ scrapeMotionValuesFromProps(_props, _prevProps) {\n        return {};\n    }\n    mount(instance) {\n        this.current = instance;\n        _store_mjs__WEBPACK_IMPORTED_MODULE_6__.visualElementStore.set(instance, this);\n        if (this.projection && !this.projection.instance) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key)=>this.bindToMotionValue(key, value));\n        if (!_utils_reduced_motion_state_mjs__WEBPACK_IMPORTED_MODULE_7__.hasReducedMotionListener.current) {\n            (0,_utils_reduced_motion_index_mjs__WEBPACK_IMPORTED_MODULE_8__.initPrefersReducedMotion)();\n        }\n        this.shouldReduceMotion = this.reducedMotionConfig === \"never\" ? false : this.reducedMotionConfig === \"always\" ? true : _utils_reduced_motion_state_mjs__WEBPACK_IMPORTED_MODULE_7__.prefersReducedMotion.current;\n        if (true) {\n            (0,_utils_warn_once_mjs__WEBPACK_IMPORTED_MODULE_9__.warnOnce)(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent) this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        _store_mjs__WEBPACK_IMPORTED_MODULE_6__.visualElementStore.delete(this.current);\n        this.projection && this.projection.unmount();\n        (0,_frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_2__.cancelFrame)(this.notifyUpdate);\n        (0,_frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_2__.cancelFrame)(this.render);\n        this.valueSubscriptions.forEach((remove)=>remove());\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for(const key in this.events){\n            this.events[key].clear();\n        }\n        for(const key in this.features){\n            this.features[key].unmount();\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        const valueIsTransform = _html_utils_transform_mjs__WEBPACK_IMPORTED_MODULE_10__.transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue)=>{\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate && _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_2__.frame.update(this.notifyUpdate, false, true);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        this.valueSubscriptions.set(key, ()=>{\n            removeOnChange();\n            removeOnRenderRequest();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */ if (!this.current || !this.sortInstanceNodePosition || this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    loadFeatures({ children, ...renderedProps }, isStrict, preloadedFeatures, initialLayoutGroupConfig) {\n        let ProjectionNodeConstructor;\n        let MeasureLayout;\n        /**\n         * If we're in development mode, check to make sure we're not rendering a motion component\n         * as a child of LazyMotion, as this will break the file-size benefits of using it.\n         */ if ( true && preloadedFeatures && isStrict) {\n            const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n            renderedProps.ignoreStrict ? (0,_utils_errors_mjs__WEBPACK_IMPORTED_MODULE_11__.warning)(false, strictMessage) : (0,_utils_errors_mjs__WEBPACK_IMPORTED_MODULE_11__.invariant)(false, strictMessage);\n        }\n        for(let i = 0; i < numFeatures; i++){\n            const name = featureNames[i];\n            const { isEnabled, Feature: FeatureConstructor, ProjectionNode, MeasureLayout: MeasureLayoutComponent } = _motion_features_definitions_mjs__WEBPACK_IMPORTED_MODULE_0__.featureDefinitions[name];\n            if (ProjectionNode) ProjectionNodeConstructor = ProjectionNode;\n            if (isEnabled(renderedProps)) {\n                if (!this.features[name] && FeatureConstructor) {\n                    this.features[name] = new FeatureConstructor(this);\n                }\n                if (MeasureLayoutComponent) {\n                    MeasureLayout = MeasureLayoutComponent;\n                }\n            }\n        }\n        if (!this.projection && ProjectionNodeConstructor) {\n            this.projection = new ProjectionNodeConstructor(this.latestValues, this.parent && this.parent.projection);\n            const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot } = renderedProps;\n            this.projection.setOptions({\n                layoutId,\n                layout,\n                alwaysMeasureLayout: Boolean(drag) || dragConstraints && (0,_utils_is_ref_object_mjs__WEBPACK_IMPORTED_MODULE_12__.isRefObject)(dragConstraints),\n                visualElement: this,\n                scheduleRender: ()=>this.scheduleRender(),\n                /**\n                 * TODO: Update options in an effect. This could be tricky as it'll be too late\n                 * to update by the time layout animations run.\n                 * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n                 * ensuring it gets called if there's no potential layout animations.\n                 *\n                 */ animationType: typeof layout === \"string\" ? layout : \"both\",\n                initialPromotionConfig: initialLayoutGroupConfig,\n                layoutScroll,\n                layoutRoot\n            });\n        }\n        return MeasureLayout;\n    }\n    updateFeatures() {\n        for(const key in this.features){\n            const feature = this.features[key];\n            if (feature.isMounted) {\n                feature.update();\n            } else {\n                feature.mount();\n                feature.isMounted = true;\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.options, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */ measureViewportBox() {\n        return this.current ? this.measureInstanceViewportBox(this.current, this.props) : (0,_projection_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_13__.createBox)();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Make a target animatable by Popmotion. For instance, if we're\n     * trying to animate width from 100px to 100vw we need to measure 100vw\n     * in pixels to determine what we really need to animate to. This is also\n     * pluggable to support Framer's custom value types like Color,\n     * and CSS variables.\n     */ makeTargetAnimatable(target, canMutate = true) {\n        return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */ update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */ for(let i = 0; i < propEventHandlers.length; i++){\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listener = props[\"on\" + key];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = (0,_utils_motion_values_mjs__WEBPACK_IMPORTED_MODULE_14__.updateMotionValuesFromProps)(this, this.scrapeMotionValuesFromProps(props, this.prevProps), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */ getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */ getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : undefined;\n    }\n    getVariantContext(startAtParent = false) {\n        if (startAtParent) {\n            return this.parent ? this.parent.getVariantContext() : undefined;\n        }\n        if (!this.isControllingVariants) {\n            const context = this.parent ? this.parent.getVariantContext() || {} : {};\n            if (this.props.initial !== undefined) {\n                context.initial = this.props.initial;\n            }\n            return context;\n        }\n        const context = {};\n        for(let i = 0; i < numVariantProps; i++){\n            const name = _utils_variant_props_mjs__WEBPACK_IMPORTED_MODULE_1__.variantProps[i];\n            const prop = this.props[name];\n            if ((0,_utils_is_variant_label_mjs__WEBPACK_IMPORTED_MODULE_15__.isVariantLabel)(prop) || prop === false) {\n                context[name] = prop;\n            }\n        }\n        return context;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */ addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren && closestVariantNode.variantChildren.add(child);\n            return ()=>closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */ addValue(key, value) {\n        // Remove existing value if it exists\n        if (value !== this.values.get(key)) {\n            this.removeValue(key);\n            this.bindToMotionValue(key, value);\n        }\n        this.values.set(key, value);\n        this.latestValues[key] = value.get();\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */ removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */ hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = (0,_value_index_mjs__WEBPACK_IMPORTED_MODULE_16__.motionValue)(defaultValue, {\n                owner: this\n            });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */ readValue(key) {\n        var _a;\n        return this.latestValues[key] !== undefined || !this.current ? this.latestValues[key] : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */ setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */ getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\" ? (_a = (0,_utils_resolve_variants_mjs__WEBPACK_IMPORTED_MODULE_17__.resolveVariantFromProps)(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key] : undefined;\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */ if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */ const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !(0,_value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_4__.isMotionValue)(target)) return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */ return this.initialValues[key] !== undefined && valueFromInitial === undefined ? undefined : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new _utils_subscription_manager_mjs__WEBPACK_IMPORTED_MODULE_18__.SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9WaXN1YWxFbGVtZW50Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF5RDtBQUNLO0FBQ0w7QUFDb0I7QUFDc0I7QUFDM0I7QUFDdkI7QUFDeUI7QUFDUDtBQUNQO0FBQytCO0FBQzdCO0FBQ1U7QUFDRDtBQUNyQjtBQUNzQjtBQUNmO0FBQ1I7QUFDVztBQUU1RCxNQUFNdUIsZUFBZUMsT0FBT0MsSUFBSSxDQUFDUCxnRkFBa0JBO0FBQ25ELE1BQU1RLGNBQWNILGFBQWFJLE1BQU07QUFDdkMsTUFBTUMsb0JBQW9CO0lBQ3RCO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0g7QUFDRCxNQUFNQyxrQkFBa0JWLGtFQUFZQSxDQUFDUSxNQUFNO0FBQzNDOzs7Q0FHQyxHQUNELE1BQU1HO0lBQ0ZDLFlBQVksRUFBRUMsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLGVBQWUsRUFBRUMsbUJBQW1CLEVBQUVDLFdBQVcsRUFBRyxFQUFFQyxVQUFVLENBQUMsQ0FBQyxDQUFFO1FBQzdGOzs7U0FHQyxHQUNELElBQUksQ0FBQ0MsT0FBTyxHQUFHO1FBQ2Y7O1NBRUMsR0FDRCxJQUFJLENBQUNDLFFBQVEsR0FBRyxJQUFJQztRQUNwQjs7U0FFQyxHQUNELElBQUksQ0FBQzNCLGFBQWEsR0FBRztRQUNyQixJQUFJLENBQUNELHFCQUFxQixHQUFHO1FBQzdCOzs7Ozs7U0FNQyxHQUNELElBQUksQ0FBQzZCLGtCQUFrQixHQUFHO1FBQzFCOzs7O1NBSUMsR0FDRCxJQUFJLENBQUNDLE1BQU0sR0FBRyxJQUFJQztRQUNsQjs7U0FFQyxHQUNELElBQUksQ0FBQ0MsUUFBUSxHQUFHLENBQUM7UUFDakI7OztTQUdDLEdBQ0QsSUFBSSxDQUFDQyxrQkFBa0IsR0FBRyxJQUFJRjtRQUM5Qjs7OztTQUlDLEdBQ0QsSUFBSSxDQUFDRyxnQkFBZ0IsR0FBRyxDQUFDO1FBQ3pCOztTQUVDLEdBQ0QsSUFBSSxDQUFDQyxNQUFNLEdBQUcsQ0FBQztRQUNmOzs7O1NBSUMsR0FDRCxJQUFJLENBQUNDLHNCQUFzQixHQUFHLENBQUM7UUFDL0IsSUFBSSxDQUFDQyxZQUFZLEdBQUcsSUFBTSxJQUFJLENBQUNDLE1BQU0sQ0FBQyxVQUFVLElBQUksQ0FBQ0MsWUFBWTtRQUNqRSxJQUFJLENBQUNDLE1BQU0sR0FBRztZQUNWLElBQUksQ0FBQyxJQUFJLENBQUNkLE9BQU8sRUFDYjtZQUNKLElBQUksQ0FBQ2UsWUFBWTtZQUNqQixJQUFJLENBQUNDLGNBQWMsQ0FBQyxJQUFJLENBQUNoQixPQUFPLEVBQUUsSUFBSSxDQUFDaUIsV0FBVyxFQUFFLElBQUksQ0FBQ3RCLEtBQUssQ0FBQ3VCLEtBQUssRUFBRSxJQUFJLENBQUNDLFVBQVU7UUFDekY7UUFDQSxJQUFJLENBQUNDLGNBQWMsR0FBRyxJQUFNckMsdURBQUtBLENBQUMrQixNQUFNLENBQUMsSUFBSSxDQUFDQSxNQUFNLEVBQUUsT0FBTztRQUM3RCxNQUFNLEVBQUVELFlBQVksRUFBRUksV0FBVyxFQUFFLEdBQUduQjtRQUN0QyxJQUFJLENBQUNlLFlBQVksR0FBR0E7UUFDcEIsSUFBSSxDQUFDUSxVQUFVLEdBQUc7WUFBRSxHQUFHUixZQUFZO1FBQUM7UUFDcEMsSUFBSSxDQUFDUyxhQUFhLEdBQUczQixNQUFNNEIsT0FBTyxHQUFHO1lBQUUsR0FBR1YsWUFBWTtRQUFDLElBQUksQ0FBQztRQUM1RCxJQUFJLENBQUNJLFdBQVcsR0FBR0E7UUFDbkIsSUFBSSxDQUFDdkIsTUFBTSxHQUFHQTtRQUNkLElBQUksQ0FBQ0MsS0FBSyxHQUFHQTtRQUNiLElBQUksQ0FBQ0MsZUFBZSxHQUFHQTtRQUN2QixJQUFJLENBQUM0QixLQUFLLEdBQUc5QixTQUFTQSxPQUFPOEIsS0FBSyxHQUFHLElBQUk7UUFDekMsSUFBSSxDQUFDM0IsbUJBQW1CLEdBQUdBO1FBQzNCLElBQUksQ0FBQ0UsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ3pCLHFCQUFxQixHQUFHQSx5RkFBcUJBLENBQUNxQjtRQUNuRCxJQUFJLENBQUNwQixhQUFhLEdBQUdBLGlGQUFhQSxDQUFDb0I7UUFDbkMsSUFBSSxJQUFJLENBQUNwQixhQUFhLEVBQUU7WUFDcEIsSUFBSSxDQUFDa0QsZUFBZSxHQUFHLElBQUl2QjtRQUMvQjtRQUNBLElBQUksQ0FBQ3dCLHNCQUFzQixHQUFHQyxRQUFRakMsVUFBVUEsT0FBT00sT0FBTztRQUM5RDs7Ozs7Ozs7O1NBU0MsR0FDRCxNQUFNLEVBQUU0QixVQUFVLEVBQUUsR0FBR0MscUJBQXFCLEdBQUcsSUFBSSxDQUFDQywyQkFBMkIsQ0FBQ25DLE9BQU8sQ0FBQztRQUN4RixJQUFLLE1BQU1vQyxPQUFPRixvQkFBcUI7WUFDbkMsTUFBTUcsUUFBUUgsbUJBQW1CLENBQUNFLElBQUk7WUFDdEMsSUFBSWxCLFlBQVksQ0FBQ2tCLElBQUksS0FBS0UsYUFBYTdELCtFQUFhQSxDQUFDNEQsUUFBUTtnQkFDekRBLE1BQU1FLEdBQUcsQ0FBQ3JCLFlBQVksQ0FBQ2tCLElBQUksRUFBRTtnQkFDN0IsSUFBSTVELHNGQUF1QkEsQ0FBQ3lELGFBQWE7b0JBQ3JDQSxXQUFXTyxHQUFHLENBQUNKO2dCQUNuQjtZQUNKO1FBQ0o7SUFDSjtJQUNBOzs7Ozs7S0FNQyxHQUNERCw0QkFBNEJNLE1BQU0sRUFBRUMsVUFBVSxFQUFFO1FBQzVDLE9BQU8sQ0FBQztJQUNaO0lBQ0FDLE1BQU1DLFFBQVEsRUFBRTtRQUNaLElBQUksQ0FBQ3ZDLE9BQU8sR0FBR3VDO1FBQ2Z6RCwwREFBa0JBLENBQUNvRCxHQUFHLENBQUNLLFVBQVUsSUFBSTtRQUNyQyxJQUFJLElBQUksQ0FBQ3BCLFVBQVUsSUFBSSxDQUFDLElBQUksQ0FBQ0EsVUFBVSxDQUFDb0IsUUFBUSxFQUFFO1lBQzlDLElBQUksQ0FBQ3BCLFVBQVUsQ0FBQ21CLEtBQUssQ0FBQ0M7UUFDMUI7UUFDQSxJQUFJLElBQUksQ0FBQzdDLE1BQU0sSUFBSSxJQUFJLENBQUNuQixhQUFhLElBQUksQ0FBQyxJQUFJLENBQUNELHFCQUFxQixFQUFFO1lBQ2xFLElBQUksQ0FBQ2tFLHFCQUFxQixHQUFHLElBQUksQ0FBQzlDLE1BQU0sQ0FBQytDLGVBQWUsQ0FBQyxJQUFJO1FBQ2pFO1FBQ0EsSUFBSSxDQUFDckMsTUFBTSxDQUFDc0MsT0FBTyxDQUFDLENBQUNWLE9BQU9ELE1BQVEsSUFBSSxDQUFDWSxpQkFBaUIsQ0FBQ1osS0FBS0M7UUFDaEUsSUFBSSxDQUFDakUscUZBQXdCQSxDQUFDaUMsT0FBTyxFQUFFO1lBQ25DbEMseUZBQXdCQTtRQUM1QjtRQUNBLElBQUksQ0FBQ3FDLGtCQUFrQixHQUNuQixJQUFJLENBQUNOLG1CQUFtQixLQUFLLFVBQ3ZCLFFBQ0EsSUFBSSxDQUFDQSxtQkFBbUIsS0FBSyxXQUN6QixPQUNBN0IsaUZBQW9CQSxDQUFDZ0MsT0FBTztRQUMxQyxJQUFJNEMsSUFBcUMsRUFBRTtZQUN2Q2pFLDhEQUFRQSxDQUFDLElBQUksQ0FBQ3dCLGtCQUFrQixLQUFLLE1BQU07UUFDL0M7UUFDQSxJQUFJLElBQUksQ0FBQ1QsTUFBTSxFQUNYLElBQUksQ0FBQ0EsTUFBTSxDQUFDTyxRQUFRLENBQUNrQyxHQUFHLENBQUMsSUFBSTtRQUNqQyxJQUFJLENBQUNVLE1BQU0sQ0FBQyxJQUFJLENBQUNsRCxLQUFLLEVBQUUsSUFBSSxDQUFDQyxlQUFlO0lBQ2hEO0lBQ0FrRCxVQUFVO1FBQ05oRSwwREFBa0JBLENBQUNpRSxNQUFNLENBQUMsSUFBSSxDQUFDL0MsT0FBTztRQUN0QyxJQUFJLENBQUNtQixVQUFVLElBQUksSUFBSSxDQUFDQSxVQUFVLENBQUMyQixPQUFPO1FBQzFDOUQsaUVBQVdBLENBQUMsSUFBSSxDQUFDMkIsWUFBWTtRQUM3QjNCLGlFQUFXQSxDQUFDLElBQUksQ0FBQzhCLE1BQU07UUFDdkIsSUFBSSxDQUFDUCxrQkFBa0IsQ0FBQ21DLE9BQU8sQ0FBQyxDQUFDTSxTQUFXQTtRQUM1QyxJQUFJLENBQUNSLHFCQUFxQixJQUFJLElBQUksQ0FBQ0EscUJBQXFCO1FBQ3hELElBQUksQ0FBQzlDLE1BQU0sSUFBSSxJQUFJLENBQUNBLE1BQU0sQ0FBQ08sUUFBUSxDQUFDOEMsTUFBTSxDQUFDLElBQUk7UUFDL0MsSUFBSyxNQUFNaEIsT0FBTyxJQUFJLENBQUN0QixNQUFNLENBQUU7WUFDM0IsSUFBSSxDQUFDQSxNQUFNLENBQUNzQixJQUFJLENBQUNrQixLQUFLO1FBQzFCO1FBQ0EsSUFBSyxNQUFNbEIsT0FBTyxJQUFJLENBQUN6QixRQUFRLENBQUU7WUFDN0IsSUFBSSxDQUFDQSxRQUFRLENBQUN5QixJQUFJLENBQUNlLE9BQU87UUFDOUI7UUFDQSxJQUFJLENBQUM5QyxPQUFPLEdBQUc7SUFDbkI7SUFDQTJDLGtCQUFrQlosR0FBRyxFQUFFQyxLQUFLLEVBQUU7UUFDMUIsTUFBTWtCLG1CQUFtQjdFLHNFQUFjQSxDQUFDOEUsR0FBRyxDQUFDcEI7UUFDNUMsTUFBTXFCLGlCQUFpQnBCLE1BQU1xQixFQUFFLENBQUMsVUFBVSxDQUFDQztZQUN2QyxJQUFJLENBQUN6QyxZQUFZLENBQUNrQixJQUFJLEdBQUd1QjtZQUN6QixJQUFJLENBQUMzRCxLQUFLLENBQUM0RCxRQUFRLElBQ2Z4RSx1REFBS0EsQ0FBQzhELE1BQU0sQ0FBQyxJQUFJLENBQUNsQyxZQUFZLEVBQUUsT0FBTztZQUMzQyxJQUFJdUMsb0JBQW9CLElBQUksQ0FBQy9CLFVBQVUsRUFBRTtnQkFDckMsSUFBSSxDQUFDQSxVQUFVLENBQUNxQyxnQkFBZ0IsR0FBRztZQUN2QztRQUNKO1FBQ0EsTUFBTUMsd0JBQXdCekIsTUFBTXFCLEVBQUUsQ0FBQyxpQkFBaUIsSUFBSSxDQUFDakMsY0FBYztRQUMzRSxJQUFJLENBQUNiLGtCQUFrQixDQUFDMkIsR0FBRyxDQUFDSCxLQUFLO1lBQzdCcUI7WUFDQUs7UUFDSjtJQUNKO0lBQ0FDLGlCQUFpQkMsS0FBSyxFQUFFO1FBQ3BCOztTQUVDLEdBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQzNELE9BQU8sSUFDYixDQUFDLElBQUksQ0FBQzRELHdCQUF3QixJQUM5QixJQUFJLENBQUNDLElBQUksS0FBS0YsTUFBTUUsSUFBSSxFQUFFO1lBQzFCLE9BQU87UUFDWDtRQUNBLE9BQU8sSUFBSSxDQUFDRCx3QkFBd0IsQ0FBQyxJQUFJLENBQUM1RCxPQUFPLEVBQUUyRCxNQUFNM0QsT0FBTztJQUNwRTtJQUNBOEQsYUFBYSxFQUFFN0QsUUFBUSxFQUFFLEdBQUc4RCxlQUFlLEVBQUVDLFFBQVEsRUFBRUMsaUJBQWlCLEVBQUVDLHdCQUF3QixFQUFFO1FBQ2hHLElBQUlDO1FBQ0osSUFBSUM7UUFDSjs7O1NBR0MsR0FDRCxJQUFJeEIsS0FBcUMsSUFDckNxQixxQkFDQUQsVUFBVTtZQUNWLE1BQU1LLGdCQUFnQjtZQUN0Qk4sY0FBY08sWUFBWSxHQUNwQjVHLDJEQUFPQSxDQUFDLE9BQU8yRyxpQkFDZjFHLDZEQUFTQSxDQUFDLE9BQU8wRztRQUMzQjtRQUNBLElBQUssSUFBSUUsSUFBSSxHQUFHQSxJQUFJbkYsYUFBYW1GLElBQUs7WUFDbEMsTUFBTUMsT0FBT3ZGLFlBQVksQ0FBQ3NGLEVBQUU7WUFDNUIsTUFBTSxFQUFFRSxTQUFTLEVBQUVDLFNBQVNDLGtCQUFrQixFQUFFQyxjQUFjLEVBQUVSLGVBQWVTLHNCQUFzQixFQUFHLEdBQUdqRyxnRkFBa0IsQ0FBQzRGLEtBQUs7WUFDbkksSUFBSUksZ0JBQ0FULDRCQUE0QlM7WUFDaEMsSUFBSUgsVUFBVVYsZ0JBQWdCO2dCQUMxQixJQUFJLENBQUMsSUFBSSxDQUFDekQsUUFBUSxDQUFDa0UsS0FBSyxJQUFJRyxvQkFBb0I7b0JBQzVDLElBQUksQ0FBQ3JFLFFBQVEsQ0FBQ2tFLEtBQUssR0FBRyxJQUFJRyxtQkFBbUIsSUFBSTtnQkFDckQ7Z0JBQ0EsSUFBSUUsd0JBQXdCO29CQUN4QlQsZ0JBQWdCUztnQkFDcEI7WUFDSjtRQUNKO1FBQ0EsSUFBSSxDQUFDLElBQUksQ0FBQzFELFVBQVUsSUFBSWdELDJCQUEyQjtZQUMvQyxJQUFJLENBQUNoRCxVQUFVLEdBQUcsSUFBSWdELDBCQUEwQixJQUFJLENBQUN0RCxZQUFZLEVBQUUsSUFBSSxDQUFDbkIsTUFBTSxJQUFJLElBQUksQ0FBQ0EsTUFBTSxDQUFDeUIsVUFBVTtZQUN4RyxNQUFNLEVBQUUyRCxRQUFRLEVBQUVDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxlQUFlLEVBQUVDLFlBQVksRUFBRUMsVUFBVSxFQUFHLEdBQUdwQjtZQUMvRSxJQUFJLENBQUM1QyxVQUFVLENBQUNpRSxVQUFVLENBQUM7Z0JBQ3ZCTjtnQkFDQUM7Z0JBQ0FNLHFCQUFxQjFELFFBQVFxRCxTQUN4QkMsbUJBQW1CcEgsc0VBQVdBLENBQUNvSDtnQkFDcENLLGVBQWUsSUFBSTtnQkFDbkJsRSxnQkFBZ0IsSUFBTSxJQUFJLENBQUNBLGNBQWM7Z0JBQ3pDOzs7Ozs7aUJBTUMsR0FDRG1FLGVBQWUsT0FBT1IsV0FBVyxXQUFXQSxTQUFTO2dCQUNyRFMsd0JBQXdCdEI7Z0JBQ3hCZ0I7Z0JBQ0FDO1lBQ0o7UUFDSjtRQUNBLE9BQU9mO0lBQ1g7SUFDQXFCLGlCQUFpQjtRQUNiLElBQUssTUFBTTFELE9BQU8sSUFBSSxDQUFDekIsUUFBUSxDQUFFO1lBQzdCLE1BQU1vRixVQUFVLElBQUksQ0FBQ3BGLFFBQVEsQ0FBQ3lCLElBQUk7WUFDbEMsSUFBSTJELFFBQVFDLFNBQVMsRUFBRTtnQkFDbkJELFFBQVE3QyxNQUFNO1lBQ2xCLE9BQ0s7Z0JBQ0Q2QyxRQUFRcEQsS0FBSztnQkFDYm9ELFFBQVFDLFNBQVMsR0FBRztZQUN4QjtRQUNKO0lBQ0o7SUFDQTVFLGVBQWU7UUFDWCxJQUFJLENBQUM2RSxLQUFLLENBQUMsSUFBSSxDQUFDM0UsV0FBVyxFQUFFLElBQUksQ0FBQ0osWUFBWSxFQUFFLElBQUksQ0FBQ2QsT0FBTyxFQUFFLElBQUksQ0FBQ0osS0FBSztJQUM1RTtJQUNBOzs7O0tBSUMsR0FDRGtHLHFCQUFxQjtRQUNqQixPQUFPLElBQUksQ0FBQzdGLE9BQU8sR0FDYixJQUFJLENBQUM4RiwwQkFBMEIsQ0FBQyxJQUFJLENBQUM5RixPQUFPLEVBQUUsSUFBSSxDQUFDTCxLQUFLLElBQ3hEL0IsMkVBQVNBO0lBQ25CO0lBQ0FtSSxlQUFlaEUsR0FBRyxFQUFFO1FBQ2hCLE9BQU8sSUFBSSxDQUFDbEIsWUFBWSxDQUFDa0IsSUFBSTtJQUNqQztJQUNBaUUsZUFBZWpFLEdBQUcsRUFBRUMsS0FBSyxFQUFFO1FBQ3ZCLElBQUksQ0FBQ25CLFlBQVksQ0FBQ2tCLElBQUksR0FBR0M7SUFDN0I7SUFDQTs7Ozs7O0tBTUMsR0FDRGlFLHFCQUFxQkMsTUFBTSxFQUFFQyxZQUFZLElBQUksRUFBRTtRQUMzQyxPQUFPLElBQUksQ0FBQ0MsZ0NBQWdDLENBQUNGLFFBQVEsSUFBSSxDQUFDdkcsS0FBSyxFQUFFd0c7SUFDckU7SUFDQTs7O0tBR0MsR0FDRHRELE9BQU9sRCxLQUFLLEVBQUVDLGVBQWUsRUFBRTtRQUMzQixJQUFJRCxNQUFNMEcsaUJBQWlCLElBQUksSUFBSSxDQUFDMUcsS0FBSyxDQUFDMEcsaUJBQWlCLEVBQUU7WUFDekQsSUFBSSxDQUFDakYsY0FBYztRQUN2QjtRQUNBLElBQUksQ0FBQ2tGLFNBQVMsR0FBRyxJQUFJLENBQUMzRyxLQUFLO1FBQzNCLElBQUksQ0FBQ0EsS0FBSyxHQUFHQTtRQUNiLElBQUksQ0FBQzRHLG1CQUFtQixHQUFHLElBQUksQ0FBQzNHLGVBQWU7UUFDL0MsSUFBSSxDQUFDQSxlQUFlLEdBQUdBO1FBQ3ZCOztTQUVDLEdBQ0QsSUFBSyxJQUFJMkUsSUFBSSxHQUFHQSxJQUFJakYsa0JBQWtCRCxNQUFNLEVBQUVrRixJQUFLO1lBQy9DLE1BQU14QyxNQUFNekMsaUJBQWlCLENBQUNpRixFQUFFO1lBQ2hDLElBQUksSUFBSSxDQUFDN0Qsc0JBQXNCLENBQUNxQixJQUFJLEVBQUU7Z0JBQ2xDLElBQUksQ0FBQ3JCLHNCQUFzQixDQUFDcUIsSUFBSTtnQkFDaEMsT0FBTyxJQUFJLENBQUNyQixzQkFBc0IsQ0FBQ3FCLElBQUk7WUFDM0M7WUFDQSxNQUFNeUUsV0FBVzdHLEtBQUssQ0FBQyxPQUFPb0MsSUFBSTtZQUNsQyxJQUFJeUUsVUFBVTtnQkFDVixJQUFJLENBQUM5RixzQkFBc0IsQ0FBQ3FCLElBQUksR0FBRyxJQUFJLENBQUNzQixFQUFFLENBQUN0QixLQUFLeUU7WUFDcEQ7UUFDSjtRQUNBLElBQUksQ0FBQ2hHLGdCQUFnQixHQUFHL0Isc0ZBQTJCQSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUNxRCwyQkFBMkIsQ0FBQ25DLE9BQU8sSUFBSSxDQUFDMkcsU0FBUyxHQUFHLElBQUksQ0FBQzlGLGdCQUFnQjtRQUN4SSxJQUFJLElBQUksQ0FBQ2lHLHNCQUFzQixFQUFFO1lBQzdCLElBQUksQ0FBQ0Esc0JBQXNCO1FBQy9CO0lBQ0o7SUFDQUMsV0FBVztRQUNQLE9BQU8sSUFBSSxDQUFDL0csS0FBSztJQUNyQjtJQUNBOztLQUVDLEdBQ0RnSCxXQUFXbkMsSUFBSSxFQUFFO1FBQ2IsT0FBTyxJQUFJLENBQUM3RSxLQUFLLENBQUNpSCxRQUFRLEdBQUcsSUFBSSxDQUFDakgsS0FBSyxDQUFDaUgsUUFBUSxDQUFDcEMsS0FBSyxHQUFHdkM7SUFDN0Q7SUFDQTs7S0FFQyxHQUNENEUsdUJBQXVCO1FBQ25CLE9BQU8sSUFBSSxDQUFDbEgsS0FBSyxDQUFDbUgsVUFBVTtJQUNoQztJQUNBQyx3QkFBd0I7UUFDcEIsT0FBTyxJQUFJLENBQUNwSCxLQUFLLENBQUNxSCxrQkFBa0I7SUFDeEM7SUFDQUMsd0JBQXdCO1FBQ3BCLE9BQU8sSUFBSSxDQUFDMUksYUFBYSxHQUNuQixJQUFJLEdBQ0osSUFBSSxDQUFDbUIsTUFBTSxHQUNQLElBQUksQ0FBQ0EsTUFBTSxDQUFDdUgscUJBQXFCLEtBQ2pDaEY7SUFDZDtJQUNBaUYsa0JBQWtCQyxnQkFBZ0IsS0FBSyxFQUFFO1FBQ3JDLElBQUlBLGVBQWU7WUFDZixPQUFPLElBQUksQ0FBQ3pILE1BQU0sR0FBRyxJQUFJLENBQUNBLE1BQU0sQ0FBQ3dILGlCQUFpQixLQUFLakY7UUFDM0Q7UUFDQSxJQUFJLENBQUMsSUFBSSxDQUFDM0QscUJBQXFCLEVBQUU7WUFDN0IsTUFBTThJLFVBQVUsSUFBSSxDQUFDMUgsTUFBTSxHQUNyQixJQUFJLENBQUNBLE1BQU0sQ0FBQ3dILGlCQUFpQixNQUFNLENBQUMsSUFDcEMsQ0FBQztZQUNQLElBQUksSUFBSSxDQUFDdkgsS0FBSyxDQUFDNEIsT0FBTyxLQUFLVSxXQUFXO2dCQUNsQ21GLFFBQVE3RixPQUFPLEdBQUcsSUFBSSxDQUFDNUIsS0FBSyxDQUFDNEIsT0FBTztZQUN4QztZQUNBLE9BQU82RjtRQUNYO1FBQ0EsTUFBTUEsVUFBVSxDQUFDO1FBQ2pCLElBQUssSUFBSTdDLElBQUksR0FBR0EsSUFBSWhGLGlCQUFpQmdGLElBQUs7WUFDdEMsTUFBTUMsT0FBTzNGLGtFQUFZLENBQUMwRixFQUFFO1lBQzVCLE1BQU04QyxPQUFPLElBQUksQ0FBQzFILEtBQUssQ0FBQzZFLEtBQUs7WUFDN0IsSUFBSWhHLDRFQUFjQSxDQUFDNkksU0FBU0EsU0FBUyxPQUFPO2dCQUN4Q0QsT0FBTyxDQUFDNUMsS0FBSyxHQUFHNkM7WUFDcEI7UUFDSjtRQUNBLE9BQU9EO0lBQ1g7SUFDQTs7S0FFQyxHQUNEM0UsZ0JBQWdCNkUsS0FBSyxFQUFFO1FBQ25CLE1BQU1DLHFCQUFxQixJQUFJLENBQUNOLHFCQUFxQjtRQUNyRCxJQUFJTSxvQkFBb0I7WUFDcEJBLG1CQUFtQjlGLGVBQWUsSUFDOUI4RixtQkFBbUI5RixlQUFlLENBQUNVLEdBQUcsQ0FBQ21GO1lBQzNDLE9BQU8sSUFBTUMsbUJBQW1COUYsZUFBZSxDQUFDc0IsTUFBTSxDQUFDdUU7UUFDM0Q7SUFDSjtJQUNBOztLQUVDLEdBQ0RFLFNBQVN6RixHQUFHLEVBQUVDLEtBQUssRUFBRTtRQUNqQixxQ0FBcUM7UUFDckMsSUFBSUEsVUFBVSxJQUFJLENBQUM1QixNQUFNLENBQUNxSCxHQUFHLENBQUMxRixNQUFNO1lBQ2hDLElBQUksQ0FBQzJGLFdBQVcsQ0FBQzNGO1lBQ2pCLElBQUksQ0FBQ1ksaUJBQWlCLENBQUNaLEtBQUtDO1FBQ2hDO1FBQ0EsSUFBSSxDQUFDNUIsTUFBTSxDQUFDOEIsR0FBRyxDQUFDSCxLQUFLQztRQUNyQixJQUFJLENBQUNuQixZQUFZLENBQUNrQixJQUFJLEdBQUdDLE1BQU15RixHQUFHO0lBQ3RDO0lBQ0E7O0tBRUMsR0FDREMsWUFBWTNGLEdBQUcsRUFBRTtRQUNiLElBQUksQ0FBQzNCLE1BQU0sQ0FBQzJDLE1BQU0sQ0FBQ2hCO1FBQ25CLE1BQU00RixjQUFjLElBQUksQ0FBQ3BILGtCQUFrQixDQUFDa0gsR0FBRyxDQUFDMUY7UUFDaEQsSUFBSTRGLGFBQWE7WUFDYkE7WUFDQSxJQUFJLENBQUNwSCxrQkFBa0IsQ0FBQ3dDLE1BQU0sQ0FBQ2hCO1FBQ25DO1FBQ0EsT0FBTyxJQUFJLENBQUNsQixZQUFZLENBQUNrQixJQUFJO1FBQzdCLElBQUksQ0FBQzZGLDBCQUEwQixDQUFDN0YsS0FBSyxJQUFJLENBQUNkLFdBQVc7SUFDekQ7SUFDQTs7S0FFQyxHQUNENEcsU0FBUzlGLEdBQUcsRUFBRTtRQUNWLE9BQU8sSUFBSSxDQUFDM0IsTUFBTSxDQUFDK0MsR0FBRyxDQUFDcEI7SUFDM0I7SUFDQStGLFNBQVMvRixHQUFHLEVBQUVnRyxZQUFZLEVBQUU7UUFDeEIsSUFBSSxJQUFJLENBQUNwSSxLQUFLLENBQUNTLE1BQU0sSUFBSSxJQUFJLENBQUNULEtBQUssQ0FBQ1MsTUFBTSxDQUFDMkIsSUFBSSxFQUFFO1lBQzdDLE9BQU8sSUFBSSxDQUFDcEMsS0FBSyxDQUFDUyxNQUFNLENBQUMyQixJQUFJO1FBQ2pDO1FBQ0EsSUFBSUMsUUFBUSxJQUFJLENBQUM1QixNQUFNLENBQUNxSCxHQUFHLENBQUMxRjtRQUM1QixJQUFJQyxVQUFVQyxhQUFhOEYsaUJBQWlCOUYsV0FBVztZQUNuREQsUUFBUTlELDhEQUFXQSxDQUFDNkosY0FBYztnQkFBRUMsT0FBTyxJQUFJO1lBQUM7WUFDaEQsSUFBSSxDQUFDUixRQUFRLENBQUN6RixLQUFLQztRQUN2QjtRQUNBLE9BQU9BO0lBQ1g7SUFDQTs7OztLQUlDLEdBQ0RpRyxVQUFVbEcsR0FBRyxFQUFFO1FBQ1gsSUFBSW1HO1FBQ0osT0FBTyxJQUFJLENBQUNySCxZQUFZLENBQUNrQixJQUFJLEtBQUtFLGFBQWEsQ0FBQyxJQUFJLENBQUNqQyxPQUFPLEdBQ3RELElBQUksQ0FBQ2EsWUFBWSxDQUFDa0IsSUFBSSxHQUN0QixDQUFDbUcsS0FBSyxJQUFJLENBQUNDLHNCQUFzQixDQUFDLElBQUksQ0FBQ3hJLEtBQUssRUFBRW9DLElBQUcsTUFBTyxRQUFRbUcsT0FBTyxLQUFLLElBQUlBLEtBQUssSUFBSSxDQUFDRSxxQkFBcUIsQ0FBQyxJQUFJLENBQUNwSSxPQUFPLEVBQUUrQixLQUFLLElBQUksQ0FBQ2hDLE9BQU87SUFDeko7SUFDQTs7O0tBR0MsR0FDRHNJLGNBQWN0RyxHQUFHLEVBQUVDLEtBQUssRUFBRTtRQUN0QixJQUFJLENBQUNYLFVBQVUsQ0FBQ1UsSUFBSSxHQUFHQztJQUMzQjtJQUNBOzs7S0FHQyxHQUNEc0csY0FBY3ZHLEdBQUcsRUFBRTtRQUNmLElBQUltRztRQUNKLE1BQU0sRUFBRTNHLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQzVCLEtBQUs7UUFDOUIsTUFBTTRJLG1CQUFtQixPQUFPaEgsWUFBWSxZQUFZLE9BQU9BLFlBQVksV0FDckUsQ0FBQzJHLEtBQUt4SixxRkFBdUJBLENBQUMsSUFBSSxDQUFDaUIsS0FBSyxFQUFFNEIsUUFBTyxNQUFPLFFBQVEyRyxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEVBQUUsQ0FBQ25HLElBQUksR0FDaEdFO1FBQ047O1NBRUMsR0FDRCxJQUFJVixXQUFXZ0gscUJBQXFCdEcsV0FBVztZQUMzQyxPQUFPc0c7UUFDWDtRQUNBOzs7U0FHQyxHQUNELE1BQU1yQyxTQUFTLElBQUksQ0FBQ2lDLHNCQUFzQixDQUFDLElBQUksQ0FBQ3hJLEtBQUssRUFBRW9DO1FBQ3ZELElBQUltRSxXQUFXakUsYUFBYSxDQUFDN0QsK0VBQWFBLENBQUM4SCxTQUN2QyxPQUFPQTtRQUNYOzs7U0FHQyxHQUNELE9BQU8sSUFBSSxDQUFDNUUsYUFBYSxDQUFDUyxJQUFJLEtBQUtFLGFBQy9Cc0cscUJBQXFCdEcsWUFDbkJBLFlBQ0EsSUFBSSxDQUFDWixVQUFVLENBQUNVLElBQUk7SUFDOUI7SUFDQXNCLEdBQUdtRixTQUFTLEVBQUVDLFFBQVEsRUFBRTtRQUNwQixJQUFJLENBQUMsSUFBSSxDQUFDaEksTUFBTSxDQUFDK0gsVUFBVSxFQUFFO1lBQ3pCLElBQUksQ0FBQy9ILE1BQU0sQ0FBQytILFVBQVUsR0FBRyxJQUFJdkssaUZBQW1CQTtRQUNwRDtRQUNBLE9BQU8sSUFBSSxDQUFDd0MsTUFBTSxDQUFDK0gsVUFBVSxDQUFDckcsR0FBRyxDQUFDc0c7SUFDdEM7SUFDQTdILE9BQU80SCxTQUFTLEVBQUUsR0FBR0UsSUFBSSxFQUFFO1FBQ3ZCLElBQUksSUFBSSxDQUFDakksTUFBTSxDQUFDK0gsVUFBVSxFQUFFO1lBQ3hCLElBQUksQ0FBQy9ILE1BQU0sQ0FBQytILFVBQVUsQ0FBQzVILE1BQU0sSUFBSThIO1FBQ3JDO0lBQ0o7QUFDSjtBQUV5QiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvVmlzdWFsRWxlbWVudC5tanM/ZDJhMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB3YXJuaW5nLCBpbnZhcmlhbnQgfSBmcm9tICcuLi91dGlscy9lcnJvcnMubWpzJztcbmltcG9ydCB7IGNyZWF0ZUJveCB9IGZyb20gJy4uL3Byb2plY3Rpb24vZ2VvbWV0cnkvbW9kZWxzLm1qcyc7XG5pbXBvcnQgeyBpc1JlZk9iamVjdCB9IGZyb20gJy4uL3V0aWxzL2lzLXJlZi1vYmplY3QubWpzJztcbmltcG9ydCB7IGluaXRQcmVmZXJzUmVkdWNlZE1vdGlvbiB9IGZyb20gJy4uL3V0aWxzL3JlZHVjZWQtbW90aW9uL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBoYXNSZWR1Y2VkTW90aW9uTGlzdGVuZXIsIHByZWZlcnNSZWR1Y2VkTW90aW9uIH0gZnJvbSAnLi4vdXRpbHMvcmVkdWNlZC1tb3Rpb24vc3RhdGUubWpzJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbk1hbmFnZXIgfSBmcm9tICcuLi91dGlscy9zdWJzY3JpcHRpb24tbWFuYWdlci5tanMnO1xuaW1wb3J0IHsgbW90aW9uVmFsdWUgfSBmcm9tICcuLi92YWx1ZS9pbmRleC5tanMnO1xuaW1wb3J0IHsgaXNXaWxsQ2hhbmdlTW90aW9uVmFsdWUgfSBmcm9tICcuLi92YWx1ZS91c2Utd2lsbC1jaGFuZ2UvaXMubWpzJztcbmltcG9ydCB7IGlzTW90aW9uVmFsdWUgfSBmcm9tICcuLi92YWx1ZS91dGlscy9pcy1tb3Rpb24tdmFsdWUubWpzJztcbmltcG9ydCB7IHRyYW5zZm9ybVByb3BzIH0gZnJvbSAnLi9odG1sL3V0aWxzL3RyYW5zZm9ybS5tanMnO1xuaW1wb3J0IHsgaXNDb250cm9sbGluZ1ZhcmlhbnRzLCBpc1ZhcmlhbnROb2RlIH0gZnJvbSAnLi91dGlscy9pcy1jb250cm9sbGluZy12YXJpYW50cy5tanMnO1xuaW1wb3J0IHsgaXNWYXJpYW50TGFiZWwgfSBmcm9tICcuL3V0aWxzL2lzLXZhcmlhbnQtbGFiZWwubWpzJztcbmltcG9ydCB7IHVwZGF0ZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyB9IGZyb20gJy4vdXRpbHMvbW90aW9uLXZhbHVlcy5tanMnO1xuaW1wb3J0IHsgcmVzb2x2ZVZhcmlhbnRGcm9tUHJvcHMgfSBmcm9tICcuL3V0aWxzL3Jlc29sdmUtdmFyaWFudHMubWpzJztcbmltcG9ydCB7IHdhcm5PbmNlIH0gZnJvbSAnLi4vdXRpbHMvd2Fybi1vbmNlLm1qcyc7XG5pbXBvcnQgeyBmZWF0dXJlRGVmaW5pdGlvbnMgfSBmcm9tICcuLi9tb3Rpb24vZmVhdHVyZXMvZGVmaW5pdGlvbnMubWpzJztcbmltcG9ydCB7IHZhcmlhbnRQcm9wcyB9IGZyb20gJy4vdXRpbHMvdmFyaWFudC1wcm9wcy5tanMnO1xuaW1wb3J0IHsgdmlzdWFsRWxlbWVudFN0b3JlIH0gZnJvbSAnLi9zdG9yZS5tanMnO1xuaW1wb3J0IHsgZnJhbWUsIGNhbmNlbEZyYW1lIH0gZnJvbSAnLi4vZnJhbWVsb29wL2ZyYW1lLm1qcyc7XG5cbmNvbnN0IGZlYXR1cmVOYW1lcyA9IE9iamVjdC5rZXlzKGZlYXR1cmVEZWZpbml0aW9ucyk7XG5jb25zdCBudW1GZWF0dXJlcyA9IGZlYXR1cmVOYW1lcy5sZW5ndGg7XG5jb25zdCBwcm9wRXZlbnRIYW5kbGVycyA9IFtcbiAgICBcIkFuaW1hdGlvblN0YXJ0XCIsXG4gICAgXCJBbmltYXRpb25Db21wbGV0ZVwiLFxuICAgIFwiVXBkYXRlXCIsXG4gICAgXCJCZWZvcmVMYXlvdXRNZWFzdXJlXCIsXG4gICAgXCJMYXlvdXRNZWFzdXJlXCIsXG4gICAgXCJMYXlvdXRBbmltYXRpb25TdGFydFwiLFxuICAgIFwiTGF5b3V0QW5pbWF0aW9uQ29tcGxldGVcIixcbl07XG5jb25zdCBudW1WYXJpYW50UHJvcHMgPSB2YXJpYW50UHJvcHMubGVuZ3RoO1xuLyoqXG4gKiBBIFZpc3VhbEVsZW1lbnQgaXMgYW4gaW1wZXJhdGl2ZSBhYnN0cmFjdGlvbiBhcm91bmQgVUkgZWxlbWVudHMgc3VjaCBhc1xuICogSFRNTEVsZW1lbnQsIFNWR0VsZW1lbnQsIFRocmVlLk9iamVjdDNEIGV0Yy5cbiAqL1xuY2xhc3MgVmlzdWFsRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoeyBwYXJlbnQsIHByb3BzLCBwcmVzZW5jZUNvbnRleHQsIHJlZHVjZWRNb3Rpb25Db25maWcsIHZpc3VhbFN0YXRlLCB9LCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IHVuZGVybHlpbmcgSW5zdGFuY2UsIGUuZy4gYSBIVE1MRWxlbWVudFxuICAgICAgICAgKiBvciBUaHJlZS5NZXNoIGV0Yy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY3VycmVudCA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHNldCBjb250YWluaW5nIHJlZmVyZW5jZXMgdG8gdGhpcyBWaXN1YWxFbGVtZW50J3MgY2hpbGRyZW4uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gbmV3IFNldCgpO1xuICAgICAgICAvKipcbiAgICAgICAgICogRGV0ZXJtaW5lIHdoYXQgcm9sZSB0aGlzIHZpc3VhbCBlbGVtZW50IHNob3VsZCB0YWtlIGluIHRoZSB2YXJpYW50IHRyZWUuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmlzVmFyaWFudE5vZGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc0NvbnRyb2xsaW5nVmFyaWFudHMgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY2lkZXMgd2hldGhlciB0aGlzIFZpc3VhbEVsZW1lbnQgc2hvdWxkIGFuaW1hdGUgaW4gcmVkdWNlZCBtb3Rpb25cbiAgICAgICAgICogbW9kZS5cbiAgICAgICAgICpcbiAgICAgICAgICogVE9ETzogVGhpcyBpcyBjdXJyZW50bHkgc2V0IG9uIGV2ZXJ5IGluZGl2aWR1YWwgVmlzdWFsRWxlbWVudCBidXQgZmVlbHNcbiAgICAgICAgICogbGlrZSBpdCBjb3VsZCBiZSBzZXQgZ2xvYmFsbHkuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNob3VsZFJlZHVjZU1vdGlvbiA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIG1hcCBvZiBhbGwgbW90aW9uIHZhbHVlcyBhdHRhY2hlZCB0byB0aGlzIHZpc3VhbCBlbGVtZW50LiBNb3Rpb25cbiAgICAgICAgICogdmFsdWVzIGFyZSBzb3VyY2Ugb2YgdHJ1dGggZm9yIGFueSBnaXZlbiBhbmltYXRlZCB2YWx1ZS4gQSBtb3Rpb25cbiAgICAgICAgICogdmFsdWUgbWlnaHQgYmUgcHJvdmlkZWQgZXh0ZXJuYWxseSBieSB0aGUgY29tcG9uZW50IHZpYSBwcm9wcy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudmFsdWVzID0gbmV3IE1hcCgpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ2xlYW51cCBmdW5jdGlvbnMgZm9yIGFjdGl2ZSBmZWF0dXJlcyAoaG92ZXIvdGFwL2V4aXQgZXRjKVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5mZWF0dXJlcyA9IHt9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBtYXAgb2YgZXZlcnkgc3Vic2NyaXB0aW9uIHRoYXQgYmluZHMgdGhlIHByb3ZpZGVkIG9yIGdlbmVyYXRlZFxuICAgICAgICAgKiBtb3Rpb24gdmFsdWVzIG9uQ2hhbmdlIGxpc3RlbmVycyB0byB0aGlzIHZpc3VhbCBlbGVtZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy52YWx1ZVN1YnNjcmlwdGlvbnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgcHJldmlvdXNseS1wcm92aWRlZCBtb3Rpb24gdmFsdWVzIGFzIHJldHVybmVkXG4gICAgICAgICAqIGZyb20gc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzLiBXZSB1c2UgdGhlIGtleXMgaW4gaGVyZSB0byBkZXRlcm1pbmVcbiAgICAgICAgICogaWYgYW55IG1vdGlvbiB2YWx1ZXMgbmVlZCB0byBiZSByZW1vdmVkIGFmdGVyIHByb3BzIGFyZSB1cGRhdGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wcmV2TW90aW9uVmFsdWVzID0ge307XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBvYmplY3QgY29udGFpbmluZyBhIFN1YnNjcmlwdGlvbk1hbmFnZXIgZm9yIGVhY2ggYWN0aXZlIGV2ZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5ldmVudHMgPSB7fTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIG9iamVjdCBjb250YWluaW5nIGFuIHVuc3Vic2NyaWJlIGZ1bmN0aW9uIGZvciBlYWNoIHByb3AgZXZlbnQgc3Vic2NyaXB0aW9uLlxuICAgICAgICAgKiBGb3IgZXhhbXBsZSwgZXZlcnkgXCJVcGRhdGVcIiBldmVudCBjYW4gaGF2ZSBtdWx0aXBsZSBzdWJzY3JpYmVycyB2aWFcbiAgICAgICAgICogVmlzdWFsRWxlbWVudC5vbigpLCBidXQgb25seSBvbmUgb2YgdGhvc2UgY2FuIGJlIGRlZmluZWQgdmlhIHRoZSBvblVwZGF0ZSBwcm9wLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wcm9wRXZlbnRTdWJzY3JpcHRpb25zID0ge307XG4gICAgICAgIHRoaXMubm90aWZ5VXBkYXRlID0gKCkgPT4gdGhpcy5ub3RpZnkoXCJVcGRhdGVcIiwgdGhpcy5sYXRlc3RWYWx1ZXMpO1xuICAgICAgICB0aGlzLnJlbmRlciA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5jdXJyZW50KVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlckJ1aWxkKCk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckluc3RhbmNlKHRoaXMuY3VycmVudCwgdGhpcy5yZW5kZXJTdGF0ZSwgdGhpcy5wcm9wcy5zdHlsZSwgdGhpcy5wcm9qZWN0aW9uKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZVJlbmRlciA9ICgpID0+IGZyYW1lLnJlbmRlcih0aGlzLnJlbmRlciwgZmFsc2UsIHRydWUpO1xuICAgICAgICBjb25zdCB7IGxhdGVzdFZhbHVlcywgcmVuZGVyU3RhdGUgfSA9IHZpc3VhbFN0YXRlO1xuICAgICAgICB0aGlzLmxhdGVzdFZhbHVlcyA9IGxhdGVzdFZhbHVlcztcbiAgICAgICAgdGhpcy5iYXNlVGFyZ2V0ID0geyAuLi5sYXRlc3RWYWx1ZXMgfTtcbiAgICAgICAgdGhpcy5pbml0aWFsVmFsdWVzID0gcHJvcHMuaW5pdGlhbCA/IHsgLi4ubGF0ZXN0VmFsdWVzIH0gOiB7fTtcbiAgICAgICAgdGhpcy5yZW5kZXJTdGF0ZSA9IHJlbmRlclN0YXRlO1xuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLnByZXNlbmNlQ29udGV4dCA9IHByZXNlbmNlQ29udGV4dDtcbiAgICAgICAgdGhpcy5kZXB0aCA9IHBhcmVudCA/IHBhcmVudC5kZXB0aCArIDEgOiAwO1xuICAgICAgICB0aGlzLnJlZHVjZWRNb3Rpb25Db25maWcgPSByZWR1Y2VkTW90aW9uQ29uZmlnO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmlzQ29udHJvbGxpbmdWYXJpYW50cyA9IGlzQ29udHJvbGxpbmdWYXJpYW50cyhwcm9wcyk7XG4gICAgICAgIHRoaXMuaXNWYXJpYW50Tm9kZSA9IGlzVmFyaWFudE5vZGUocHJvcHMpO1xuICAgICAgICBpZiAodGhpcy5pc1ZhcmlhbnROb2RlKSB7XG4gICAgICAgICAgICB0aGlzLnZhcmlhbnRDaGlsZHJlbiA9IG5ldyBTZXQoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1hbnVhbGx5QW5pbWF0ZU9uTW91bnQgPSBCb29sZWFuKHBhcmVudCAmJiBwYXJlbnQuY3VycmVudCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbnkgbW90aW9uIHZhbHVlcyB0aGF0IGFyZSBwcm92aWRlZCB0byB0aGUgZWxlbWVudCB3aGVuIGNyZWF0ZWRcbiAgICAgICAgICogYXJlbid0IHlldCBib3VuZCB0byB0aGUgZWxlbWVudCwgYXMgdGhpcyB3b3VsZCB0ZWNobmljYWxseSBiZSBpbXB1cmUuXG4gICAgICAgICAqIEhvd2V2ZXIsIHdlIGl0ZXJhdGUgdGhyb3VnaCB0aGUgbW90aW9uIHZhbHVlcyBhbmQgc2V0IHRoZW0gdG8gdGhlXG4gICAgICAgICAqIGluaXRpYWwgdmFsdWVzIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICAgICAgICpcbiAgICAgICAgICogVE9ETzogVGhpcyBpcyBpbXB1cmUgYW5kIHdlIHNob3VsZCBsb29rIGF0IGNoYW5naW5nIHRoaXMgdG8gcnVuIG9uIG1vdW50LlxuICAgICAgICAgKiBEb2luZyBzbyB3aWxsIGJyZWFrIHNvbWUgdGVzdHMgYnV0IHRoaXMgaXNuJ3QgbmVjY2Vzc2FyaWx5IGEgYnJlYWtpbmcgY2hhbmdlLFxuICAgICAgICAgKiBtb3JlIGEgcmVmbGVjdGlvbiBvZiB0aGUgdGVzdC5cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IHsgd2lsbENoYW5nZSwgLi4uaW5pdGlhbE1vdGlvblZhbHVlcyB9ID0gdGhpcy5zY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMocHJvcHMsIHt9KTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gaW5pdGlhbE1vdGlvblZhbHVlcykge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBpbml0aWFsTW90aW9uVmFsdWVzW2tleV07XG4gICAgICAgICAgICBpZiAobGF0ZXN0VmFsdWVzW2tleV0gIT09IHVuZGVmaW5lZCAmJiBpc01vdGlvblZhbHVlKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlLnNldChsYXRlc3RWYWx1ZXNba2V5XSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGlmIChpc1dpbGxDaGFuZ2VNb3Rpb25WYWx1ZSh3aWxsQ2hhbmdlKSkge1xuICAgICAgICAgICAgICAgICAgICB3aWxsQ2hhbmdlLmFkZChrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCB0YWtlcyBSZWFjdCBwcm9wcyBhbmQgcmV0dXJucyBmb3VuZCBNb3Rpb25WYWx1ZXMuIEZvciBleGFtcGxlLCBIVE1MXG4gICAgICogTW90aW9uVmFsdWVzIHdpbGwgYmUgZm91bmQgd2l0aGluIHRoZSBzdHlsZSBwcm9wLCB3aGVyZWFzIGZvciBUaHJlZS5qcyB3aXRoaW4gYXR0cmlidXRlIGFycmF5cy5cbiAgICAgKlxuICAgICAqIFRoaXMgaXNuJ3QgYW4gYWJzdHJhY3QgbWV0aG9kIGFzIGl0IG5lZWRzIGNhbGxpbmcgaW4gdGhlIGNvbnN0cnVjdG9yLCBidXQgaXQgaXNcbiAgICAgKiBpbnRlbmRlZCB0byBiZSBvbmUuXG4gICAgICovXG4gICAgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzKF9wcm9wcywgX3ByZXZQcm9wcykge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIG1vdW50KGluc3RhbmNlKSB7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IGluc3RhbmNlO1xuICAgICAgICB2aXN1YWxFbGVtZW50U3RvcmUuc2V0KGluc3RhbmNlLCB0aGlzKTtcbiAgICAgICAgaWYgKHRoaXMucHJvamVjdGlvbiAmJiAhdGhpcy5wcm9qZWN0aW9uLmluc3RhbmNlKSB7XG4gICAgICAgICAgICB0aGlzLnByb2plY3Rpb24ubW91bnQoaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnBhcmVudCAmJiB0aGlzLmlzVmFyaWFudE5vZGUgJiYgIXRoaXMuaXNDb250cm9sbGluZ1ZhcmlhbnRzKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUZyb21WYXJpYW50VHJlZSA9IHRoaXMucGFyZW50LmFkZFZhcmlhbnRDaGlsZCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbHVlcy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB0aGlzLmJpbmRUb01vdGlvblZhbHVlKGtleSwgdmFsdWUpKTtcbiAgICAgICAgaWYgKCFoYXNSZWR1Y2VkTW90aW9uTGlzdGVuZXIuY3VycmVudCkge1xuICAgICAgICAgICAgaW5pdFByZWZlcnNSZWR1Y2VkTW90aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zaG91bGRSZWR1Y2VNb3Rpb24gPVxuICAgICAgICAgICAgdGhpcy5yZWR1Y2VkTW90aW9uQ29uZmlnID09PSBcIm5ldmVyXCJcbiAgICAgICAgICAgICAgICA/IGZhbHNlXG4gICAgICAgICAgICAgICAgOiB0aGlzLnJlZHVjZWRNb3Rpb25Db25maWcgPT09IFwiYWx3YXlzXCJcbiAgICAgICAgICAgICAgICAgICAgPyB0cnVlXG4gICAgICAgICAgICAgICAgICAgIDogcHJlZmVyc1JlZHVjZWRNb3Rpb24uY3VycmVudDtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgd2Fybk9uY2UodGhpcy5zaG91bGRSZWR1Y2VNb3Rpb24gIT09IHRydWUsIFwiWW91IGhhdmUgUmVkdWNlZCBNb3Rpb24gZW5hYmxlZCBvbiB5b3VyIGRldmljZS4gQW5pbWF0aW9ucyBtYXkgbm90IGFwcGVhciBhcyBleHBlY3RlZC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucGFyZW50KVxuICAgICAgICAgICAgdGhpcy5wYXJlbnQuY2hpbGRyZW4uYWRkKHRoaXMpO1xuICAgICAgICB0aGlzLnVwZGF0ZSh0aGlzLnByb3BzLCB0aGlzLnByZXNlbmNlQ29udGV4dCk7XG4gICAgfVxuICAgIHVubW91bnQoKSB7XG4gICAgICAgIHZpc3VhbEVsZW1lbnRTdG9yZS5kZWxldGUodGhpcy5jdXJyZW50KTtcbiAgICAgICAgdGhpcy5wcm9qZWN0aW9uICYmIHRoaXMucHJvamVjdGlvbi51bm1vdW50KCk7XG4gICAgICAgIGNhbmNlbEZyYW1lKHRoaXMubm90aWZ5VXBkYXRlKTtcbiAgICAgICAgY2FuY2VsRnJhbWUodGhpcy5yZW5kZXIpO1xuICAgICAgICB0aGlzLnZhbHVlU3Vic2NyaXB0aW9ucy5mb3JFYWNoKChyZW1vdmUpID0+IHJlbW92ZSgpKTtcbiAgICAgICAgdGhpcy5yZW1vdmVGcm9tVmFyaWFudFRyZWUgJiYgdGhpcy5yZW1vdmVGcm9tVmFyaWFudFRyZWUoKTtcbiAgICAgICAgdGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuY2hpbGRyZW4uZGVsZXRlKHRoaXMpO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLmV2ZW50cykge1xuICAgICAgICAgICAgdGhpcy5ldmVudHNba2V5XS5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuZmVhdHVyZXMpIHtcbiAgICAgICAgICAgIHRoaXMuZmVhdHVyZXNba2V5XS51bm1vdW50KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJyZW50ID0gbnVsbDtcbiAgICB9XG4gICAgYmluZFRvTW90aW9uVmFsdWUoa2V5LCB2YWx1ZSkge1xuICAgICAgICBjb25zdCB2YWx1ZUlzVHJhbnNmb3JtID0gdHJhbnNmb3JtUHJvcHMuaGFzKGtleSk7XG4gICAgICAgIGNvbnN0IHJlbW92ZU9uQ2hhbmdlID0gdmFsdWUub24oXCJjaGFuZ2VcIiwgKGxhdGVzdFZhbHVlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmxhdGVzdFZhbHVlc1trZXldID0gbGF0ZXN0VmFsdWU7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uVXBkYXRlICYmXG4gICAgICAgICAgICAgICAgZnJhbWUudXBkYXRlKHRoaXMubm90aWZ5VXBkYXRlLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAodmFsdWVJc1RyYW5zZm9ybSAmJiB0aGlzLnByb2plY3Rpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb2plY3Rpb24uaXNUcmFuc2Zvcm1EaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZW1vdmVPblJlbmRlclJlcXVlc3QgPSB2YWx1ZS5vbihcInJlbmRlclJlcXVlc3RcIiwgdGhpcy5zY2hlZHVsZVJlbmRlcik7XG4gICAgICAgIHRoaXMudmFsdWVTdWJzY3JpcHRpb25zLnNldChrZXksICgpID0+IHtcbiAgICAgICAgICAgIHJlbW92ZU9uQ2hhbmdlKCk7XG4gICAgICAgICAgICByZW1vdmVPblJlbmRlclJlcXVlc3QoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNvcnROb2RlUG9zaXRpb24ob3RoZXIpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHRoZXNlIG5vZGVzIGFyZW4ndCBldmVuIG9mIHRoZSBzYW1lIHR5cGUgd2UgY2FuJ3QgY29tcGFyZSB0aGVpciBkZXB0aC5cbiAgICAgICAgICovXG4gICAgICAgIGlmICghdGhpcy5jdXJyZW50IHx8XG4gICAgICAgICAgICAhdGhpcy5zb3J0SW5zdGFuY2VOb2RlUG9zaXRpb24gfHxcbiAgICAgICAgICAgIHRoaXMudHlwZSAhPT0gb3RoZXIudHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc29ydEluc3RhbmNlTm9kZVBvc2l0aW9uKHRoaXMuY3VycmVudCwgb3RoZXIuY3VycmVudCk7XG4gICAgfVxuICAgIGxvYWRGZWF0dXJlcyh7IGNoaWxkcmVuLCAuLi5yZW5kZXJlZFByb3BzIH0sIGlzU3RyaWN0LCBwcmVsb2FkZWRGZWF0dXJlcywgaW5pdGlhbExheW91dEdyb3VwQ29uZmlnKSB7XG4gICAgICAgIGxldCBQcm9qZWN0aW9uTm9kZUNvbnN0cnVjdG9yO1xuICAgICAgICBsZXQgTWVhc3VyZUxheW91dDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHdlJ3JlIGluIGRldmVsb3BtZW50IG1vZGUsIGNoZWNrIHRvIG1ha2Ugc3VyZSB3ZSdyZSBub3QgcmVuZGVyaW5nIGEgbW90aW9uIGNvbXBvbmVudFxuICAgICAgICAgKiBhcyBhIGNoaWxkIG9mIExhenlNb3Rpb24sIGFzIHRoaXMgd2lsbCBicmVhayB0aGUgZmlsZS1zaXplIGJlbmVmaXRzIG9mIHVzaW5nIGl0LlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJlxuICAgICAgICAgICAgcHJlbG9hZGVkRmVhdHVyZXMgJiZcbiAgICAgICAgICAgIGlzU3RyaWN0KSB7XG4gICAgICAgICAgICBjb25zdCBzdHJpY3RNZXNzYWdlID0gXCJZb3UgaGF2ZSByZW5kZXJlZCBhIGBtb3Rpb25gIGNvbXBvbmVudCB3aXRoaW4gYSBgTGF6eU1vdGlvbmAgY29tcG9uZW50LiBUaGlzIHdpbGwgYnJlYWsgdHJlZSBzaGFraW5nLiBJbXBvcnQgYW5kIHJlbmRlciBhIGBtYCBjb21wb25lbnQgaW5zdGVhZC5cIjtcbiAgICAgICAgICAgIHJlbmRlcmVkUHJvcHMuaWdub3JlU3RyaWN0XG4gICAgICAgICAgICAgICAgPyB3YXJuaW5nKGZhbHNlLCBzdHJpY3RNZXNzYWdlKVxuICAgICAgICAgICAgICAgIDogaW52YXJpYW50KGZhbHNlLCBzdHJpY3RNZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUZlYXR1cmVzOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBmZWF0dXJlTmFtZXNbaV07XG4gICAgICAgICAgICBjb25zdCB7IGlzRW5hYmxlZCwgRmVhdHVyZTogRmVhdHVyZUNvbnN0cnVjdG9yLCBQcm9qZWN0aW9uTm9kZSwgTWVhc3VyZUxheW91dDogTWVhc3VyZUxheW91dENvbXBvbmVudCwgfSA9IGZlYXR1cmVEZWZpbml0aW9uc1tuYW1lXTtcbiAgICAgICAgICAgIGlmIChQcm9qZWN0aW9uTm9kZSlcbiAgICAgICAgICAgICAgICBQcm9qZWN0aW9uTm9kZUNvbnN0cnVjdG9yID0gUHJvamVjdGlvbk5vZGU7XG4gICAgICAgICAgICBpZiAoaXNFbmFibGVkKHJlbmRlcmVkUHJvcHMpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmZlYXR1cmVzW25hbWVdICYmIEZlYXR1cmVDb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZlYXR1cmVzW25hbWVdID0gbmV3IEZlYXR1cmVDb25zdHJ1Y3Rvcih0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKE1lYXN1cmVMYXlvdXRDb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgTWVhc3VyZUxheW91dCA9IE1lYXN1cmVMYXlvdXRDb21wb25lbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5wcm9qZWN0aW9uICYmIFByb2plY3Rpb25Ob2RlQ29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIHRoaXMucHJvamVjdGlvbiA9IG5ldyBQcm9qZWN0aW9uTm9kZUNvbnN0cnVjdG9yKHRoaXMubGF0ZXN0VmFsdWVzLCB0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC5wcm9qZWN0aW9uKTtcbiAgICAgICAgICAgIGNvbnN0IHsgbGF5b3V0SWQsIGxheW91dCwgZHJhZywgZHJhZ0NvbnN0cmFpbnRzLCBsYXlvdXRTY3JvbGwsIGxheW91dFJvb3QsIH0gPSByZW5kZXJlZFByb3BzO1xuICAgICAgICAgICAgdGhpcy5wcm9qZWN0aW9uLnNldE9wdGlvbnMoe1xuICAgICAgICAgICAgICAgIGxheW91dElkLFxuICAgICAgICAgICAgICAgIGxheW91dCxcbiAgICAgICAgICAgICAgICBhbHdheXNNZWFzdXJlTGF5b3V0OiBCb29sZWFuKGRyYWcpIHx8XG4gICAgICAgICAgICAgICAgICAgIChkcmFnQ29uc3RyYWludHMgJiYgaXNSZWZPYmplY3QoZHJhZ0NvbnN0cmFpbnRzKSksXG4gICAgICAgICAgICAgICAgdmlzdWFsRWxlbWVudDogdGhpcyxcbiAgICAgICAgICAgICAgICBzY2hlZHVsZVJlbmRlcjogKCkgPT4gdGhpcy5zY2hlZHVsZVJlbmRlcigpLFxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFRPRE86IFVwZGF0ZSBvcHRpb25zIGluIGFuIGVmZmVjdC4gVGhpcyBjb3VsZCBiZSB0cmlja3kgYXMgaXQnbGwgYmUgdG9vIGxhdGVcbiAgICAgICAgICAgICAgICAgKiB0byB1cGRhdGUgYnkgdGhlIHRpbWUgbGF5b3V0IGFuaW1hdGlvbnMgcnVuLlxuICAgICAgICAgICAgICAgICAqIFdlIGFsc28gbmVlZCB0byBmaXggdGhpcyBzYWZlVG9SZW1vdmUgYnkgbGlua2luZyBpdCB1cCB0byB0aGUgb25lIHJldHVybmVkIGJ5IHVzZVByZXNlbmNlLFxuICAgICAgICAgICAgICAgICAqIGVuc3VyaW5nIGl0IGdldHMgY2FsbGVkIGlmIHRoZXJlJ3Mgbm8gcG90ZW50aWFsIGxheW91dCBhbmltYXRpb25zLlxuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uVHlwZTogdHlwZW9mIGxheW91dCA9PT0gXCJzdHJpbmdcIiA/IGxheW91dCA6IFwiYm90aFwiLFxuICAgICAgICAgICAgICAgIGluaXRpYWxQcm9tb3Rpb25Db25maWc6IGluaXRpYWxMYXlvdXRHcm91cENvbmZpZyxcbiAgICAgICAgICAgICAgICBsYXlvdXRTY3JvbGwsXG4gICAgICAgICAgICAgICAgbGF5b3V0Um9vdCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBNZWFzdXJlTGF5b3V0O1xuICAgIH1cbiAgICB1cGRhdGVGZWF0dXJlcygpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5mZWF0dXJlcykge1xuICAgICAgICAgICAgY29uc3QgZmVhdHVyZSA9IHRoaXMuZmVhdHVyZXNba2V5XTtcbiAgICAgICAgICAgIGlmIChmZWF0dXJlLmlzTW91bnRlZCkge1xuICAgICAgICAgICAgICAgIGZlYXR1cmUudXBkYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBmZWF0dXJlLm1vdW50KCk7XG4gICAgICAgICAgICAgICAgZmVhdHVyZS5pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHRyaWdnZXJCdWlsZCgpIHtcbiAgICAgICAgdGhpcy5idWlsZCh0aGlzLnJlbmRlclN0YXRlLCB0aGlzLmxhdGVzdFZhbHVlcywgdGhpcy5vcHRpb25zLCB0aGlzLnByb3BzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWVhc3VyZSB0aGUgY3VycmVudCB2aWV3cG9ydCBib3ggd2l0aCBvciB3aXRob3V0IHRyYW5zZm9ybXMuXG4gICAgICogT25seSBtZWFzdXJlcyBheGlzLWFsaWduZWQgYm94ZXMsIHJvdGF0ZSBhbmQgc2tldyBtdXN0IGJlIG1hbnVhbGx5XG4gICAgICogcmVtb3ZlZCB3aXRoIGEgcmUtcmVuZGVyIHRvIHdvcmsuXG4gICAgICovXG4gICAgbWVhc3VyZVZpZXdwb3J0Qm94KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50XG4gICAgICAgICAgICA/IHRoaXMubWVhc3VyZUluc3RhbmNlVmlld3BvcnRCb3godGhpcy5jdXJyZW50LCB0aGlzLnByb3BzKVxuICAgICAgICAgICAgOiBjcmVhdGVCb3goKTtcbiAgICB9XG4gICAgZ2V0U3RhdGljVmFsdWUoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxhdGVzdFZhbHVlc1trZXldO1xuICAgIH1cbiAgICBzZXRTdGF0aWNWYWx1ZShrZXksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMubGF0ZXN0VmFsdWVzW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWFrZSBhIHRhcmdldCBhbmltYXRhYmxlIGJ5IFBvcG1vdGlvbi4gRm9yIGluc3RhbmNlLCBpZiB3ZSdyZVxuICAgICAqIHRyeWluZyB0byBhbmltYXRlIHdpZHRoIGZyb20gMTAwcHggdG8gMTAwdncgd2UgbmVlZCB0byBtZWFzdXJlIDEwMHZ3XG4gICAgICogaW4gcGl4ZWxzIHRvIGRldGVybWluZSB3aGF0IHdlIHJlYWxseSBuZWVkIHRvIGFuaW1hdGUgdG8uIFRoaXMgaXMgYWxzb1xuICAgICAqIHBsdWdnYWJsZSB0byBzdXBwb3J0IEZyYW1lcidzIGN1c3RvbSB2YWx1ZSB0eXBlcyBsaWtlIENvbG9yLFxuICAgICAqIGFuZCBDU1MgdmFyaWFibGVzLlxuICAgICAqL1xuICAgIG1ha2VUYXJnZXRBbmltYXRhYmxlKHRhcmdldCwgY2FuTXV0YXRlID0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYWtlVGFyZ2V0QW5pbWF0YWJsZUZyb21JbnN0YW5jZSh0YXJnZXQsIHRoaXMucHJvcHMsIGNhbk11dGF0ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgcHJvdmlkZWQgcHJvcHMuIEVuc3VyZSBhbnkgbmV3bHktYWRkZWQgbW90aW9uIHZhbHVlcyBhcmVcbiAgICAgKiBhZGRlZCB0byBvdXIgbWFwLCBvbGQgb25lcyByZW1vdmVkLCBhbmQgbGlzdGVuZXJzIHVwZGF0ZWQuXG4gICAgICovXG4gICAgdXBkYXRlKHByb3BzLCBwcmVzZW5jZUNvbnRleHQpIHtcbiAgICAgICAgaWYgKHByb3BzLnRyYW5zZm9ybVRlbXBsYXRlIHx8IHRoaXMucHJvcHMudHJhbnNmb3JtVGVtcGxhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVSZW5kZXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByZXZQcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5wcmV2UHJlc2VuY2VDb250ZXh0ID0gdGhpcy5wcmVzZW5jZUNvbnRleHQ7XG4gICAgICAgIHRoaXMucHJlc2VuY2VDb250ZXh0ID0gcHJlc2VuY2VDb250ZXh0O1xuICAgICAgICAvKipcbiAgICAgICAgICogVXBkYXRlIHByb3AgZXZlbnQgaGFuZGxlcnMgaWUgb25BbmltYXRpb25TdGFydCwgb25BbmltYXRpb25Db21wbGV0ZVxuICAgICAgICAgKi9cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wRXZlbnRIYW5kbGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gcHJvcEV2ZW50SGFuZGxlcnNbaV07XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wRXZlbnRTdWJzY3JpcHRpb25zW2tleV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BFdmVudFN1YnNjcmlwdGlvbnNba2V5XSgpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnByb3BFdmVudFN1YnNjcmlwdGlvbnNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxpc3RlbmVyID0gcHJvcHNbXCJvblwiICsga2V5XTtcbiAgICAgICAgICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcEV2ZW50U3Vic2NyaXB0aW9uc1trZXldID0gdGhpcy5vbihrZXksIGxpc3RlbmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByZXZNb3Rpb25WYWx1ZXMgPSB1cGRhdGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHModGhpcywgdGhpcy5zY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMocHJvcHMsIHRoaXMucHJldlByb3BzKSwgdGhpcy5wcmV2TW90aW9uVmFsdWVzKTtcbiAgICAgICAgaWYgKHRoaXMuaGFuZGxlQ2hpbGRNb3Rpb25WYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVDaGlsZE1vdGlvblZhbHVlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0UHJvcHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB2YXJpYW50IGRlZmluaXRpb24gd2l0aCBhIGdpdmVuIG5hbWUuXG4gICAgICovXG4gICAgZ2V0VmFyaWFudChuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLnZhcmlhbnRzID8gdGhpcy5wcm9wcy52YXJpYW50c1tuYW1lXSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZGVmaW5lZCBkZWZhdWx0IHRyYW5zaXRpb24gb24gdGhpcyBjb21wb25lbnQuXG4gICAgICovXG4gICAgZ2V0RGVmYXVsdFRyYW5zaXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLnRyYW5zaXRpb247XG4gICAgfVxuICAgIGdldFRyYW5zZm9ybVBhZ2VQb2ludCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMudHJhbnNmb3JtUGFnZVBvaW50O1xuICAgIH1cbiAgICBnZXRDbG9zZXN0VmFyaWFudE5vZGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFyaWFudE5vZGVcbiAgICAgICAgICAgID8gdGhpc1xuICAgICAgICAgICAgOiB0aGlzLnBhcmVudFxuICAgICAgICAgICAgICAgID8gdGhpcy5wYXJlbnQuZ2V0Q2xvc2VzdFZhcmlhbnROb2RlKClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZ2V0VmFyaWFudENvbnRleHQoc3RhcnRBdFBhcmVudCA9IGZhbHNlKSB7XG4gICAgICAgIGlmIChzdGFydEF0UGFyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQgPyB0aGlzLnBhcmVudC5nZXRWYXJpYW50Q29udGV4dCgpIDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5pc0NvbnRyb2xsaW5nVmFyaWFudHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLnBhcmVudFxuICAgICAgICAgICAgICAgID8gdGhpcy5wYXJlbnQuZ2V0VmFyaWFudENvbnRleHQoKSB8fCB7fVxuICAgICAgICAgICAgICAgIDoge307XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5pbml0aWFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmluaXRpYWwgPSB0aGlzLnByb3BzLmluaXRpYWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb250ZXh0ID0ge307XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtVmFyaWFudFByb3BzOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSB2YXJpYW50UHJvcHNbaV07XG4gICAgICAgICAgICBjb25zdCBwcm9wID0gdGhpcy5wcm9wc1tuYW1lXTtcbiAgICAgICAgICAgIGlmIChpc1ZhcmlhbnRMYWJlbChwcm9wKSB8fCBwcm9wID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGNvbnRleHRbbmFtZV0gPSBwcm9wO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb250ZXh0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgYSBjaGlsZCB2aXN1YWwgZWxlbWVudCB0byBvdXIgc2V0IG9mIGNoaWxkcmVuLlxuICAgICAqL1xuICAgIGFkZFZhcmlhbnRDaGlsZChjaGlsZCkge1xuICAgICAgICBjb25zdCBjbG9zZXN0VmFyaWFudE5vZGUgPSB0aGlzLmdldENsb3Nlc3RWYXJpYW50Tm9kZSgpO1xuICAgICAgICBpZiAoY2xvc2VzdFZhcmlhbnROb2RlKSB7XG4gICAgICAgICAgICBjbG9zZXN0VmFyaWFudE5vZGUudmFyaWFudENoaWxkcmVuICYmXG4gICAgICAgICAgICAgICAgY2xvc2VzdFZhcmlhbnROb2RlLnZhcmlhbnRDaGlsZHJlbi5hZGQoY2hpbGQpO1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IGNsb3Nlc3RWYXJpYW50Tm9kZS52YXJpYW50Q2hpbGRyZW4uZGVsZXRlKGNoaWxkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgYSBtb3Rpb24gdmFsdWUgYW5kIGJpbmQgaXQgdG8gdGhpcyB2aXN1YWwgZWxlbWVudC5cbiAgICAgKi9cbiAgICBhZGRWYWx1ZShrZXksIHZhbHVlKSB7XG4gICAgICAgIC8vIFJlbW92ZSBleGlzdGluZyB2YWx1ZSBpZiBpdCBleGlzdHNcbiAgICAgICAgaWYgKHZhbHVlICE9PSB0aGlzLnZhbHVlcy5nZXQoa2V5KSkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVWYWx1ZShrZXkpO1xuICAgICAgICAgICAgdGhpcy5iaW5kVG9Nb3Rpb25WYWx1ZShrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbHVlcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIHRoaXMubGF0ZXN0VmFsdWVzW2tleV0gPSB2YWx1ZS5nZXQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgbW90aW9uIHZhbHVlIGFuZCB1bmJpbmQgYW55IGFjdGl2ZSBzdWJzY3JpcHRpb25zLlxuICAgICAqL1xuICAgIHJlbW92ZVZhbHVlKGtleSkge1xuICAgICAgICB0aGlzLnZhbHVlcy5kZWxldGUoa2V5KTtcbiAgICAgICAgY29uc3QgdW5zdWJzY3JpYmUgPSB0aGlzLnZhbHVlU3Vic2NyaXB0aW9ucy5nZXQoa2V5KTtcbiAgICAgICAgaWYgKHVuc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy52YWx1ZVN1YnNjcmlwdGlvbnMuZGVsZXRlKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIHRoaXMubGF0ZXN0VmFsdWVzW2tleV07XG4gICAgICAgIHRoaXMucmVtb3ZlVmFsdWVGcm9tUmVuZGVyU3RhdGUoa2V5LCB0aGlzLnJlbmRlclN0YXRlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2sgd2hldGhlciB3ZSBoYXZlIGEgbW90aW9uIHZhbHVlIGZvciB0aGlzIGtleVxuICAgICAqL1xuICAgIGhhc1ZhbHVlKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXMuaGFzKGtleSk7XG4gICAgfVxuICAgIGdldFZhbHVlKGtleSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnZhbHVlcyAmJiB0aGlzLnByb3BzLnZhbHVlc1trZXldKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy52YWx1ZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLnZhbHVlcy5nZXQoa2V5KTtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHZhbHVlID0gbW90aW9uVmFsdWUoZGVmYXVsdFZhbHVlLCB7IG93bmVyOiB0aGlzIH0pO1xuICAgICAgICAgICAgdGhpcy5hZGRWYWx1ZShrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElmIHdlJ3JlIHRyeWluZyB0byBhbmltYXRlIHRvIGEgcHJldmlvdXNseSB1bmVuY291bnRlcmVkIHZhbHVlLFxuICAgICAqIHdlIG5lZWQgdG8gY2hlY2sgZm9yIGl0IGluIG91ciBzdGF0ZSBhbmQgYXMgYSBsYXN0IHJlc29ydCByZWFkIGl0XG4gICAgICogZGlyZWN0bHkgZnJvbSB0aGUgaW5zdGFuY2UgKHdoaWNoIG1pZ2h0IGhhdmUgcGVyZm9ybWFuY2UgaW1wbGljYXRpb25zKS5cbiAgICAgKi9cbiAgICByZWFkVmFsdWUoa2V5KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIHRoaXMubGF0ZXN0VmFsdWVzW2tleV0gIT09IHVuZGVmaW5lZCB8fCAhdGhpcy5jdXJyZW50XG4gICAgICAgICAgICA/IHRoaXMubGF0ZXN0VmFsdWVzW2tleV1cbiAgICAgICAgICAgIDogKF9hID0gdGhpcy5nZXRCYXNlVGFyZ2V0RnJvbVByb3BzKHRoaXMucHJvcHMsIGtleSkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRoaXMucmVhZFZhbHVlRnJvbUluc3RhbmNlKHRoaXMuY3VycmVudCwga2V5LCB0aGlzLm9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGJhc2UgdGFyZ2V0IHRvIGxhdGVyIGFuaW1hdGUgYmFjayB0by4gVGhpcyBpcyBjdXJyZW50bHlcbiAgICAgKiBvbmx5IGh5ZHJhdGVkIG9uIGNyZWF0aW9uIGFuZCB3aGVuIHdlIGZpcnN0IHJlYWQgYSB2YWx1ZS5cbiAgICAgKi9cbiAgICBzZXRCYXNlVGFyZ2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5iYXNlVGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmluZCB0aGUgYmFzZSB0YXJnZXQgZm9yIGEgdmFsdWUgdGhhdHMgYmVlbiByZW1vdmVkIGZyb20gYWxsIGFuaW1hdGlvblxuICAgICAqIHByb3BzLlxuICAgICAqL1xuICAgIGdldEJhc2VUYXJnZXQoa2V5KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgeyBpbml0aWFsIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBjb25zdCB2YWx1ZUZyb21Jbml0aWFsID0gdHlwZW9mIGluaXRpYWwgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIGluaXRpYWwgPT09IFwib2JqZWN0XCJcbiAgICAgICAgICAgID8gKF9hID0gcmVzb2x2ZVZhcmlhbnRGcm9tUHJvcHModGhpcy5wcm9wcywgaW5pdGlhbCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVtrZXldXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHRoaXMgdmFsdWUgc3RpbGwgZXhpc3RzIGluIHRoZSBjdXJyZW50IGluaXRpYWwgdmFyaWFudCwgcmVhZCB0aGF0LlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKGluaXRpYWwgJiYgdmFsdWVGcm9tSW5pdGlhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVGcm9tSW5pdGlhbDtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogQWx0ZXJuYXRpdmVseSwgaWYgdGhpcyBWaXN1YWxFbGVtZW50IGNvbmZpZyBoYXMgZGVmaW5lZCBhIGdldEJhc2VUYXJnZXRcbiAgICAgICAgICogc28gd2UgY2FuIHJlYWQgdGhlIHZhbHVlIGZyb20gYW4gYWx0ZXJuYXRpdmUgc291cmNlLCB0cnkgdGhhdC5cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuZ2V0QmFzZVRhcmdldEZyb21Qcm9wcyh0aGlzLnByb3BzLCBrZXkpO1xuICAgICAgICBpZiAodGFyZ2V0ICE9PSB1bmRlZmluZWQgJiYgIWlzTW90aW9uVmFsdWUodGFyZ2V0KSlcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0aGUgdmFsdWUgd2FzIGluaXRpYWxseSBkZWZpbmVkIG9uIGluaXRpYWwsIGJ1dCBpdCBkb2Vzbid0IGFueSBtb3JlLFxuICAgICAgICAgKiByZXR1cm4gdW5kZWZpbmVkLiBPdGhlcndpc2UgcmV0dXJuIHRoZSB2YWx1ZSBhcyBpbml0aWFsbHkgcmVhZCBmcm9tIHRoZSBET00uXG4gICAgICAgICAqL1xuICAgICAgICByZXR1cm4gdGhpcy5pbml0aWFsVmFsdWVzW2tleV0gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgdmFsdWVGcm9tSW5pdGlhbCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICAgICAgOiB0aGlzLmJhc2VUYXJnZXRba2V5XTtcbiAgICB9XG4gICAgb24oZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoIXRoaXMuZXZlbnRzW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzW2V2ZW50TmFtZV0gPSBuZXcgU3Vic2NyaXB0aW9uTWFuYWdlcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmV2ZW50c1tldmVudE5hbWVdLmFkZChjYWxsYmFjayk7XG4gICAgfVxuICAgIG5vdGlmeShldmVudE5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKHRoaXMuZXZlbnRzW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzW2V2ZW50TmFtZV0ubm90aWZ5KC4uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgeyBWaXN1YWxFbGVtZW50IH07XG4iXSwibmFtZXMiOlsid2FybmluZyIsImludmFyaWFudCIsImNyZWF0ZUJveCIsImlzUmVmT2JqZWN0IiwiaW5pdFByZWZlcnNSZWR1Y2VkTW90aW9uIiwiaGFzUmVkdWNlZE1vdGlvbkxpc3RlbmVyIiwicHJlZmVyc1JlZHVjZWRNb3Rpb24iLCJTdWJzY3JpcHRpb25NYW5hZ2VyIiwibW90aW9uVmFsdWUiLCJpc1dpbGxDaGFuZ2VNb3Rpb25WYWx1ZSIsImlzTW90aW9uVmFsdWUiLCJ0cmFuc2Zvcm1Qcm9wcyIsImlzQ29udHJvbGxpbmdWYXJpYW50cyIsImlzVmFyaWFudE5vZGUiLCJpc1ZhcmlhbnRMYWJlbCIsInVwZGF0ZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyIsInJlc29sdmVWYXJpYW50RnJvbVByb3BzIiwid2Fybk9uY2UiLCJmZWF0dXJlRGVmaW5pdGlvbnMiLCJ2YXJpYW50UHJvcHMiLCJ2aXN1YWxFbGVtZW50U3RvcmUiLCJmcmFtZSIsImNhbmNlbEZyYW1lIiwiZmVhdHVyZU5hbWVzIiwiT2JqZWN0Iiwia2V5cyIsIm51bUZlYXR1cmVzIiwibGVuZ3RoIiwicHJvcEV2ZW50SGFuZGxlcnMiLCJudW1WYXJpYW50UHJvcHMiLCJWaXN1YWxFbGVtZW50IiwiY29uc3RydWN0b3IiLCJwYXJlbnQiLCJwcm9wcyIsInByZXNlbmNlQ29udGV4dCIsInJlZHVjZWRNb3Rpb25Db25maWciLCJ2aXN1YWxTdGF0ZSIsIm9wdGlvbnMiLCJjdXJyZW50IiwiY2hpbGRyZW4iLCJTZXQiLCJzaG91bGRSZWR1Y2VNb3Rpb24iLCJ2YWx1ZXMiLCJNYXAiLCJmZWF0dXJlcyIsInZhbHVlU3Vic2NyaXB0aW9ucyIsInByZXZNb3Rpb25WYWx1ZXMiLCJldmVudHMiLCJwcm9wRXZlbnRTdWJzY3JpcHRpb25zIiwibm90aWZ5VXBkYXRlIiwibm90aWZ5IiwibGF0ZXN0VmFsdWVzIiwicmVuZGVyIiwidHJpZ2dlckJ1aWxkIiwicmVuZGVySW5zdGFuY2UiLCJyZW5kZXJTdGF0ZSIsInN0eWxlIiwicHJvamVjdGlvbiIsInNjaGVkdWxlUmVuZGVyIiwiYmFzZVRhcmdldCIsImluaXRpYWxWYWx1ZXMiLCJpbml0aWFsIiwiZGVwdGgiLCJ2YXJpYW50Q2hpbGRyZW4iLCJtYW51YWxseUFuaW1hdGVPbk1vdW50IiwiQm9vbGVhbiIsIndpbGxDaGFuZ2UiLCJpbml0aWFsTW90aW9uVmFsdWVzIiwic2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzIiwia2V5IiwidmFsdWUiLCJ1bmRlZmluZWQiLCJzZXQiLCJhZGQiLCJfcHJvcHMiLCJfcHJldlByb3BzIiwibW91bnQiLCJpbnN0YW5jZSIsInJlbW92ZUZyb21WYXJpYW50VHJlZSIsImFkZFZhcmlhbnRDaGlsZCIsImZvckVhY2giLCJiaW5kVG9Nb3Rpb25WYWx1ZSIsInByb2Nlc3MiLCJ1cGRhdGUiLCJ1bm1vdW50IiwiZGVsZXRlIiwicmVtb3ZlIiwiY2xlYXIiLCJ2YWx1ZUlzVHJhbnNmb3JtIiwiaGFzIiwicmVtb3ZlT25DaGFuZ2UiLCJvbiIsImxhdGVzdFZhbHVlIiwib25VcGRhdGUiLCJpc1RyYW5zZm9ybURpcnR5IiwicmVtb3ZlT25SZW5kZXJSZXF1ZXN0Iiwic29ydE5vZGVQb3NpdGlvbiIsIm90aGVyIiwic29ydEluc3RhbmNlTm9kZVBvc2l0aW9uIiwidHlwZSIsImxvYWRGZWF0dXJlcyIsInJlbmRlcmVkUHJvcHMiLCJpc1N0cmljdCIsInByZWxvYWRlZEZlYXR1cmVzIiwiaW5pdGlhbExheW91dEdyb3VwQ29uZmlnIiwiUHJvamVjdGlvbk5vZGVDb25zdHJ1Y3RvciIsIk1lYXN1cmVMYXlvdXQiLCJzdHJpY3RNZXNzYWdlIiwiaWdub3JlU3RyaWN0IiwiaSIsIm5hbWUiLCJpc0VuYWJsZWQiLCJGZWF0dXJlIiwiRmVhdHVyZUNvbnN0cnVjdG9yIiwiUHJvamVjdGlvbk5vZGUiLCJNZWFzdXJlTGF5b3V0Q29tcG9uZW50IiwibGF5b3V0SWQiLCJsYXlvdXQiLCJkcmFnIiwiZHJhZ0NvbnN0cmFpbnRzIiwibGF5b3V0U2Nyb2xsIiwibGF5b3V0Um9vdCIsInNldE9wdGlvbnMiLCJhbHdheXNNZWFzdXJlTGF5b3V0IiwidmlzdWFsRWxlbWVudCIsImFuaW1hdGlvblR5cGUiLCJpbml0aWFsUHJvbW90aW9uQ29uZmlnIiwidXBkYXRlRmVhdHVyZXMiLCJmZWF0dXJlIiwiaXNNb3VudGVkIiwiYnVpbGQiLCJtZWFzdXJlVmlld3BvcnRCb3giLCJtZWFzdXJlSW5zdGFuY2VWaWV3cG9ydEJveCIsImdldFN0YXRpY1ZhbHVlIiwic2V0U3RhdGljVmFsdWUiLCJtYWtlVGFyZ2V0QW5pbWF0YWJsZSIsInRhcmdldCIsImNhbk11dGF0ZSIsIm1ha2VUYXJnZXRBbmltYXRhYmxlRnJvbUluc3RhbmNlIiwidHJhbnNmb3JtVGVtcGxhdGUiLCJwcmV2UHJvcHMiLCJwcmV2UHJlc2VuY2VDb250ZXh0IiwibGlzdGVuZXIiLCJoYW5kbGVDaGlsZE1vdGlvblZhbHVlIiwiZ2V0UHJvcHMiLCJnZXRWYXJpYW50IiwidmFyaWFudHMiLCJnZXREZWZhdWx0VHJhbnNpdGlvbiIsInRyYW5zaXRpb24iLCJnZXRUcmFuc2Zvcm1QYWdlUG9pbnQiLCJ0cmFuc2Zvcm1QYWdlUG9pbnQiLCJnZXRDbG9zZXN0VmFyaWFudE5vZGUiLCJnZXRWYXJpYW50Q29udGV4dCIsInN0YXJ0QXRQYXJlbnQiLCJjb250ZXh0IiwicHJvcCIsImNoaWxkIiwiY2xvc2VzdFZhcmlhbnROb2RlIiwiYWRkVmFsdWUiLCJnZXQiLCJyZW1vdmVWYWx1ZSIsInVuc3Vic2NyaWJlIiwicmVtb3ZlVmFsdWVGcm9tUmVuZGVyU3RhdGUiLCJoYXNWYWx1ZSIsImdldFZhbHVlIiwiZGVmYXVsdFZhbHVlIiwib3duZXIiLCJyZWFkVmFsdWUiLCJfYSIsImdldEJhc2VUYXJnZXRGcm9tUHJvcHMiLCJyZWFkVmFsdWVGcm9tSW5zdGFuY2UiLCJzZXRCYXNlVGFyZ2V0IiwiZ2V0QmFzZVRhcmdldCIsInZhbHVlRnJvbUluaXRpYWwiLCJldmVudE5hbWUiLCJjYWxsYmFjayIsImFyZ3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/VisualElement.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DOMVisualElement: () => (/* binding */ DOMVisualElement)\n/* harmony export */ });\n/* harmony import */ var _utils_setters_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/setters.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/setters.mjs\");\n/* harmony import */ var _utils_parse_dom_variant_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/parse-dom-variant.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs\");\n/* harmony import */ var _VisualElement_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../VisualElement.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/VisualElement.mjs\");\n\n\n\nclass DOMVisualElement extends _VisualElement_mjs__WEBPACK_IMPORTED_MODULE_0__.VisualElement {\n    sortInstanceNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */ return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props.style ? props.style[key] : undefined;\n    }\n    removeValueFromRenderState(key, { vars, style }) {\n        delete vars[key];\n        delete style[key];\n    }\n    makeTargetAnimatableFromInstance({ transition, transitionEnd, ...target }, { transformValues }, isMounted) {\n        let origin = (0,_utils_setters_mjs__WEBPACK_IMPORTED_MODULE_1__.getOrigin)(target, transition || {}, this);\n        /**\n         * If Framer has provided a function to convert `Color` etc value types, convert them\n         */ if (transformValues) {\n            if (transitionEnd) transitionEnd = transformValues(transitionEnd);\n            if (target) target = transformValues(target);\n            if (origin) origin = transformValues(origin);\n        }\n        if (isMounted) {\n            (0,_utils_setters_mjs__WEBPACK_IMPORTED_MODULE_1__.checkTargetForNewValues)(this, target, origin);\n            const parsed = (0,_utils_parse_dom_variant_mjs__WEBPACK_IMPORTED_MODULE_2__.parseDomVariant)(this, target, origin, transitionEnd);\n            transitionEnd = parsed.transitionEnd;\n            target = parsed.target;\n        }\n        return {\n            transition,\n            transitionEnd,\n            ...target\n        };\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vRE9NVmlzdWFsRWxlbWVudC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEwRTtBQUNWO0FBQ1g7QUFFckQsTUFBTUkseUJBQXlCRCw2REFBYUE7SUFDeENFLHlCQUF5QkMsQ0FBQyxFQUFFQyxDQUFDLEVBQUU7UUFDM0I7Ozs7U0FJQyxHQUNELE9BQU9ELEVBQUVFLHVCQUF1QixDQUFDRCxLQUFLLElBQUksSUFBSSxDQUFDO0lBQ25EO0lBQ0FFLHVCQUF1QkMsS0FBSyxFQUFFQyxHQUFHLEVBQUU7UUFDL0IsT0FBT0QsTUFBTUUsS0FBSyxHQUFHRixNQUFNRSxLQUFLLENBQUNELElBQUksR0FBR0U7SUFDNUM7SUFDQUMsMkJBQTJCSCxHQUFHLEVBQUUsRUFBRUksSUFBSSxFQUFFSCxLQUFLLEVBQUUsRUFBRTtRQUM3QyxPQUFPRyxJQUFJLENBQUNKLElBQUk7UUFDaEIsT0FBT0MsS0FBSyxDQUFDRCxJQUFJO0lBQ3JCO0lBQ0FLLGlDQUFpQyxFQUFFQyxVQUFVLEVBQUVDLGFBQWEsRUFBRSxHQUFHQyxRQUFRLEVBQUUsRUFBRUMsZUFBZSxFQUFFLEVBQUVDLFNBQVMsRUFBRTtRQUN2RyxJQUFJQyxTQUFTdEIsNkRBQVNBLENBQUNtQixRQUFRRixjQUFjLENBQUMsR0FBRyxJQUFJO1FBQ3JEOztTQUVDLEdBQ0QsSUFBSUcsaUJBQWlCO1lBQ2pCLElBQUlGLGVBQ0FBLGdCQUFnQkUsZ0JBQWdCRjtZQUNwQyxJQUFJQyxRQUNBQSxTQUFTQyxnQkFBZ0JEO1lBQzdCLElBQUlHLFFBQ0FBLFNBQVNGLGdCQUFnQkU7UUFDakM7UUFDQSxJQUFJRCxXQUFXO1lBQ1hwQiwyRUFBdUJBLENBQUMsSUFBSSxFQUFFa0IsUUFBUUc7WUFDdEMsTUFBTUMsU0FBU3JCLDZFQUFlQSxDQUFDLElBQUksRUFBRWlCLFFBQVFHLFFBQVFKO1lBQ3JEQSxnQkFBZ0JLLE9BQU9MLGFBQWE7WUFDcENDLFNBQVNJLE9BQU9KLE1BQU07UUFDMUI7UUFDQSxPQUFPO1lBQ0hGO1lBQ0FDO1lBQ0EsR0FBR0MsTUFBTTtRQUNiO0lBQ0o7QUFDSjtBQUU0QiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL0RPTVZpc3VhbEVsZW1lbnQubWpzPzA3ZDEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0T3JpZ2luLCBjaGVja1RhcmdldEZvck5ld1ZhbHVlcyB9IGZyb20gJy4uL3V0aWxzL3NldHRlcnMubWpzJztcbmltcG9ydCB7IHBhcnNlRG9tVmFyaWFudCB9IGZyb20gJy4vdXRpbHMvcGFyc2UtZG9tLXZhcmlhbnQubWpzJztcbmltcG9ydCB7IFZpc3VhbEVsZW1lbnQgfSBmcm9tICcuLi9WaXN1YWxFbGVtZW50Lm1qcyc7XG5cbmNsYXNzIERPTVZpc3VhbEVsZW1lbnQgZXh0ZW5kcyBWaXN1YWxFbGVtZW50IHtcbiAgICBzb3J0SW5zdGFuY2VOb2RlUG9zaXRpb24oYSwgYikge1xuICAgICAgICAvKipcbiAgICAgICAgICogY29tcGFyZURvY3VtZW50UG9zaXRpb24gcmV0dXJucyBhIGJpdG1hc2ssIGJ5IHVzaW5nIHRoZSBiaXR3aXNlICZcbiAgICAgICAgICogd2UncmUgcmV0dXJuaW5nIHRydWUgaWYgMiBpbiB0aGF0IGJpdG1hc2sgaXMgc2V0IHRvIHRydWUuIDIgaXMgc2V0XG4gICAgICAgICAqIHRvIHRydWUgaWYgYiBwcmVjZWVkcyBhLlxuICAgICAgICAgKi9cbiAgICAgICAgcmV0dXJuIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikgJiAyID8gMSA6IC0xO1xuICAgIH1cbiAgICBnZXRCYXNlVGFyZ2V0RnJvbVByb3BzKHByb3BzLCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzLnN0eWxlID8gcHJvcHMuc3R5bGVba2V5XSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmVtb3ZlVmFsdWVGcm9tUmVuZGVyU3RhdGUoa2V5LCB7IHZhcnMsIHN0eWxlIH0pIHtcbiAgICAgICAgZGVsZXRlIHZhcnNba2V5XTtcbiAgICAgICAgZGVsZXRlIHN0eWxlW2tleV07XG4gICAgfVxuICAgIG1ha2VUYXJnZXRBbmltYXRhYmxlRnJvbUluc3RhbmNlKHsgdHJhbnNpdGlvbiwgdHJhbnNpdGlvbkVuZCwgLi4udGFyZ2V0IH0sIHsgdHJhbnNmb3JtVmFsdWVzIH0sIGlzTW91bnRlZCkge1xuICAgICAgICBsZXQgb3JpZ2luID0gZ2V0T3JpZ2luKHRhcmdldCwgdHJhbnNpdGlvbiB8fCB7fSwgdGhpcyk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBGcmFtZXIgaGFzIHByb3ZpZGVkIGEgZnVuY3Rpb24gdG8gY29udmVydCBgQ29sb3JgIGV0YyB2YWx1ZSB0eXBlcywgY29udmVydCB0aGVtXG4gICAgICAgICAqL1xuICAgICAgICBpZiAodHJhbnNmb3JtVmFsdWVzKSB7XG4gICAgICAgICAgICBpZiAodHJhbnNpdGlvbkVuZClcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uRW5kID0gdHJhbnNmb3JtVmFsdWVzKHRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgICAgaWYgKHRhcmdldClcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSB0cmFuc2Zvcm1WYWx1ZXModGFyZ2V0KTtcbiAgICAgICAgICAgIGlmIChvcmlnaW4pXG4gICAgICAgICAgICAgICAgb3JpZ2luID0gdHJhbnNmb3JtVmFsdWVzKG9yaWdpbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTW91bnRlZCkge1xuICAgICAgICAgICAgY2hlY2tUYXJnZXRGb3JOZXdWYWx1ZXModGhpcywgdGFyZ2V0LCBvcmlnaW4pO1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkID0gcGFyc2VEb21WYXJpYW50KHRoaXMsIHRhcmdldCwgb3JpZ2luLCB0cmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICAgIHRyYW5zaXRpb25FbmQgPSBwYXJzZWQudHJhbnNpdGlvbkVuZDtcbiAgICAgICAgICAgIHRhcmdldCA9IHBhcnNlZC50YXJnZXQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb24sXG4gICAgICAgICAgICB0cmFuc2l0aW9uRW5kLFxuICAgICAgICAgICAgLi4udGFyZ2V0LFxuICAgICAgICB9O1xuICAgIH1cbn1cblxuZXhwb3J0IHsgRE9NVmlzdWFsRWxlbWVudCB9O1xuIl0sIm5hbWVzIjpbImdldE9yaWdpbiIsImNoZWNrVGFyZ2V0Rm9yTmV3VmFsdWVzIiwicGFyc2VEb21WYXJpYW50IiwiVmlzdWFsRWxlbWVudCIsIkRPTVZpc3VhbEVsZW1lbnQiLCJzb3J0SW5zdGFuY2VOb2RlUG9zaXRpb24iLCJhIiwiYiIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiZ2V0QmFzZVRhcmdldEZyb21Qcm9wcyIsInByb3BzIiwia2V5Iiwic3R5bGUiLCJ1bmRlZmluZWQiLCJyZW1vdmVWYWx1ZUZyb21SZW5kZXJTdGF0ZSIsInZhcnMiLCJtYWtlVGFyZ2V0QW5pbWF0YWJsZUZyb21JbnN0YW5jZSIsInRyYW5zaXRpb24iLCJ0cmFuc2l0aW9uRW5kIiwidGFyZ2V0IiwidHJhbnNmb3JtVmFsdWVzIiwiaXNNb3VudGVkIiwib3JpZ2luIiwicGFyc2VkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDomVisualElement: () => (/* binding */ createDomVisualElement)\n/* harmony export */ });\n/* harmony import */ var _html_HTMLVisualElement_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../html/HTMLVisualElement.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs\");\n/* harmony import */ var _svg_SVGVisualElement_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../svg/SVGVisualElement.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs\");\n/* harmony import */ var _utils_is_svg_component_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/is-svg-component.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs\");\n\n\n\nconst createDomVisualElement = (Component, options)=>{\n    return (0,_utils_is_svg_component_mjs__WEBPACK_IMPORTED_MODULE_0__.isSVGComponent)(Component) ? new _svg_SVGVisualElement_mjs__WEBPACK_IMPORTED_MODULE_1__.SVGVisualElement(options, {\n        enableHardwareAcceleration: false\n    }) : new _html_HTMLVisualElement_mjs__WEBPACK_IMPORTED_MODULE_2__.HTMLVisualElement(options, {\n        enableHardwareAcceleration: true\n    });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vY3JlYXRlLXZpc3VhbC1lbGVtZW50Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWtFO0FBQ0g7QUFDRDtBQUU5RCxNQUFNRyx5QkFBeUIsQ0FBQ0MsV0FBV0M7SUFDdkMsT0FBT0gsMkVBQWNBLENBQUNFLGFBQ2hCLElBQUlILHVFQUFnQkEsQ0FBQ0ksU0FBUztRQUFFQyw0QkFBNEI7SUFBTSxLQUNsRSxJQUFJTiwwRUFBaUJBLENBQUNLLFNBQVM7UUFBRUMsNEJBQTRCO0lBQUs7QUFDNUU7QUFFa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS9jcmVhdGUtdmlzdWFsLWVsZW1lbnQubWpzPzA1NzciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSFRNTFZpc3VhbEVsZW1lbnQgfSBmcm9tICcuLi9odG1sL0hUTUxWaXN1YWxFbGVtZW50Lm1qcyc7XG5pbXBvcnQgeyBTVkdWaXN1YWxFbGVtZW50IH0gZnJvbSAnLi4vc3ZnL1NWR1Zpc3VhbEVsZW1lbnQubWpzJztcbmltcG9ydCB7IGlzU1ZHQ29tcG9uZW50IH0gZnJvbSAnLi91dGlscy9pcy1zdmctY29tcG9uZW50Lm1qcyc7XG5cbmNvbnN0IGNyZWF0ZURvbVZpc3VhbEVsZW1lbnQgPSAoQ29tcG9uZW50LCBvcHRpb25zKSA9PiB7XG4gICAgcmV0dXJuIGlzU1ZHQ29tcG9uZW50KENvbXBvbmVudClcbiAgICAgICAgPyBuZXcgU1ZHVmlzdWFsRWxlbWVudChvcHRpb25zLCB7IGVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uOiBmYWxzZSB9KVxuICAgICAgICA6IG5ldyBIVE1MVmlzdWFsRWxlbWVudChvcHRpb25zLCB7IGVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uOiB0cnVlIH0pO1xufTtcblxuZXhwb3J0IHsgY3JlYXRlRG9tVmlzdWFsRWxlbWVudCB9O1xuIl0sIm5hbWVzIjpbIkhUTUxWaXN1YWxFbGVtZW50IiwiU1ZHVmlzdWFsRWxlbWVudCIsImlzU1ZHQ29tcG9uZW50IiwiY3JlYXRlRG9tVmlzdWFsRWxlbWVudCIsIkNvbXBvbmVudCIsIm9wdGlvbnMiLCJlbmFibGVIYXJkd2FyZUFjY2VsZXJhdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/motion-proxy.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/motion-proxy.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createMotionProxy: () => (/* binding */ createMotionProxy)\n/* harmony export */ });\n/* harmony import */ var _motion_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../motion/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/index.mjs\");\n\n/**\n * Convert any React component into a `motion` component. The provided component\n * **must** use `React.forwardRef` to the underlying DOM component you want to animate.\n *\n * ```jsx\n * const Component = React.forwardRef((props, ref) => {\n *   return <div ref={ref} />\n * })\n *\n * const MotionComponent = motion(Component)\n * ```\n *\n * @public\n */ function createMotionProxy(createConfig) {\n    function custom(Component, customMotionComponentConfig = {}) {\n        return (0,_motion_index_mjs__WEBPACK_IMPORTED_MODULE_0__.createMotionComponent)(createConfig(Component, customMotionComponentConfig));\n    }\n    if (typeof Proxy === \"undefined\") {\n        return custom;\n    }\n    /**\n     * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.\n     * Rather than generating them anew every render.\n     */ const componentCache = new Map();\n    return new Proxy(custom, {\n        /**\n         * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.\n         * The prop name is passed through as `key` and we can use that to generate a `motion`\n         * DOM component with that name.\n         */ get: (_target, key)=>{\n            /**\n             * If this element doesn't exist in the component cache, create it and cache.\n             */ if (!componentCache.has(key)) {\n                componentCache.set(key, custom(key));\n            }\n            return componentCache.get(key);\n        }\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vbW90aW9uLXByb3h5Lm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUErRDtBQUUvRDs7Ozs7Ozs7Ozs7OztDQWFDLEdBQ0QsU0FBU0Msa0JBQWtCQyxZQUFZO0lBQ25DLFNBQVNDLE9BQU9DLFNBQVMsRUFBRUMsOEJBQThCLENBQUMsQ0FBQztRQUN2RCxPQUFPTCx3RUFBcUJBLENBQUNFLGFBQWFFLFdBQVdDO0lBQ3pEO0lBQ0EsSUFBSSxPQUFPQyxVQUFVLGFBQWE7UUFDOUIsT0FBT0g7SUFDWDtJQUNBOzs7S0FHQyxHQUNELE1BQU1JLGlCQUFpQixJQUFJQztJQUMzQixPQUFPLElBQUlGLE1BQU1ILFFBQVE7UUFDckI7Ozs7U0FJQyxHQUNETSxLQUFLLENBQUNDLFNBQVNDO1lBQ1g7O2FBRUMsR0FDRCxJQUFJLENBQUNKLGVBQWVLLEdBQUcsQ0FBQ0QsTUFBTTtnQkFDMUJKLGVBQWVNLEdBQUcsQ0FBQ0YsS0FBS1IsT0FBT1E7WUFDbkM7WUFDQSxPQUFPSixlQUFlRSxHQUFHLENBQUNFO1FBQzlCO0lBQ0o7QUFDSjtBQUU2QiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL21vdGlvbi1wcm94eS5tanM/ODEwYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVNb3Rpb25Db21wb25lbnQgfSBmcm9tICcuLi8uLi9tb3Rpb24vaW5kZXgubWpzJztcblxuLyoqXG4gKiBDb252ZXJ0IGFueSBSZWFjdCBjb21wb25lbnQgaW50byBhIGBtb3Rpb25gIGNvbXBvbmVudC4gVGhlIHByb3ZpZGVkIGNvbXBvbmVudFxuICogKiptdXN0KiogdXNlIGBSZWFjdC5mb3J3YXJkUmVmYCB0byB0aGUgdW5kZXJseWluZyBET00gY29tcG9uZW50IHlvdSB3YW50IHRvIGFuaW1hdGUuXG4gKlxuICogYGBganN4XG4gKiBjb25zdCBDb21wb25lbnQgPSBSZWFjdC5mb3J3YXJkUmVmKChwcm9wcywgcmVmKSA9PiB7XG4gKiAgIHJldHVybiA8ZGl2IHJlZj17cmVmfSAvPlxuICogfSlcbiAqXG4gKiBjb25zdCBNb3Rpb25Db21wb25lbnQgPSBtb3Rpb24oQ29tcG9uZW50KVxuICogYGBgXG4gKlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBjcmVhdGVNb3Rpb25Qcm94eShjcmVhdGVDb25maWcpIHtcbiAgICBmdW5jdGlvbiBjdXN0b20oQ29tcG9uZW50LCBjdXN0b21Nb3Rpb25Db21wb25lbnRDb25maWcgPSB7fSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTW90aW9uQ29tcG9uZW50KGNyZWF0ZUNvbmZpZyhDb21wb25lbnQsIGN1c3RvbU1vdGlvbkNvbXBvbmVudENvbmZpZykpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIFByb3h5ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBjdXN0b207XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgY2FjaGUgb2YgZ2VuZXJhdGVkIGBtb3Rpb25gIGNvbXBvbmVudHMsIGUuZyBgbW90aW9uLmRpdmAsIGBtb3Rpb24uaW5wdXRgIGV0Yy5cbiAgICAgKiBSYXRoZXIgdGhhbiBnZW5lcmF0aW5nIHRoZW0gYW5ldyBldmVyeSByZW5kZXIuXG4gICAgICovXG4gICAgY29uc3QgY29tcG9uZW50Q2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgcmV0dXJuIG5ldyBQcm94eShjdXN0b20sIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGxlZCB3aGVuIGBtb3Rpb25gIGlzIHJlZmVyZW5jZWQgd2l0aCBhIHByb3A6IGBtb3Rpb24uZGl2YCwgYG1vdGlvbi5pbnB1dGAgZXRjLlxuICAgICAgICAgKiBUaGUgcHJvcCBuYW1lIGlzIHBhc3NlZCB0aHJvdWdoIGFzIGBrZXlgIGFuZCB3ZSBjYW4gdXNlIHRoYXQgdG8gZ2VuZXJhdGUgYSBgbW90aW9uYFxuICAgICAgICAgKiBET00gY29tcG9uZW50IHdpdGggdGhhdCBuYW1lLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiAoX3RhcmdldCwga2V5KSA9PiB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoaXMgZWxlbWVudCBkb2Vzbid0IGV4aXN0IGluIHRoZSBjb21wb25lbnQgY2FjaGUsIGNyZWF0ZSBpdCBhbmQgY2FjaGUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICghY29tcG9uZW50Q2FjaGUuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnRDYWNoZS5zZXQoa2V5LCBjdXN0b20oa2V5KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29tcG9uZW50Q2FjaGUuZ2V0KGtleSk7XG4gICAgICAgIH0sXG4gICAgfSk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZU1vdGlvblByb3h5IH07XG4iXSwibmFtZXMiOlsiY3JlYXRlTW90aW9uQ29tcG9uZW50IiwiY3JlYXRlTW90aW9uUHJveHkiLCJjcmVhdGVDb25maWciLCJjdXN0b20iLCJDb21wb25lbnQiLCJjdXN0b21Nb3Rpb25Db21wb25lbnRDb25maWciLCJQcm94eSIsImNvbXBvbmVudENhY2hlIiwiTWFwIiwiZ2V0IiwiX3RhcmdldCIsImtleSIsImhhcyIsInNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/motion-proxy.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/motion.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/motion.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDomMotionComponent: () => (/* binding */ createDomMotionComponent),\n/* harmony export */   motion: () => (/* binding */ motion)\n/* harmony export */ });\n/* harmony import */ var _motion_index_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../motion/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/index.mjs\");\n/* harmony import */ var _motion_proxy_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./motion-proxy.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/motion-proxy.mjs\");\n/* harmony import */ var _utils_create_config_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/create-config.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs\");\n/* harmony import */ var _motion_features_gestures_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../motion/features/gestures.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/gestures.mjs\");\n/* harmony import */ var _motion_features_animations_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../motion/features/animations.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/animations.mjs\");\n/* harmony import */ var _motion_features_drag_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../motion/features/drag.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/drag.mjs\");\n/* harmony import */ var _create_visual_element_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./create-visual-element.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs\");\n/* harmony import */ var _motion_features_layout_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../motion/features/layout.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/layout.mjs\");\n\n\n\n\n\n\n\n\nconst preloadedFeatures = {\n    ..._motion_features_animations_mjs__WEBPACK_IMPORTED_MODULE_0__.animations,\n    ..._motion_features_gestures_mjs__WEBPACK_IMPORTED_MODULE_1__.gestureAnimations,\n    ..._motion_features_drag_mjs__WEBPACK_IMPORTED_MODULE_2__.drag,\n    ..._motion_features_layout_mjs__WEBPACK_IMPORTED_MODULE_3__.layout\n};\n/**\n * HTML & SVG components, optimised for use with gestures and animation. These can be used as\n * drop-in replacements for any HTML & SVG component, all CSS & SVG properties are supported.\n *\n * @public\n */ const motion = /*@__PURE__*/ (0,_motion_proxy_mjs__WEBPACK_IMPORTED_MODULE_4__.createMotionProxy)((Component, config)=>(0,_utils_create_config_mjs__WEBPACK_IMPORTED_MODULE_5__.createDomMotionConfig)(Component, config, preloadedFeatures, _create_visual_element_mjs__WEBPACK_IMPORTED_MODULE_6__.createDomVisualElement));\n/**\n * Create a DOM `motion` component with the provided string. This is primarily intended\n * as a full alternative to `motion` for consumers who have to support environments that don't\n * support `Proxy`.\n *\n * ```javascript\n * import { createDomMotionComponent } from \"framer-motion\"\n *\n * const motion = {\n *   div: createDomMotionComponent('div')\n * }\n * ```\n *\n * @public\n */ function createDomMotionComponent(key) {\n    return (0,_motion_index_mjs__WEBPACK_IMPORTED_MODULE_7__.createMotionComponent)((0,_utils_create_config_mjs__WEBPACK_IMPORTED_MODULE_5__.createDomMotionConfig)(key, {\n        forwardMotionProps: false\n    }, preloadedFeatures, _create_visual_element_mjs__WEBPACK_IMPORTED_MODULE_6__.createDomVisualElement));\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vbW90aW9uLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQStEO0FBQ1I7QUFDVztBQUNLO0FBQ0w7QUFDWjtBQUNlO0FBQ1g7QUFFMUQsTUFBTVEsb0JBQW9CO0lBQ3RCLEdBQUdKLHVFQUFVO0lBQ2IsR0FBR0QsNEVBQWlCO0lBQ3BCLEdBQUdFLDJEQUFJO0lBQ1AsR0FBR0UsK0RBQU07QUFDYjtBQUNBOzs7OztDQUtDLEdBQ0QsTUFBTUUsU0FBUyxXQUFXLEdBQUdSLG9FQUFpQkEsQ0FBQyxDQUFDUyxXQUFXQyxTQUFXVCwrRUFBcUJBLENBQUNRLFdBQVdDLFFBQVFILG1CQUFtQkYsOEVBQXNCQTtBQUN4Sjs7Ozs7Ozs7Ozs7Ozs7Q0FjQyxHQUNELFNBQVNNLHlCQUF5QkMsR0FBRztJQUNqQyxPQUFPYix3RUFBcUJBLENBQUNFLCtFQUFxQkEsQ0FBQ1csS0FBSztRQUFFQyxvQkFBb0I7SUFBTSxHQUFHTixtQkFBbUJGLDhFQUFzQkE7QUFDcEk7QUFFNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS9tb3Rpb24ubWpzP2U3ODUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlTW90aW9uQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vbW90aW9uL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVNb3Rpb25Qcm94eSB9IGZyb20gJy4vbW90aW9uLXByb3h5Lm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVEb21Nb3Rpb25Db25maWcgfSBmcm9tICcuL3V0aWxzL2NyZWF0ZS1jb25maWcubWpzJztcbmltcG9ydCB7IGdlc3R1cmVBbmltYXRpb25zIH0gZnJvbSAnLi4vLi4vbW90aW9uL2ZlYXR1cmVzL2dlc3R1cmVzLm1qcyc7XG5pbXBvcnQgeyBhbmltYXRpb25zIH0gZnJvbSAnLi4vLi4vbW90aW9uL2ZlYXR1cmVzL2FuaW1hdGlvbnMubWpzJztcbmltcG9ydCB7IGRyYWcgfSBmcm9tICcuLi8uLi9tb3Rpb24vZmVhdHVyZXMvZHJhZy5tanMnO1xuaW1wb3J0IHsgY3JlYXRlRG9tVmlzdWFsRWxlbWVudCB9IGZyb20gJy4vY3JlYXRlLXZpc3VhbC1lbGVtZW50Lm1qcyc7XG5pbXBvcnQgeyBsYXlvdXQgfSBmcm9tICcuLi8uLi9tb3Rpb24vZmVhdHVyZXMvbGF5b3V0Lm1qcyc7XG5cbmNvbnN0IHByZWxvYWRlZEZlYXR1cmVzID0ge1xuICAgIC4uLmFuaW1hdGlvbnMsXG4gICAgLi4uZ2VzdHVyZUFuaW1hdGlvbnMsXG4gICAgLi4uZHJhZyxcbiAgICAuLi5sYXlvdXQsXG59O1xuLyoqXG4gKiBIVE1MICYgU1ZHIGNvbXBvbmVudHMsIG9wdGltaXNlZCBmb3IgdXNlIHdpdGggZ2VzdHVyZXMgYW5kIGFuaW1hdGlvbi4gVGhlc2UgY2FuIGJlIHVzZWQgYXNcbiAqIGRyb3AtaW4gcmVwbGFjZW1lbnRzIGZvciBhbnkgSFRNTCAmIFNWRyBjb21wb25lbnQsIGFsbCBDU1MgJiBTVkcgcHJvcGVydGllcyBhcmUgc3VwcG9ydGVkLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuY29uc3QgbW90aW9uID0gLypAX19QVVJFX18qLyBjcmVhdGVNb3Rpb25Qcm94eSgoQ29tcG9uZW50LCBjb25maWcpID0+IGNyZWF0ZURvbU1vdGlvbkNvbmZpZyhDb21wb25lbnQsIGNvbmZpZywgcHJlbG9hZGVkRmVhdHVyZXMsIGNyZWF0ZURvbVZpc3VhbEVsZW1lbnQpKTtcbi8qKlxuICogQ3JlYXRlIGEgRE9NIGBtb3Rpb25gIGNvbXBvbmVudCB3aXRoIHRoZSBwcm92aWRlZCBzdHJpbmcuIFRoaXMgaXMgcHJpbWFyaWx5IGludGVuZGVkXG4gKiBhcyBhIGZ1bGwgYWx0ZXJuYXRpdmUgdG8gYG1vdGlvbmAgZm9yIGNvbnN1bWVycyB3aG8gaGF2ZSB0byBzdXBwb3J0IGVudmlyb25tZW50cyB0aGF0IGRvbid0XG4gKiBzdXBwb3J0IGBQcm94eWAuXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogaW1wb3J0IHsgY3JlYXRlRG9tTW90aW9uQ29tcG9uZW50IH0gZnJvbSBcImZyYW1lci1tb3Rpb25cIlxuICpcbiAqIGNvbnN0IG1vdGlvbiA9IHtcbiAqICAgZGl2OiBjcmVhdGVEb21Nb3Rpb25Db21wb25lbnQoJ2RpdicpXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURvbU1vdGlvbkNvbXBvbmVudChrZXkpIHtcbiAgICByZXR1cm4gY3JlYXRlTW90aW9uQ29tcG9uZW50KGNyZWF0ZURvbU1vdGlvbkNvbmZpZyhrZXksIHsgZm9yd2FyZE1vdGlvblByb3BzOiBmYWxzZSB9LCBwcmVsb2FkZWRGZWF0dXJlcywgY3JlYXRlRG9tVmlzdWFsRWxlbWVudCkpO1xufVxuXG5leHBvcnQgeyBjcmVhdGVEb21Nb3Rpb25Db21wb25lbnQsIG1vdGlvbiB9O1xuIl0sIm5hbWVzIjpbImNyZWF0ZU1vdGlvbkNvbXBvbmVudCIsImNyZWF0ZU1vdGlvblByb3h5IiwiY3JlYXRlRG9tTW90aW9uQ29uZmlnIiwiZ2VzdHVyZUFuaW1hdGlvbnMiLCJhbmltYXRpb25zIiwiZHJhZyIsImNyZWF0ZURvbVZpc3VhbEVsZW1lbnQiLCJsYXlvdXQiLCJwcmVsb2FkZWRGZWF0dXJlcyIsIm1vdGlvbiIsIkNvbXBvbmVudCIsImNvbmZpZyIsImNyZWF0ZURvbU1vdGlvbkNvbXBvbmVudCIsImtleSIsImZvcndhcmRNb3Rpb25Qcm9wcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/motion.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/use-render.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/use-render.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createUseRender: () => (/* binding */ createUseRender)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _html_use_props_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../html/use-props.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/use-props.mjs\");\n/* harmony import */ var _utils_filter_props_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/filter-props.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs\");\n/* harmony import */ var _utils_is_svg_component_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/is-svg-component.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs\");\n/* harmony import */ var _svg_use_props_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../svg/use-props.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/use-props.mjs\");\n/* harmony import */ var _value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../value/utils/is-motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs\");\n\n\n\n\n\n\nfunction createUseRender(forwardMotionProps = false) {\n    const useRender = (Component, props, ref, { latestValues }, isStatic)=>{\n        const useVisualProps = (0,_utils_is_svg_component_mjs__WEBPACK_IMPORTED_MODULE_1__.isSVGComponent)(Component) ? _svg_use_props_mjs__WEBPACK_IMPORTED_MODULE_2__.useSVGProps : _html_use_props_mjs__WEBPACK_IMPORTED_MODULE_3__.useHTMLProps;\n        const visualProps = useVisualProps(props, latestValues, isStatic, Component);\n        const filteredProps = (0,_utils_filter_props_mjs__WEBPACK_IMPORTED_MODULE_4__.filterProps)(props, typeof Component === \"string\", forwardMotionProps);\n        const elementProps = {\n            ...filteredProps,\n            ...visualProps,\n            ref\n        };\n        /**\n         * If component has been handed a motion value as its child,\n         * memoise its initial value and render that. Subsequent updates\n         * will be handled by the onChange handler\n         */ const { children } = props;\n        const renderedChildren = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,_value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_5__.isMotionValue)(children) ? children.get() : children, [\n            children\n        ]);\n        return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(Component, {\n            ...elementProps,\n            children: renderedChildren\n        });\n    };\n    return useRender;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXNlLXJlbmRlci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUErQztBQUNNO0FBQ0U7QUFDTztBQUNYO0FBQ21CO0FBRXRFLFNBQVNPLGdCQUFnQkMscUJBQXFCLEtBQUs7SUFDL0MsTUFBTUMsWUFBWSxDQUFDQyxXQUFXQyxPQUFPQyxLQUFLLEVBQUVDLFlBQVksRUFBRSxFQUFFQztRQUN4RCxNQUFNQyxpQkFBaUJYLDJFQUFjQSxDQUFDTSxhQUNoQ0wsMkRBQVdBLEdBQ1hILDZEQUFZQTtRQUNsQixNQUFNYyxjQUFjRCxlQUFlSixPQUFPRSxjQUFjQyxVQUFVSjtRQUNsRSxNQUFNTyxnQkFBZ0JkLG9FQUFXQSxDQUFDUSxPQUFPLE9BQU9ELGNBQWMsVUFBVUY7UUFDeEUsTUFBTVUsZUFBZTtZQUNqQixHQUFHRCxhQUFhO1lBQ2hCLEdBQUdELFdBQVc7WUFDZEo7UUFDSjtRQUNBOzs7O1NBSUMsR0FDRCxNQUFNLEVBQUVPLFFBQVEsRUFBRSxHQUFHUjtRQUNyQixNQUFNUyxtQkFBbUJwQiw4Q0FBT0EsQ0FBQyxJQUFPTSwrRUFBYUEsQ0FBQ2EsWUFBWUEsU0FBU0UsR0FBRyxLQUFLRixVQUFXO1lBQUNBO1NBQVM7UUFDeEcscUJBQU9sQixvREFBYUEsQ0FBQ1MsV0FBVztZQUM1QixHQUFHUSxZQUFZO1lBQ2ZDLFVBQVVDO1FBQ2Q7SUFDSjtJQUNBLE9BQU9YO0FBQ1g7QUFFMkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS91c2UtcmVuZGVyLm1qcz8yYTlkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZU1lbW8sIGNyZWF0ZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VIVE1MUHJvcHMgfSBmcm9tICcuLi9odG1sL3VzZS1wcm9wcy5tanMnO1xuaW1wb3J0IHsgZmlsdGVyUHJvcHMgfSBmcm9tICcuL3V0aWxzL2ZpbHRlci1wcm9wcy5tanMnO1xuaW1wb3J0IHsgaXNTVkdDb21wb25lbnQgfSBmcm9tICcuL3V0aWxzL2lzLXN2Zy1jb21wb25lbnQubWpzJztcbmltcG9ydCB7IHVzZVNWR1Byb3BzIH0gZnJvbSAnLi4vc3ZnL3VzZS1wcm9wcy5tanMnO1xuaW1wb3J0IHsgaXNNb3Rpb25WYWx1ZSB9IGZyb20gJy4uLy4uL3ZhbHVlL3V0aWxzL2lzLW1vdGlvbi12YWx1ZS5tanMnO1xuXG5mdW5jdGlvbiBjcmVhdGVVc2VSZW5kZXIoZm9yd2FyZE1vdGlvblByb3BzID0gZmFsc2UpIHtcbiAgICBjb25zdCB1c2VSZW5kZXIgPSAoQ29tcG9uZW50LCBwcm9wcywgcmVmLCB7IGxhdGVzdFZhbHVlcyB9LCBpc1N0YXRpYykgPT4ge1xuICAgICAgICBjb25zdCB1c2VWaXN1YWxQcm9wcyA9IGlzU1ZHQ29tcG9uZW50KENvbXBvbmVudClcbiAgICAgICAgICAgID8gdXNlU1ZHUHJvcHNcbiAgICAgICAgICAgIDogdXNlSFRNTFByb3BzO1xuICAgICAgICBjb25zdCB2aXN1YWxQcm9wcyA9IHVzZVZpc3VhbFByb3BzKHByb3BzLCBsYXRlc3RWYWx1ZXMsIGlzU3RhdGljLCBDb21wb25lbnQpO1xuICAgICAgICBjb25zdCBmaWx0ZXJlZFByb3BzID0gZmlsdGVyUHJvcHMocHJvcHMsIHR5cGVvZiBDb21wb25lbnQgPT09IFwic3RyaW5nXCIsIGZvcndhcmRNb3Rpb25Qcm9wcyk7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRQcm9wcyA9IHtcbiAgICAgICAgICAgIC4uLmZpbHRlcmVkUHJvcHMsXG4gICAgICAgICAgICAuLi52aXN1YWxQcm9wcyxcbiAgICAgICAgICAgIHJlZixcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGNvbXBvbmVudCBoYXMgYmVlbiBoYW5kZWQgYSBtb3Rpb24gdmFsdWUgYXMgaXRzIGNoaWxkLFxuICAgICAgICAgKiBtZW1vaXNlIGl0cyBpbml0aWFsIHZhbHVlIGFuZCByZW5kZXIgdGhhdC4gU3Vic2VxdWVudCB1cGRhdGVzXG4gICAgICAgICAqIHdpbGwgYmUgaGFuZGxlZCBieSB0aGUgb25DaGFuZ2UgaGFuZGxlclxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgeyBjaGlsZHJlbiB9ID0gcHJvcHM7XG4gICAgICAgIGNvbnN0IHJlbmRlcmVkQ2hpbGRyZW4gPSB1c2VNZW1vKCgpID0+IChpc01vdGlvblZhbHVlKGNoaWxkcmVuKSA/IGNoaWxkcmVuLmdldCgpIDogY2hpbGRyZW4pLCBbY2hpbGRyZW5dKTtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCB7XG4gICAgICAgICAgICAuLi5lbGVtZW50UHJvcHMsXG4gICAgICAgICAgICBjaGlsZHJlbjogcmVuZGVyZWRDaGlsZHJlbixcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gdXNlUmVuZGVyO1xufVxuXG5leHBvcnQgeyBjcmVhdGVVc2VSZW5kZXIgfTtcbiJdLCJuYW1lcyI6WyJ1c2VNZW1vIiwiY3JlYXRlRWxlbWVudCIsInVzZUhUTUxQcm9wcyIsImZpbHRlclByb3BzIiwiaXNTVkdDb21wb25lbnQiLCJ1c2VTVkdQcm9wcyIsImlzTW90aW9uVmFsdWUiLCJjcmVhdGVVc2VSZW5kZXIiLCJmb3J3YXJkTW90aW9uUHJvcHMiLCJ1c2VSZW5kZXIiLCJDb21wb25lbnQiLCJwcm9wcyIsInJlZiIsImxhdGVzdFZhbHVlcyIsImlzU3RhdGljIiwidXNlVmlzdWFsUHJvcHMiLCJ2aXN1YWxQcm9wcyIsImZpbHRlcmVkUHJvcHMiLCJlbGVtZW50UHJvcHMiLCJjaGlsZHJlbiIsInJlbmRlcmVkQ2hpbGRyZW4iLCJnZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/use-render.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   camelToDash: () => (/* binding */ camelToDash)\n/* harmony export */ });\n/**\n * Convert camelCase to dash-case properties.\n */ const camelToDash = (str)=>str.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvY2FtZWwtdG8tZGFzaC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztDQUVDLEdBQ0QsTUFBTUEsY0FBYyxDQUFDQyxNQUFRQSxJQUFJQyxPQUFPLENBQUMsbUJBQW1CLFNBQVNDLFdBQVc7QUFFekQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS91dGlscy9jYW1lbC10by1kYXNoLm1qcz8yMmE3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29udmVydCBjYW1lbENhc2UgdG8gZGFzaC1jYXNlIHByb3BlcnRpZXMuXG4gKi9cbmNvbnN0IGNhbWVsVG9EYXNoID0gKHN0cikgPT4gc3RyLnJlcGxhY2UoLyhbYS16XSkoW0EtWl0pL2csIFwiJDEtJDJcIikudG9Mb3dlckNhc2UoKTtcblxuZXhwb3J0IHsgY2FtZWxUb0Rhc2ggfTtcbiJdLCJuYW1lcyI6WyJjYW1lbFRvRGFzaCIsInN0ciIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDomMotionConfig: () => (/* binding */ createDomMotionConfig)\n/* harmony export */ });\n/* harmony import */ var _is_svg_component_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is-svg-component.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs\");\n/* harmony import */ var _use_render_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../use-render.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/use-render.mjs\");\n/* harmony import */ var _svg_config_motion_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../svg/config-motion.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/config-motion.mjs\");\n/* harmony import */ var _html_config_motion_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../html/config-motion.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/config-motion.mjs\");\n\n\n\n\nfunction createDomMotionConfig(Component, { forwardMotionProps = false }, preloadedFeatures, createVisualElement) {\n    const baseConfig = (0,_is_svg_component_mjs__WEBPACK_IMPORTED_MODULE_0__.isSVGComponent)(Component) ? _svg_config_motion_mjs__WEBPACK_IMPORTED_MODULE_1__.svgMotionConfig : _html_config_motion_mjs__WEBPACK_IMPORTED_MODULE_2__.htmlMotionConfig;\n    return {\n        ...baseConfig,\n        preloadedFeatures,\n        useRender: (0,_use_render_mjs__WEBPACK_IMPORTED_MODULE_3__.createUseRender)(forwardMotionProps),\n        createVisualElement,\n        Component\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvY3JlYXRlLWNvbmZpZy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBd0Q7QUFDSjtBQUNVO0FBQ0U7QUFFaEUsU0FBU0ksc0JBQXNCQyxTQUFTLEVBQUUsRUFBRUMscUJBQXFCLEtBQUssRUFBRSxFQUFFQyxpQkFBaUIsRUFBRUMsbUJBQW1CO0lBQzVHLE1BQU1DLGFBQWFULHFFQUFjQSxDQUFDSyxhQUM1QkgsbUVBQWVBLEdBQ2ZDLHFFQUFnQkE7SUFDdEIsT0FBTztRQUNILEdBQUdNLFVBQVU7UUFDYkY7UUFDQUcsV0FBV1QsZ0VBQWVBLENBQUNLO1FBQzNCRTtRQUNBSDtJQUNKO0FBQ0o7QUFFaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS91dGlscy9jcmVhdGUtY29uZmlnLm1qcz80MTA0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzU1ZHQ29tcG9uZW50IH0gZnJvbSAnLi9pcy1zdmctY29tcG9uZW50Lm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVVc2VSZW5kZXIgfSBmcm9tICcuLi91c2UtcmVuZGVyLm1qcyc7XG5pbXBvcnQgeyBzdmdNb3Rpb25Db25maWcgfSBmcm9tICcuLi8uLi9zdmcvY29uZmlnLW1vdGlvbi5tanMnO1xuaW1wb3J0IHsgaHRtbE1vdGlvbkNvbmZpZyB9IGZyb20gJy4uLy4uL2h0bWwvY29uZmlnLW1vdGlvbi5tanMnO1xuXG5mdW5jdGlvbiBjcmVhdGVEb21Nb3Rpb25Db25maWcoQ29tcG9uZW50LCB7IGZvcndhcmRNb3Rpb25Qcm9wcyA9IGZhbHNlIH0sIHByZWxvYWRlZEZlYXR1cmVzLCBjcmVhdGVWaXN1YWxFbGVtZW50KSB7XG4gICAgY29uc3QgYmFzZUNvbmZpZyA9IGlzU1ZHQ29tcG9uZW50KENvbXBvbmVudClcbiAgICAgICAgPyBzdmdNb3Rpb25Db25maWdcbiAgICAgICAgOiBodG1sTW90aW9uQ29uZmlnO1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLmJhc2VDb25maWcsXG4gICAgICAgIHByZWxvYWRlZEZlYXR1cmVzLFxuICAgICAgICB1c2VSZW5kZXI6IGNyZWF0ZVVzZVJlbmRlcihmb3J3YXJkTW90aW9uUHJvcHMpLFxuICAgICAgICBjcmVhdGVWaXN1YWxFbGVtZW50LFxuICAgICAgICBDb21wb25lbnQsXG4gICAgfTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlRG9tTW90aW9uQ29uZmlnIH07XG4iXSwibmFtZXMiOlsiaXNTVkdDb21wb25lbnQiLCJjcmVhdGVVc2VSZW5kZXIiLCJzdmdNb3Rpb25Db25maWciLCJodG1sTW90aW9uQ29uZmlnIiwiY3JlYXRlRG9tTW90aW9uQ29uZmlnIiwiQ29tcG9uZW50IiwiZm9yd2FyZE1vdGlvblByb3BzIiwicHJlbG9hZGVkRmVhdHVyZXMiLCJjcmVhdGVWaXN1YWxFbGVtZW50IiwiYmFzZUNvbmZpZyIsInVzZVJlbmRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs":
/*!******************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseCSSVariable: () => (/* binding */ parseCSSVariable),\n/* harmony export */   resolveCSSVariables: () => (/* binding */ resolveCSSVariables)\n/* harmony export */ });\n/* harmony import */ var _utils_errors_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/errors.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/errors.mjs\");\n/* harmony import */ var _utils_is_numerical_string_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/is-numerical-string.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs\");\n/* harmony import */ var _is_css_variable_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./is-css-variable.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs\");\n\n\n\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */ const splitCSSVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\nfunction parseCSSVariable(current) {\n    const match = splitCSSVariableRegex.exec(current);\n    if (!match) return [\n        , \n    ];\n    const [, token, fallback] = match;\n    return [\n        token,\n        fallback\n    ];\n}\nconst maxDepth = 4;\nfunction getVariableValue(current, element, depth = 1) {\n    (0,_utils_errors_mjs__WEBPACK_IMPORTED_MODULE_0__.invariant)(depth <= maxDepth, `Max CSS variable fallback depth detected in property \"${current}\". This may indicate a circular fallback dependency.`);\n    const [token, fallback] = parseCSSVariable(current);\n    // No CSS variable detected\n    if (!token) return;\n    // Attempt to read this CSS variable off the element\n    const resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        const trimmed = resolved.trim();\n        return (0,_utils_is_numerical_string_mjs__WEBPACK_IMPORTED_MODULE_1__.isNumericalString)(trimmed) ? parseFloat(trimmed) : trimmed;\n    } else if ((0,_is_css_variable_mjs__WEBPACK_IMPORTED_MODULE_2__.isCSSVariableToken)(fallback)) {\n        // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.\n        return getVariableValue(fallback, element, depth + 1);\n    } else {\n        return fallback;\n    }\n}\n/**\n * Resolve CSS variables from\n *\n * @internal\n */ function resolveCSSVariables(visualElement, { ...target }, transitionEnd) {\n    const element = visualElement.current;\n    if (!(element instanceof Element)) return {\n        target,\n        transitionEnd\n    };\n    // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`\n    // only if they change but I think this reads clearer and this isn't a performance-critical path.\n    if (transitionEnd) {\n        transitionEnd = {\n            ...transitionEnd\n        };\n    }\n    // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved\n    visualElement.values.forEach((value)=>{\n        const current = value.get();\n        if (!(0,_is_css_variable_mjs__WEBPACK_IMPORTED_MODULE_2__.isCSSVariableToken)(current)) return;\n        const resolved = getVariableValue(current, element);\n        if (resolved) value.set(resolved);\n    });\n    // Cycle through every target property and resolve CSS variables. Currently\n    // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`\n    for(const key in target){\n        const current = target[key];\n        if (!(0,_is_css_variable_mjs__WEBPACK_IMPORTED_MODULE_2__.isCSSVariableToken)(current)) continue;\n        const resolved = getVariableValue(current, element);\n        if (!resolved) continue;\n        // Clone target if it hasn't already been\n        target[key] = resolved;\n        if (!transitionEnd) transitionEnd = {};\n        // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved\n        // CSS variable. This will ensure that after the animation the component will reflect\n        // changes in the value of the CSS variable.\n        if (transitionEnd[key] === undefined) {\n            transitionEnd[key] = current;\n        }\n    }\n    return {\n        target,\n        transitionEnd\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvY3NzLXZhcmlhYmxlcy1jb252ZXJzaW9uLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFzRDtBQUNxQjtBQUNoQjtBQUUzRDs7Ozs7Ozs7Q0FRQyxHQUNELE1BQU1HLHdCQUF3QjtBQUM5QixTQUFTQyxpQkFBaUJDLE9BQU87SUFDN0IsTUFBTUMsUUFBUUgsc0JBQXNCSSxJQUFJLENBQUNGO0lBQ3pDLElBQUksQ0FBQ0MsT0FDRCxPQUFPOztLQUFHO0lBQ2QsTUFBTSxHQUFHRSxPQUFPQyxTQUFTLEdBQUdIO0lBQzVCLE9BQU87UUFBQ0U7UUFBT0M7S0FBUztBQUM1QjtBQUNBLE1BQU1DLFdBQVc7QUFDakIsU0FBU0MsaUJBQWlCTixPQUFPLEVBQUVPLE9BQU8sRUFBRUMsUUFBUSxDQUFDO0lBQ2pEYiw0REFBU0EsQ0FBQ2EsU0FBU0gsVUFBVSxDQUFDLHNEQUFzRCxFQUFFTCxRQUFRLG9EQUFvRCxDQUFDO0lBQ25KLE1BQU0sQ0FBQ0csT0FBT0MsU0FBUyxHQUFHTCxpQkFBaUJDO0lBQzNDLDJCQUEyQjtJQUMzQixJQUFJLENBQUNHLE9BQ0Q7SUFDSixvREFBb0Q7SUFDcEQsTUFBTU0sV0FBV0MsT0FBT0MsZ0JBQWdCLENBQUNKLFNBQVNLLGdCQUFnQixDQUFDVDtJQUNuRSxJQUFJTSxVQUFVO1FBQ1YsTUFBTUksVUFBVUosU0FBU0ssSUFBSTtRQUM3QixPQUFPbEIsaUZBQWlCQSxDQUFDaUIsV0FBV0UsV0FBV0YsV0FBV0E7SUFDOUQsT0FDSyxJQUFJaEIsd0VBQWtCQSxDQUFDTyxXQUFXO1FBQ25DLDJGQUEyRjtRQUMzRixPQUFPRSxpQkFBaUJGLFVBQVVHLFNBQVNDLFFBQVE7SUFDdkQsT0FDSztRQUNELE9BQU9KO0lBQ1g7QUFDSjtBQUNBOzs7O0NBSUMsR0FDRCxTQUFTWSxvQkFBb0JDLGFBQWEsRUFBRSxFQUFFLEdBQUdDLFFBQVEsRUFBRUMsYUFBYTtJQUNwRSxNQUFNWixVQUFVVSxjQUFjakIsT0FBTztJQUNyQyxJQUFJLENBQUVPLENBQUFBLG1CQUFtQmEsT0FBTSxHQUMzQixPQUFPO1FBQUVGO1FBQVFDO0lBQWM7SUFDbkMsOEZBQThGO0lBQzlGLGlHQUFpRztJQUNqRyxJQUFJQSxlQUFlO1FBQ2ZBLGdCQUFnQjtZQUFFLEdBQUdBLGFBQWE7UUFBQztJQUN2QztJQUNBLHdGQUF3RjtJQUN4RkYsY0FBY0ksTUFBTSxDQUFDQyxPQUFPLENBQUMsQ0FBQ0M7UUFDMUIsTUFBTXZCLFVBQVV1QixNQUFNQyxHQUFHO1FBQ3pCLElBQUksQ0FBQzNCLHdFQUFrQkEsQ0FBQ0csVUFDcEI7UUFDSixNQUFNUyxXQUFXSCxpQkFBaUJOLFNBQVNPO1FBQzNDLElBQUlFLFVBQ0FjLE1BQU1FLEdBQUcsQ0FBQ2hCO0lBQ2xCO0lBQ0EsMkVBQTJFO0lBQzNFLHNGQUFzRjtJQUN0RixJQUFLLE1BQU1pQixPQUFPUixPQUFRO1FBQ3RCLE1BQU1sQixVQUFVa0IsTUFBTSxDQUFDUSxJQUFJO1FBQzNCLElBQUksQ0FBQzdCLHdFQUFrQkEsQ0FBQ0csVUFDcEI7UUFDSixNQUFNUyxXQUFXSCxpQkFBaUJOLFNBQVNPO1FBQzNDLElBQUksQ0FBQ0UsVUFDRDtRQUNKLHlDQUF5QztRQUN6Q1MsTUFBTSxDQUFDUSxJQUFJLEdBQUdqQjtRQUNkLElBQUksQ0FBQ1UsZUFDREEsZ0JBQWdCLENBQUM7UUFDckIsdUZBQXVGO1FBQ3ZGLHFGQUFxRjtRQUNyRiw0Q0FBNEM7UUFDNUMsSUFBSUEsYUFBYSxDQUFDTyxJQUFJLEtBQUtDLFdBQVc7WUFDbENSLGFBQWEsQ0FBQ08sSUFBSSxHQUFHMUI7UUFDekI7SUFDSjtJQUNBLE9BQU87UUFBRWtCO1FBQVFDO0lBQWM7QUFDbkM7QUFFaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS91dGlscy9jc3MtdmFyaWFibGVzLWNvbnZlcnNpb24ubWpzPzQzYTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvZXJyb3JzLm1qcyc7XG5pbXBvcnQgeyBpc051bWVyaWNhbFN0cmluZyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2lzLW51bWVyaWNhbC1zdHJpbmcubWpzJztcbmltcG9ydCB7IGlzQ1NTVmFyaWFibGVUb2tlbiB9IGZyb20gJy4vaXMtY3NzLXZhcmlhYmxlLm1qcyc7XG5cbi8qKlxuICogUGFyc2UgRnJhbWVyJ3Mgc3BlY2lhbCBDU1MgdmFyaWFibGUgZm9ybWF0IGludG8gYSBDU1MgdG9rZW4gYW5kIGEgZmFsbGJhY2suXG4gKlxuICogYGBgXG4gKiBgdmFyKC0tZm9vLCAjZmZmKWAgPT4gW2AtLWZvb2AsICcjZmZmJ11cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBjdXJyZW50XG4gKi9cbmNvbnN0IHNwbGl0Q1NTVmFyaWFibGVSZWdleCA9IC92YXJcXCgoLS1bYS16QS1aMC05LV9dKyksPyA/KFthLXpBLVowLTkgKCklIy4sLV0rKT9cXCkvO1xuZnVuY3Rpb24gcGFyc2VDU1NWYXJpYWJsZShjdXJyZW50KSB7XG4gICAgY29uc3QgbWF0Y2ggPSBzcGxpdENTU1ZhcmlhYmxlUmVnZXguZXhlYyhjdXJyZW50KTtcbiAgICBpZiAoIW1hdGNoKVxuICAgICAgICByZXR1cm4gWyxdO1xuICAgIGNvbnN0IFssIHRva2VuLCBmYWxsYmFja10gPSBtYXRjaDtcbiAgICByZXR1cm4gW3Rva2VuLCBmYWxsYmFja107XG59XG5jb25zdCBtYXhEZXB0aCA9IDQ7XG5mdW5jdGlvbiBnZXRWYXJpYWJsZVZhbHVlKGN1cnJlbnQsIGVsZW1lbnQsIGRlcHRoID0gMSkge1xuICAgIGludmFyaWFudChkZXB0aCA8PSBtYXhEZXB0aCwgYE1heCBDU1MgdmFyaWFibGUgZmFsbGJhY2sgZGVwdGggZGV0ZWN0ZWQgaW4gcHJvcGVydHkgXCIke2N1cnJlbnR9XCIuIFRoaXMgbWF5IGluZGljYXRlIGEgY2lyY3VsYXIgZmFsbGJhY2sgZGVwZW5kZW5jeS5gKTtcbiAgICBjb25zdCBbdG9rZW4sIGZhbGxiYWNrXSA9IHBhcnNlQ1NTVmFyaWFibGUoY3VycmVudCk7XG4gICAgLy8gTm8gQ1NTIHZhcmlhYmxlIGRldGVjdGVkXG4gICAgaWYgKCF0b2tlbilcbiAgICAgICAgcmV0dXJuO1xuICAgIC8vIEF0dGVtcHQgdG8gcmVhZCB0aGlzIENTUyB2YXJpYWJsZSBvZmYgdGhlIGVsZW1lbnRcbiAgICBjb25zdCByZXNvbHZlZCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLmdldFByb3BlcnR5VmFsdWUodG9rZW4pO1xuICAgIGlmIChyZXNvbHZlZCkge1xuICAgICAgICBjb25zdCB0cmltbWVkID0gcmVzb2x2ZWQudHJpbSgpO1xuICAgICAgICByZXR1cm4gaXNOdW1lcmljYWxTdHJpbmcodHJpbW1lZCkgPyBwYXJzZUZsb2F0KHRyaW1tZWQpIDogdHJpbW1lZDtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNDU1NWYXJpYWJsZVRva2VuKGZhbGxiYWNrKSkge1xuICAgICAgICAvLyBUaGUgZmFsbGJhY2sgbWlnaHQgaXRzZWxmIGJlIGEgQ1NTIHZhcmlhYmxlLCBpbiB3aGljaCBjYXNlIHdlIGF0dGVtcHQgdG8gcmVzb2x2ZSBpdCB0b28uXG4gICAgICAgIHJldHVybiBnZXRWYXJpYWJsZVZhbHVlKGZhbGxiYWNrLCBlbGVtZW50LCBkZXB0aCArIDEpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbGxiYWNrO1xuICAgIH1cbn1cbi8qKlxuICogUmVzb2x2ZSBDU1MgdmFyaWFibGVzIGZyb21cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUNTU1ZhcmlhYmxlcyh2aXN1YWxFbGVtZW50LCB7IC4uLnRhcmdldCB9LCB0cmFuc2l0aW9uRW5kKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IHZpc3VhbEVsZW1lbnQuY3VycmVudDtcbiAgICBpZiAoIShlbGVtZW50IGluc3RhbmNlb2YgRWxlbWVudCkpXG4gICAgICAgIHJldHVybiB7IHRhcmdldCwgdHJhbnNpdGlvbkVuZCB9O1xuICAgIC8vIElmIGB0cmFuc2l0aW9uRW5kYCBpc24ndCBgdW5kZWZpbmVkYCwgY2xvbmUgaXQuIFdlIGNvdWxkIGNsb25lIGB0YXJnZXRgIGFuZCBgdHJhbnNpdGlvbkVuZGBcbiAgICAvLyBvbmx5IGlmIHRoZXkgY2hhbmdlIGJ1dCBJIHRoaW5rIHRoaXMgcmVhZHMgY2xlYXJlciBhbmQgdGhpcyBpc24ndCBhIHBlcmZvcm1hbmNlLWNyaXRpY2FsIHBhdGguXG4gICAgaWYgKHRyYW5zaXRpb25FbmQpIHtcbiAgICAgICAgdHJhbnNpdGlvbkVuZCA9IHsgLi4udHJhbnNpdGlvbkVuZCB9O1xuICAgIH1cbiAgICAvLyBHbyB0aHJvdWdoIGV4aXN0aW5nIGBNb3Rpb25WYWx1ZWBzIGFuZCBlbnN1cmUgYW55IGV4aXN0aW5nIENTUyB2YXJpYWJsZXMgYXJlIHJlc29sdmVkXG4gICAgdmlzdWFsRWxlbWVudC52YWx1ZXMuZm9yRWFjaCgodmFsdWUpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudCA9IHZhbHVlLmdldCgpO1xuICAgICAgICBpZiAoIWlzQ1NTVmFyaWFibGVUb2tlbihjdXJyZW50KSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgcmVzb2x2ZWQgPSBnZXRWYXJpYWJsZVZhbHVlKGN1cnJlbnQsIGVsZW1lbnQpO1xuICAgICAgICBpZiAocmVzb2x2ZWQpXG4gICAgICAgICAgICB2YWx1ZS5zZXQocmVzb2x2ZWQpO1xuICAgIH0pO1xuICAgIC8vIEN5Y2xlIHRocm91Z2ggZXZlcnkgdGFyZ2V0IHByb3BlcnR5IGFuZCByZXNvbHZlIENTUyB2YXJpYWJsZXMuIEN1cnJlbnRseVxuICAgIC8vIHdlIG9ubHkgcmVhZCBzaW5nbGUtdmFyIHByb3BlcnRpZXMgbGlrZSBgdmFyKC0tZm9vKWAsIG5vdCBgY2FsYyh2YXIoLS1mb28pICsgMjBweClgXG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGFyZ2V0KSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSB0YXJnZXRba2V5XTtcbiAgICAgICAgaWYgKCFpc0NTU1ZhcmlhYmxlVG9rZW4oY3VycmVudCkpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY29uc3QgcmVzb2x2ZWQgPSBnZXRWYXJpYWJsZVZhbHVlKGN1cnJlbnQsIGVsZW1lbnQpO1xuICAgICAgICBpZiAoIXJlc29sdmVkKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIC8vIENsb25lIHRhcmdldCBpZiBpdCBoYXNuJ3QgYWxyZWFkeSBiZWVuXG4gICAgICAgIHRhcmdldFtrZXldID0gcmVzb2x2ZWQ7XG4gICAgICAgIGlmICghdHJhbnNpdGlvbkVuZClcbiAgICAgICAgICAgIHRyYW5zaXRpb25FbmQgPSB7fTtcbiAgICAgICAgLy8gSWYgdGhlIHVzZXIgaGFzbid0IGFscmVhZHkgc2V0IHRoaXMga2V5IG9uIGB0cmFuc2l0aW9uRW5kYCwgc2V0IGl0IHRvIHRoZSB1bnJlc29sdmVkXG4gICAgICAgIC8vIENTUyB2YXJpYWJsZS4gVGhpcyB3aWxsIGVuc3VyZSB0aGF0IGFmdGVyIHRoZSBhbmltYXRpb24gdGhlIGNvbXBvbmVudCB3aWxsIHJlZmxlY3RcbiAgICAgICAgLy8gY2hhbmdlcyBpbiB0aGUgdmFsdWUgb2YgdGhlIENTUyB2YXJpYWJsZS5cbiAgICAgICAgaWYgKHRyYW5zaXRpb25FbmRba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uRW5kW2tleV0gPSBjdXJyZW50O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IHRhcmdldCwgdHJhbnNpdGlvbkVuZCB9O1xufVxuXG5leHBvcnQgeyBwYXJzZUNTU1ZhcmlhYmxlLCByZXNvbHZlQ1NTVmFyaWFibGVzIH07XG4iXSwibmFtZXMiOlsiaW52YXJpYW50IiwiaXNOdW1lcmljYWxTdHJpbmciLCJpc0NTU1ZhcmlhYmxlVG9rZW4iLCJzcGxpdENTU1ZhcmlhYmxlUmVnZXgiLCJwYXJzZUNTU1ZhcmlhYmxlIiwiY3VycmVudCIsIm1hdGNoIiwiZXhlYyIsInRva2VuIiwiZmFsbGJhY2siLCJtYXhEZXB0aCIsImdldFZhcmlhYmxlVmFsdWUiLCJlbGVtZW50IiwiZGVwdGgiLCJyZXNvbHZlZCIsIndpbmRvdyIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwidHJpbW1lZCIsInRyaW0iLCJwYXJzZUZsb2F0IiwicmVzb2x2ZUNTU1ZhcmlhYmxlcyIsInZpc3VhbEVsZW1lbnQiLCJ0YXJnZXQiLCJ0cmFuc2l0aW9uRW5kIiwiRWxlbWVudCIsInZhbHVlcyIsImZvckVhY2giLCJ2YWx1ZSIsImdldCIsInNldCIsImtleSIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   filterProps: () => (/* binding */ filterProps),\n/* harmony export */   loadExternalIsValidProp: () => (/* binding */ loadExternalIsValidProp)\n/* harmony export */ });\n/* harmony import */ var _motion_utils_valid_prop_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../motion/utils/valid-prop.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs\");\n\nlet shouldForward = (key)=>!(0,_motion_utils_valid_prop_mjs__WEBPACK_IMPORTED_MODULE_0__.isValidMotionProp)(key);\nfunction loadExternalIsValidProp(isValidProp) {\n    if (!isValidProp) return;\n    // Explicitly filter our events\n    shouldForward = (key)=>key.startsWith(\"on\") ? !(0,_motion_utils_valid_prop_mjs__WEBPACK_IMPORTED_MODULE_0__.isValidMotionProp)(key) : isValidProp(key);\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */ try {\n    /**\n     * We attempt to import this package but require won't be defined in esm environments, in that case\n     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n     * in favour of explicit injection.\n     */ loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n} catch (_a) {\n// We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n    const filteredProps = {};\n    for(const key in props){\n        /**\n         * values is considered a valid prop by Emotion, so if it's present\n         * this will be rendered out to the DOM unless explicitly filtered.\n         *\n         * We check the type as it could be used with the `feColorMatrix`\n         * element, which we support.\n         */ if (key === \"values\" && typeof props.values === \"object\") continue;\n        if (shouldForward(key) || forwardMotionProps === true && (0,_motion_utils_valid_prop_mjs__WEBPACK_IMPORTED_MODULE_0__.isValidMotionProp)(key) || !isDom && !(0,_motion_utils_valid_prop_mjs__WEBPACK_IMPORTED_MODULE_0__.isValidMotionProp)(key) || // If trying to use native HTML drag events, forward drag listeners\n        props[\"draggable\"] && key.startsWith(\"onDrag\")) {\n            filteredProps[key] = props[key];\n        }\n    }\n    return filteredProps;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvZmlsdGVyLXByb3BzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBeUU7QUFFekUsSUFBSUMsZ0JBQWdCLENBQUNDLE1BQVEsQ0FBQ0YsK0VBQWlCQSxDQUFDRTtBQUNoRCxTQUFTQyx3QkFBd0JDLFdBQVc7SUFDeEMsSUFBSSxDQUFDQSxhQUNEO0lBQ0osK0JBQStCO0lBQy9CSCxnQkFBZ0IsQ0FBQ0MsTUFBUUEsSUFBSUcsVUFBVSxDQUFDLFFBQVEsQ0FBQ0wsK0VBQWlCQSxDQUFDRSxPQUFPRSxZQUFZRjtBQUMxRjtBQUNBOzs7Ozs7Ozs7Ozs7Q0FZQyxHQUNELElBQUk7SUFDQTs7OztLQUlDLEdBQ0RDLHdCQUF3QkcsUUFBUSwwQkFBMEJDLE9BQU87QUFDckUsRUFDQSxPQUFPQyxJQUFJO0FBQ1AsMkZBQTJGO0FBQy9GO0FBQ0EsU0FBU0MsWUFBWUMsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLGtCQUFrQjtJQUNqRCxNQUFNQyxnQkFBZ0IsQ0FBQztJQUN2QixJQUFLLE1BQU1YLE9BQU9RLE1BQU87UUFDckI7Ozs7OztTQU1DLEdBQ0QsSUFBSVIsUUFBUSxZQUFZLE9BQU9RLE1BQU1JLE1BQU0sS0FBSyxVQUM1QztRQUNKLElBQUliLGNBQWNDLFFBQ2JVLHVCQUF1QixRQUFRWiwrRUFBaUJBLENBQUNFLFFBQ2pELENBQUNTLFNBQVMsQ0FBQ1gsK0VBQWlCQSxDQUFDRSxRQUM5QixtRUFBbUU7UUFDbEVRLEtBQUssQ0FBQyxZQUFZLElBQUlSLElBQUlHLFVBQVUsQ0FBQyxXQUFZO1lBQ2xEUSxhQUFhLENBQUNYLElBQUksR0FBR1EsS0FBSyxDQUFDUixJQUFJO1FBQ25DO0lBQ0o7SUFDQSxPQUFPVztBQUNYO0FBRWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvZmlsdGVyLXByb3BzLm1qcz9mYzQxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzVmFsaWRNb3Rpb25Qcm9wIH0gZnJvbSAnLi4vLi4vLi4vbW90aW9uL3V0aWxzL3ZhbGlkLXByb3AubWpzJztcblxubGV0IHNob3VsZEZvcndhcmQgPSAoa2V5KSA9PiAhaXNWYWxpZE1vdGlvblByb3Aoa2V5KTtcbmZ1bmN0aW9uIGxvYWRFeHRlcm5hbElzVmFsaWRQcm9wKGlzVmFsaWRQcm9wKSB7XG4gICAgaWYgKCFpc1ZhbGlkUHJvcClcbiAgICAgICAgcmV0dXJuO1xuICAgIC8vIEV4cGxpY2l0bHkgZmlsdGVyIG91ciBldmVudHNcbiAgICBzaG91bGRGb3J3YXJkID0gKGtleSkgPT4ga2V5LnN0YXJ0c1dpdGgoXCJvblwiKSA/ICFpc1ZhbGlkTW90aW9uUHJvcChrZXkpIDogaXNWYWxpZFByb3Aoa2V5KTtcbn1cbi8qKlxuICogRW1vdGlvbiBhbmQgU3R5bGVkIENvbXBvbmVudHMgYm90aCBhbGxvdyB1c2VycyB0byBwYXNzIHRocm91Z2ggYXJiaXRyYXJ5IHByb3BzIHRvIHRoZWlyIGNvbXBvbmVudHNcbiAqIHRvIGR5bmFtaWNhbGx5IGdlbmVyYXRlIENTUy4gVGhleSBib3RoIHVzZSB0aGUgYEBlbW90aW9uL2lzLXByb3AtdmFsaWRgIHBhY2thZ2UgdG8gZGV0ZXJtaW5lIHdoaWNoXG4gKiBvZiB0aGVzZSBzaG91bGQgYmUgcGFzc2VkIHRvIHRoZSB1bmRlcmx5aW5nIERPTSBub2RlLlxuICpcbiAqIEhvd2V2ZXIsIHdoZW4gc3R5bGluZyBhIE1vdGlvbiBjb21wb25lbnQgYHN0eWxlZChtb3Rpb24uZGl2KWAsIGJvdGggcGFja2FnZXMgcGFzcyB0aHJvdWdoICphbGwqIHByb3BzXG4gKiBhcyBpdCdzIHNlZW4gYXMgYW4gYXJiaXRyYXJ5IGNvbXBvbmVudCByYXRoZXIgdGhhbiBhIERPTSBub2RlLiBNb3Rpb24gb25seSBhbGxvd3MgYXJiaXRyYXJ5IHByb3BzXG4gKiBwYXNzZWQgdGhyb3VnaCB0aGUgYGN1c3RvbWAgcHJvcCBzbyBpdCBkb2Vzbid0ICpuZWVkKiB0aGUgcGF5bG9hZCBvciBjb21wdXRhdGlvbmFsIG92ZXJoZWFkIG9mXG4gKiBgQGVtb3Rpb24vaXMtcHJvcC12YWxpZGAsIGhvd2V2ZXIgdG8gZml4IHRoaXMgcHJvYmxlbSB3ZSBuZWVkIHRvIHVzZSBpdC5cbiAqXG4gKiBCeSBtYWtpbmcgaXQgYW4gb3B0aW9uYWxEZXBlbmRlbmN5IHdlIGNhbiBvZmZlciB0aGlzIGZ1bmN0aW9uYWxpdHkgb25seSBpbiB0aGUgc2l0dWF0aW9ucyB3aGVyZSBpdCdzXG4gKiBhY3R1YWxseSByZXF1aXJlZC5cbiAqL1xudHJ5IHtcbiAgICAvKipcbiAgICAgKiBXZSBhdHRlbXB0IHRvIGltcG9ydCB0aGlzIHBhY2thZ2UgYnV0IHJlcXVpcmUgd29uJ3QgYmUgZGVmaW5lZCBpbiBlc20gZW52aXJvbm1lbnRzLCBpbiB0aGF0IGNhc2VcbiAgICAgKiBpc1Byb3BWYWxpZCB3aWxsIGhhdmUgdG8gYmUgcHJvdmlkZWQgdmlhIGBNb3Rpb25Db250ZXh0YC4gSW4gYSA2LjAuMCB0aGlzIHNob3VsZCBwcm9iYWJseSBiZSByZW1vdmVkXG4gICAgICogaW4gZmF2b3VyIG9mIGV4cGxpY2l0IGluamVjdGlvbi5cbiAgICAgKi9cbiAgICBsb2FkRXh0ZXJuYWxJc1ZhbGlkUHJvcChyZXF1aXJlKFwiQGVtb3Rpb24vaXMtcHJvcC12YWxpZFwiKS5kZWZhdWx0KTtcbn1cbmNhdGNoIChfYSkge1xuICAgIC8vIFdlIGRvbid0IG5lZWQgdG8gYWN0dWFsbHkgZG8gYW55dGhpbmcgaGVyZSAtIHRoZSBmYWxsYmFjayBpcyB0aGUgZXhpc3RpbmcgYGlzUHJvcFZhbGlkYC5cbn1cbmZ1bmN0aW9uIGZpbHRlclByb3BzKHByb3BzLCBpc0RvbSwgZm9yd2FyZE1vdGlvblByb3BzKSB7XG4gICAgY29uc3QgZmlsdGVyZWRQcm9wcyA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHByb3BzKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiB2YWx1ZXMgaXMgY29uc2lkZXJlZCBhIHZhbGlkIHByb3AgYnkgRW1vdGlvbiwgc28gaWYgaXQncyBwcmVzZW50XG4gICAgICAgICAqIHRoaXMgd2lsbCBiZSByZW5kZXJlZCBvdXQgdG8gdGhlIERPTSB1bmxlc3MgZXhwbGljaXRseSBmaWx0ZXJlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogV2UgY2hlY2sgdGhlIHR5cGUgYXMgaXQgY291bGQgYmUgdXNlZCB3aXRoIHRoZSBgZmVDb2xvck1hdHJpeGBcbiAgICAgICAgICogZWxlbWVudCwgd2hpY2ggd2Ugc3VwcG9ydC5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChrZXkgPT09IFwidmFsdWVzXCIgJiYgdHlwZW9mIHByb3BzLnZhbHVlcyA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBpZiAoc2hvdWxkRm9yd2FyZChrZXkpIHx8XG4gICAgICAgICAgICAoZm9yd2FyZE1vdGlvblByb3BzID09PSB0cnVlICYmIGlzVmFsaWRNb3Rpb25Qcm9wKGtleSkpIHx8XG4gICAgICAgICAgICAoIWlzRG9tICYmICFpc1ZhbGlkTW90aW9uUHJvcChrZXkpKSB8fFxuICAgICAgICAgICAgLy8gSWYgdHJ5aW5nIHRvIHVzZSBuYXRpdmUgSFRNTCBkcmFnIGV2ZW50cywgZm9yd2FyZCBkcmFnIGxpc3RlbmVyc1xuICAgICAgICAgICAgKHByb3BzW1wiZHJhZ2dhYmxlXCJdICYmIGtleS5zdGFydHNXaXRoKFwib25EcmFnXCIpKSkge1xuICAgICAgICAgICAgZmlsdGVyZWRQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmlsdGVyZWRQcm9wcztcbn1cblxuZXhwb3J0IHsgZmlsdGVyUHJvcHMsIGxvYWRFeHRlcm5hbElzVmFsaWRQcm9wIH07XG4iXSwibmFtZXMiOlsiaXNWYWxpZE1vdGlvblByb3AiLCJzaG91bGRGb3J3YXJkIiwia2V5IiwibG9hZEV4dGVybmFsSXNWYWxpZFByb3AiLCJpc1ZhbGlkUHJvcCIsInN0YXJ0c1dpdGgiLCJyZXF1aXJlIiwiZGVmYXVsdCIsIl9hIiwiZmlsdGVyUHJvcHMiLCJwcm9wcyIsImlzRG9tIiwiZm9yd2FyZE1vdGlvblByb3BzIiwiZmlsdGVyZWRQcm9wcyIsInZhbHVlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cssVariableRegex: () => (/* binding */ cssVariableRegex),\n/* harmony export */   isCSSVariableName: () => (/* binding */ isCSSVariableName),\n/* harmony export */   isCSSVariableToken: () => (/* binding */ isCSSVariableToken)\n/* harmony export */ });\nconst checkStringStartsWith = (token)=>(key)=>typeof key === \"string\" && key.startsWith(token);\nconst isCSSVariableName = checkStringStartsWith(\"--\");\nconst isCSSVariableToken = checkStringStartsWith(\"var(--\");\nconst cssVariableRegex = /var\\s*\\(\\s*--[\\w-]+(\\s*,\\s*(?:(?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)+)?\\s*\\)/g;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvaXMtY3NzLXZhcmlhYmxlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxNQUFNQSx3QkFBd0IsQ0FBQ0MsUUFBVSxDQUFDQyxNQUFRLE9BQU9BLFFBQVEsWUFBWUEsSUFBSUMsVUFBVSxDQUFDRjtBQUM1RixNQUFNRyxvQkFBb0JKLHNCQUFzQjtBQUNoRCxNQUFNSyxxQkFBcUJMLHNCQUFzQjtBQUNqRCxNQUFNTSxtQkFBbUI7QUFFMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS91dGlscy9pcy1jc3MtdmFyaWFibGUubWpzPzc1ZWEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY2hlY2tTdHJpbmdTdGFydHNXaXRoID0gKHRva2VuKSA9PiAoa2V5KSA9PiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICYmIGtleS5zdGFydHNXaXRoKHRva2VuKTtcbmNvbnN0IGlzQ1NTVmFyaWFibGVOYW1lID0gY2hlY2tTdHJpbmdTdGFydHNXaXRoKFwiLS1cIik7XG5jb25zdCBpc0NTU1ZhcmlhYmxlVG9rZW4gPSBjaGVja1N0cmluZ1N0YXJ0c1dpdGgoXCJ2YXIoLS1cIik7XG5jb25zdCBjc3NWYXJpYWJsZVJlZ2V4ID0gL3ZhclxccypcXChcXHMqLS1bXFx3LV0rKFxccyosXFxzKig/Oig/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKSspP1xccypcXCkvZztcblxuZXhwb3J0IHsgY3NzVmFyaWFibGVSZWdleCwgaXNDU1NWYXJpYWJsZU5hbWUsIGlzQ1NTVmFyaWFibGVUb2tlbiB9O1xuIl0sIm5hbWVzIjpbImNoZWNrU3RyaW5nU3RhcnRzV2l0aCIsInRva2VuIiwia2V5Iiwic3RhcnRzV2l0aCIsImlzQ1NTVmFyaWFibGVOYW1lIiwiaXNDU1NWYXJpYWJsZVRva2VuIiwiY3NzVmFyaWFibGVSZWdleCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isSVGComponent: () => (/* binding */ isSVGComponent)\n/* harmony export */ });\n/* harmony import */ var _svg_lowercase_elements_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../svg/lowercase-elements.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs\");\n\nfunction isSVGComponent(Component) {\n    if (/**\n     * If it's not a string, it's a custom React component. Currently we only support\n     * HTML custom React components.\n     */ typeof Component !== \"string\" || /**\n         * If it contains a dash, the element is a custom HTML webcomponent.\n         */ Component.includes(\"-\")) {\n        return false;\n    } else if (/**\n     * If it's in our list of lowercase SVG tags, it's an SVG component\n     */ _svg_lowercase_elements_mjs__WEBPACK_IMPORTED_MODULE_0__.lowercaseSVGElements.indexOf(Component) > -1 || /**\n         * If it contains a capital letter, it's an SVG component\n         */ /[A-Z]/.test(Component)) {\n        return true;\n    }\n    return false;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvaXMtc3ZnLWNvbXBvbmVudC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBd0U7QUFFeEUsU0FBU0MsZUFBZUMsU0FBUztJQUM3QixJQUNBOzs7S0FHQyxHQUNELE9BQU9BLGNBQWMsWUFDakI7O1NBRUMsR0FDREEsVUFBVUMsUUFBUSxDQUFDLE1BQU07UUFDekIsT0FBTztJQUNYLE9BQ0ssSUFDTDs7S0FFQyxHQUNESCw2RUFBb0JBLENBQUNJLE9BQU8sQ0FBQ0YsYUFBYSxDQUFDLEtBQ3ZDOztTQUVDLEdBQ0QsUUFBUUcsSUFBSSxDQUFDSCxZQUFZO1FBQ3pCLE9BQU87SUFDWDtJQUNBLE9BQU87QUFDWDtBQUUwQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3V0aWxzL2lzLXN2Zy1jb21wb25lbnQubWpzP2ViZGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbG93ZXJjYXNlU1ZHRWxlbWVudHMgfSBmcm9tICcuLi8uLi9zdmcvbG93ZXJjYXNlLWVsZW1lbnRzLm1qcyc7XG5cbmZ1bmN0aW9uIGlzU1ZHQ29tcG9uZW50KENvbXBvbmVudCkge1xuICAgIGlmIChcbiAgICAvKipcbiAgICAgKiBJZiBpdCdzIG5vdCBhIHN0cmluZywgaXQncyBhIGN1c3RvbSBSZWFjdCBjb21wb25lbnQuIEN1cnJlbnRseSB3ZSBvbmx5IHN1cHBvcnRcbiAgICAgKiBIVE1MIGN1c3RvbSBSZWFjdCBjb21wb25lbnRzLlxuICAgICAqL1xuICAgIHR5cGVvZiBDb21wb25lbnQgIT09IFwic3RyaW5nXCIgfHxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGl0IGNvbnRhaW5zIGEgZGFzaCwgdGhlIGVsZW1lbnQgaXMgYSBjdXN0b20gSFRNTCB3ZWJjb21wb25lbnQuXG4gICAgICAgICAqL1xuICAgICAgICBDb21wb25lbnQuaW5jbHVkZXMoXCItXCIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoXG4gICAgLyoqXG4gICAgICogSWYgaXQncyBpbiBvdXIgbGlzdCBvZiBsb3dlcmNhc2UgU1ZHIHRhZ3MsIGl0J3MgYW4gU1ZHIGNvbXBvbmVudFxuICAgICAqL1xuICAgIGxvd2VyY2FzZVNWR0VsZW1lbnRzLmluZGV4T2YoQ29tcG9uZW50KSA+IC0xIHx8XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBpdCBjb250YWlucyBhIGNhcGl0YWwgbGV0dGVyLCBpdCdzIGFuIFNWRyBjb21wb25lbnRcbiAgICAgICAgICovXG4gICAgICAgIC9bQS1aXS8udGVzdChDb21wb25lbnQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCB7IGlzU1ZHQ29tcG9uZW50IH07XG4iXSwibmFtZXMiOlsibG93ZXJjYXNlU1ZHRWxlbWVudHMiLCJpc1NWR0NvbXBvbmVudCIsIkNvbXBvbmVudCIsImluY2x1ZGVzIiwiaW5kZXhPZiIsInRlc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isSVGElement: () => (/* binding */ isSVGElement)\n/* harmony export */ });\nfunction isSVGElement(element) {\n    return element instanceof SVGElement && element.tagName !== \"svg\";\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvaXMtc3ZnLWVsZW1lbnQubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxTQUFTQSxhQUFhQyxPQUFPO0lBQ3pCLE9BQU9BLG1CQUFtQkMsY0FBY0QsUUFBUUUsT0FBTyxLQUFLO0FBQ2hFO0FBRXdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvaXMtc3ZnLWVsZW1lbnQubWpzPzJhYzUiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaXNTVkdFbGVtZW50KGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudCBpbnN0YW5jZW9mIFNWR0VsZW1lbnQgJiYgZWxlbWVudC50YWdOYW1lICE9PSBcInN2Z1wiO1xufVxuXG5leHBvcnQgeyBpc1NWR0VsZW1lbnQgfTtcbiJdLCJuYW1lcyI6WyJpc1NWR0VsZW1lbnQiLCJlbGVtZW50IiwiU1ZHRWxlbWVudCIsInRhZ05hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseDomVariant: () => (/* binding */ parseDomVariant)\n/* harmony export */ });\n/* harmony import */ var _css_variables_conversion_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./css-variables-conversion.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs\");\n/* harmony import */ var _unit_conversion_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./unit-conversion.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs\");\n\n\n/**\n * Parse a DOM variant to make it animatable. This involves resolving CSS variables\n * and ensuring animations like \"20%\" => \"calc(50vw)\" are performed in pixels.\n */ const parseDomVariant = (visualElement, target, origin, transitionEnd)=>{\n    const resolved = (0,_css_variables_conversion_mjs__WEBPACK_IMPORTED_MODULE_0__.resolveCSSVariables)(visualElement, target, transitionEnd);\n    target = resolved.target;\n    transitionEnd = resolved.transitionEnd;\n    return (0,_unit_conversion_mjs__WEBPACK_IMPORTED_MODULE_1__.unitConversion)(visualElement, target, origin, transitionEnd);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvcGFyc2UtZG9tLXZhcmlhbnQubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxRTtBQUNkO0FBRXZEOzs7Q0FHQyxHQUNELE1BQU1FLGtCQUFrQixDQUFDQyxlQUFlQyxRQUFRQyxRQUFRQztJQUNwRCxNQUFNQyxXQUFXUCxrRkFBbUJBLENBQUNHLGVBQWVDLFFBQVFFO0lBQzVERixTQUFTRyxTQUFTSCxNQUFNO0lBQ3hCRSxnQkFBZ0JDLFNBQVNELGFBQWE7SUFDdEMsT0FBT0wsb0VBQWNBLENBQUNFLGVBQWVDLFFBQVFDLFFBQVFDO0FBQ3pEO0FBRTJCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvcGFyc2UtZG9tLXZhcmlhbnQubWpzPzY3MjUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzb2x2ZUNTU1ZhcmlhYmxlcyB9IGZyb20gJy4vY3NzLXZhcmlhYmxlcy1jb252ZXJzaW9uLm1qcyc7XG5pbXBvcnQgeyB1bml0Q29udmVyc2lvbiB9IGZyb20gJy4vdW5pdC1jb252ZXJzaW9uLm1qcyc7XG5cbi8qKlxuICogUGFyc2UgYSBET00gdmFyaWFudCB0byBtYWtlIGl0IGFuaW1hdGFibGUuIFRoaXMgaW52b2x2ZXMgcmVzb2x2aW5nIENTUyB2YXJpYWJsZXNcbiAqIGFuZCBlbnN1cmluZyBhbmltYXRpb25zIGxpa2UgXCIyMCVcIiA9PiBcImNhbGMoNTB2dylcIiBhcmUgcGVyZm9ybWVkIGluIHBpeGVscy5cbiAqL1xuY29uc3QgcGFyc2VEb21WYXJpYW50ID0gKHZpc3VhbEVsZW1lbnQsIHRhcmdldCwgb3JpZ2luLCB0cmFuc2l0aW9uRW5kKSA9PiB7XG4gICAgY29uc3QgcmVzb2x2ZWQgPSByZXNvbHZlQ1NTVmFyaWFibGVzKHZpc3VhbEVsZW1lbnQsIHRhcmdldCwgdHJhbnNpdGlvbkVuZCk7XG4gICAgdGFyZ2V0ID0gcmVzb2x2ZWQudGFyZ2V0O1xuICAgIHRyYW5zaXRpb25FbmQgPSByZXNvbHZlZC50cmFuc2l0aW9uRW5kO1xuICAgIHJldHVybiB1bml0Q29udmVyc2lvbih2aXN1YWxFbGVtZW50LCB0YXJnZXQsIG9yaWdpbiwgdHJhbnNpdGlvbkVuZCk7XG59O1xuXG5leHBvcnQgeyBwYXJzZURvbVZhcmlhbnQgfTtcbiJdLCJuYW1lcyI6WyJyZXNvbHZlQ1NTVmFyaWFibGVzIiwidW5pdENvbnZlcnNpb24iLCJwYXJzZURvbVZhcmlhbnQiLCJ2aXN1YWxFbGVtZW50IiwidGFyZ2V0Iiwib3JpZ2luIiwidHJhbnNpdGlvbkVuZCIsInJlc29sdmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   positionalValues: () => (/* binding */ positionalValues),\n/* harmony export */   unitConversion: () => (/* binding */ unitConversion)\n/* harmony export */ });\n/* harmony import */ var _animation_utils_is_keyframes_target_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../animation/utils/is-keyframes-target.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs\");\n/* harmony import */ var _utils_errors_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../utils/errors.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/errors.mjs\");\n/* harmony import */ var _html_utils_transform_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../html/utils/transform.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/transform.mjs\");\n/* harmony import */ var _value_types_dimensions_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../value-types/dimensions.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs\");\n/* harmony import */ var _utils_is_browser_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../utils/is-browser.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/is-browser.mjs\");\n/* harmony import */ var _value_types_numbers_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../value/types/numbers/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/numbers/index.mjs\");\n/* harmony import */ var _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../value/types/numbers/units.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/numbers/units.mjs\");\n\n\n\n\n\n\n\nconst positionalKeys = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\",\n    \"translateX\",\n    \"translateY\"\n]);\nconst isPositionalKey = (key)=>positionalKeys.has(key);\nconst hasPositionalKey = (target)=>{\n    return Object.keys(target).some(isPositionalKey);\n};\nconst isNumOrPxType = (v)=>v === _value_types_numbers_index_mjs__WEBPACK_IMPORTED_MODULE_0__.number || v === _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_1__.px;\nconst getPosFromMatrix = (matrix, pos)=>parseFloat(matrix.split(\", \")[pos]);\nconst getTranslateFromMatrix = (pos2, pos3)=>(_bbox, { transform })=>{\n        if (transform === \"none\" || !transform) return 0;\n        const matrix3d = transform.match(/^matrix3d\\((.+)\\)$/);\n        if (matrix3d) {\n            return getPosFromMatrix(matrix3d[1], pos3);\n        } else {\n            const matrix = transform.match(/^matrix\\((.+)\\)$/);\n            if (matrix) {\n                return getPosFromMatrix(matrix[1], pos2);\n            } else {\n                return 0;\n            }\n        }\n    };\nconst transformKeys = new Set([\n    \"x\",\n    \"y\",\n    \"z\"\n]);\nconst nonTranslationalTransformKeys = _html_utils_transform_mjs__WEBPACK_IMPORTED_MODULE_2__.transformPropOrder.filter((key)=>!transformKeys.has(key));\nfunction removeNonTranslationalTransform(visualElement) {\n    const removedTransforms = [];\n    nonTranslationalTransformKeys.forEach((key)=>{\n        const value = visualElement.getValue(key);\n        if (value !== undefined) {\n            removedTransforms.push([\n                key,\n                value.get()\n            ]);\n            value.set(key.startsWith(\"scale\") ? 1 : 0);\n        }\n    });\n    // Apply changes to element before measurement\n    if (removedTransforms.length) visualElement.render();\n    return removedTransforms;\n}\nconst positionalValues = {\n    // Dimensions\n    width: ({ x }, { paddingLeft = \"0\", paddingRight = \"0\" })=>x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),\n    height: ({ y }, { paddingTop = \"0\", paddingBottom = \"0\" })=>y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),\n    top: (_bbox, { top })=>parseFloat(top),\n    left: (_bbox, { left })=>parseFloat(left),\n    bottom: ({ y }, { top })=>parseFloat(top) + (y.max - y.min),\n    right: ({ x }, { left })=>parseFloat(left) + (x.max - x.min),\n    // Transform\n    x: getTranslateFromMatrix(4, 13),\n    y: getTranslateFromMatrix(5, 14)\n};\n// Alias translate longform names\npositionalValues.translateX = positionalValues.x;\npositionalValues.translateY = positionalValues.y;\nconst convertChangedValueTypes = (target, visualElement, changedKeys)=>{\n    const originBbox = visualElement.measureViewportBox();\n    const element = visualElement.current;\n    const elementComputedStyle = getComputedStyle(element);\n    const { display } = elementComputedStyle;\n    const origin = {};\n    // If the element is currently set to display: \"none\", make it visible before\n    // measuring the target bounding box\n    if (display === \"none\") {\n        visualElement.setStaticValue(\"display\", target.display || \"block\");\n    }\n    /**\n     * Record origins before we render and update styles\n     */ changedKeys.forEach((key)=>{\n        origin[key] = positionalValues[key](originBbox, elementComputedStyle);\n    });\n    // Apply the latest values (as set in checkAndConvertChangedValueTypes)\n    visualElement.render();\n    const targetBbox = visualElement.measureViewportBox();\n    changedKeys.forEach((key)=>{\n        // Restore styles to their **calculated computed style**, not their actual\n        // originally set style. This allows us to animate between equivalent pixel units.\n        const value = visualElement.getValue(key);\n        value && value.jump(origin[key]);\n        target[key] = positionalValues[key](targetBbox, elementComputedStyle);\n    });\n    return target;\n};\nconst checkAndConvertChangedValueTypes = (visualElement, target, origin = {}, transitionEnd = {})=>{\n    target = {\n        ...target\n    };\n    transitionEnd = {\n        ...transitionEnd\n    };\n    const targetPositionalKeys = Object.keys(target).filter(isPositionalKey);\n    // We want to remove any transform values that could affect the element's bounding box before\n    // it's measured. We'll reapply these later.\n    let removedTransformValues = [];\n    let hasAttemptedToRemoveTransformValues = false;\n    const changedValueTypeKeys = [];\n    targetPositionalKeys.forEach((key)=>{\n        const value = visualElement.getValue(key);\n        if (!visualElement.hasValue(key)) return;\n        let from = origin[key];\n        let fromType = (0,_value_types_dimensions_mjs__WEBPACK_IMPORTED_MODULE_3__.findDimensionValueType)(from);\n        const to = target[key];\n        let toType;\n        // TODO: The current implementation of this basically throws an error\n        // if you try and do value conversion via keyframes. There's probably\n        // a way of doing this but the performance implications would need greater scrutiny,\n        // as it'd be doing multiple resize-remeasure operations.\n        if ((0,_animation_utils_is_keyframes_target_mjs__WEBPACK_IMPORTED_MODULE_4__.isKeyframesTarget)(to)) {\n            const numKeyframes = to.length;\n            const fromIndex = to[0] === null ? 1 : 0;\n            from = to[fromIndex];\n            fromType = (0,_value_types_dimensions_mjs__WEBPACK_IMPORTED_MODULE_3__.findDimensionValueType)(from);\n            for(let i = fromIndex; i < numKeyframes; i++){\n                /**\n                 * Don't allow wildcard keyframes to be used to detect\n                 * a difference in value types.\n                 */ if (to[i] === null) break;\n                if (!toType) {\n                    toType = (0,_value_types_dimensions_mjs__WEBPACK_IMPORTED_MODULE_3__.findDimensionValueType)(to[i]);\n                    (0,_utils_errors_mjs__WEBPACK_IMPORTED_MODULE_5__.invariant)(toType === fromType || isNumOrPxType(fromType) && isNumOrPxType(toType), \"Keyframes must be of the same dimension as the current value\");\n                } else {\n                    (0,_utils_errors_mjs__WEBPACK_IMPORTED_MODULE_5__.invariant)((0,_value_types_dimensions_mjs__WEBPACK_IMPORTED_MODULE_3__.findDimensionValueType)(to[i]) === toType, \"All keyframes must be of the same type\");\n                }\n            }\n        } else {\n            toType = (0,_value_types_dimensions_mjs__WEBPACK_IMPORTED_MODULE_3__.findDimensionValueType)(to);\n        }\n        if (fromType !== toType) {\n            // If they're both just number or px, convert them both to numbers rather than\n            // relying on resize/remeasure to convert (which is wasteful in this situation)\n            if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {\n                const current = value.get();\n                if (typeof current === \"string\") {\n                    value.set(parseFloat(current));\n                }\n                if (typeof to === \"string\") {\n                    target[key] = parseFloat(to);\n                } else if (Array.isArray(to) && toType === _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_1__.px) {\n                    target[key] = to.map(parseFloat);\n                }\n            } else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) && (toType === null || toType === void 0 ? void 0 : toType.transform) && (from === 0 || to === 0)) {\n                // If one or the other value is 0, it's safe to coerce it to the\n                // type of the other without measurement\n                if (from === 0) {\n                    value.set(toType.transform(from));\n                } else {\n                    target[key] = fromType.transform(to);\n                }\n            } else {\n                // If we're going to do value conversion via DOM measurements, we first\n                // need to remove non-positional transform values that could affect the bbox measurements.\n                if (!hasAttemptedToRemoveTransformValues) {\n                    removedTransformValues = removeNonTranslationalTransform(visualElement);\n                    hasAttemptedToRemoveTransformValues = true;\n                }\n                changedValueTypeKeys.push(key);\n                transitionEnd[key] = transitionEnd[key] !== undefined ? transitionEnd[key] : target[key];\n                value.jump(to);\n            }\n        }\n    });\n    if (changedValueTypeKeys.length) {\n        const scrollY = changedValueTypeKeys.indexOf(\"height\") >= 0 ? window.pageYOffset : null;\n        const convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);\n        // If we removed transform values, reapply them before the next render\n        if (removedTransformValues.length) {\n            removedTransformValues.forEach(([key, value])=>{\n                visualElement.getValue(key).set(value);\n            });\n        }\n        // Reapply original values\n        visualElement.render();\n        // Restore scroll position\n        if (_utils_is_browser_mjs__WEBPACK_IMPORTED_MODULE_6__.isBrowser && scrollY !== null) {\n            window.scrollTo({\n                top: scrollY\n            });\n        }\n        return {\n            target: convertedTarget,\n            transitionEnd\n        };\n    } else {\n        return {\n            target,\n            transitionEnd\n        };\n    }\n};\n/**\n * Convert value types for x/y/width/height/top/left/bottom/right\n *\n * Allows animation between `'auto'` -> `'100%'` or `0` -> `'calc(50% - 10vw)'`\n *\n * @internal\n */ function unitConversion(visualElement, target, origin, transitionEnd) {\n    return hasPositionalKey(target) ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd) : {\n        target,\n        transitionEnd\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAnimatableNone: () => (/* binding */ getAnimatableNone)\n/* harmony export */ });\n/* harmony import */ var _value_types_complex_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../value/types/complex/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/complex/index.mjs\");\n/* harmony import */ var _value_types_complex_filter_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../value/types/complex/filter.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/complex/filter.mjs\");\n/* harmony import */ var _defaults_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./defaults.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs\");\n\n\n\nfunction getAnimatableNone(key, value) {\n    let defaultValueType = (0,_defaults_mjs__WEBPACK_IMPORTED_MODULE_0__.getDefaultValueType)(key);\n    if (defaultValueType !== _value_types_complex_filter_mjs__WEBPACK_IMPORTED_MODULE_1__.filter) defaultValueType = _value_types_complex_index_mjs__WEBPACK_IMPORTED_MODULE_2__.complex;\n    // If value is not recognised as animatable, ie \"none\", create an animatable version origin based on the target\n    return defaultValueType.getAnimatableNone ? defaultValueType.getAnimatableNone(value) : undefined;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvYW5pbWF0YWJsZS1ub25lLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWlFO0FBQ0E7QUFDWjtBQUVyRCxTQUFTRyxrQkFBa0JDLEdBQUcsRUFBRUMsS0FBSztJQUNqQyxJQUFJQyxtQkFBbUJKLGtFQUFtQkEsQ0FBQ0U7SUFDM0MsSUFBSUUscUJBQXFCTCxtRUFBTUEsRUFDM0JLLG1CQUFtQk4sbUVBQU9BO0lBQzlCLCtHQUErRztJQUMvRyxPQUFPTSxpQkFBaUJILGlCQUFpQixHQUNuQ0csaUJBQWlCSCxpQkFBaUIsQ0FBQ0UsU0FDbkNFO0FBQ1Y7QUFFNkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS92YWx1ZS10eXBlcy9hbmltYXRhYmxlLW5vbmUubWpzPzExMmIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29tcGxleCB9IGZyb20gJy4uLy4uLy4uL3ZhbHVlL3R5cGVzL2NvbXBsZXgvaW5kZXgubWpzJztcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJy4uLy4uLy4uL3ZhbHVlL3R5cGVzL2NvbXBsZXgvZmlsdGVyLm1qcyc7XG5pbXBvcnQgeyBnZXREZWZhdWx0VmFsdWVUeXBlIH0gZnJvbSAnLi9kZWZhdWx0cy5tanMnO1xuXG5mdW5jdGlvbiBnZXRBbmltYXRhYmxlTm9uZShrZXksIHZhbHVlKSB7XG4gICAgbGV0IGRlZmF1bHRWYWx1ZVR5cGUgPSBnZXREZWZhdWx0VmFsdWVUeXBlKGtleSk7XG4gICAgaWYgKGRlZmF1bHRWYWx1ZVR5cGUgIT09IGZpbHRlcilcbiAgICAgICAgZGVmYXVsdFZhbHVlVHlwZSA9IGNvbXBsZXg7XG4gICAgLy8gSWYgdmFsdWUgaXMgbm90IHJlY29nbmlzZWQgYXMgYW5pbWF0YWJsZSwgaWUgXCJub25lXCIsIGNyZWF0ZSBhbiBhbmltYXRhYmxlIHZlcnNpb24gb3JpZ2luIGJhc2VkIG9uIHRoZSB0YXJnZXRcbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlVHlwZS5nZXRBbmltYXRhYmxlTm9uZVxuICAgICAgICA/IGRlZmF1bHRWYWx1ZVR5cGUuZ2V0QW5pbWF0YWJsZU5vbmUodmFsdWUpXG4gICAgICAgIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgeyBnZXRBbmltYXRhYmxlTm9uZSB9O1xuIl0sIm5hbWVzIjpbImNvbXBsZXgiLCJmaWx0ZXIiLCJnZXREZWZhdWx0VmFsdWVUeXBlIiwiZ2V0QW5pbWF0YWJsZU5vbmUiLCJrZXkiLCJ2YWx1ZSIsImRlZmF1bHRWYWx1ZVR5cGUiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultValueTypes: () => (/* binding */ defaultValueTypes),\n/* harmony export */   getDefaultValueType: () => (/* binding */ getDefaultValueType)\n/* harmony export */ });\n/* harmony import */ var _value_types_color_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../value/types/color/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/color/index.mjs\");\n/* harmony import */ var _value_types_complex_filter_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../value/types/complex/filter.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/complex/filter.mjs\");\n/* harmony import */ var _number_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./number.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs\");\n\n\n\n/**\n * A map of default value types for common values\n */ const defaultValueTypes = {\n    ..._number_mjs__WEBPACK_IMPORTED_MODULE_0__.numberValueTypes,\n    // Color props\n    color: _value_types_color_index_mjs__WEBPACK_IMPORTED_MODULE_1__.color,\n    backgroundColor: _value_types_color_index_mjs__WEBPACK_IMPORTED_MODULE_1__.color,\n    outlineColor: _value_types_color_index_mjs__WEBPACK_IMPORTED_MODULE_1__.color,\n    fill: _value_types_color_index_mjs__WEBPACK_IMPORTED_MODULE_1__.color,\n    stroke: _value_types_color_index_mjs__WEBPACK_IMPORTED_MODULE_1__.color,\n    // Border props\n    borderColor: _value_types_color_index_mjs__WEBPACK_IMPORTED_MODULE_1__.color,\n    borderTopColor: _value_types_color_index_mjs__WEBPACK_IMPORTED_MODULE_1__.color,\n    borderRightColor: _value_types_color_index_mjs__WEBPACK_IMPORTED_MODULE_1__.color,\n    borderBottomColor: _value_types_color_index_mjs__WEBPACK_IMPORTED_MODULE_1__.color,\n    borderLeftColor: _value_types_color_index_mjs__WEBPACK_IMPORTED_MODULE_1__.color,\n    filter: _value_types_complex_filter_mjs__WEBPACK_IMPORTED_MODULE_2__.filter,\n    WebkitFilter: _value_types_complex_filter_mjs__WEBPACK_IMPORTED_MODULE_2__.filter\n};\n/**\n * Gets the default ValueType for the provided value key\n */ const getDefaultValueType = (key)=>defaultValueTypes[key];\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvZGVmYXVsdHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTZEO0FBQ0k7QUFDakI7QUFFaEQ7O0NBRUMsR0FDRCxNQUFNRyxvQkFBb0I7SUFDdEIsR0FBR0QseURBQWdCO0lBQ25CLGNBQWM7SUFDZEYsS0FBS0EsaUVBQUFBO0lBQ0xJLGlCQUFpQkosK0RBQUtBO0lBQ3RCSyxjQUFjTCwrREFBS0E7SUFDbkJNLE1BQU1OLCtEQUFLQTtJQUNYTyxRQUFRUCwrREFBS0E7SUFDYixlQUFlO0lBQ2ZRLGFBQWFSLCtEQUFLQTtJQUNsQlMsZ0JBQWdCVCwrREFBS0E7SUFDckJVLGtCQUFrQlYsK0RBQUtBO0lBQ3ZCVyxtQkFBbUJYLCtEQUFLQTtJQUN4QlksaUJBQWlCWiwrREFBS0E7SUFDdEJDLE1BQU1BLHFFQUFBQTtJQUNOWSxjQUFjWixtRUFBTUE7QUFDeEI7QUFDQTs7Q0FFQyxHQUNELE1BQU1hLHNCQUFzQixDQUFDQyxNQUFRWixpQkFBaUIsQ0FBQ1ksSUFBSTtBQUVUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvZGVmYXVsdHMubWpzPzAyYjIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29sb3IgfSBmcm9tICcuLi8uLi8uLi92YWx1ZS90eXBlcy9jb2xvci9pbmRleC5tanMnO1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAnLi4vLi4vLi4vdmFsdWUvdHlwZXMvY29tcGxleC9maWx0ZXIubWpzJztcbmltcG9ydCB7IG51bWJlclZhbHVlVHlwZXMgfSBmcm9tICcuL251bWJlci5tanMnO1xuXG4vKipcbiAqIEEgbWFwIG9mIGRlZmF1bHQgdmFsdWUgdHlwZXMgZm9yIGNvbW1vbiB2YWx1ZXNcbiAqL1xuY29uc3QgZGVmYXVsdFZhbHVlVHlwZXMgPSB7XG4gICAgLi4ubnVtYmVyVmFsdWVUeXBlcyxcbiAgICAvLyBDb2xvciBwcm9wc1xuICAgIGNvbG9yLFxuICAgIGJhY2tncm91bmRDb2xvcjogY29sb3IsXG4gICAgb3V0bGluZUNvbG9yOiBjb2xvcixcbiAgICBmaWxsOiBjb2xvcixcbiAgICBzdHJva2U6IGNvbG9yLFxuICAgIC8vIEJvcmRlciBwcm9wc1xuICAgIGJvcmRlckNvbG9yOiBjb2xvcixcbiAgICBib3JkZXJUb3BDb2xvcjogY29sb3IsXG4gICAgYm9yZGVyUmlnaHRDb2xvcjogY29sb3IsXG4gICAgYm9yZGVyQm90dG9tQ29sb3I6IGNvbG9yLFxuICAgIGJvcmRlckxlZnRDb2xvcjogY29sb3IsXG4gICAgZmlsdGVyLFxuICAgIFdlYmtpdEZpbHRlcjogZmlsdGVyLFxufTtcbi8qKlxuICogR2V0cyB0aGUgZGVmYXVsdCBWYWx1ZVR5cGUgZm9yIHRoZSBwcm92aWRlZCB2YWx1ZSBrZXlcbiAqL1xuY29uc3QgZ2V0RGVmYXVsdFZhbHVlVHlwZSA9IChrZXkpID0+IGRlZmF1bHRWYWx1ZVR5cGVzW2tleV07XG5cbmV4cG9ydCB7IGRlZmF1bHRWYWx1ZVR5cGVzLCBnZXREZWZhdWx0VmFsdWVUeXBlIH07XG4iXSwibmFtZXMiOlsiY29sb3IiLCJmaWx0ZXIiLCJudW1iZXJWYWx1ZVR5cGVzIiwiZGVmYXVsdFZhbHVlVHlwZXMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJvdXRsaW5lQ29sb3IiLCJmaWxsIiwic3Ryb2tlIiwiYm9yZGVyQ29sb3IiLCJib3JkZXJUb3BDb2xvciIsImJvcmRlclJpZ2h0Q29sb3IiLCJib3JkZXJCb3R0b21Db2xvciIsImJvcmRlckxlZnRDb2xvciIsIldlYmtpdEZpbHRlciIsImdldERlZmF1bHRWYWx1ZVR5cGUiLCJrZXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dimensionValueTypes: () => (/* binding */ dimensionValueTypes),\n/* harmony export */   findDimensionValueType: () => (/* binding */ findDimensionValueType)\n/* harmony export */ });\n/* harmony import */ var _value_types_numbers_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../value/types/numbers/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/numbers/index.mjs\");\n/* harmony import */ var _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../value/types/numbers/units.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/numbers/units.mjs\");\n/* harmony import */ var _test_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./test.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs\");\n/* harmony import */ var _type_auto_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./type-auto.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs\");\n\n\n\n\n/**\n * A list of value types commonly used for dimensions\n */ const dimensionValueTypes = [\n    _value_types_numbers_index_mjs__WEBPACK_IMPORTED_MODULE_0__.number,\n    _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_1__.px,\n    _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_1__.percent,\n    _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_1__.degrees,\n    _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_1__.vw,\n    _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_1__.vh,\n    _type_auto_mjs__WEBPACK_IMPORTED_MODULE_2__.auto\n];\n/**\n * Tests a dimensional value against the list of dimension ValueTypes\n */ const findDimensionValueType = (v)=>dimensionValueTypes.find((0,_test_mjs__WEBPACK_IMPORTED_MODULE_3__.testValueType)(v));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvZGltZW5zaW9ucy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWdFO0FBQ3NCO0FBQzNDO0FBQ0o7QUFFdkM7O0NBRUMsR0FDRCxNQUFNUSxzQkFBc0I7SUFBQ1Isa0VBQU1BO0lBQUVDLDhEQUFFQTtJQUFFQyxtRUFBT0E7SUFBRUMsbUVBQU9BO0lBQUVDLDhEQUFFQTtJQUFFQyw4REFBRUE7SUFBRUUsZ0RBQUlBO0NBQUM7QUFDeEU7O0NBRUMsR0FDRCxNQUFNRSx5QkFBeUIsQ0FBQ0MsSUFBTUYsb0JBQW9CRyxJQUFJLENBQUNMLHdEQUFhQSxDQUFDSTtBQUV0QiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3ZhbHVlLXR5cGVzL2RpbWVuc2lvbnMubWpzP2FhMjEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbnVtYmVyIH0gZnJvbSAnLi4vLi4vLi4vdmFsdWUvdHlwZXMvbnVtYmVycy9pbmRleC5tanMnO1xuaW1wb3J0IHsgcHgsIHBlcmNlbnQsIGRlZ3JlZXMsIHZ3LCB2aCB9IGZyb20gJy4uLy4uLy4uL3ZhbHVlL3R5cGVzL251bWJlcnMvdW5pdHMubWpzJztcbmltcG9ydCB7IHRlc3RWYWx1ZVR5cGUgfSBmcm9tICcuL3Rlc3QubWpzJztcbmltcG9ydCB7IGF1dG8gfSBmcm9tICcuL3R5cGUtYXV0by5tanMnO1xuXG4vKipcbiAqIEEgbGlzdCBvZiB2YWx1ZSB0eXBlcyBjb21tb25seSB1c2VkIGZvciBkaW1lbnNpb25zXG4gKi9cbmNvbnN0IGRpbWVuc2lvblZhbHVlVHlwZXMgPSBbbnVtYmVyLCBweCwgcGVyY2VudCwgZGVncmVlcywgdncsIHZoLCBhdXRvXTtcbi8qKlxuICogVGVzdHMgYSBkaW1lbnNpb25hbCB2YWx1ZSBhZ2FpbnN0IHRoZSBsaXN0IG9mIGRpbWVuc2lvbiBWYWx1ZVR5cGVzXG4gKi9cbmNvbnN0IGZpbmREaW1lbnNpb25WYWx1ZVR5cGUgPSAodikgPT4gZGltZW5zaW9uVmFsdWVUeXBlcy5maW5kKHRlc3RWYWx1ZVR5cGUodikpO1xuXG5leHBvcnQgeyBkaW1lbnNpb25WYWx1ZVR5cGVzLCBmaW5kRGltZW5zaW9uVmFsdWVUeXBlIH07XG4iXSwibmFtZXMiOlsibnVtYmVyIiwicHgiLCJwZXJjZW50IiwiZGVncmVlcyIsInZ3IiwidmgiLCJ0ZXN0VmFsdWVUeXBlIiwiYXV0byIsImRpbWVuc2lvblZhbHVlVHlwZXMiLCJmaW5kRGltZW5zaW9uVmFsdWVUeXBlIiwidiIsImZpbmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   findValueType: () => (/* binding */ findValueType)\n/* harmony export */ });\n/* harmony import */ var _value_types_color_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../value/types/color/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/color/index.mjs\");\n/* harmony import */ var _value_types_complex_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../value/types/complex/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/complex/index.mjs\");\n/* harmony import */ var _dimensions_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dimensions.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs\");\n/* harmony import */ var _test_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./test.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs\");\n\n\n\n\n/**\n * A list of all ValueTypes\n */ const valueTypes = [\n    ..._dimensions_mjs__WEBPACK_IMPORTED_MODULE_0__.dimensionValueTypes,\n    _value_types_color_index_mjs__WEBPACK_IMPORTED_MODULE_1__.color,\n    _value_types_complex_index_mjs__WEBPACK_IMPORTED_MODULE_2__.complex\n];\n/**\n * Tests a value against the list of ValueTypes\n */ const findValueType = (v)=>valueTypes.find((0,_test_mjs__WEBPACK_IMPORTED_MODULE_3__.testValueType)(v));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvZmluZC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBNkQ7QUFDSTtBQUNWO0FBQ1o7QUFFM0M7O0NBRUMsR0FDRCxNQUFNSSxhQUFhO09BQUlGLGdFQUFtQkE7SUFBRUYsK0RBQUtBO0lBQUVDLG1FQUFPQTtDQUFDO0FBQzNEOztDQUVDLEdBQ0QsTUFBTUksZ0JBQWdCLENBQUNDLElBQU1GLFdBQVdHLElBQUksQ0FBQ0osd0RBQWFBLENBQUNHO0FBRWxDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvZmluZC5tanM/ZmM3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb2xvciB9IGZyb20gJy4uLy4uLy4uL3ZhbHVlL3R5cGVzL2NvbG9yL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBjb21wbGV4IH0gZnJvbSAnLi4vLi4vLi4vdmFsdWUvdHlwZXMvY29tcGxleC9pbmRleC5tanMnO1xuaW1wb3J0IHsgZGltZW5zaW9uVmFsdWVUeXBlcyB9IGZyb20gJy4vZGltZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgdGVzdFZhbHVlVHlwZSB9IGZyb20gJy4vdGVzdC5tanMnO1xuXG4vKipcbiAqIEEgbGlzdCBvZiBhbGwgVmFsdWVUeXBlc1xuICovXG5jb25zdCB2YWx1ZVR5cGVzID0gWy4uLmRpbWVuc2lvblZhbHVlVHlwZXMsIGNvbG9yLCBjb21wbGV4XTtcbi8qKlxuICogVGVzdHMgYSB2YWx1ZSBhZ2FpbnN0IHRoZSBsaXN0IG9mIFZhbHVlVHlwZXNcbiAqL1xuY29uc3QgZmluZFZhbHVlVHlwZSA9ICh2KSA9PiB2YWx1ZVR5cGVzLmZpbmQodGVzdFZhbHVlVHlwZSh2KSk7XG5cbmV4cG9ydCB7IGZpbmRWYWx1ZVR5cGUgfTtcbiJdLCJuYW1lcyI6WyJjb2xvciIsImNvbXBsZXgiLCJkaW1lbnNpb25WYWx1ZVR5cGVzIiwidGVzdFZhbHVlVHlwZSIsInZhbHVlVHlwZXMiLCJmaW5kVmFsdWVUeXBlIiwidiIsImZpbmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getValueAsType: () => (/* binding */ getValueAsType)\n/* harmony export */ });\n/**\n * Provided a value and a ValueType, returns the value as that value type.\n */ const getValueAsType = (value, type)=>{\n    return type && typeof value === \"number\" ? type.transform(value) : value;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvZ2V0LWFzLXR5cGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Q0FFQyxHQUNELE1BQU1BLGlCQUFpQixDQUFDQyxPQUFPQztJQUMzQixPQUFPQSxRQUFRLE9BQU9ELFVBQVUsV0FDMUJDLEtBQUtDLFNBQVMsQ0FBQ0YsU0FDZkE7QUFDVjtBQUUwQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3ZhbHVlLXR5cGVzL2dldC1hcy10eXBlLm1qcz8zOWQ5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUHJvdmlkZWQgYSB2YWx1ZSBhbmQgYSBWYWx1ZVR5cGUsIHJldHVybnMgdGhlIHZhbHVlIGFzIHRoYXQgdmFsdWUgdHlwZS5cbiAqL1xuY29uc3QgZ2V0VmFsdWVBc1R5cGUgPSAodmFsdWUsIHR5cGUpID0+IHtcbiAgICByZXR1cm4gdHlwZSAmJiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCJcbiAgICAgICAgPyB0eXBlLnRyYW5zZm9ybSh2YWx1ZSlcbiAgICAgICAgOiB2YWx1ZTtcbn07XG5cbmV4cG9ydCB7IGdldFZhbHVlQXNUeXBlIH07XG4iXSwibmFtZXMiOlsiZ2V0VmFsdWVBc1R5cGUiLCJ2YWx1ZSIsInR5cGUiLCJ0cmFuc2Zvcm0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   numberValueTypes: () => (/* binding */ numberValueTypes)\n/* harmony export */ });\n/* harmony import */ var _value_types_numbers_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../value/types/numbers/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/numbers/index.mjs\");\n/* harmony import */ var _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../value/types/numbers/units.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/numbers/units.mjs\");\n/* harmony import */ var _type_int_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./type-int.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs\");\n\n\n\nconst numberValueTypes = {\n    // Border props\n    borderWidth: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    borderTopWidth: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    borderRightWidth: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    borderBottomWidth: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    borderLeftWidth: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    borderRadius: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    radius: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    borderTopLeftRadius: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    borderTopRightRadius: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    borderBottomRightRadius: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    borderBottomLeftRadius: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    // Positioning props\n    width: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    maxWidth: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    height: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    maxHeight: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    size: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    top: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    right: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    bottom: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    left: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    // Spacing props\n    padding: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    paddingTop: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    paddingRight: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    paddingBottom: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    paddingLeft: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    margin: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    marginTop: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    marginRight: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    marginBottom: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    marginLeft: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    // Transform props\n    rotate: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.degrees,\n    rotateX: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.degrees,\n    rotateY: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.degrees,\n    rotateZ: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.degrees,\n    scale: _value_types_numbers_index_mjs__WEBPACK_IMPORTED_MODULE_1__.scale,\n    scaleX: _value_types_numbers_index_mjs__WEBPACK_IMPORTED_MODULE_1__.scale,\n    scaleY: _value_types_numbers_index_mjs__WEBPACK_IMPORTED_MODULE_1__.scale,\n    scaleZ: _value_types_numbers_index_mjs__WEBPACK_IMPORTED_MODULE_1__.scale,\n    skew: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.degrees,\n    skewX: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.degrees,\n    skewY: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.degrees,\n    distance: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    translateX: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    translateY: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    translateZ: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    x: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    y: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    z: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    perspective: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    transformPerspective: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    opacity: _value_types_numbers_index_mjs__WEBPACK_IMPORTED_MODULE_1__.alpha,\n    originX: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.progressPercentage,\n    originY: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.progressPercentage,\n    originZ: _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px,\n    // Misc\n    zIndex: _type_int_mjs__WEBPACK_IMPORTED_MODULE_2__.int,\n    // SVG\n    fillOpacity: _value_types_numbers_index_mjs__WEBPACK_IMPORTED_MODULE_1__.alpha,\n    strokeOpacity: _value_types_numbers_index_mjs__WEBPACK_IMPORTED_MODULE_1__.alpha,\n    numOctaves: _type_int_mjs__WEBPACK_IMPORTED_MODULE_2__.int\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvbnVtYmVyLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXNFO0FBQ21CO0FBQ3BEO0FBRXJDLE1BQU1NLG1CQUFtQjtJQUNyQixlQUFlO0lBQ2ZDLGFBQWFMLDhEQUFFQTtJQUNmTSxnQkFBZ0JOLDhEQUFFQTtJQUNsQk8sa0JBQWtCUCw4REFBRUE7SUFDcEJRLG1CQUFtQlIsOERBQUVBO0lBQ3JCUyxpQkFBaUJULDhEQUFFQTtJQUNuQlUsY0FBY1YsOERBQUVBO0lBQ2hCVyxRQUFRWCw4REFBRUE7SUFDVlkscUJBQXFCWiw4REFBRUE7SUFDdkJhLHNCQUFzQmIsOERBQUVBO0lBQ3hCYyx5QkFBeUJkLDhEQUFFQTtJQUMzQmUsd0JBQXdCZiw4REFBRUE7SUFDMUIsb0JBQW9CO0lBQ3BCZ0IsT0FBT2hCLDhEQUFFQTtJQUNUaUIsVUFBVWpCLDhEQUFFQTtJQUNaa0IsUUFBUWxCLDhEQUFFQTtJQUNWbUIsV0FBV25CLDhEQUFFQTtJQUNib0IsTUFBTXBCLDhEQUFFQTtJQUNScUIsS0FBS3JCLDhEQUFFQTtJQUNQc0IsT0FBT3RCLDhEQUFFQTtJQUNUdUIsUUFBUXZCLDhEQUFFQTtJQUNWd0IsTUFBTXhCLDhEQUFFQTtJQUNSLGdCQUFnQjtJQUNoQnlCLFNBQVN6Qiw4REFBRUE7SUFDWDBCLFlBQVkxQiw4REFBRUE7SUFDZDJCLGNBQWMzQiw4REFBRUE7SUFDaEI0QixlQUFlNUIsOERBQUVBO0lBQ2pCNkIsYUFBYTdCLDhEQUFFQTtJQUNmOEIsUUFBUTlCLDhEQUFFQTtJQUNWK0IsV0FBVy9CLDhEQUFFQTtJQUNiZ0MsYUFBYWhDLDhEQUFFQTtJQUNmaUMsY0FBY2pDLDhEQUFFQTtJQUNoQmtDLFlBQVlsQyw4REFBRUE7SUFDZCxrQkFBa0I7SUFDbEJtQyxRQUFRbEMsbUVBQU9BO0lBQ2ZtQyxTQUFTbkMsbUVBQU9BO0lBQ2hCb0MsU0FBU3BDLG1FQUFPQTtJQUNoQnFDLFNBQVNyQyxtRUFBT0E7SUFDaEJILEtBQUtBLG1FQUFBQTtJQUNMeUMsUUFBUXpDLGlFQUFLQTtJQUNiMEMsUUFBUTFDLGlFQUFLQTtJQUNiMkMsUUFBUTNDLGlFQUFLQTtJQUNiNEMsTUFBTXpDLG1FQUFPQTtJQUNiMEMsT0FBTzFDLG1FQUFPQTtJQUNkMkMsT0FBTzNDLG1FQUFPQTtJQUNkNEMsVUFBVTdDLDhEQUFFQTtJQUNaOEMsWUFBWTlDLDhEQUFFQTtJQUNkK0MsWUFBWS9DLDhEQUFFQTtJQUNkZ0QsWUFBWWhELDhEQUFFQTtJQUNkaUQsR0FBR2pELDhEQUFFQTtJQUNMa0QsR0FBR2xELDhEQUFFQTtJQUNMbUQsR0FBR25ELDhEQUFFQTtJQUNMb0QsYUFBYXBELDhEQUFFQTtJQUNmcUQsc0JBQXNCckQsOERBQUVBO0lBQ3hCc0QsU0FBU3ZELGlFQUFLQTtJQUNkd0QsU0FBU3JELDhFQUFrQkE7SUFDM0JzRCxTQUFTdEQsOEVBQWtCQTtJQUMzQnVELFNBQVN6RCw4REFBRUE7SUFDWCxPQUFPO0lBQ1AwRCxRQUFRdkQsOENBQUdBO0lBQ1gsTUFBTTtJQUNOd0QsYUFBYTVELGlFQUFLQTtJQUNsQjZELGVBQWU3RCxpRUFBS0E7SUFDcEI4RCxZQUFZMUQsOENBQUdBO0FBQ25CO0FBRTRCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvbnVtYmVyLm1qcz8yNzJlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNjYWxlLCBhbHBoYSB9IGZyb20gJy4uLy4uLy4uL3ZhbHVlL3R5cGVzL251bWJlcnMvaW5kZXgubWpzJztcbmltcG9ydCB7IHB4LCBkZWdyZWVzLCBwcm9ncmVzc1BlcmNlbnRhZ2UgfSBmcm9tICcuLi8uLi8uLi92YWx1ZS90eXBlcy9udW1iZXJzL3VuaXRzLm1qcyc7XG5pbXBvcnQgeyBpbnQgfSBmcm9tICcuL3R5cGUtaW50Lm1qcyc7XG5cbmNvbnN0IG51bWJlclZhbHVlVHlwZXMgPSB7XG4gICAgLy8gQm9yZGVyIHByb3BzXG4gICAgYm9yZGVyV2lkdGg6IHB4LFxuICAgIGJvcmRlclRvcFdpZHRoOiBweCxcbiAgICBib3JkZXJSaWdodFdpZHRoOiBweCxcbiAgICBib3JkZXJCb3R0b21XaWR0aDogcHgsXG4gICAgYm9yZGVyTGVmdFdpZHRoOiBweCxcbiAgICBib3JkZXJSYWRpdXM6IHB4LFxuICAgIHJhZGl1czogcHgsXG4gICAgYm9yZGVyVG9wTGVmdFJhZGl1czogcHgsXG4gICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6IHB4LFxuICAgIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiBweCxcbiAgICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiBweCxcbiAgICAvLyBQb3NpdGlvbmluZyBwcm9wc1xuICAgIHdpZHRoOiBweCxcbiAgICBtYXhXaWR0aDogcHgsXG4gICAgaGVpZ2h0OiBweCxcbiAgICBtYXhIZWlnaHQ6IHB4LFxuICAgIHNpemU6IHB4LFxuICAgIHRvcDogcHgsXG4gICAgcmlnaHQ6IHB4LFxuICAgIGJvdHRvbTogcHgsXG4gICAgbGVmdDogcHgsXG4gICAgLy8gU3BhY2luZyBwcm9wc1xuICAgIHBhZGRpbmc6IHB4LFxuICAgIHBhZGRpbmdUb3A6IHB4LFxuICAgIHBhZGRpbmdSaWdodDogcHgsXG4gICAgcGFkZGluZ0JvdHRvbTogcHgsXG4gICAgcGFkZGluZ0xlZnQ6IHB4LFxuICAgIG1hcmdpbjogcHgsXG4gICAgbWFyZ2luVG9wOiBweCxcbiAgICBtYXJnaW5SaWdodDogcHgsXG4gICAgbWFyZ2luQm90dG9tOiBweCxcbiAgICBtYXJnaW5MZWZ0OiBweCxcbiAgICAvLyBUcmFuc2Zvcm0gcHJvcHNcbiAgICByb3RhdGU6IGRlZ3JlZXMsXG4gICAgcm90YXRlWDogZGVncmVlcyxcbiAgICByb3RhdGVZOiBkZWdyZWVzLFxuICAgIHJvdGF0ZVo6IGRlZ3JlZXMsXG4gICAgc2NhbGUsXG4gICAgc2NhbGVYOiBzY2FsZSxcbiAgICBzY2FsZVk6IHNjYWxlLFxuICAgIHNjYWxlWjogc2NhbGUsXG4gICAgc2tldzogZGVncmVlcyxcbiAgICBza2V3WDogZGVncmVlcyxcbiAgICBza2V3WTogZGVncmVlcyxcbiAgICBkaXN0YW5jZTogcHgsXG4gICAgdHJhbnNsYXRlWDogcHgsXG4gICAgdHJhbnNsYXRlWTogcHgsXG4gICAgdHJhbnNsYXRlWjogcHgsXG4gICAgeDogcHgsXG4gICAgeTogcHgsXG4gICAgejogcHgsXG4gICAgcGVyc3BlY3RpdmU6IHB4LFxuICAgIHRyYW5zZm9ybVBlcnNwZWN0aXZlOiBweCxcbiAgICBvcGFjaXR5OiBhbHBoYSxcbiAgICBvcmlnaW5YOiBwcm9ncmVzc1BlcmNlbnRhZ2UsXG4gICAgb3JpZ2luWTogcHJvZ3Jlc3NQZXJjZW50YWdlLFxuICAgIG9yaWdpblo6IHB4LFxuICAgIC8vIE1pc2NcbiAgICB6SW5kZXg6IGludCxcbiAgICAvLyBTVkdcbiAgICBmaWxsT3BhY2l0eTogYWxwaGEsXG4gICAgc3Ryb2tlT3BhY2l0eTogYWxwaGEsXG4gICAgbnVtT2N0YXZlczogaW50LFxufTtcblxuZXhwb3J0IHsgbnVtYmVyVmFsdWVUeXBlcyB9O1xuIl0sIm5hbWVzIjpbInNjYWxlIiwiYWxwaGEiLCJweCIsImRlZ3JlZXMiLCJwcm9ncmVzc1BlcmNlbnRhZ2UiLCJpbnQiLCJudW1iZXJWYWx1ZVR5cGVzIiwiYm9yZGVyV2lkdGgiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlclJpZ2h0V2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsImJvcmRlckxlZnRXaWR0aCIsImJvcmRlclJhZGl1cyIsInJhZGl1cyIsImJvcmRlclRvcExlZnRSYWRpdXMiLCJib3JkZXJUb3BSaWdodFJhZGl1cyIsImJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzIiwiYm9yZGVyQm90dG9tTGVmdFJhZGl1cyIsIndpZHRoIiwibWF4V2lkdGgiLCJoZWlnaHQiLCJtYXhIZWlnaHQiLCJzaXplIiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0IiwicGFkZGluZyIsInBhZGRpbmdUb3AiLCJwYWRkaW5nUmlnaHQiLCJwYWRkaW5nQm90dG9tIiwicGFkZGluZ0xlZnQiLCJtYXJnaW4iLCJtYXJnaW5Ub3AiLCJtYXJnaW5SaWdodCIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpbkxlZnQiLCJyb3RhdGUiLCJyb3RhdGVYIiwicm90YXRlWSIsInJvdGF0ZVoiLCJzY2FsZVgiLCJzY2FsZVkiLCJzY2FsZVoiLCJza2V3Iiwic2tld1giLCJza2V3WSIsImRpc3RhbmNlIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJ0cmFuc2xhdGVaIiwieCIsInkiLCJ6IiwicGVyc3BlY3RpdmUiLCJ0cmFuc2Zvcm1QZXJzcGVjdGl2ZSIsIm9wYWNpdHkiLCJvcmlnaW5YIiwib3JpZ2luWSIsIm9yaWdpbloiLCJ6SW5kZXgiLCJmaWxsT3BhY2l0eSIsInN0cm9rZU9wYWNpdHkiLCJudW1PY3RhdmVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   testValueType: () => (/* binding */ testValueType)\n/* harmony export */ });\n/**\n * Tests a provided value against a ValueType\n */ const testValueType = (v)=>(type)=>type.test(v);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvdGVzdC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztDQUVDLEdBQ0QsTUFBTUEsZ0JBQWdCLENBQUNDLElBQU0sQ0FBQ0MsT0FBU0EsS0FBS0MsSUFBSSxDQUFDRjtBQUV4QiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3ZhbHVlLXR5cGVzL3Rlc3QubWpzP2E3NmUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUZXN0cyBhIHByb3ZpZGVkIHZhbHVlIGFnYWluc3QgYSBWYWx1ZVR5cGVcbiAqL1xuY29uc3QgdGVzdFZhbHVlVHlwZSA9ICh2KSA9PiAodHlwZSkgPT4gdHlwZS50ZXN0KHYpO1xuXG5leHBvcnQgeyB0ZXN0VmFsdWVUeXBlIH07XG4iXSwibmFtZXMiOlsidGVzdFZhbHVlVHlwZSIsInYiLCJ0eXBlIiwidGVzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   auto: () => (/* binding */ auto)\n/* harmony export */ });\n/**\n * ValueType for \"auto\"\n */ const auto = {\n    test: (v)=>v === \"auto\",\n    parse: (v)=>v\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvdHlwZS1hdXRvLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0NBRUMsR0FDRCxNQUFNQSxPQUFPO0lBQ1RDLE1BQU0sQ0FBQ0MsSUFBTUEsTUFBTTtJQUNuQkMsT0FBTyxDQUFDRCxJQUFNQTtBQUNsQjtBQUVnQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3ZhbHVlLXR5cGVzL3R5cGUtYXV0by5tanM/Y2I3NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFZhbHVlVHlwZSBmb3IgXCJhdXRvXCJcbiAqL1xuY29uc3QgYXV0byA9IHtcbiAgICB0ZXN0OiAodikgPT4gdiA9PT0gXCJhdXRvXCIsXG4gICAgcGFyc2U6ICh2KSA9PiB2LFxufTtcblxuZXhwb3J0IHsgYXV0byB9O1xuIl0sIm5hbWVzIjpbImF1dG8iLCJ0ZXN0IiwidiIsInBhcnNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   int: () => (/* binding */ int)\n/* harmony export */ });\n/* harmony import */ var _value_types_numbers_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../value/types/numbers/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/numbers/index.mjs\");\n\nconst int = {\n    ..._value_types_numbers_index_mjs__WEBPACK_IMPORTED_MODULE_0__.number,\n    transform: Math.round\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvdHlwZS1pbnQubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWdFO0FBRWhFLE1BQU1DLE1BQU07SUFDUixHQUFHRCxrRUFBTTtJQUNURSxXQUFXQyxLQUFLQyxLQUFLO0FBQ3pCO0FBRWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS92YWx1ZS10eXBlcy90eXBlLWludC5tanM/OGQyYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBudW1iZXIgfSBmcm9tICcuLi8uLi8uLi92YWx1ZS90eXBlcy9udW1iZXJzL2luZGV4Lm1qcyc7XG5cbmNvbnN0IGludCA9IHtcbiAgICAuLi5udW1iZXIsXG4gICAgdHJhbnNmb3JtOiBNYXRoLnJvdW5kLFxufTtcblxuZXhwb3J0IHsgaW50IH07XG4iXSwibmFtZXMiOlsibnVtYmVyIiwiaW50IiwidHJhbnNmb3JtIiwiTWF0aCIsInJvdW5kIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HTMLVisualElement: () => (/* binding */ HTMLVisualElement),\n/* harmony export */   getComputedStyle: () => (/* binding */ getComputedStyle)\n/* harmony export */ });\n/* harmony import */ var _utils_build_styles_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/build-styles.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs\");\n/* harmony import */ var _dom_utils_is_css_variable_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dom/utils/is-css-variable.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs\");\n/* harmony import */ var _utils_transform_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/transform.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/transform.mjs\");\n/* harmony import */ var _utils_scrape_motion_values_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/scrape-motion-values.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs\");\n/* harmony import */ var _utils_render_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/render.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/render.mjs\");\n/* harmony import */ var _dom_value_types_defaults_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dom/value-types/defaults.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs\");\n/* harmony import */ var _projection_utils_measure_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../projection/utils/measure.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/utils/measure.mjs\");\n/* harmony import */ var _dom_DOMVisualElement_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom/DOMVisualElement.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs\");\n/* harmony import */ var _value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../value/utils/is-motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs\");\n\n\n\n\n\n\n\n\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nclass HTMLVisualElement extends _dom_DOMVisualElement_mjs__WEBPACK_IMPORTED_MODULE_0__.DOMVisualElement {\n    readValueFromInstance(instance, key) {\n        if (_utils_transform_mjs__WEBPACK_IMPORTED_MODULE_1__.transformProps.has(key)) {\n            const defaultType = (0,_dom_value_types_defaults_mjs__WEBPACK_IMPORTED_MODULE_2__.getDefaultValueType)(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        } else {\n            const computedStyle = getComputedStyle(instance);\n            const value = ((0,_dom_utils_is_css_variable_mjs__WEBPACK_IMPORTED_MODULE_3__.isCSSVariableName)(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;\n            return typeof value === \"string\" ? value.trim() : value;\n        }\n    }\n    measureInstanceViewportBox(instance, { transformPagePoint }) {\n        return (0,_projection_utils_measure_mjs__WEBPACK_IMPORTED_MODULE_4__.measureViewportBox)(instance, transformPagePoint);\n    }\n    build(renderState, latestValues, options, props) {\n        (0,_utils_build_styles_mjs__WEBPACK_IMPORTED_MODULE_5__.buildHTMLStyles)(renderState, latestValues, options, props.transformTemplate);\n    }\n    scrapeMotionValuesFromProps(props, prevProps) {\n        return (0,_utils_scrape_motion_values_mjs__WEBPACK_IMPORTED_MODULE_6__.scrapeMotionValuesFromProps)(props, prevProps);\n    }\n    handleChildMotionValue() {\n        if (this.childSubscription) {\n            this.childSubscription();\n            delete this.childSubscription;\n        }\n        const { children } = this.props;\n        if ((0,_value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_7__.isMotionValue)(children)) {\n            this.childSubscription = children.on(\"change\", (latest)=>{\n                if (this.current) this.current.textContent = `${latest}`;\n            });\n        }\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        (0,_utils_render_mjs__WEBPACK_IMPORTED_MODULE_8__.renderHTML)(instance, renderState, styleProp, projection);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL0hUTUxWaXN1YWxFbGVtZW50Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUEyRDtBQUNVO0FBQ2Q7QUFDd0I7QUFDL0I7QUFDc0I7QUFDRTtBQUNUO0FBQ087QUFFdEUsU0FBU1MsaUJBQWlCQyxPQUFPO0lBQzdCLE9BQU9DLE9BQU9GLGdCQUFnQixDQUFDQztBQUNuQztBQUNBLE1BQU1FLDBCQUEwQkwsdUVBQWdCQTtJQUM1Q00sc0JBQXNCQyxRQUFRLEVBQUVDLEdBQUcsRUFBRTtRQUNqQyxJQUFJYixnRUFBY0EsQ0FBQ2MsR0FBRyxDQUFDRCxNQUFNO1lBQ3pCLE1BQU1FLGNBQWNaLGtGQUFtQkEsQ0FBQ1U7WUFDeEMsT0FBT0UsY0FBY0EsWUFBWUMsT0FBTyxJQUFJLElBQUk7UUFDcEQsT0FDSztZQUNELE1BQU1DLGdCQUFnQlYsaUJBQWlCSztZQUN2QyxNQUFNTSxRQUFRLENBQUNuQixpRkFBaUJBLENBQUNjLE9BQzNCSSxjQUFjRSxnQkFBZ0IsQ0FBQ04sT0FDL0JJLGFBQWEsQ0FBQ0osSUFBSSxLQUFLO1lBQzdCLE9BQU8sT0FBT0ssVUFBVSxXQUFXQSxNQUFNRSxJQUFJLEtBQUtGO1FBQ3REO0lBQ0o7SUFDQUcsMkJBQTJCVCxRQUFRLEVBQUUsRUFBRVUsa0JBQWtCLEVBQUUsRUFBRTtRQUN6RCxPQUFPbEIsaUZBQWtCQSxDQUFDUSxVQUFVVTtJQUN4QztJQUNBQyxNQUFNQyxXQUFXLEVBQUVDLFlBQVksRUFBRUMsT0FBTyxFQUFFQyxLQUFLLEVBQUU7UUFDN0M3Qix3RUFBZUEsQ0FBQzBCLGFBQWFDLGNBQWNDLFNBQVNDLE1BQU1DLGlCQUFpQjtJQUMvRTtJQUNBM0IsNEJBQTRCMEIsS0FBSyxFQUFFRSxTQUFTLEVBQUU7UUFDMUMsT0FBTzVCLDRGQUEyQkEsQ0FBQzBCLE9BQU9FO0lBQzlDO0lBQ0FDLHlCQUF5QjtRQUNyQixJQUFJLElBQUksQ0FBQ0MsaUJBQWlCLEVBQUU7WUFDeEIsSUFBSSxDQUFDQSxpQkFBaUI7WUFDdEIsT0FBTyxJQUFJLENBQUNBLGlCQUFpQjtRQUNqQztRQUNBLE1BQU0sRUFBRUMsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDTCxLQUFLO1FBQy9CLElBQUlyQiwrRUFBYUEsQ0FBQzBCLFdBQVc7WUFDekIsSUFBSSxDQUFDRCxpQkFBaUIsR0FBR0MsU0FBU0MsRUFBRSxDQUFDLFVBQVUsQ0FBQ0M7Z0JBQzVDLElBQUksSUFBSSxDQUFDQyxPQUFPLEVBQ1osSUFBSSxDQUFDQSxPQUFPLENBQUNDLFdBQVcsR0FBRyxDQUFDLEVBQUVGLE9BQU8sQ0FBQztZQUM5QztRQUNKO0lBQ0o7SUFDQUcsZUFBZXpCLFFBQVEsRUFBRVksV0FBVyxFQUFFYyxTQUFTLEVBQUVDLFVBQVUsRUFBRTtRQUN6RHJDLDZEQUFVQSxDQUFDVSxVQUFVWSxhQUFhYyxXQUFXQztJQUNqRDtBQUNKO0FBRStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL0hUTUxWaXN1YWxFbGVtZW50Lm1qcz9kZDk5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJ1aWxkSFRNTFN0eWxlcyB9IGZyb20gJy4vdXRpbHMvYnVpbGQtc3R5bGVzLm1qcyc7XG5pbXBvcnQgeyBpc0NTU1ZhcmlhYmxlTmFtZSB9IGZyb20gJy4uL2RvbS91dGlscy9pcy1jc3MtdmFyaWFibGUubWpzJztcbmltcG9ydCB7IHRyYW5zZm9ybVByb3BzIH0gZnJvbSAnLi91dGlscy90cmFuc2Zvcm0ubWpzJztcbmltcG9ydCB7IHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyB9IGZyb20gJy4vdXRpbHMvc2NyYXBlLW1vdGlvbi12YWx1ZXMubWpzJztcbmltcG9ydCB7IHJlbmRlckhUTUwgfSBmcm9tICcuL3V0aWxzL3JlbmRlci5tanMnO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdFZhbHVlVHlwZSB9IGZyb20gJy4uL2RvbS92YWx1ZS10eXBlcy9kZWZhdWx0cy5tanMnO1xuaW1wb3J0IHsgbWVhc3VyZVZpZXdwb3J0Qm94IH0gZnJvbSAnLi4vLi4vcHJvamVjdGlvbi91dGlscy9tZWFzdXJlLm1qcyc7XG5pbXBvcnQgeyBET01WaXN1YWxFbGVtZW50IH0gZnJvbSAnLi4vZG9tL0RPTVZpc3VhbEVsZW1lbnQubWpzJztcbmltcG9ydCB7IGlzTW90aW9uVmFsdWUgfSBmcm9tICcuLi8uLi92YWx1ZS91dGlscy9pcy1tb3Rpb24tdmFsdWUubWpzJztcblxuZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSB7XG4gICAgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xufVxuY2xhc3MgSFRNTFZpc3VhbEVsZW1lbnQgZXh0ZW5kcyBET01WaXN1YWxFbGVtZW50IHtcbiAgICByZWFkVmFsdWVGcm9tSW5zdGFuY2UoaW5zdGFuY2UsIGtleSkge1xuICAgICAgICBpZiAodHJhbnNmb3JtUHJvcHMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRUeXBlID0gZ2V0RGVmYXVsdFZhbHVlVHlwZShrZXkpO1xuICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRUeXBlID8gZGVmYXVsdFR5cGUuZGVmYXVsdCB8fCAwIDogMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGluc3RhbmNlKTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gKGlzQ1NTVmFyaWFibGVOYW1lKGtleSlcbiAgICAgICAgICAgICAgICA/IGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShrZXkpXG4gICAgICAgICAgICAgICAgOiBjb21wdXRlZFN0eWxlW2tleV0pIHx8IDA7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUudHJpbSgpIDogdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbWVhc3VyZUluc3RhbmNlVmlld3BvcnRCb3goaW5zdGFuY2UsIHsgdHJhbnNmb3JtUGFnZVBvaW50IH0pIHtcbiAgICAgICAgcmV0dXJuIG1lYXN1cmVWaWV3cG9ydEJveChpbnN0YW5jZSwgdHJhbnNmb3JtUGFnZVBvaW50KTtcbiAgICB9XG4gICAgYnVpbGQocmVuZGVyU3RhdGUsIGxhdGVzdFZhbHVlcywgb3B0aW9ucywgcHJvcHMpIHtcbiAgICAgICAgYnVpbGRIVE1MU3R5bGVzKHJlbmRlclN0YXRlLCBsYXRlc3RWYWx1ZXMsIG9wdGlvbnMsIHByb3BzLnRyYW5zZm9ybVRlbXBsYXRlKTtcbiAgICB9XG4gICAgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzKHByb3BzLCBwcmV2UHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyhwcm9wcywgcHJldlByb3BzKTtcbiAgICB9XG4gICAgaGFuZGxlQ2hpbGRNb3Rpb25WYWx1ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2hpbGRTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuY2hpbGRTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmNoaWxkU3Vic2NyaXB0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGlmIChpc01vdGlvblZhbHVlKGNoaWxkcmVuKSkge1xuICAgICAgICAgICAgdGhpcy5jaGlsZFN1YnNjcmlwdGlvbiA9IGNoaWxkcmVuLm9uKFwiY2hhbmdlXCIsIChsYXRlc3QpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50KVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQudGV4dENvbnRlbnQgPSBgJHtsYXRlc3R9YDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbmRlckluc3RhbmNlKGluc3RhbmNlLCByZW5kZXJTdGF0ZSwgc3R5bGVQcm9wLCBwcm9qZWN0aW9uKSB7XG4gICAgICAgIHJlbmRlckhUTUwoaW5zdGFuY2UsIHJlbmRlclN0YXRlLCBzdHlsZVByb3AsIHByb2plY3Rpb24pO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgSFRNTFZpc3VhbEVsZW1lbnQsIGdldENvbXB1dGVkU3R5bGUgfTtcbiJdLCJuYW1lcyI6WyJidWlsZEhUTUxTdHlsZXMiLCJpc0NTU1ZhcmlhYmxlTmFtZSIsInRyYW5zZm9ybVByb3BzIiwic2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzIiwicmVuZGVySFRNTCIsImdldERlZmF1bHRWYWx1ZVR5cGUiLCJtZWFzdXJlVmlld3BvcnRCb3giLCJET01WaXN1YWxFbGVtZW50IiwiaXNNb3Rpb25WYWx1ZSIsImdldENvbXB1dGVkU3R5bGUiLCJlbGVtZW50Iiwid2luZG93IiwiSFRNTFZpc3VhbEVsZW1lbnQiLCJyZWFkVmFsdWVGcm9tSW5zdGFuY2UiLCJpbnN0YW5jZSIsImtleSIsImhhcyIsImRlZmF1bHRUeXBlIiwiZGVmYXVsdCIsImNvbXB1dGVkU3R5bGUiLCJ2YWx1ZSIsImdldFByb3BlcnR5VmFsdWUiLCJ0cmltIiwibWVhc3VyZUluc3RhbmNlVmlld3BvcnRCb3giLCJ0cmFuc2Zvcm1QYWdlUG9pbnQiLCJidWlsZCIsInJlbmRlclN0YXRlIiwibGF0ZXN0VmFsdWVzIiwib3B0aW9ucyIsInByb3BzIiwidHJhbnNmb3JtVGVtcGxhdGUiLCJwcmV2UHJvcHMiLCJoYW5kbGVDaGlsZE1vdGlvblZhbHVlIiwiY2hpbGRTdWJzY3JpcHRpb24iLCJjaGlsZHJlbiIsIm9uIiwibGF0ZXN0IiwiY3VycmVudCIsInRleHRDb250ZW50IiwicmVuZGVySW5zdGFuY2UiLCJzdHlsZVByb3AiLCJwcm9qZWN0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/html/config-motion.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/html/config-motion.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   htmlMotionConfig: () => (/* binding */ htmlMotionConfig)\n/* harmony export */ });\n/* harmony import */ var _motion_utils_use_visual_state_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../motion/utils/use-visual-state.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs\");\n/* harmony import */ var _utils_scrape_motion_values_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/scrape-motion-values.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs\");\n/* harmony import */ var _utils_create_render_state_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/create-render-state.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs\");\n\n\n\nconst htmlMotionConfig = {\n    useVisualState: (0,_motion_utils_use_visual_state_mjs__WEBPACK_IMPORTED_MODULE_0__.makeUseVisualState)({\n        scrapeMotionValuesFromProps: _utils_scrape_motion_values_mjs__WEBPACK_IMPORTED_MODULE_1__.scrapeMotionValuesFromProps,\n        createRenderState: _utils_create_render_state_mjs__WEBPACK_IMPORTED_MODULE_2__.createHtmlRenderState\n    })\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL2NvbmZpZy1tb3Rpb24ubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNkU7QUFDRTtBQUNQO0FBRXhFLE1BQU1HLG1CQUFtQjtJQUNyQkMsZ0JBQWdCSixzRkFBa0JBLENBQUM7UUFDL0JDLDJCQUEyQkEsMEZBQUFBO1FBQzNCSSxtQkFBbUJILGlGQUFxQkE7SUFDNUM7QUFDSjtBQUU0QiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvaHRtbC9jb25maWctbW90aW9uLm1qcz8xZGRiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1ha2VVc2VWaXN1YWxTdGF0ZSB9IGZyb20gJy4uLy4uL21vdGlvbi91dGlscy91c2UtdmlzdWFsLXN0YXRlLm1qcyc7XG5pbXBvcnQgeyBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMgfSBmcm9tICcuL3V0aWxzL3NjcmFwZS1tb3Rpb24tdmFsdWVzLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVIdG1sUmVuZGVyU3RhdGUgfSBmcm9tICcuL3V0aWxzL2NyZWF0ZS1yZW5kZXItc3RhdGUubWpzJztcblxuY29uc3QgaHRtbE1vdGlvbkNvbmZpZyA9IHtcbiAgICB1c2VWaXN1YWxTdGF0ZTogbWFrZVVzZVZpc3VhbFN0YXRlKHtcbiAgICAgICAgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzLFxuICAgICAgICBjcmVhdGVSZW5kZXJTdGF0ZTogY3JlYXRlSHRtbFJlbmRlclN0YXRlLFxuICAgIH0pLFxufTtcblxuZXhwb3J0IHsgaHRtbE1vdGlvbkNvbmZpZyB9O1xuIl0sIm5hbWVzIjpbIm1ha2VVc2VWaXN1YWxTdGF0ZSIsInNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyIsImNyZWF0ZUh0bWxSZW5kZXJTdGF0ZSIsImh0bWxNb3Rpb25Db25maWciLCJ1c2VWaXN1YWxTdGF0ZSIsImNyZWF0ZVJlbmRlclN0YXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/html/config-motion.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/html/use-props.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/html/use-props.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   copyRawValuesOnly: () => (/* binding */ copyRawValuesOnly),\n/* harmony export */   useHTMLProps: () => (/* binding */ useHTMLProps)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _motion_utils_is_forced_motion_value_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../motion/utils/is-forced-motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs\");\n/* harmony import */ var _value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../value/utils/is-motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs\");\n/* harmony import */ var _utils_build_styles_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/build-styles.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs\");\n/* harmony import */ var _utils_create_render_state_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/create-render-state.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs\");\n\n\n\n\n\nfunction copyRawValuesOnly(target, source, props) {\n    for(const key in source){\n        if (!(0,_value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_1__.isMotionValue)(source[key]) && !(0,_motion_utils_is_forced_motion_value_mjs__WEBPACK_IMPORTED_MODULE_2__.isForcedMotionValue)(key, props)) {\n            target[key] = source[key];\n        }\n    }\n}\nfunction useInitialMotionValues({ transformTemplate }, visualState, isStatic) {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const state = (0,_utils_create_render_state_mjs__WEBPACK_IMPORTED_MODULE_3__.createHtmlRenderState)();\n        (0,_utils_build_styles_mjs__WEBPACK_IMPORTED_MODULE_4__.buildHTMLStyles)(state, visualState, {\n            enableHardwareAcceleration: !isStatic\n        }, transformTemplate);\n        return Object.assign({}, state.vars, state.style);\n    }, [\n        visualState\n    ]);\n}\nfunction useStyle(props, visualState, isStatic) {\n    const styleProp = props.style || {};\n    const style = {};\n    /**\n     * Copy non-Motion Values straight into style\n     */ copyRawValuesOnly(style, styleProp, props);\n    Object.assign(style, useInitialMotionValues(props, visualState, isStatic));\n    return props.transformValues ? props.transformValues(style) : style;\n}\nfunction useHTMLProps(props, visualState, isStatic) {\n    // The `any` isn't ideal but it is the type of createElement props argument\n    const htmlProps = {};\n    const style = useStyle(props, visualState, isStatic);\n    if (props.drag && props.dragListener !== false) {\n        // Disable the ghost element when a user drags\n        htmlProps.draggable = false;\n        // Disable text selection\n        style.userSelect = style.WebkitUserSelect = style.WebkitTouchCallout = \"none\";\n        // Disable scrolling on the draggable direction\n        style.touchAction = props.drag === true ? \"none\" : `pan-${props.drag === \"x\" ? \"y\" : \"x\"}`;\n    }\n    if (props.tabIndex === undefined && (props.onTap || props.onTapStart || props.whileTap)) {\n        htmlProps.tabIndex = 0;\n    }\n    htmlProps.style = style;\n    return htmlProps;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL3VzZS1wcm9wcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFnQztBQUNvRDtBQUNkO0FBQ1g7QUFDYTtBQUV4RSxTQUFTSyxrQkFBa0JDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxLQUFLO0lBQzVDLElBQUssTUFBTUMsT0FBT0YsT0FBUTtRQUN0QixJQUFJLENBQUNMLCtFQUFhQSxDQUFDSyxNQUFNLENBQUNFLElBQUksS0FBSyxDQUFDUiw2RkFBbUJBLENBQUNRLEtBQUtELFFBQVE7WUFDakVGLE1BQU0sQ0FBQ0csSUFBSSxHQUFHRixNQUFNLENBQUNFLElBQUk7UUFDN0I7SUFDSjtBQUNKO0FBQ0EsU0FBU0MsdUJBQXVCLEVBQUVDLGlCQUFpQixFQUFFLEVBQUVDLFdBQVcsRUFBRUMsUUFBUTtJQUN4RSxPQUFPYiw4Q0FBT0EsQ0FBQztRQUNYLE1BQU1jLFFBQVFWLHFGQUFxQkE7UUFDbkNELHdFQUFlQSxDQUFDVyxPQUFPRixhQUFhO1lBQUVHLDRCQUE0QixDQUFDRjtRQUFTLEdBQUdGO1FBQy9FLE9BQU9LLE9BQU9DLE1BQU0sQ0FBQyxDQUFDLEdBQUdILE1BQU1JLElBQUksRUFBRUosTUFBTUssS0FBSztJQUNwRCxHQUFHO1FBQUNQO0tBQVk7QUFDcEI7QUFDQSxTQUFTUSxTQUFTWixLQUFLLEVBQUVJLFdBQVcsRUFBRUMsUUFBUTtJQUMxQyxNQUFNUSxZQUFZYixNQUFNVyxLQUFLLElBQUksQ0FBQztJQUNsQyxNQUFNQSxRQUFRLENBQUM7SUFDZjs7S0FFQyxHQUNEZCxrQkFBa0JjLE9BQU9FLFdBQVdiO0lBQ3BDUSxPQUFPQyxNQUFNLENBQUNFLE9BQU9ULHVCQUF1QkYsT0FBT0ksYUFBYUM7SUFDaEUsT0FBT0wsTUFBTWMsZUFBZSxHQUFHZCxNQUFNYyxlQUFlLENBQUNILFNBQVNBO0FBQ2xFO0FBQ0EsU0FBU0ksYUFBYWYsS0FBSyxFQUFFSSxXQUFXLEVBQUVDLFFBQVE7SUFDOUMsMkVBQTJFO0lBQzNFLE1BQU1XLFlBQVksQ0FBQztJQUNuQixNQUFNTCxRQUFRQyxTQUFTWixPQUFPSSxhQUFhQztJQUMzQyxJQUFJTCxNQUFNaUIsSUFBSSxJQUFJakIsTUFBTWtCLFlBQVksS0FBSyxPQUFPO1FBQzVDLDhDQUE4QztRQUM5Q0YsVUFBVUcsU0FBUyxHQUFHO1FBQ3RCLHlCQUF5QjtRQUN6QlIsTUFBTVMsVUFBVSxHQUNaVCxNQUFNVSxnQkFBZ0IsR0FDbEJWLE1BQU1XLGtCQUFrQixHQUNwQjtRQUNaLCtDQUErQztRQUMvQ1gsTUFBTVksV0FBVyxHQUNidkIsTUFBTWlCLElBQUksS0FBSyxPQUNULFNBQ0EsQ0FBQyxJQUFJLEVBQUVqQixNQUFNaUIsSUFBSSxLQUFLLE1BQU0sTUFBTSxJQUFJLENBQUM7SUFDckQ7SUFDQSxJQUFJakIsTUFBTXdCLFFBQVEsS0FBS0MsYUFDbEJ6QixDQUFBQSxNQUFNMEIsS0FBSyxJQUFJMUIsTUFBTTJCLFVBQVUsSUFBSTNCLE1BQU00QixRQUFRLEdBQUc7UUFDckRaLFVBQVVRLFFBQVEsR0FBRztJQUN6QjtJQUNBUixVQUFVTCxLQUFLLEdBQUdBO0lBQ2xCLE9BQU9LO0FBQ1g7QUFFMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2h0bWwvdXNlLXByb3BzLm1qcz9iMDhiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc0ZvcmNlZE1vdGlvblZhbHVlIH0gZnJvbSAnLi4vLi4vbW90aW9uL3V0aWxzL2lzLWZvcmNlZC1tb3Rpb24tdmFsdWUubWpzJztcbmltcG9ydCB7IGlzTW90aW9uVmFsdWUgfSBmcm9tICcuLi8uLi92YWx1ZS91dGlscy9pcy1tb3Rpb24tdmFsdWUubWpzJztcbmltcG9ydCB7IGJ1aWxkSFRNTFN0eWxlcyB9IGZyb20gJy4vdXRpbHMvYnVpbGQtc3R5bGVzLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVIdG1sUmVuZGVyU3RhdGUgfSBmcm9tICcuL3V0aWxzL2NyZWF0ZS1yZW5kZXItc3RhdGUubWpzJztcblxuZnVuY3Rpb24gY29weVJhd1ZhbHVlc09ubHkodGFyZ2V0LCBzb3VyY2UsIHByb3BzKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmICghaXNNb3Rpb25WYWx1ZShzb3VyY2Vba2V5XSkgJiYgIWlzRm9yY2VkTW90aW9uVmFsdWUoa2V5LCBwcm9wcykpIHtcbiAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB1c2VJbml0aWFsTW90aW9uVmFsdWVzKHsgdHJhbnNmb3JtVGVtcGxhdGUgfSwgdmlzdWFsU3RhdGUsIGlzU3RhdGljKSB7XG4gICAgcmV0dXJuIHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IGNyZWF0ZUh0bWxSZW5kZXJTdGF0ZSgpO1xuICAgICAgICBidWlsZEhUTUxTdHlsZXMoc3RhdGUsIHZpc3VhbFN0YXRlLCB7IGVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uOiAhaXNTdGF0aWMgfSwgdHJhbnNmb3JtVGVtcGxhdGUpO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUudmFycywgc3RhdGUuc3R5bGUpO1xuICAgIH0sIFt2aXN1YWxTdGF0ZV0pO1xufVxuZnVuY3Rpb24gdXNlU3R5bGUocHJvcHMsIHZpc3VhbFN0YXRlLCBpc1N0YXRpYykge1xuICAgIGNvbnN0IHN0eWxlUHJvcCA9IHByb3BzLnN0eWxlIHx8IHt9O1xuICAgIGNvbnN0IHN0eWxlID0ge307XG4gICAgLyoqXG4gICAgICogQ29weSBub24tTW90aW9uIFZhbHVlcyBzdHJhaWdodCBpbnRvIHN0eWxlXG4gICAgICovXG4gICAgY29weVJhd1ZhbHVlc09ubHkoc3R5bGUsIHN0eWxlUHJvcCwgcHJvcHMpO1xuICAgIE9iamVjdC5hc3NpZ24oc3R5bGUsIHVzZUluaXRpYWxNb3Rpb25WYWx1ZXMocHJvcHMsIHZpc3VhbFN0YXRlLCBpc1N0YXRpYykpO1xuICAgIHJldHVybiBwcm9wcy50cmFuc2Zvcm1WYWx1ZXMgPyBwcm9wcy50cmFuc2Zvcm1WYWx1ZXMoc3R5bGUpIDogc3R5bGU7XG59XG5mdW5jdGlvbiB1c2VIVE1MUHJvcHMocHJvcHMsIHZpc3VhbFN0YXRlLCBpc1N0YXRpYykge1xuICAgIC8vIFRoZSBgYW55YCBpc24ndCBpZGVhbCBidXQgaXQgaXMgdGhlIHR5cGUgb2YgY3JlYXRlRWxlbWVudCBwcm9wcyBhcmd1bWVudFxuICAgIGNvbnN0IGh0bWxQcm9wcyA9IHt9O1xuICAgIGNvbnN0IHN0eWxlID0gdXNlU3R5bGUocHJvcHMsIHZpc3VhbFN0YXRlLCBpc1N0YXRpYyk7XG4gICAgaWYgKHByb3BzLmRyYWcgJiYgcHJvcHMuZHJhZ0xpc3RlbmVyICE9PSBmYWxzZSkge1xuICAgICAgICAvLyBEaXNhYmxlIHRoZSBnaG9zdCBlbGVtZW50IHdoZW4gYSB1c2VyIGRyYWdzXG4gICAgICAgIGh0bWxQcm9wcy5kcmFnZ2FibGUgPSBmYWxzZTtcbiAgICAgICAgLy8gRGlzYWJsZSB0ZXh0IHNlbGVjdGlvblxuICAgICAgICBzdHlsZS51c2VyU2VsZWN0ID1cbiAgICAgICAgICAgIHN0eWxlLldlYmtpdFVzZXJTZWxlY3QgPVxuICAgICAgICAgICAgICAgIHN0eWxlLldlYmtpdFRvdWNoQ2FsbG91dCA9XG4gICAgICAgICAgICAgICAgICAgIFwibm9uZVwiO1xuICAgICAgICAvLyBEaXNhYmxlIHNjcm9sbGluZyBvbiB0aGUgZHJhZ2dhYmxlIGRpcmVjdGlvblxuICAgICAgICBzdHlsZS50b3VjaEFjdGlvbiA9XG4gICAgICAgICAgICBwcm9wcy5kcmFnID09PSB0cnVlXG4gICAgICAgICAgICAgICAgPyBcIm5vbmVcIlxuICAgICAgICAgICAgICAgIDogYHBhbi0ke3Byb3BzLmRyYWcgPT09IFwieFwiID8gXCJ5XCIgOiBcInhcIn1gO1xuICAgIH1cbiAgICBpZiAocHJvcHMudGFiSW5kZXggPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAocHJvcHMub25UYXAgfHwgcHJvcHMub25UYXBTdGFydCB8fCBwcm9wcy53aGlsZVRhcCkpIHtcbiAgICAgICAgaHRtbFByb3BzLnRhYkluZGV4ID0gMDtcbiAgICB9XG4gICAgaHRtbFByb3BzLnN0eWxlID0gc3R5bGU7XG4gICAgcmV0dXJuIGh0bWxQcm9wcztcbn1cblxuZXhwb3J0IHsgY29weVJhd1ZhbHVlc09ubHksIHVzZUhUTUxQcm9wcyB9O1xuIl0sIm5hbWVzIjpbInVzZU1lbW8iLCJpc0ZvcmNlZE1vdGlvblZhbHVlIiwiaXNNb3Rpb25WYWx1ZSIsImJ1aWxkSFRNTFN0eWxlcyIsImNyZWF0ZUh0bWxSZW5kZXJTdGF0ZSIsImNvcHlSYXdWYWx1ZXNPbmx5IiwidGFyZ2V0Iiwic291cmNlIiwicHJvcHMiLCJrZXkiLCJ1c2VJbml0aWFsTW90aW9uVmFsdWVzIiwidHJhbnNmb3JtVGVtcGxhdGUiLCJ2aXN1YWxTdGF0ZSIsImlzU3RhdGljIiwic3RhdGUiLCJlbmFibGVIYXJkd2FyZUFjY2VsZXJhdGlvbiIsIk9iamVjdCIsImFzc2lnbiIsInZhcnMiLCJzdHlsZSIsInVzZVN0eWxlIiwic3R5bGVQcm9wIiwidHJhbnNmb3JtVmFsdWVzIiwidXNlSFRNTFByb3BzIiwiaHRtbFByb3BzIiwiZHJhZyIsImRyYWdMaXN0ZW5lciIsImRyYWdnYWJsZSIsInVzZXJTZWxlY3QiLCJXZWJraXRVc2VyU2VsZWN0IiwiV2Via2l0VG91Y2hDYWxsb3V0IiwidG91Y2hBY3Rpb24iLCJ0YWJJbmRleCIsInVuZGVmaW5lZCIsIm9uVGFwIiwib25UYXBTdGFydCIsIndoaWxlVGFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/html/use-props.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildHTMLStyles: () => (/* binding */ buildHTMLStyles)\n/* harmony export */ });\n/* harmony import */ var _build_transform_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./build-transform.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs\");\n/* harmony import */ var _dom_utils_is_css_variable_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../dom/utils/is-css-variable.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs\");\n/* harmony import */ var _transform_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transform.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/transform.mjs\");\n/* harmony import */ var _dom_value_types_get_as_type_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../dom/value-types/get-as-type.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs\");\n/* harmony import */ var _dom_value_types_number_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../dom/value-types/number.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs\");\n\n\n\n\n\nfunction buildHTMLStyles(state, latestValues, options, transformTemplate) {\n    const { style, vars, transform, transformOrigin } = state;\n    // Track whether we encounter any transform or transformOrigin values.\n    let hasTransform = false;\n    let hasTransformOrigin = false;\n    // Does the calculated transform essentially equal \"none\"?\n    let transformIsNone = true;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept seperately for further processing.\n     */ for(const key in latestValues){\n        const value = latestValues[key];\n        /**\n         * If this is a CSS variable we don't do any further processing.\n         */ if ((0,_dom_utils_is_css_variable_mjs__WEBPACK_IMPORTED_MODULE_0__.isCSSVariableName)(key)) {\n            vars[key] = value;\n            continue;\n        }\n        // Convert the value to its default value type, ie 0 -> \"0px\"\n        const valueType = _dom_value_types_number_mjs__WEBPACK_IMPORTED_MODULE_1__.numberValueTypes[key];\n        const valueAsType = (0,_dom_value_types_get_as_type_mjs__WEBPACK_IMPORTED_MODULE_2__.getValueAsType)(value, valueType);\n        if (_transform_mjs__WEBPACK_IMPORTED_MODULE_3__.transformProps.has(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            transform[key] = valueAsType;\n            // If we already know we have a non-default transform, early return\n            if (!transformIsNone) continue;\n            // Otherwise check to see if this is a default transform\n            if (value !== (valueType.default || 0)) transformIsNone = false;\n        } else if (key.startsWith(\"origin\")) {\n            // If this is a transform origin, flag and enable further transform-origin processing\n            hasTransformOrigin = true;\n            transformOrigin[key] = valueAsType;\n        } else {\n            style[key] = valueAsType;\n        }\n    }\n    if (!latestValues.transform) {\n        if (hasTransform || transformTemplate) {\n            style.transform = (0,_build_transform_mjs__WEBPACK_IMPORTED_MODULE_4__.buildTransform)(state.transform, options, transformIsNone, transformTemplate);\n        } else if (style.transform) {\n            /**\n             * If we have previously created a transform but currently don't have any,\n             * reset transform style to none.\n             */ style.transform = \"none\";\n        }\n    }\n    /**\n     * Build a transformOrigin style. Uses the same defaults as the browser for\n     * undefined origins.\n     */ if (hasTransformOrigin) {\n        const { originX = \"50%\", originY = \"50%\", originZ = 0 } = transformOrigin;\n        style.transformOrigin = `${originX} ${originY} ${originZ}`;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL3V0aWxzL2J1aWxkLXN0eWxlcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQXVEO0FBQ2lCO0FBQ3ZCO0FBQ3NCO0FBQ0g7QUFFcEUsU0FBU0ssZ0JBQWdCQyxLQUFLLEVBQUVDLFlBQVksRUFBRUMsT0FBTyxFQUFFQyxpQkFBaUI7SUFDcEUsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLElBQUksRUFBRUMsU0FBUyxFQUFFQyxlQUFlLEVBQUUsR0FBR1A7SUFDcEQsc0VBQXNFO0lBQ3RFLElBQUlRLGVBQWU7SUFDbkIsSUFBSUMscUJBQXFCO0lBQ3pCLDBEQUEwRDtJQUMxRCxJQUFJQyxrQkFBa0I7SUFDdEI7Ozs7O0tBS0MsR0FDRCxJQUFLLE1BQU1DLE9BQU9WLGFBQWM7UUFDNUIsTUFBTVcsUUFBUVgsWUFBWSxDQUFDVSxJQUFJO1FBQy9COztTQUVDLEdBQ0QsSUFBSWhCLGlGQUFpQkEsQ0FBQ2dCLE1BQU07WUFDeEJOLElBQUksQ0FBQ00sSUFBSSxHQUFHQztZQUNaO1FBQ0o7UUFDQSw2REFBNkQ7UUFDN0QsTUFBTUMsWUFBWWYseUVBQWdCLENBQUNhLElBQUk7UUFDdkMsTUFBTUcsY0FBY2pCLGdGQUFjQSxDQUFDZSxPQUFPQztRQUMxQyxJQUFJakIsMERBQWNBLENBQUNtQixHQUFHLENBQUNKLE1BQU07WUFDekIsc0VBQXNFO1lBQ3RFSCxlQUFlO1lBQ2ZGLFNBQVMsQ0FBQ0ssSUFBSSxHQUFHRztZQUNqQixtRUFBbUU7WUFDbkUsSUFBSSxDQUFDSixpQkFDRDtZQUNKLHdEQUF3RDtZQUN4RCxJQUFJRSxVQUFXQyxDQUFBQSxVQUFVRyxPQUFPLElBQUksSUFDaENOLGtCQUFrQjtRQUMxQixPQUNLLElBQUlDLElBQUlNLFVBQVUsQ0FBQyxXQUFXO1lBQy9CLHFGQUFxRjtZQUNyRlIscUJBQXFCO1lBQ3JCRixlQUFlLENBQUNJLElBQUksR0FBR0c7UUFDM0IsT0FDSztZQUNEVixLQUFLLENBQUNPLElBQUksR0FBR0c7UUFDakI7SUFDSjtJQUNBLElBQUksQ0FBQ2IsYUFBYUssU0FBUyxFQUFFO1FBQ3pCLElBQUlFLGdCQUFnQkwsbUJBQW1CO1lBQ25DQyxNQUFNRSxTQUFTLEdBQUdaLG9FQUFjQSxDQUFDTSxNQUFNTSxTQUFTLEVBQUVKLFNBQVNRLGlCQUFpQlA7UUFDaEYsT0FDSyxJQUFJQyxNQUFNRSxTQUFTLEVBQUU7WUFDdEI7OzthQUdDLEdBQ0RGLE1BQU1FLFNBQVMsR0FBRztRQUN0QjtJQUNKO0lBQ0E7OztLQUdDLEdBQ0QsSUFBSUcsb0JBQW9CO1FBQ3BCLE1BQU0sRUFBRVMsVUFBVSxLQUFLLEVBQUVDLFVBQVUsS0FBSyxFQUFFQyxVQUFVLENBQUMsRUFBRyxHQUFHYjtRQUMzREgsTUFBTUcsZUFBZSxHQUFHLENBQUMsRUFBRVcsUUFBUSxDQUFDLEVBQUVDLFFBQVEsQ0FBQyxFQUFFQyxRQUFRLENBQUM7SUFDOUQ7QUFDSjtBQUUyQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvaHRtbC91dGlscy9idWlsZC1zdHlsZXMubWpzPzRhMTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnVpbGRUcmFuc2Zvcm0gfSBmcm9tICcuL2J1aWxkLXRyYW5zZm9ybS5tanMnO1xuaW1wb3J0IHsgaXNDU1NWYXJpYWJsZU5hbWUgfSBmcm9tICcuLi8uLi9kb20vdXRpbHMvaXMtY3NzLXZhcmlhYmxlLm1qcyc7XG5pbXBvcnQgeyB0cmFuc2Zvcm1Qcm9wcyB9IGZyb20gJy4vdHJhbnNmb3JtLm1qcyc7XG5pbXBvcnQgeyBnZXRWYWx1ZUFzVHlwZSB9IGZyb20gJy4uLy4uL2RvbS92YWx1ZS10eXBlcy9nZXQtYXMtdHlwZS5tanMnO1xuaW1wb3J0IHsgbnVtYmVyVmFsdWVUeXBlcyB9IGZyb20gJy4uLy4uL2RvbS92YWx1ZS10eXBlcy9udW1iZXIubWpzJztcblxuZnVuY3Rpb24gYnVpbGRIVE1MU3R5bGVzKHN0YXRlLCBsYXRlc3RWYWx1ZXMsIG9wdGlvbnMsIHRyYW5zZm9ybVRlbXBsYXRlKSB7XG4gICAgY29uc3QgeyBzdHlsZSwgdmFycywgdHJhbnNmb3JtLCB0cmFuc2Zvcm1PcmlnaW4gfSA9IHN0YXRlO1xuICAgIC8vIFRyYWNrIHdoZXRoZXIgd2UgZW5jb3VudGVyIGFueSB0cmFuc2Zvcm0gb3IgdHJhbnNmb3JtT3JpZ2luIHZhbHVlcy5cbiAgICBsZXQgaGFzVHJhbnNmb3JtID0gZmFsc2U7XG4gICAgbGV0IGhhc1RyYW5zZm9ybU9yaWdpbiA9IGZhbHNlO1xuICAgIC8vIERvZXMgdGhlIGNhbGN1bGF0ZWQgdHJhbnNmb3JtIGVzc2VudGlhbGx5IGVxdWFsIFwibm9uZVwiP1xuICAgIGxldCB0cmFuc2Zvcm1Jc05vbmUgPSB0cnVlO1xuICAgIC8qKlxuICAgICAqIExvb3Agb3ZlciBhbGwgb3VyIGxhdGVzdCBhbmltYXRlZCB2YWx1ZXMgYW5kIGRlY2lkZSB3aGV0aGVyIHRvIGhhbmRsZSB0aGVtXG4gICAgICogYXMgYSBzdHlsZSBvciBDU1MgdmFyaWFibGUuXG4gICAgICpcbiAgICAgKiBUcmFuc2Zvcm1zIGFuZCB0cmFuc2Zvcm0gb3JpZ2lucyBhcmUga2VwdCBzZXBlcmF0ZWx5IGZvciBmdXJ0aGVyIHByb2Nlc3NpbmcuXG4gICAgICovXG4gICAgZm9yIChjb25zdCBrZXkgaW4gbGF0ZXN0VmFsdWVzKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gbGF0ZXN0VmFsdWVzW2tleV07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0aGlzIGlzIGEgQ1NTIHZhcmlhYmxlIHdlIGRvbid0IGRvIGFueSBmdXJ0aGVyIHByb2Nlc3NpbmcuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoaXNDU1NWYXJpYWJsZU5hbWUoa2V5KSkge1xuICAgICAgICAgICAgdmFyc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDb252ZXJ0IHRoZSB2YWx1ZSB0byBpdHMgZGVmYXVsdCB2YWx1ZSB0eXBlLCBpZSAwIC0+IFwiMHB4XCJcbiAgICAgICAgY29uc3QgdmFsdWVUeXBlID0gbnVtYmVyVmFsdWVUeXBlc1trZXldO1xuICAgICAgICBjb25zdCB2YWx1ZUFzVHlwZSA9IGdldFZhbHVlQXNUeXBlKHZhbHVlLCB2YWx1ZVR5cGUpO1xuICAgICAgICBpZiAodHJhbnNmb3JtUHJvcHMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgYSB0cmFuc2Zvcm0sIGZsYWcgdG8gZW5hYmxlIGZ1cnRoZXIgdHJhbnNmb3JtIHByb2Nlc3NpbmdcbiAgICAgICAgICAgIGhhc1RyYW5zZm9ybSA9IHRydWU7XG4gICAgICAgICAgICB0cmFuc2Zvcm1ba2V5XSA9IHZhbHVlQXNUeXBlO1xuICAgICAgICAgICAgLy8gSWYgd2UgYWxyZWFkeSBrbm93IHdlIGhhdmUgYSBub24tZGVmYXVsdCB0cmFuc2Zvcm0sIGVhcmx5IHJldHVyblxuICAgICAgICAgICAgaWYgKCF0cmFuc2Zvcm1Jc05vbmUpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAvLyBPdGhlcndpc2UgY2hlY2sgdG8gc2VlIGlmIHRoaXMgaXMgYSBkZWZhdWx0IHRyYW5zZm9ybVxuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSAodmFsdWVUeXBlLmRlZmF1bHQgfHwgMCkpXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtSXNOb25lID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5LnN0YXJ0c1dpdGgoXCJvcmlnaW5cIikpIHtcbiAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgYSB0cmFuc2Zvcm0gb3JpZ2luLCBmbGFnIGFuZCBlbmFibGUgZnVydGhlciB0cmFuc2Zvcm0tb3JpZ2luIHByb2Nlc3NpbmdcbiAgICAgICAgICAgIGhhc1RyYW5zZm9ybU9yaWdpbiA9IHRydWU7XG4gICAgICAgICAgICB0cmFuc2Zvcm1PcmlnaW5ba2V5XSA9IHZhbHVlQXNUeXBlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3R5bGVba2V5XSA9IHZhbHVlQXNUeXBlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghbGF0ZXN0VmFsdWVzLnRyYW5zZm9ybSkge1xuICAgICAgICBpZiAoaGFzVHJhbnNmb3JtIHx8IHRyYW5zZm9ybVRlbXBsYXRlKSB7XG4gICAgICAgICAgICBzdHlsZS50cmFuc2Zvcm0gPSBidWlsZFRyYW5zZm9ybShzdGF0ZS50cmFuc2Zvcm0sIG9wdGlvbnMsIHRyYW5zZm9ybUlzTm9uZSwgdHJhbnNmb3JtVGVtcGxhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHN0eWxlLnRyYW5zZm9ybSkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB3ZSBoYXZlIHByZXZpb3VzbHkgY3JlYXRlZCBhIHRyYW5zZm9ybSBidXQgY3VycmVudGx5IGRvbid0IGhhdmUgYW55LFxuICAgICAgICAgICAgICogcmVzZXQgdHJhbnNmb3JtIHN0eWxlIHRvIG5vbmUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHN0eWxlLnRyYW5zZm9ybSA9IFwibm9uZVwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEJ1aWxkIGEgdHJhbnNmb3JtT3JpZ2luIHN0eWxlLiBVc2VzIHRoZSBzYW1lIGRlZmF1bHRzIGFzIHRoZSBicm93c2VyIGZvclxuICAgICAqIHVuZGVmaW5lZCBvcmlnaW5zLlxuICAgICAqL1xuICAgIGlmIChoYXNUcmFuc2Zvcm1PcmlnaW4pIHtcbiAgICAgICAgY29uc3QgeyBvcmlnaW5YID0gXCI1MCVcIiwgb3JpZ2luWSA9IFwiNTAlXCIsIG9yaWdpblogPSAwLCB9ID0gdHJhbnNmb3JtT3JpZ2luO1xuICAgICAgICBzdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBgJHtvcmlnaW5YfSAke29yaWdpbll9ICR7b3JpZ2luWn1gO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgYnVpbGRIVE1MU3R5bGVzIH07XG4iXSwibmFtZXMiOlsiYnVpbGRUcmFuc2Zvcm0iLCJpc0NTU1ZhcmlhYmxlTmFtZSIsInRyYW5zZm9ybVByb3BzIiwiZ2V0VmFsdWVBc1R5cGUiLCJudW1iZXJWYWx1ZVR5cGVzIiwiYnVpbGRIVE1MU3R5bGVzIiwic3RhdGUiLCJsYXRlc3RWYWx1ZXMiLCJvcHRpb25zIiwidHJhbnNmb3JtVGVtcGxhdGUiLCJzdHlsZSIsInZhcnMiLCJ0cmFuc2Zvcm0iLCJ0cmFuc2Zvcm1PcmlnaW4iLCJoYXNUcmFuc2Zvcm0iLCJoYXNUcmFuc2Zvcm1PcmlnaW4iLCJ0cmFuc2Zvcm1Jc05vbmUiLCJrZXkiLCJ2YWx1ZSIsInZhbHVlVHlwZSIsInZhbHVlQXNUeXBlIiwiaGFzIiwiZGVmYXVsdCIsInN0YXJ0c1dpdGgiLCJvcmlnaW5YIiwib3JpZ2luWSIsIm9yaWdpbloiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildTransform: () => (/* binding */ buildTransform)\n/* harmony export */ });\n/* harmony import */ var _transform_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transform.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/transform.mjs\");\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\"\n};\nconst numTransforms = _transform_mjs__WEBPACK_IMPORTED_MODULE_0__.transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */ function buildTransform(transform, { enableHardwareAcceleration = true, allowTransformNone = true }, transformIsDefault, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */ for(let i = 0; i < numTransforms; i++){\n        const key = _transform_mjs__WEBPACK_IMPORTED_MODULE_0__.transformPropOrder[i];\n        if (transform[key] !== undefined) {\n            const transformName = translateAlias[key] || key;\n            transformString += `${transformName}(${transform[key]}) `;\n        }\n    }\n    if (enableHardwareAcceleration && !transform.z) {\n        transformString += \"translateZ(0)\";\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    } else if (allowTransformNone && transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL3V0aWxzL2J1aWxkLXRyYW5zZm9ybS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBcUQ7QUFFckQsTUFBTUMsaUJBQWlCO0lBQ25CQyxHQUFHO0lBQ0hDLEdBQUc7SUFDSEMsR0FBRztJQUNIQyxzQkFBc0I7QUFDMUI7QUFDQSxNQUFNQyxnQkFBZ0JOLDhEQUFrQkEsQ0FBQ08sTUFBTTtBQUMvQzs7Ozs7Q0FLQyxHQUNELFNBQVNDLGVBQWVDLFNBQVMsRUFBRSxFQUFFQyw2QkFBNkIsSUFBSSxFQUFFQyxxQkFBcUIsSUFBSSxFQUFHLEVBQUVDLGtCQUFrQixFQUFFQyxpQkFBaUI7SUFDdkksa0RBQWtEO0lBQ2xELElBQUlDLGtCQUFrQjtJQUN0Qjs7O0tBR0MsR0FDRCxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSVQsZUFBZVMsSUFBSztRQUNwQyxNQUFNQyxNQUFNaEIsOERBQWtCLENBQUNlLEVBQUU7UUFDakMsSUFBSU4sU0FBUyxDQUFDTyxJQUFJLEtBQUtDLFdBQVc7WUFDOUIsTUFBTUMsZ0JBQWdCakIsY0FBYyxDQUFDZSxJQUFJLElBQUlBO1lBQzdDRixtQkFBbUIsQ0FBQyxFQUFFSSxjQUFjLENBQUMsRUFBRVQsU0FBUyxDQUFDTyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQzdEO0lBQ0o7SUFDQSxJQUFJTiw4QkFBOEIsQ0FBQ0QsVUFBVUwsQ0FBQyxFQUFFO1FBQzVDVSxtQkFBbUI7SUFDdkI7SUFDQUEsa0JBQWtCQSxnQkFBZ0JLLElBQUk7SUFDdEMsMEVBQTBFO0lBQzFFLHFEQUFxRDtJQUNyRCxJQUFJTixtQkFBbUI7UUFDbkJDLGtCQUFrQkQsa0JBQWtCSixXQUFXRyxxQkFBcUIsS0FBS0U7SUFDN0UsT0FDSyxJQUFJSCxzQkFBc0JDLG9CQUFvQjtRQUMvQ0Usa0JBQWtCO0lBQ3RCO0lBQ0EsT0FBT0E7QUFDWDtBQUUwQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvaHRtbC91dGlscy9idWlsZC10cmFuc2Zvcm0ubWpzP2ZjYzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdHJhbnNmb3JtUHJvcE9yZGVyIH0gZnJvbSAnLi90cmFuc2Zvcm0ubWpzJztcblxuY29uc3QgdHJhbnNsYXRlQWxpYXMgPSB7XG4gICAgeDogXCJ0cmFuc2xhdGVYXCIsXG4gICAgeTogXCJ0cmFuc2xhdGVZXCIsXG4gICAgejogXCJ0cmFuc2xhdGVaXCIsXG4gICAgdHJhbnNmb3JtUGVyc3BlY3RpdmU6IFwicGVyc3BlY3RpdmVcIixcbn07XG5jb25zdCBudW1UcmFuc2Zvcm1zID0gdHJhbnNmb3JtUHJvcE9yZGVyLmxlbmd0aDtcbi8qKlxuICogQnVpbGQgYSBDU1MgdHJhbnNmb3JtIHN0eWxlIGZyb20gaW5kaXZpZHVhbCB4L3kvc2NhbGUgZXRjIHByb3BlcnRpZXMuXG4gKlxuICogVGhpcyBvdXRwdXRzIHdpdGggYSBkZWZhdWx0IG9yZGVyIG9mIHRyYW5zZm9ybXMvc2NhbGVzL3JvdGF0aW9ucywgdGhpcyBjYW4gYmUgY3VzdG9taXNlZCBieVxuICogcHJvdmlkaW5nIGEgdHJhbnNmb3JtVGVtcGxhdGUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkVHJhbnNmb3JtKHRyYW5zZm9ybSwgeyBlbmFibGVIYXJkd2FyZUFjY2VsZXJhdGlvbiA9IHRydWUsIGFsbG93VHJhbnNmb3JtTm9uZSA9IHRydWUsIH0sIHRyYW5zZm9ybUlzRGVmYXVsdCwgdHJhbnNmb3JtVGVtcGxhdGUpIHtcbiAgICAvLyBUaGUgdHJhbnNmb3JtIHN0cmluZyB3ZSdyZSBnb2luZyB0byBidWlsZCBpbnRvLlxuICAgIGxldCB0cmFuc2Zvcm1TdHJpbmcgPSBcIlwiO1xuICAgIC8qKlxuICAgICAqIExvb3Agb3ZlciBhbGwgcG9zc2libGUgdHJhbnNmb3JtcyBpbiBvcmRlciwgYWRkaW5nIHRoZSBvbmVzIHRoYXRcbiAgICAgKiBhcmUgcHJlc2VudCB0byB0aGUgdHJhbnNmb3JtIHN0cmluZy5cbiAgICAgKi9cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVRyYW5zZm9ybXM7IGkrKykge1xuICAgICAgICBjb25zdCBrZXkgPSB0cmFuc2Zvcm1Qcm9wT3JkZXJbaV07XG4gICAgICAgIGlmICh0cmFuc2Zvcm1ba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm1OYW1lID0gdHJhbnNsYXRlQWxpYXNba2V5XSB8fCBrZXk7XG4gICAgICAgICAgICB0cmFuc2Zvcm1TdHJpbmcgKz0gYCR7dHJhbnNmb3JtTmFtZX0oJHt0cmFuc2Zvcm1ba2V5XX0pIGA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uICYmICF0cmFuc2Zvcm0ueikge1xuICAgICAgICB0cmFuc2Zvcm1TdHJpbmcgKz0gXCJ0cmFuc2xhdGVaKDApXCI7XG4gICAgfVxuICAgIHRyYW5zZm9ybVN0cmluZyA9IHRyYW5zZm9ybVN0cmluZy50cmltKCk7XG4gICAgLy8gSWYgd2UgaGF2ZSBhIGN1c3RvbSBgdHJhbnNmb3JtYCB0ZW1wbGF0ZSwgcGFzcyBvdXIgdHJhbnNmb3JtIHZhbHVlcyBhbmRcbiAgICAvLyBnZW5lcmF0ZWQgdHJhbnNmb3JtU3RyaW5nIHRvIHRoYXQgYmVmb3JlIHJldHVybmluZ1xuICAgIGlmICh0cmFuc2Zvcm1UZW1wbGF0ZSkge1xuICAgICAgICB0cmFuc2Zvcm1TdHJpbmcgPSB0cmFuc2Zvcm1UZW1wbGF0ZSh0cmFuc2Zvcm0sIHRyYW5zZm9ybUlzRGVmYXVsdCA/IFwiXCIgOiB0cmFuc2Zvcm1TdHJpbmcpO1xuICAgIH1cbiAgICBlbHNlIGlmIChhbGxvd1RyYW5zZm9ybU5vbmUgJiYgdHJhbnNmb3JtSXNEZWZhdWx0KSB7XG4gICAgICAgIHRyYW5zZm9ybVN0cmluZyA9IFwibm9uZVwiO1xuICAgIH1cbiAgICByZXR1cm4gdHJhbnNmb3JtU3RyaW5nO1xufVxuXG5leHBvcnQgeyBidWlsZFRyYW5zZm9ybSB9O1xuIl0sIm5hbWVzIjpbInRyYW5zZm9ybVByb3BPcmRlciIsInRyYW5zbGF0ZUFsaWFzIiwieCIsInkiLCJ6IiwidHJhbnNmb3JtUGVyc3BlY3RpdmUiLCJudW1UcmFuc2Zvcm1zIiwibGVuZ3RoIiwiYnVpbGRUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm0iLCJlbmFibGVIYXJkd2FyZUFjY2VsZXJhdGlvbiIsImFsbG93VHJhbnNmb3JtTm9uZSIsInRyYW5zZm9ybUlzRGVmYXVsdCIsInRyYW5zZm9ybVRlbXBsYXRlIiwidHJhbnNmb3JtU3RyaW5nIiwiaSIsImtleSIsInVuZGVmaW5lZCIsInRyYW5zZm9ybU5hbWUiLCJ0cmltIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs":
/*!**************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHtmlRenderState: () => (/* binding */ createHtmlRenderState)\n/* harmony export */ });\nconst createHtmlRenderState = ()=>({\n        style: {},\n        transform: {},\n        transformOrigin: {},\n        vars: {}\n    });\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL3V0aWxzL2NyZWF0ZS1yZW5kZXItc3RhdGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSx3QkFBd0IsSUFBTztRQUNqQ0MsT0FBTyxDQUFDO1FBQ1JDLFdBQVcsQ0FBQztRQUNaQyxpQkFBaUIsQ0FBQztRQUNsQkMsTUFBTSxDQUFDO0lBQ1g7QUFFaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2h0bWwvdXRpbHMvY3JlYXRlLXJlbmRlci1zdGF0ZS5tanM/MmEyMCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjcmVhdGVIdG1sUmVuZGVyU3RhdGUgPSAoKSA9PiAoe1xuICAgIHN0eWxlOiB7fSxcbiAgICB0cmFuc2Zvcm06IHt9LFxuICAgIHRyYW5zZm9ybU9yaWdpbjoge30sXG4gICAgdmFyczoge30sXG59KTtcblxuZXhwb3J0IHsgY3JlYXRlSHRtbFJlbmRlclN0YXRlIH07XG4iXSwibmFtZXMiOlsiY3JlYXRlSHRtbFJlbmRlclN0YXRlIiwic3R5bGUiLCJ0cmFuc2Zvcm0iLCJ0cmFuc2Zvcm1PcmlnaW4iLCJ2YXJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/render.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/html/utils/render.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   renderHTML: () => (/* binding */ renderHTML)\n/* harmony export */ });\nfunction renderHTML(element, { style, vars }, styleProp, projection) {\n    Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));\n    // Loop over any CSS variables and assign those.\n    for(const key in vars){\n        element.style.setProperty(key, vars[key]);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL3V0aWxzL3JlbmRlci5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBLFdBQVdDLE9BQU8sRUFBRSxFQUFFQyxLQUFLLEVBQUVDLElBQUksRUFBRSxFQUFFQyxTQUFTLEVBQUVDLFVBQVU7SUFDL0RDLE9BQU9DLE1BQU0sQ0FBQ04sUUFBUUMsS0FBSyxFQUFFQSxPQUFPRyxjQUFjQSxXQUFXRyxtQkFBbUIsQ0FBQ0o7SUFDakYsZ0RBQWdEO0lBQ2hELElBQUssTUFBTUssT0FBT04sS0FBTTtRQUNwQkYsUUFBUUMsS0FBSyxDQUFDUSxXQUFXLENBQUNELEtBQUtOLElBQUksQ0FBQ00sSUFBSTtJQUM1QztBQUNKO0FBRXNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL3V0aWxzL3JlbmRlci5tanM/MzQ0OCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiByZW5kZXJIVE1MKGVsZW1lbnQsIHsgc3R5bGUsIHZhcnMgfSwgc3R5bGVQcm9wLCBwcm9qZWN0aW9uKSB7XG4gICAgT2JqZWN0LmFzc2lnbihlbGVtZW50LnN0eWxlLCBzdHlsZSwgcHJvamVjdGlvbiAmJiBwcm9qZWN0aW9uLmdldFByb2plY3Rpb25TdHlsZXMoc3R5bGVQcm9wKSk7XG4gICAgLy8gTG9vcCBvdmVyIGFueSBDU1MgdmFyaWFibGVzIGFuZCBhc3NpZ24gdGhvc2UuXG4gICAgZm9yIChjb25zdCBrZXkgaW4gdmFycykge1xuICAgICAgICBlbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KGtleSwgdmFyc1trZXldKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IHJlbmRlckhUTUwgfTtcbiJdLCJuYW1lcyI6WyJyZW5kZXJIVE1MIiwiZWxlbWVudCIsInN0eWxlIiwidmFycyIsInN0eWxlUHJvcCIsInByb2plY3Rpb24iLCJPYmplY3QiLCJhc3NpZ24iLCJnZXRQcm9qZWN0aW9uU3R5bGVzIiwia2V5Iiwic2V0UHJvcGVydHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/render.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   scrapeMotionValuesFromProps: () => (/* binding */ scrapeMotionValuesFromProps)\n/* harmony export */ });\n/* harmony import */ var _motion_utils_is_forced_motion_value_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../motion/utils/is-forced-motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs\");\n/* harmony import */ var _value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../value/utils/is-motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs\");\n\n\nfunction scrapeMotionValuesFromProps(props, prevProps) {\n    const { style } = props;\n    const newValues = {};\n    for(const key in style){\n        if ((0,_value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_0__.isMotionValue)(style[key]) || prevProps.style && (0,_value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_0__.isMotionValue)(prevProps.style[key]) || (0,_motion_utils_is_forced_motion_value_mjs__WEBPACK_IMPORTED_MODULE_1__.isForcedMotionValue)(key, props)) {\n            newValues[key] = style[key];\n        }\n    }\n    return newValues;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL3V0aWxzL3NjcmFwZS1tb3Rpb24tdmFsdWVzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBdUY7QUFDZDtBQUV6RSxTQUFTRSw0QkFBNEJDLEtBQUssRUFBRUMsU0FBUztJQUNqRCxNQUFNLEVBQUVDLEtBQUssRUFBRSxHQUFHRjtJQUNsQixNQUFNRyxZQUFZLENBQUM7SUFDbkIsSUFBSyxNQUFNQyxPQUFPRixNQUFPO1FBQ3JCLElBQUlKLCtFQUFhQSxDQUFDSSxLQUFLLENBQUNFLElBQUksS0FDdkJILFVBQVVDLEtBQUssSUFBSUosK0VBQWFBLENBQUNHLFVBQVVDLEtBQUssQ0FBQ0UsSUFBSSxLQUN0RFAsNkZBQW1CQSxDQUFDTyxLQUFLSixRQUFRO1lBQ2pDRyxTQUFTLENBQUNDLElBQUksR0FBR0YsS0FBSyxDQUFDRSxJQUFJO1FBQy9CO0lBQ0o7SUFDQSxPQUFPRDtBQUNYO0FBRXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL3V0aWxzL3NjcmFwZS1tb3Rpb24tdmFsdWVzLm1qcz84ZGYwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzRm9yY2VkTW90aW9uVmFsdWUgfSBmcm9tICcuLi8uLi8uLi9tb3Rpb24vdXRpbHMvaXMtZm9yY2VkLW1vdGlvbi12YWx1ZS5tanMnO1xuaW1wb3J0IHsgaXNNb3Rpb25WYWx1ZSB9IGZyb20gJy4uLy4uLy4uL3ZhbHVlL3V0aWxzL2lzLW1vdGlvbi12YWx1ZS5tanMnO1xuXG5mdW5jdGlvbiBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMocHJvcHMsIHByZXZQcm9wcykge1xuICAgIGNvbnN0IHsgc3R5bGUgfSA9IHByb3BzO1xuICAgIGNvbnN0IG5ld1ZhbHVlcyA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHN0eWxlKSB7XG4gICAgICAgIGlmIChpc01vdGlvblZhbHVlKHN0eWxlW2tleV0pIHx8XG4gICAgICAgICAgICAocHJldlByb3BzLnN0eWxlICYmIGlzTW90aW9uVmFsdWUocHJldlByb3BzLnN0eWxlW2tleV0pKSB8fFxuICAgICAgICAgICAgaXNGb3JjZWRNb3Rpb25WYWx1ZShrZXksIHByb3BzKSkge1xuICAgICAgICAgICAgbmV3VmFsdWVzW2tleV0gPSBzdHlsZVtrZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXdWYWx1ZXM7XG59XG5cbmV4cG9ydCB7IHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyB9O1xuIl0sIm5hbWVzIjpbImlzRm9yY2VkTW90aW9uVmFsdWUiLCJpc01vdGlvblZhbHVlIiwic2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzIiwicHJvcHMiLCJwcmV2UHJvcHMiLCJzdHlsZSIsIm5ld1ZhbHVlcyIsImtleSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/transform.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/html/utils/transform.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   transformPropOrder: () => (/* binding */ transformPropOrder),\n/* harmony export */   transformProps: () => (/* binding */ transformProps)\n/* harmony export */ });\n/**\n * Generate a list of every possible transform key.\n */ const transformPropOrder = [\n    \"transformPerspective\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"translateX\",\n    \"translateY\",\n    \"translateZ\",\n    \"scale\",\n    \"scaleX\",\n    \"scaleY\",\n    \"rotate\",\n    \"rotateX\",\n    \"rotateY\",\n    \"rotateZ\",\n    \"skew\",\n    \"skewX\",\n    \"skewY\"\n];\n/**\n * A quick lookup for transform props.\n */ const transformProps = new Set(transformPropOrder);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL3V0aWxzL3RyYW5zZm9ybS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Q0FFQyxHQUNELE1BQU1BLHFCQUFxQjtJQUN2QjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0g7QUFDRDs7Q0FFQyxHQUNELE1BQU1DLGlCQUFpQixJQUFJQyxJQUFJRjtBQUVlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL3V0aWxzL3RyYW5zZm9ybS5tanM/MmMwMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEdlbmVyYXRlIGEgbGlzdCBvZiBldmVyeSBwb3NzaWJsZSB0cmFuc2Zvcm0ga2V5LlxuICovXG5jb25zdCB0cmFuc2Zvcm1Qcm9wT3JkZXIgPSBbXG4gICAgXCJ0cmFuc2Zvcm1QZXJzcGVjdGl2ZVwiLFxuICAgIFwieFwiLFxuICAgIFwieVwiLFxuICAgIFwielwiLFxuICAgIFwidHJhbnNsYXRlWFwiLFxuICAgIFwidHJhbnNsYXRlWVwiLFxuICAgIFwidHJhbnNsYXRlWlwiLFxuICAgIFwic2NhbGVcIixcbiAgICBcInNjYWxlWFwiLFxuICAgIFwic2NhbGVZXCIsXG4gICAgXCJyb3RhdGVcIixcbiAgICBcInJvdGF0ZVhcIixcbiAgICBcInJvdGF0ZVlcIixcbiAgICBcInJvdGF0ZVpcIixcbiAgICBcInNrZXdcIixcbiAgICBcInNrZXdYXCIsXG4gICAgXCJza2V3WVwiLFxuXTtcbi8qKlxuICogQSBxdWljayBsb29rdXAgZm9yIHRyYW5zZm9ybSBwcm9wcy5cbiAqL1xuY29uc3QgdHJhbnNmb3JtUHJvcHMgPSBuZXcgU2V0KHRyYW5zZm9ybVByb3BPcmRlcik7XG5cbmV4cG9ydCB7IHRyYW5zZm9ybVByb3BPcmRlciwgdHJhbnNmb3JtUHJvcHMgfTtcbiJdLCJuYW1lcyI6WyJ0cmFuc2Zvcm1Qcm9wT3JkZXIiLCJ0cmFuc2Zvcm1Qcm9wcyIsIlNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/transform.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/store.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/store.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   visualElementStore: () => (/* binding */ visualElementStore)\n/* harmony export */ });\nconst visualElementStore = new WeakMap();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdG9yZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLHFCQUFxQixJQUFJQztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdG9yZS5tanM/YWRlOSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB2aXN1YWxFbGVtZW50U3RvcmUgPSBuZXcgV2Vha01hcCgpO1xuXG5leHBvcnQgeyB2aXN1YWxFbGVtZW50U3RvcmUgfTtcbiJdLCJuYW1lcyI6WyJ2aXN1YWxFbGVtZW50U3RvcmUiLCJXZWFrTWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/store.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SVGVisualElement: () => (/* binding */ SVGVisualElement)\n/* harmony export */ });\n/* harmony import */ var _utils_scrape_motion_values_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/scrape-motion-values.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs\");\n/* harmony import */ var _dom_DOMVisualElement_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom/DOMVisualElement.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs\");\n/* harmony import */ var _utils_build_attrs_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/build-attrs.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs\");\n/* harmony import */ var _dom_utils_camel_to_dash_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dom/utils/camel-to-dash.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs\");\n/* harmony import */ var _utils_camel_case_attrs_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/camel-case-attrs.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs\");\n/* harmony import */ var _html_utils_transform_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../html/utils/transform.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/transform.mjs\");\n/* harmony import */ var _utils_render_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/render.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/render.mjs\");\n/* harmony import */ var _dom_value_types_defaults_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dom/value-types/defaults.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs\");\n/* harmony import */ var _projection_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../projection/geometry/models.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/models.mjs\");\n/* harmony import */ var _utils_is_svg_tag_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/is-svg-tag.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs\");\n\n\n\n\n\n\n\n\n\n\nclass SVGVisualElement extends _dom_DOMVisualElement_mjs__WEBPACK_IMPORTED_MODULE_0__.DOMVisualElement {\n    constructor(){\n        super(...arguments);\n        this.isSVGTag = false;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props[key];\n    }\n    readValueFromInstance(instance, key) {\n        if (_html_utils_transform_mjs__WEBPACK_IMPORTED_MODULE_1__.transformProps.has(key)) {\n            const defaultType = (0,_dom_value_types_defaults_mjs__WEBPACK_IMPORTED_MODULE_2__.getDefaultValueType)(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        key = !_utils_camel_case_attrs_mjs__WEBPACK_IMPORTED_MODULE_3__.camelCaseAttributes.has(key) ? (0,_dom_utils_camel_to_dash_mjs__WEBPACK_IMPORTED_MODULE_4__.camelToDash)(key) : key;\n        return instance.getAttribute(key);\n    }\n    measureInstanceViewportBox() {\n        return (0,_projection_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_5__.createBox)();\n    }\n    scrapeMotionValuesFromProps(props, prevProps) {\n        return (0,_utils_scrape_motion_values_mjs__WEBPACK_IMPORTED_MODULE_6__.scrapeMotionValuesFromProps)(props, prevProps);\n    }\n    build(renderState, latestValues, options, props) {\n        (0,_utils_build_attrs_mjs__WEBPACK_IMPORTED_MODULE_7__.buildSVGAttrs)(renderState, latestValues, options, this.isSVGTag, props.transformTemplate);\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        (0,_utils_render_mjs__WEBPACK_IMPORTED_MODULE_8__.renderSVG)(instance, renderState, styleProp, projection);\n    }\n    mount(instance) {\n        this.isSVGTag = (0,_utils_is_svg_tag_mjs__WEBPACK_IMPORTED_MODULE_9__.isSVGTag)(instance.tagName);\n        super.mount(instance);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvU1ZHVmlzdWFsRWxlbWVudC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBK0U7QUFDaEI7QUFDUDtBQUNLO0FBQ007QUFDTjtBQUNkO0FBQ3VCO0FBQ0w7QUFDZjtBQUVsRCxNQUFNVSx5QkFBeUJULHVFQUFnQkE7SUFDM0NVLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDSCxRQUFRLEdBQUc7SUFDcEI7SUFDQUksdUJBQXVCQyxLQUFLLEVBQUVDLEdBQUcsRUFBRTtRQUMvQixPQUFPRCxLQUFLLENBQUNDLElBQUk7SUFDckI7SUFDQUMsc0JBQXNCQyxRQUFRLEVBQUVGLEdBQUcsRUFBRTtRQUNqQyxJQUFJVixxRUFBY0EsQ0FBQ2EsR0FBRyxDQUFDSCxNQUFNO1lBQ3pCLE1BQU1JLGNBQWNaLGtGQUFtQkEsQ0FBQ1E7WUFDeEMsT0FBT0ksY0FBY0EsWUFBWUMsT0FBTyxJQUFJLElBQUk7UUFDcEQ7UUFDQUwsTUFBTSxDQUFDWCw0RUFBbUJBLENBQUNjLEdBQUcsQ0FBQ0gsT0FBT1oseUVBQVdBLENBQUNZLE9BQU9BO1FBQ3pELE9BQU9FLFNBQVNJLFlBQVksQ0FBQ047SUFDakM7SUFDQU8sNkJBQTZCO1FBQ3pCLE9BQU9kLDBFQUFTQTtJQUNwQjtJQUNBUiw0QkFBNEJjLEtBQUssRUFBRVMsU0FBUyxFQUFFO1FBQzFDLE9BQU92Qiw0RkFBMkJBLENBQUNjLE9BQU9TO0lBQzlDO0lBQ0FDLE1BQU1DLFdBQVcsRUFBRUMsWUFBWSxFQUFFQyxPQUFPLEVBQUViLEtBQUssRUFBRTtRQUM3Q1oscUVBQWFBLENBQUN1QixhQUFhQyxjQUFjQyxTQUFTLElBQUksQ0FBQ2xCLFFBQVEsRUFBRUssTUFBTWMsaUJBQWlCO0lBQzVGO0lBQ0FDLGVBQWVaLFFBQVEsRUFBRVEsV0FBVyxFQUFFSyxTQUFTLEVBQUVDLFVBQVUsRUFBRTtRQUN6RHpCLDREQUFTQSxDQUFDVyxVQUFVUSxhQUFhSyxXQUFXQztJQUNoRDtJQUNBQyxNQUFNZixRQUFRLEVBQUU7UUFDWixJQUFJLENBQUNSLFFBQVEsR0FBR0EsK0RBQVFBLENBQUNRLFNBQVNnQixPQUFPO1FBQ3pDLEtBQUssQ0FBQ0QsTUFBTWY7SUFDaEI7QUFDSjtBQUU0QiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvc3ZnL1NWR1Zpc3VhbEVsZW1lbnQubWpzPzU1MDgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzIH0gZnJvbSAnLi91dGlscy9zY3JhcGUtbW90aW9uLXZhbHVlcy5tanMnO1xuaW1wb3J0IHsgRE9NVmlzdWFsRWxlbWVudCB9IGZyb20gJy4uL2RvbS9ET01WaXN1YWxFbGVtZW50Lm1qcyc7XG5pbXBvcnQgeyBidWlsZFNWR0F0dHJzIH0gZnJvbSAnLi91dGlscy9idWlsZC1hdHRycy5tanMnO1xuaW1wb3J0IHsgY2FtZWxUb0Rhc2ggfSBmcm9tICcuLi9kb20vdXRpbHMvY2FtZWwtdG8tZGFzaC5tanMnO1xuaW1wb3J0IHsgY2FtZWxDYXNlQXR0cmlidXRlcyB9IGZyb20gJy4vdXRpbHMvY2FtZWwtY2FzZS1hdHRycy5tanMnO1xuaW1wb3J0IHsgdHJhbnNmb3JtUHJvcHMgfSBmcm9tICcuLi9odG1sL3V0aWxzL3RyYW5zZm9ybS5tanMnO1xuaW1wb3J0IHsgcmVuZGVyU1ZHIH0gZnJvbSAnLi91dGlscy9yZW5kZXIubWpzJztcbmltcG9ydCB7IGdldERlZmF1bHRWYWx1ZVR5cGUgfSBmcm9tICcuLi9kb20vdmFsdWUtdHlwZXMvZGVmYXVsdHMubWpzJztcbmltcG9ydCB7IGNyZWF0ZUJveCB9IGZyb20gJy4uLy4uL3Byb2plY3Rpb24vZ2VvbWV0cnkvbW9kZWxzLm1qcyc7XG5pbXBvcnQgeyBpc1NWR1RhZyB9IGZyb20gJy4vdXRpbHMvaXMtc3ZnLXRhZy5tanMnO1xuXG5jbGFzcyBTVkdWaXN1YWxFbGVtZW50IGV4dGVuZHMgRE9NVmlzdWFsRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuaXNTVkdUYWcgPSBmYWxzZTtcbiAgICB9XG4gICAgZ2V0QmFzZVRhcmdldEZyb21Qcm9wcyhwcm9wcywga2V5KSB7XG4gICAgICAgIHJldHVybiBwcm9wc1trZXldO1xuICAgIH1cbiAgICByZWFkVmFsdWVGcm9tSW5zdGFuY2UoaW5zdGFuY2UsIGtleSkge1xuICAgICAgICBpZiAodHJhbnNmb3JtUHJvcHMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRUeXBlID0gZ2V0RGVmYXVsdFZhbHVlVHlwZShrZXkpO1xuICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRUeXBlID8gZGVmYXVsdFR5cGUuZGVmYXVsdCB8fCAwIDogMDtcbiAgICAgICAgfVxuICAgICAgICBrZXkgPSAhY2FtZWxDYXNlQXR0cmlidXRlcy5oYXMoa2V5KSA/IGNhbWVsVG9EYXNoKGtleSkgOiBrZXk7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZS5nZXRBdHRyaWJ1dGUoa2V5KTtcbiAgICB9XG4gICAgbWVhc3VyZUluc3RhbmNlVmlld3BvcnRCb3goKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVCb3goKTtcbiAgICB9XG4gICAgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzKHByb3BzLCBwcmV2UHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyhwcm9wcywgcHJldlByb3BzKTtcbiAgICB9XG4gICAgYnVpbGQocmVuZGVyU3RhdGUsIGxhdGVzdFZhbHVlcywgb3B0aW9ucywgcHJvcHMpIHtcbiAgICAgICAgYnVpbGRTVkdBdHRycyhyZW5kZXJTdGF0ZSwgbGF0ZXN0VmFsdWVzLCBvcHRpb25zLCB0aGlzLmlzU1ZHVGFnLCBwcm9wcy50cmFuc2Zvcm1UZW1wbGF0ZSk7XG4gICAgfVxuICAgIHJlbmRlckluc3RhbmNlKGluc3RhbmNlLCByZW5kZXJTdGF0ZSwgc3R5bGVQcm9wLCBwcm9qZWN0aW9uKSB7XG4gICAgICAgIHJlbmRlclNWRyhpbnN0YW5jZSwgcmVuZGVyU3RhdGUsIHN0eWxlUHJvcCwgcHJvamVjdGlvbik7XG4gICAgfVxuICAgIG1vdW50KGluc3RhbmNlKSB7XG4gICAgICAgIHRoaXMuaXNTVkdUYWcgPSBpc1NWR1RhZyhpbnN0YW5jZS50YWdOYW1lKTtcbiAgICAgICAgc3VwZXIubW91bnQoaW5zdGFuY2UpO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgU1ZHVmlzdWFsRWxlbWVudCB9O1xuIl0sIm5hbWVzIjpbInNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyIsIkRPTVZpc3VhbEVsZW1lbnQiLCJidWlsZFNWR0F0dHJzIiwiY2FtZWxUb0Rhc2giLCJjYW1lbENhc2VBdHRyaWJ1dGVzIiwidHJhbnNmb3JtUHJvcHMiLCJyZW5kZXJTVkciLCJnZXREZWZhdWx0VmFsdWVUeXBlIiwiY3JlYXRlQm94IiwiaXNTVkdUYWciLCJTVkdWaXN1YWxFbGVtZW50IiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJnZXRCYXNlVGFyZ2V0RnJvbVByb3BzIiwicHJvcHMiLCJrZXkiLCJyZWFkVmFsdWVGcm9tSW5zdGFuY2UiLCJpbnN0YW5jZSIsImhhcyIsImRlZmF1bHRUeXBlIiwiZGVmYXVsdCIsImdldEF0dHJpYnV0ZSIsIm1lYXN1cmVJbnN0YW5jZVZpZXdwb3J0Qm94IiwicHJldlByb3BzIiwiYnVpbGQiLCJyZW5kZXJTdGF0ZSIsImxhdGVzdFZhbHVlcyIsIm9wdGlvbnMiLCJ0cmFuc2Zvcm1UZW1wbGF0ZSIsInJlbmRlckluc3RhbmNlIiwic3R5bGVQcm9wIiwicHJvamVjdGlvbiIsIm1vdW50IiwidGFnTmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/svg/config-motion.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/svg/config-motion.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   svgMotionConfig: () => (/* binding */ svgMotionConfig)\n/* harmony export */ });\n/* harmony import */ var _utils_render_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/render.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/render.mjs\");\n/* harmony import */ var _utils_scrape_motion_values_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/scrape-motion-values.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs\");\n/* harmony import */ var _motion_utils_use_visual_state_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../motion/utils/use-visual-state.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs\");\n/* harmony import */ var _utils_create_render_state_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/create-render-state.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs\");\n/* harmony import */ var _utils_build_attrs_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/build-attrs.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs\");\n/* harmony import */ var _utils_is_svg_tag_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/is-svg-tag.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs\");\n/* harmony import */ var _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../frameloop/frame.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/frameloop/frame.mjs\");\n\n\n\n\n\n\n\nconst svgMotionConfig = {\n    useVisualState: (0,_motion_utils_use_visual_state_mjs__WEBPACK_IMPORTED_MODULE_0__.makeUseVisualState)({\n        scrapeMotionValuesFromProps: _utils_scrape_motion_values_mjs__WEBPACK_IMPORTED_MODULE_1__.scrapeMotionValuesFromProps,\n        createRenderState: _utils_create_render_state_mjs__WEBPACK_IMPORTED_MODULE_2__.createSvgRenderState,\n        onMount: (props, instance, { renderState, latestValues })=>{\n            _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__.frame.read(()=>{\n                try {\n                    renderState.dimensions = typeof instance.getBBox === \"function\" ? instance.getBBox() : instance.getBoundingClientRect();\n                } catch (e) {\n                    // Most likely trying to measure an unrendered element under Firefox\n                    renderState.dimensions = {\n                        x: 0,\n                        y: 0,\n                        width: 0,\n                        height: 0\n                    };\n                }\n            });\n            _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_3__.frame.render(()=>{\n                (0,_utils_build_attrs_mjs__WEBPACK_IMPORTED_MODULE_4__.buildSVGAttrs)(renderState, latestValues, {\n                    enableHardwareAcceleration: false\n                }, (0,_utils_is_svg_tag_mjs__WEBPACK_IMPORTED_MODULE_5__.isSVGTag)(instance.tagName), props.transformTemplate);\n                (0,_utils_render_mjs__WEBPACK_IMPORTED_MODULE_6__.renderSVG)(instance, renderState);\n            });\n        }\n    })\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvY29uZmlnLW1vdGlvbi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBK0M7QUFDZ0M7QUFDRjtBQUNOO0FBQ2Y7QUFDTjtBQUNBO0FBRWxELE1BQU1PLGtCQUFrQjtJQUNwQkMsZ0JBQWdCTixzRkFBa0JBLENBQUM7UUFDL0JELDZCQUE2QkEsd0ZBQTJCQTtRQUN4RFEsbUJBQW1CTixnRkFBb0JBO1FBQ3ZDTyxTQUFTLENBQUNDLE9BQU9DLFVBQVUsRUFBRUMsV0FBVyxFQUFFQyxZQUFZLEVBQUU7WUFDcERSLHVEQUFLQSxDQUFDUyxJQUFJLENBQUM7Z0JBQ1AsSUFBSTtvQkFDQUYsWUFBWUcsVUFBVSxHQUNsQixPQUFPSixTQUFTSyxPQUFPLEtBQ25CLGFBQ0VMLFNBQVNLLE9BQU8sS0FDaEJMLFNBQVNNLHFCQUFxQjtnQkFDNUMsRUFDQSxPQUFPQyxHQUFHO29CQUNOLG9FQUFvRTtvQkFDcEVOLFlBQVlHLFVBQVUsR0FBRzt3QkFDckJJLEdBQUc7d0JBQ0hDLEdBQUc7d0JBQ0hDLE9BQU87d0JBQ1BDLFFBQVE7b0JBQ1o7Z0JBQ0o7WUFDSjtZQUNBakIsdURBQUtBLENBQUNrQixNQUFNLENBQUM7Z0JBQ1RwQixxRUFBYUEsQ0FBQ1MsYUFBYUMsY0FBYztvQkFBRVcsNEJBQTRCO2dCQUFNLEdBQUdwQiwrREFBUUEsQ0FBQ08sU0FBU2MsT0FBTyxHQUFHZixNQUFNZ0IsaUJBQWlCO2dCQUNuSTNCLDREQUFTQSxDQUFDWSxVQUFVQztZQUN4QjtRQUNKO0lBQ0o7QUFDSjtBQUUyQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvc3ZnL2NvbmZpZy1tb3Rpb24ubWpzPzNjMjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVuZGVyU1ZHIH0gZnJvbSAnLi91dGlscy9yZW5kZXIubWpzJztcbmltcG9ydCB7IHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyB9IGZyb20gJy4vdXRpbHMvc2NyYXBlLW1vdGlvbi12YWx1ZXMubWpzJztcbmltcG9ydCB7IG1ha2VVc2VWaXN1YWxTdGF0ZSB9IGZyb20gJy4uLy4uL21vdGlvbi91dGlscy91c2UtdmlzdWFsLXN0YXRlLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVTdmdSZW5kZXJTdGF0ZSB9IGZyb20gJy4vdXRpbHMvY3JlYXRlLXJlbmRlci1zdGF0ZS5tanMnO1xuaW1wb3J0IHsgYnVpbGRTVkdBdHRycyB9IGZyb20gJy4vdXRpbHMvYnVpbGQtYXR0cnMubWpzJztcbmltcG9ydCB7IGlzU1ZHVGFnIH0gZnJvbSAnLi91dGlscy9pcy1zdmctdGFnLm1qcyc7XG5pbXBvcnQgeyBmcmFtZSB9IGZyb20gJy4uLy4uL2ZyYW1lbG9vcC9mcmFtZS5tanMnO1xuXG5jb25zdCBzdmdNb3Rpb25Db25maWcgPSB7XG4gICAgdXNlVmlzdWFsU3RhdGU6IG1ha2VVc2VWaXN1YWxTdGF0ZSh7XG4gICAgICAgIHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wczogc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzLFxuICAgICAgICBjcmVhdGVSZW5kZXJTdGF0ZTogY3JlYXRlU3ZnUmVuZGVyU3RhdGUsXG4gICAgICAgIG9uTW91bnQ6IChwcm9wcywgaW5zdGFuY2UsIHsgcmVuZGVyU3RhdGUsIGxhdGVzdFZhbHVlcyB9KSA9PiB7XG4gICAgICAgICAgICBmcmFtZS5yZWFkKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZW5kZXJTdGF0ZS5kaW1lbnNpb25zID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBpbnN0YW5jZS5nZXRCQm94ID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gaW5zdGFuY2UuZ2V0QkJveCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBpbnN0YW5jZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTW9zdCBsaWtlbHkgdHJ5aW5nIHRvIG1lYXN1cmUgYW4gdW5yZW5kZXJlZCBlbGVtZW50IHVuZGVyIEZpcmVmb3hcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyU3RhdGUuZGltZW5zaW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBmcmFtZS5yZW5kZXIoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGJ1aWxkU1ZHQXR0cnMocmVuZGVyU3RhdGUsIGxhdGVzdFZhbHVlcywgeyBlbmFibGVIYXJkd2FyZUFjY2VsZXJhdGlvbjogZmFsc2UgfSwgaXNTVkdUYWcoaW5zdGFuY2UudGFnTmFtZSksIHByb3BzLnRyYW5zZm9ybVRlbXBsYXRlKTtcbiAgICAgICAgICAgICAgICByZW5kZXJTVkcoaW5zdGFuY2UsIHJlbmRlclN0YXRlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgIH0pLFxufTtcblxuZXhwb3J0IHsgc3ZnTW90aW9uQ29uZmlnIH07XG4iXSwibmFtZXMiOlsicmVuZGVyU1ZHIiwic2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzIiwibWFrZVVzZVZpc3VhbFN0YXRlIiwiY3JlYXRlU3ZnUmVuZGVyU3RhdGUiLCJidWlsZFNWR0F0dHJzIiwiaXNTVkdUYWciLCJmcmFtZSIsInN2Z01vdGlvbkNvbmZpZyIsInVzZVZpc3VhbFN0YXRlIiwiY3JlYXRlUmVuZGVyU3RhdGUiLCJvbk1vdW50IiwicHJvcHMiLCJpbnN0YW5jZSIsInJlbmRlclN0YXRlIiwibGF0ZXN0VmFsdWVzIiwicmVhZCIsImRpbWVuc2lvbnMiLCJnZXRCQm94IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZSIsIngiLCJ5Iiwid2lkdGgiLCJoZWlnaHQiLCJyZW5kZXIiLCJlbmFibGVIYXJkd2FyZUFjY2VsZXJhdGlvbiIsInRhZ05hbWUiLCJ0cmFuc2Zvcm1UZW1wbGF0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/svg/config-motion.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   lowercaseSVGElements: () => (/* binding */ lowercaseSVGElements)\n/* harmony export */ });\n/**\n * We keep these listed seperately as we use the lowercase tag names as part\n * of the runtime bundle to detect SVG components\n */ const lowercaseSVGElements = [\n    \"animate\",\n    \"circle\",\n    \"defs\",\n    \"desc\",\n    \"ellipse\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"filter\",\n    \"marker\",\n    \"mask\",\n    \"metadata\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"rect\",\n    \"stop\",\n    \"switch\",\n    \"symbol\",\n    \"svg\",\n    \"text\",\n    \"tspan\",\n    \"use\",\n    \"view\"\n];\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvbG93ZXJjYXNlLWVsZW1lbnRzLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7OztDQUdDLEdBQ0QsTUFBTUEsdUJBQXVCO0lBQ3pCO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0g7QUFFK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3N2Zy9sb3dlcmNhc2UtZWxlbWVudHMubWpzPzdiM2YiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBXZSBrZWVwIHRoZXNlIGxpc3RlZCBzZXBlcmF0ZWx5IGFzIHdlIHVzZSB0aGUgbG93ZXJjYXNlIHRhZyBuYW1lcyBhcyBwYXJ0XG4gKiBvZiB0aGUgcnVudGltZSBidW5kbGUgdG8gZGV0ZWN0IFNWRyBjb21wb25lbnRzXG4gKi9cbmNvbnN0IGxvd2VyY2FzZVNWR0VsZW1lbnRzID0gW1xuICAgIFwiYW5pbWF0ZVwiLFxuICAgIFwiY2lyY2xlXCIsXG4gICAgXCJkZWZzXCIsXG4gICAgXCJkZXNjXCIsXG4gICAgXCJlbGxpcHNlXCIsXG4gICAgXCJnXCIsXG4gICAgXCJpbWFnZVwiLFxuICAgIFwibGluZVwiLFxuICAgIFwiZmlsdGVyXCIsXG4gICAgXCJtYXJrZXJcIixcbiAgICBcIm1hc2tcIixcbiAgICBcIm1ldGFkYXRhXCIsXG4gICAgXCJwYXRoXCIsXG4gICAgXCJwYXR0ZXJuXCIsXG4gICAgXCJwb2x5Z29uXCIsXG4gICAgXCJwb2x5bGluZVwiLFxuICAgIFwicmVjdFwiLFxuICAgIFwic3RvcFwiLFxuICAgIFwic3dpdGNoXCIsXG4gICAgXCJzeW1ib2xcIixcbiAgICBcInN2Z1wiLFxuICAgIFwidGV4dFwiLFxuICAgIFwidHNwYW5cIixcbiAgICBcInVzZVwiLFxuICAgIFwidmlld1wiLFxuXTtcblxuZXhwb3J0IHsgbG93ZXJjYXNlU1ZHRWxlbWVudHMgfTtcbiJdLCJuYW1lcyI6WyJsb3dlcmNhc2VTVkdFbGVtZW50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/svg/use-props.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/svg/use-props.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSVGProps: () => (/* binding */ useSVGProps)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _html_use_props_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../html/use-props.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/use-props.mjs\");\n/* harmony import */ var _utils_build_attrs_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/build-attrs.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs\");\n/* harmony import */ var _utils_create_render_state_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/create-render-state.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs\");\n/* harmony import */ var _utils_is_svg_tag_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/is-svg-tag.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs\");\n\n\n\n\n\nfunction useSVGProps(props, visualState, _isStatic, Component) {\n    const visualProps = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const state = (0,_utils_create_render_state_mjs__WEBPACK_IMPORTED_MODULE_1__.createSvgRenderState)();\n        (0,_utils_build_attrs_mjs__WEBPACK_IMPORTED_MODULE_2__.buildSVGAttrs)(state, visualState, {\n            enableHardwareAcceleration: false\n        }, (0,_utils_is_svg_tag_mjs__WEBPACK_IMPORTED_MODULE_3__.isSVGTag)(Component), props.transformTemplate);\n        return {\n            ...state.attrs,\n            style: {\n                ...state.style\n            }\n        };\n    }, [\n        visualState\n    ]);\n    if (props.style) {\n        const rawStyles = {};\n        (0,_html_use_props_mjs__WEBPACK_IMPORTED_MODULE_4__.copyRawValuesOnly)(rawStyles, props.style, props);\n        visualProps.style = {\n            ...rawStyles,\n            ...visualProps.style\n        };\n    }\n    return visualProps;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdXNlLXByb3BzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBZ0M7QUFDMEI7QUFDRjtBQUNlO0FBQ3JCO0FBRWxELFNBQVNLLFlBQVlDLEtBQUssRUFBRUMsV0FBVyxFQUFFQyxTQUFTLEVBQUVDLFNBQVM7SUFDekQsTUFBTUMsY0FBY1YsOENBQU9BLENBQUM7UUFDeEIsTUFBTVcsUUFBUVIsb0ZBQW9CQTtRQUNsQ0QscUVBQWFBLENBQUNTLE9BQU9KLGFBQWE7WUFBRUssNEJBQTRCO1FBQU0sR0FBR1IsK0RBQVFBLENBQUNLLFlBQVlILE1BQU1PLGlCQUFpQjtRQUNySCxPQUFPO1lBQ0gsR0FBR0YsTUFBTUcsS0FBSztZQUNkQyxPQUFPO2dCQUFFLEdBQUdKLE1BQU1JLEtBQUs7WUFBQztRQUM1QjtJQUNKLEdBQUc7UUFBQ1I7S0FBWTtJQUNoQixJQUFJRCxNQUFNUyxLQUFLLEVBQUU7UUFDYixNQUFNQyxZQUFZLENBQUM7UUFDbkJmLHNFQUFpQkEsQ0FBQ2UsV0FBV1YsTUFBTVMsS0FBSyxFQUFFVDtRQUMxQ0ksWUFBWUssS0FBSyxHQUFHO1lBQUUsR0FBR0MsU0FBUztZQUFFLEdBQUdOLFlBQVlLLEtBQUs7UUFBQztJQUM3RDtJQUNBLE9BQU9MO0FBQ1g7QUFFdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3N2Zy91c2UtcHJvcHMubWpzPzRkOGEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNvcHlSYXdWYWx1ZXNPbmx5IH0gZnJvbSAnLi4vaHRtbC91c2UtcHJvcHMubWpzJztcbmltcG9ydCB7IGJ1aWxkU1ZHQXR0cnMgfSBmcm9tICcuL3V0aWxzL2J1aWxkLWF0dHJzLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVTdmdSZW5kZXJTdGF0ZSB9IGZyb20gJy4vdXRpbHMvY3JlYXRlLXJlbmRlci1zdGF0ZS5tanMnO1xuaW1wb3J0IHsgaXNTVkdUYWcgfSBmcm9tICcuL3V0aWxzL2lzLXN2Zy10YWcubWpzJztcblxuZnVuY3Rpb24gdXNlU1ZHUHJvcHMocHJvcHMsIHZpc3VhbFN0YXRlLCBfaXNTdGF0aWMsIENvbXBvbmVudCkge1xuICAgIGNvbnN0IHZpc3VhbFByb3BzID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gY3JlYXRlU3ZnUmVuZGVyU3RhdGUoKTtcbiAgICAgICAgYnVpbGRTVkdBdHRycyhzdGF0ZSwgdmlzdWFsU3RhdGUsIHsgZW5hYmxlSGFyZHdhcmVBY2NlbGVyYXRpb246IGZhbHNlIH0sIGlzU1ZHVGFnKENvbXBvbmVudCksIHByb3BzLnRyYW5zZm9ybVRlbXBsYXRlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnN0YXRlLmF0dHJzLFxuICAgICAgICAgICAgc3R5bGU6IHsgLi4uc3RhdGUuc3R5bGUgfSxcbiAgICAgICAgfTtcbiAgICB9LCBbdmlzdWFsU3RhdGVdKTtcbiAgICBpZiAocHJvcHMuc3R5bGUpIHtcbiAgICAgICAgY29uc3QgcmF3U3R5bGVzID0ge307XG4gICAgICAgIGNvcHlSYXdWYWx1ZXNPbmx5KHJhd1N0eWxlcywgcHJvcHMuc3R5bGUsIHByb3BzKTtcbiAgICAgICAgdmlzdWFsUHJvcHMuc3R5bGUgPSB7IC4uLnJhd1N0eWxlcywgLi4udmlzdWFsUHJvcHMuc3R5bGUgfTtcbiAgICB9XG4gICAgcmV0dXJuIHZpc3VhbFByb3BzO1xufVxuXG5leHBvcnQgeyB1c2VTVkdQcm9wcyB9O1xuIl0sIm5hbWVzIjpbInVzZU1lbW8iLCJjb3B5UmF3VmFsdWVzT25seSIsImJ1aWxkU1ZHQXR0cnMiLCJjcmVhdGVTdmdSZW5kZXJTdGF0ZSIsImlzU1ZHVGFnIiwidXNlU1ZHUHJvcHMiLCJwcm9wcyIsInZpc3VhbFN0YXRlIiwiX2lzU3RhdGljIiwiQ29tcG9uZW50IiwidmlzdWFsUHJvcHMiLCJzdGF0ZSIsImVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uIiwidHJhbnNmb3JtVGVtcGxhdGUiLCJhdHRycyIsInN0eWxlIiwicmF3U3R5bGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/svg/use-props.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildSVGAttrs: () => (/* binding */ buildSVGAttrs)\n/* harmony export */ });\n/* harmony import */ var _html_utils_build_styles_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../html/utils/build-styles.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs\");\n/* harmony import */ var _transform_origin_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transform-origin.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs\");\n/* harmony import */ var _path_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./path.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/path.mjs\");\n\n\n\n/**\n * Build SVG visual attrbutes, like cx and style.transform\n */ function buildSVGAttrs(state, { attrX, attrY, attrScale, originX, originY, pathLength, pathSpacing = 1, pathOffset = 0, // This is object creation, which we try to avoid per-frame.\n...latest }, options, isSVGTag, transformTemplate) {\n    (0,_html_utils_build_styles_mjs__WEBPACK_IMPORTED_MODULE_0__.buildHTMLStyles)(state, latest, options, transformTemplate);\n    /**\n     * For svg tags we just want to make sure viewBox is animatable and treat all the styles\n     * as normal HTML tags.\n     */ if (isSVGTag) {\n        if (state.style.viewBox) {\n            state.attrs.viewBox = state.style.viewBox;\n        }\n        return;\n    }\n    state.attrs = state.style;\n    state.style = {};\n    const { attrs, style, dimensions } = state;\n    /**\n     * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs\n     * and copy it into style.\n     */ if (attrs.transform) {\n        if (dimensions) style.transform = attrs.transform;\n        delete attrs.transform;\n    }\n    // Parse transformOrigin\n    if (dimensions && (originX !== undefined || originY !== undefined || style.transform)) {\n        style.transformOrigin = (0,_transform_origin_mjs__WEBPACK_IMPORTED_MODULE_1__.calcSVGTransformOrigin)(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);\n    }\n    // Render attrX/attrY/attrScale as attributes\n    if (attrX !== undefined) attrs.x = attrX;\n    if (attrY !== undefined) attrs.y = attrY;\n    if (attrScale !== undefined) attrs.scale = attrScale;\n    // Build SVG path if one has been defined\n    if (pathLength !== undefined) {\n        (0,_path_mjs__WEBPACK_IMPORTED_MODULE_2__.buildSVGPath)(attrs, pathLength, pathSpacing, pathOffset, false);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdXRpbHMvYnVpbGQtYXR0cnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBb0U7QUFDSjtBQUN0QjtBQUUxQzs7Q0FFQyxHQUNELFNBQVNHLGNBQWNDLEtBQUssRUFBRSxFQUFFQyxLQUFLLEVBQUVDLEtBQUssRUFBRUMsU0FBUyxFQUFFQyxPQUFPLEVBQUVDLE9BQU8sRUFBRUMsVUFBVSxFQUFFQyxjQUFjLENBQUMsRUFBRUMsYUFBYSxDQUFDLEVBQ3RILDREQUE0RDtBQUM1RCxHQUFHQyxRQUFRLEVBQUVDLE9BQU8sRUFBRUMsUUFBUSxFQUFFQyxpQkFBaUI7SUFDN0NoQiw2RUFBZUEsQ0FBQ0ksT0FBT1MsUUFBUUMsU0FBU0U7SUFDeEM7OztLQUdDLEdBQ0QsSUFBSUQsVUFBVTtRQUNWLElBQUlYLE1BQU1hLEtBQUssQ0FBQ0MsT0FBTyxFQUFFO1lBQ3JCZCxNQUFNZSxLQUFLLENBQUNELE9BQU8sR0FBR2QsTUFBTWEsS0FBSyxDQUFDQyxPQUFPO1FBQzdDO1FBQ0E7SUFDSjtJQUNBZCxNQUFNZSxLQUFLLEdBQUdmLE1BQU1hLEtBQUs7SUFDekJiLE1BQU1hLEtBQUssR0FBRyxDQUFDO0lBQ2YsTUFBTSxFQUFFRSxLQUFLLEVBQUVGLEtBQUssRUFBRUcsVUFBVSxFQUFFLEdBQUdoQjtJQUNyQzs7O0tBR0MsR0FDRCxJQUFJZSxNQUFNRSxTQUFTLEVBQUU7UUFDakIsSUFBSUQsWUFDQUgsTUFBTUksU0FBUyxHQUFHRixNQUFNRSxTQUFTO1FBQ3JDLE9BQU9GLE1BQU1FLFNBQVM7SUFDMUI7SUFDQSx3QkFBd0I7SUFDeEIsSUFBSUQsY0FDQ1osQ0FBQUEsWUFBWWMsYUFBYWIsWUFBWWEsYUFBYUwsTUFBTUksU0FBUyxHQUFHO1FBQ3JFSixNQUFNTSxlQUFlLEdBQUd0Qiw2RUFBc0JBLENBQUNtQixZQUFZWixZQUFZYyxZQUFZZCxVQUFVLEtBQUtDLFlBQVlhLFlBQVliLFVBQVU7SUFDeEk7SUFDQSw2Q0FBNkM7SUFDN0MsSUFBSUosVUFBVWlCLFdBQ1ZILE1BQU1LLENBQUMsR0FBR25CO0lBQ2QsSUFBSUMsVUFBVWdCLFdBQ1ZILE1BQU1NLENBQUMsR0FBR25CO0lBQ2QsSUFBSUMsY0FBY2UsV0FDZEgsTUFBTU8sS0FBSyxHQUFHbkI7SUFDbEIseUNBQXlDO0lBQ3pDLElBQUlHLGVBQWVZLFdBQVc7UUFDMUJwQix1REFBWUEsQ0FBQ2lCLE9BQU9ULFlBQVlDLGFBQWFDLFlBQVk7SUFDN0Q7QUFDSjtBQUV5QiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvc3ZnL3V0aWxzL2J1aWxkLWF0dHJzLm1qcz8zNTYwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJ1aWxkSFRNTFN0eWxlcyB9IGZyb20gJy4uLy4uL2h0bWwvdXRpbHMvYnVpbGQtc3R5bGVzLm1qcyc7XG5pbXBvcnQgeyBjYWxjU1ZHVHJhbnNmb3JtT3JpZ2luIH0gZnJvbSAnLi90cmFuc2Zvcm0tb3JpZ2luLm1qcyc7XG5pbXBvcnQgeyBidWlsZFNWR1BhdGggfSBmcm9tICcuL3BhdGgubWpzJztcblxuLyoqXG4gKiBCdWlsZCBTVkcgdmlzdWFsIGF0dHJidXRlcywgbGlrZSBjeCBhbmQgc3R5bGUudHJhbnNmb3JtXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkU1ZHQXR0cnMoc3RhdGUsIHsgYXR0clgsIGF0dHJZLCBhdHRyU2NhbGUsIG9yaWdpblgsIG9yaWdpblksIHBhdGhMZW5ndGgsIHBhdGhTcGFjaW5nID0gMSwgcGF0aE9mZnNldCA9IDAsIFxuLy8gVGhpcyBpcyBvYmplY3QgY3JlYXRpb24sIHdoaWNoIHdlIHRyeSB0byBhdm9pZCBwZXItZnJhbWUuXG4uLi5sYXRlc3QgfSwgb3B0aW9ucywgaXNTVkdUYWcsIHRyYW5zZm9ybVRlbXBsYXRlKSB7XG4gICAgYnVpbGRIVE1MU3R5bGVzKHN0YXRlLCBsYXRlc3QsIG9wdGlvbnMsIHRyYW5zZm9ybVRlbXBsYXRlKTtcbiAgICAvKipcbiAgICAgKiBGb3Igc3ZnIHRhZ3Mgd2UganVzdCB3YW50IHRvIG1ha2Ugc3VyZSB2aWV3Qm94IGlzIGFuaW1hdGFibGUgYW5kIHRyZWF0IGFsbCB0aGUgc3R5bGVzXG4gICAgICogYXMgbm9ybWFsIEhUTUwgdGFncy5cbiAgICAgKi9cbiAgICBpZiAoaXNTVkdUYWcpIHtcbiAgICAgICAgaWYgKHN0YXRlLnN0eWxlLnZpZXdCb3gpIHtcbiAgICAgICAgICAgIHN0YXRlLmF0dHJzLnZpZXdCb3ggPSBzdGF0ZS5zdHlsZS52aWV3Qm94O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3RhdGUuYXR0cnMgPSBzdGF0ZS5zdHlsZTtcbiAgICBzdGF0ZS5zdHlsZSA9IHt9O1xuICAgIGNvbnN0IHsgYXR0cnMsIHN0eWxlLCBkaW1lbnNpb25zIH0gPSBzdGF0ZTtcbiAgICAvKipcbiAgICAgKiBIb3dldmVyLCB3ZSBhcHBseSB0cmFuc2Zvcm1zIGFzIENTUyB0cmFuc2Zvcm1zLiBTbyBpZiB3ZSBkZXRlY3QgYSB0cmFuc2Zvcm0gd2UgdGFrZSBpdCBmcm9tIGF0dHJzXG4gICAgICogYW5kIGNvcHkgaXQgaW50byBzdHlsZS5cbiAgICAgKi9cbiAgICBpZiAoYXR0cnMudHJhbnNmb3JtKSB7XG4gICAgICAgIGlmIChkaW1lbnNpb25zKVxuICAgICAgICAgICAgc3R5bGUudHJhbnNmb3JtID0gYXR0cnMudHJhbnNmb3JtO1xuICAgICAgICBkZWxldGUgYXR0cnMudHJhbnNmb3JtO1xuICAgIH1cbiAgICAvLyBQYXJzZSB0cmFuc2Zvcm1PcmlnaW5cbiAgICBpZiAoZGltZW5zaW9ucyAmJlxuICAgICAgICAob3JpZ2luWCAhPT0gdW5kZWZpbmVkIHx8IG9yaWdpblkgIT09IHVuZGVmaW5lZCB8fCBzdHlsZS50cmFuc2Zvcm0pKSB7XG4gICAgICAgIHN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IGNhbGNTVkdUcmFuc2Zvcm1PcmlnaW4oZGltZW5zaW9ucywgb3JpZ2luWCAhPT0gdW5kZWZpbmVkID8gb3JpZ2luWCA6IDAuNSwgb3JpZ2luWSAhPT0gdW5kZWZpbmVkID8gb3JpZ2luWSA6IDAuNSk7XG4gICAgfVxuICAgIC8vIFJlbmRlciBhdHRyWC9hdHRyWS9hdHRyU2NhbGUgYXMgYXR0cmlidXRlc1xuICAgIGlmIChhdHRyWCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICBhdHRycy54ID0gYXR0clg7XG4gICAgaWYgKGF0dHJZICE9PSB1bmRlZmluZWQpXG4gICAgICAgIGF0dHJzLnkgPSBhdHRyWTtcbiAgICBpZiAoYXR0clNjYWxlICE9PSB1bmRlZmluZWQpXG4gICAgICAgIGF0dHJzLnNjYWxlID0gYXR0clNjYWxlO1xuICAgIC8vIEJ1aWxkIFNWRyBwYXRoIGlmIG9uZSBoYXMgYmVlbiBkZWZpbmVkXG4gICAgaWYgKHBhdGhMZW5ndGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBidWlsZFNWR1BhdGgoYXR0cnMsIHBhdGhMZW5ndGgsIHBhdGhTcGFjaW5nLCBwYXRoT2Zmc2V0LCBmYWxzZSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBidWlsZFNWR0F0dHJzIH07XG4iXSwibmFtZXMiOlsiYnVpbGRIVE1MU3R5bGVzIiwiY2FsY1NWR1RyYW5zZm9ybU9yaWdpbiIsImJ1aWxkU1ZHUGF0aCIsImJ1aWxkU1ZHQXR0cnMiLCJzdGF0ZSIsImF0dHJYIiwiYXR0clkiLCJhdHRyU2NhbGUiLCJvcmlnaW5YIiwib3JpZ2luWSIsInBhdGhMZW5ndGgiLCJwYXRoU3BhY2luZyIsInBhdGhPZmZzZXQiLCJsYXRlc3QiLCJvcHRpb25zIiwiaXNTVkdUYWciLCJ0cmFuc2Zvcm1UZW1wbGF0ZSIsInN0eWxlIiwidmlld0JveCIsImF0dHJzIiwiZGltZW5zaW9ucyIsInRyYW5zZm9ybSIsInVuZGVmaW5lZCIsInRyYW5zZm9ybU9yaWdpbiIsIngiLCJ5Iiwic2NhbGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   camelCaseAttributes: () => (/* binding */ camelCaseAttributes)\n/* harmony export */ });\n/**\n * A set of attribute names that are always read/written as camel case.\n */ const camelCaseAttributes = new Set([\n    \"baseFrequency\",\n    \"diffuseConstant\",\n    \"kernelMatrix\",\n    \"kernelUnitLength\",\n    \"keySplines\",\n    \"keyTimes\",\n    \"limitingConeAngle\",\n    \"markerHeight\",\n    \"markerWidth\",\n    \"numOctaves\",\n    \"targetX\",\n    \"targetY\",\n    \"surfaceScale\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"stdDeviation\",\n    \"tableValues\",\n    \"viewBox\",\n    \"gradientTransform\",\n    \"pathLength\",\n    \"startOffset\",\n    \"textLength\",\n    \"lengthAdjust\"\n]);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdXRpbHMvY2FtZWwtY2FzZS1hdHRycy5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztDQUVDLEdBQ0QsTUFBTUEsc0JBQXNCLElBQUlDLElBQUk7SUFDaEM7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNIO0FBRThCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdXRpbHMvY2FtZWwtY2FzZS1hdHRycy5tanM/ODBlNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgc2V0IG9mIGF0dHJpYnV0ZSBuYW1lcyB0aGF0IGFyZSBhbHdheXMgcmVhZC93cml0dGVuIGFzIGNhbWVsIGNhc2UuXG4gKi9cbmNvbnN0IGNhbWVsQ2FzZUF0dHJpYnV0ZXMgPSBuZXcgU2V0KFtcbiAgICBcImJhc2VGcmVxdWVuY3lcIixcbiAgICBcImRpZmZ1c2VDb25zdGFudFwiLFxuICAgIFwia2VybmVsTWF0cml4XCIsXG4gICAgXCJrZXJuZWxVbml0TGVuZ3RoXCIsXG4gICAgXCJrZXlTcGxpbmVzXCIsXG4gICAgXCJrZXlUaW1lc1wiLFxuICAgIFwibGltaXRpbmdDb25lQW5nbGVcIixcbiAgICBcIm1hcmtlckhlaWdodFwiLFxuICAgIFwibWFya2VyV2lkdGhcIixcbiAgICBcIm51bU9jdGF2ZXNcIixcbiAgICBcInRhcmdldFhcIixcbiAgICBcInRhcmdldFlcIixcbiAgICBcInN1cmZhY2VTY2FsZVwiLFxuICAgIFwic3BlY3VsYXJDb25zdGFudFwiLFxuICAgIFwic3BlY3VsYXJFeHBvbmVudFwiLFxuICAgIFwic3RkRGV2aWF0aW9uXCIsXG4gICAgXCJ0YWJsZVZhbHVlc1wiLFxuICAgIFwidmlld0JveFwiLFxuICAgIFwiZ3JhZGllbnRUcmFuc2Zvcm1cIixcbiAgICBcInBhdGhMZW5ndGhcIixcbiAgICBcInN0YXJ0T2Zmc2V0XCIsXG4gICAgXCJ0ZXh0TGVuZ3RoXCIsXG4gICAgXCJsZW5ndGhBZGp1c3RcIixcbl0pO1xuXG5leHBvcnQgeyBjYW1lbENhc2VBdHRyaWJ1dGVzIH07XG4iXSwibmFtZXMiOlsiY2FtZWxDYXNlQXR0cmlidXRlcyIsIlNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs":
/*!*************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSvgRenderState: () => (/* binding */ createSvgRenderState)\n/* harmony export */ });\n/* harmony import */ var _html_utils_create_render_state_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../html/utils/create-render-state.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs\");\n\nconst createSvgRenderState = ()=>({\n        ...(0,_html_utils_create_render_state_mjs__WEBPACK_IMPORTED_MODULE_0__.createHtmlRenderState)(),\n        attrs: {}\n    });\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdXRpbHMvY3JlYXRlLXJlbmRlci1zdGF0ZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBaUY7QUFFakYsTUFBTUMsdUJBQXVCLElBQU87UUFDaEMsR0FBR0QsMEZBQXFCQSxFQUFFO1FBQzFCRSxPQUFPLENBQUM7SUFDWjtBQUVnQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvc3ZnL3V0aWxzL2NyZWF0ZS1yZW5kZXItc3RhdGUubWpzP2U0ODciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlSHRtbFJlbmRlclN0YXRlIH0gZnJvbSAnLi4vLi4vaHRtbC91dGlscy9jcmVhdGUtcmVuZGVyLXN0YXRlLm1qcyc7XG5cbmNvbnN0IGNyZWF0ZVN2Z1JlbmRlclN0YXRlID0gKCkgPT4gKHtcbiAgICAuLi5jcmVhdGVIdG1sUmVuZGVyU3RhdGUoKSxcbiAgICBhdHRyczoge30sXG59KTtcblxuZXhwb3J0IHsgY3JlYXRlU3ZnUmVuZGVyU3RhdGUgfTtcbiJdLCJuYW1lcyI6WyJjcmVhdGVIdG1sUmVuZGVyU3RhdGUiLCJjcmVhdGVTdmdSZW5kZXJTdGF0ZSIsImF0dHJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isSVGTag: () => (/* binding */ isSVGTag)\n/* harmony export */ });\nconst isSVGTag = (tag)=>typeof tag === \"string\" && tag.toLowerCase() === \"svg\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdXRpbHMvaXMtc3ZnLXRhZy5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLFdBQVcsQ0FBQ0MsTUFBUSxPQUFPQSxRQUFRLFlBQVlBLElBQUlDLFdBQVcsT0FBTztBQUV2RCIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvc3ZnL3V0aWxzL2lzLXN2Zy10YWcubWpzPzI1ZjciXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgaXNTVkdUYWcgPSAodGFnKSA9PiB0eXBlb2YgdGFnID09PSBcInN0cmluZ1wiICYmIHRhZy50b0xvd2VyQ2FzZSgpID09PSBcInN2Z1wiO1xuXG5leHBvcnQgeyBpc1NWR1RhZyB9O1xuIl0sIm5hbWVzIjpbImlzU1ZHVGFnIiwidGFnIiwidG9Mb3dlckNhc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/path.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/svg/utils/path.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildSVGPath: () => (/* binding */ buildSVGPath)\n/* harmony export */ });\n/* harmony import */ var _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../value/types/numbers/units.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/numbers/units.mjs\");\n\nconst dashKeys = {\n    offset: \"stroke-dashoffset\",\n    array: \"stroke-dasharray\"\n};\nconst camelKeys = {\n    offset: \"strokeDashoffset\",\n    array: \"strokeDasharray\"\n};\n/**\n * Build SVG path properties. Uses the path's measured length to convert\n * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset\n * and stroke-dasharray attributes.\n *\n * This function is mutative to reduce per-frame GC.\n */ function buildSVGPath(attrs, length, spacing = 1, offset = 0, useDashCase = true) {\n    // Normalise path length by setting SVG attribute pathLength to 1\n    attrs.pathLength = 1;\n    // We use dash case when setting attributes directly to the DOM node and camel case\n    // when defining props on a React component.\n    const keys = useDashCase ? dashKeys : camelKeys;\n    // Build the dash offset\n    attrs[keys.offset] = _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px.transform(-offset);\n    // Build the dash array\n    const pathLength = _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px.transform(length);\n    const pathSpacing = _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px.transform(spacing);\n    attrs[keys.array] = `${pathLength} ${pathSpacing}`;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdXRpbHMvcGF0aC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNEQ7QUFFNUQsTUFBTUMsV0FBVztJQUNiQyxRQUFRO0lBQ1JDLE9BQU87QUFDWDtBQUNBLE1BQU1DLFlBQVk7SUFDZEYsUUFBUTtJQUNSQyxPQUFPO0FBQ1g7QUFDQTs7Ozs7O0NBTUMsR0FDRCxTQUFTRSxhQUFhQyxLQUFLLEVBQUVDLE1BQU0sRUFBRUMsVUFBVSxDQUFDLEVBQUVOLFNBQVMsQ0FBQyxFQUFFTyxjQUFjLElBQUk7SUFDNUUsaUVBQWlFO0lBQ2pFSCxNQUFNSSxVQUFVLEdBQUc7SUFDbkIsbUZBQW1GO0lBQ25GLDRDQUE0QztJQUM1QyxNQUFNQyxPQUFPRixjQUFjUixXQUFXRztJQUN0Qyx3QkFBd0I7SUFDeEJFLEtBQUssQ0FBQ0ssS0FBS1QsTUFBTSxDQUFDLEdBQUdGLDhEQUFFQSxDQUFDWSxTQUFTLENBQUMsQ0FBQ1Y7SUFDbkMsdUJBQXVCO0lBQ3ZCLE1BQU1RLGFBQWFWLDhEQUFFQSxDQUFDWSxTQUFTLENBQUNMO0lBQ2hDLE1BQU1NLGNBQWNiLDhEQUFFQSxDQUFDWSxTQUFTLENBQUNKO0lBQ2pDRixLQUFLLENBQUNLLEtBQUtSLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRU8sV0FBVyxDQUFDLEVBQUVHLFlBQVksQ0FBQztBQUN0RDtBQUV3QiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvc3ZnL3V0aWxzL3BhdGgubWpzP2Y2ODkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHggfSBmcm9tICcuLi8uLi8uLi92YWx1ZS90eXBlcy9udW1iZXJzL3VuaXRzLm1qcyc7XG5cbmNvbnN0IGRhc2hLZXlzID0ge1xuICAgIG9mZnNldDogXCJzdHJva2UtZGFzaG9mZnNldFwiLFxuICAgIGFycmF5OiBcInN0cm9rZS1kYXNoYXJyYXlcIixcbn07XG5jb25zdCBjYW1lbEtleXMgPSB7XG4gICAgb2Zmc2V0OiBcInN0cm9rZURhc2hvZmZzZXRcIixcbiAgICBhcnJheTogXCJzdHJva2VEYXNoYXJyYXlcIixcbn07XG4vKipcbiAqIEJ1aWxkIFNWRyBwYXRoIHByb3BlcnRpZXMuIFVzZXMgdGhlIHBhdGgncyBtZWFzdXJlZCBsZW5ndGggdG8gY29udmVydFxuICogb3VyIGN1c3RvbSBwYXRoTGVuZ3RoLCBwYXRoU3BhY2luZyBhbmQgcGF0aE9mZnNldCBpbnRvIHN0cm9rZS1kYXNob2Zmc2V0XG4gKiBhbmQgc3Ryb2tlLWRhc2hhcnJheSBhdHRyaWJ1dGVzLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbXV0YXRpdmUgdG8gcmVkdWNlIHBlci1mcmFtZSBHQy5cbiAqL1xuZnVuY3Rpb24gYnVpbGRTVkdQYXRoKGF0dHJzLCBsZW5ndGgsIHNwYWNpbmcgPSAxLCBvZmZzZXQgPSAwLCB1c2VEYXNoQ2FzZSA9IHRydWUpIHtcbiAgICAvLyBOb3JtYWxpc2UgcGF0aCBsZW5ndGggYnkgc2V0dGluZyBTVkcgYXR0cmlidXRlIHBhdGhMZW5ndGggdG8gMVxuICAgIGF0dHJzLnBhdGhMZW5ndGggPSAxO1xuICAgIC8vIFdlIHVzZSBkYXNoIGNhc2Ugd2hlbiBzZXR0aW5nIGF0dHJpYnV0ZXMgZGlyZWN0bHkgdG8gdGhlIERPTSBub2RlIGFuZCBjYW1lbCBjYXNlXG4gICAgLy8gd2hlbiBkZWZpbmluZyBwcm9wcyBvbiBhIFJlYWN0IGNvbXBvbmVudC5cbiAgICBjb25zdCBrZXlzID0gdXNlRGFzaENhc2UgPyBkYXNoS2V5cyA6IGNhbWVsS2V5cztcbiAgICAvLyBCdWlsZCB0aGUgZGFzaCBvZmZzZXRcbiAgICBhdHRyc1trZXlzLm9mZnNldF0gPSBweC50cmFuc2Zvcm0oLW9mZnNldCk7XG4gICAgLy8gQnVpbGQgdGhlIGRhc2ggYXJyYXlcbiAgICBjb25zdCBwYXRoTGVuZ3RoID0gcHgudHJhbnNmb3JtKGxlbmd0aCk7XG4gICAgY29uc3QgcGF0aFNwYWNpbmcgPSBweC50cmFuc2Zvcm0oc3BhY2luZyk7XG4gICAgYXR0cnNba2V5cy5hcnJheV0gPSBgJHtwYXRoTGVuZ3RofSAke3BhdGhTcGFjaW5nfWA7XG59XG5cbmV4cG9ydCB7IGJ1aWxkU1ZHUGF0aCB9O1xuIl0sIm5hbWVzIjpbInB4IiwiZGFzaEtleXMiLCJvZmZzZXQiLCJhcnJheSIsImNhbWVsS2V5cyIsImJ1aWxkU1ZHUGF0aCIsImF0dHJzIiwibGVuZ3RoIiwic3BhY2luZyIsInVzZURhc2hDYXNlIiwicGF0aExlbmd0aCIsImtleXMiLCJ0cmFuc2Zvcm0iLCJwYXRoU3BhY2luZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/path.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/render.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/svg/utils/render.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   renderSVG: () => (/* binding */ renderSVG)\n/* harmony export */ });\n/* harmony import */ var _dom_utils_camel_to_dash_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../dom/utils/camel-to-dash.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs\");\n/* harmony import */ var _html_utils_render_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../html/utils/render.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/render.mjs\");\n/* harmony import */ var _camel_case_attrs_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./camel-case-attrs.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs\");\n\n\n\nfunction renderSVG(element, renderState, _styleProp, projection) {\n    (0,_html_utils_render_mjs__WEBPACK_IMPORTED_MODULE_0__.renderHTML)(element, renderState, undefined, projection);\n    for(const key in renderState.attrs){\n        element.setAttribute(!_camel_case_attrs_mjs__WEBPACK_IMPORTED_MODULE_1__.camelCaseAttributes.has(key) ? (0,_dom_utils_camel_to_dash_mjs__WEBPACK_IMPORTED_MODULE_2__.camelToDash)(key) : key, renderState.attrs[key]);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdXRpbHMvcmVuZGVyLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWdFO0FBQ1A7QUFDSTtBQUU3RCxTQUFTRyxVQUFVQyxPQUFPLEVBQUVDLFdBQVcsRUFBRUMsVUFBVSxFQUFFQyxVQUFVO0lBQzNETixrRUFBVUEsQ0FBQ0csU0FBU0MsYUFBYUcsV0FBV0Q7SUFDNUMsSUFBSyxNQUFNRSxPQUFPSixZQUFZSyxLQUFLLENBQUU7UUFDakNOLFFBQVFPLFlBQVksQ0FBQyxDQUFDVCxzRUFBbUJBLENBQUNVLEdBQUcsQ0FBQ0gsT0FBT1QseUVBQVdBLENBQUNTLE9BQU9BLEtBQUtKLFlBQVlLLEtBQUssQ0FBQ0QsSUFBSTtJQUN2RztBQUNKO0FBRXFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdXRpbHMvcmVuZGVyLm1qcz8zMTZjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNhbWVsVG9EYXNoIH0gZnJvbSAnLi4vLi4vZG9tL3V0aWxzL2NhbWVsLXRvLWRhc2gubWpzJztcbmltcG9ydCB7IHJlbmRlckhUTUwgfSBmcm9tICcuLi8uLi9odG1sL3V0aWxzL3JlbmRlci5tanMnO1xuaW1wb3J0IHsgY2FtZWxDYXNlQXR0cmlidXRlcyB9IGZyb20gJy4vY2FtZWwtY2FzZS1hdHRycy5tanMnO1xuXG5mdW5jdGlvbiByZW5kZXJTVkcoZWxlbWVudCwgcmVuZGVyU3RhdGUsIF9zdHlsZVByb3AsIHByb2plY3Rpb24pIHtcbiAgICByZW5kZXJIVE1MKGVsZW1lbnQsIHJlbmRlclN0YXRlLCB1bmRlZmluZWQsIHByb2plY3Rpb24pO1xuICAgIGZvciAoY29uc3Qga2V5IGluIHJlbmRlclN0YXRlLmF0dHJzKSB7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCFjYW1lbENhc2VBdHRyaWJ1dGVzLmhhcyhrZXkpID8gY2FtZWxUb0Rhc2goa2V5KSA6IGtleSwgcmVuZGVyU3RhdGUuYXR0cnNba2V5XSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyByZW5kZXJTVkcgfTtcbiJdLCJuYW1lcyI6WyJjYW1lbFRvRGFzaCIsInJlbmRlckhUTUwiLCJjYW1lbENhc2VBdHRyaWJ1dGVzIiwicmVuZGVyU1ZHIiwiZWxlbWVudCIsInJlbmRlclN0YXRlIiwiX3N0eWxlUHJvcCIsInByb2plY3Rpb24iLCJ1bmRlZmluZWQiLCJrZXkiLCJhdHRycyIsInNldEF0dHJpYnV0ZSIsImhhcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/render.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs":
/*!**************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   scrapeMotionValuesFromProps: () => (/* binding */ scrapeMotionValuesFromProps)\n/* harmony export */ });\n/* harmony import */ var _value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../value/utils/is-motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs\");\n/* harmony import */ var _html_utils_scrape_motion_values_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../html/utils/scrape-motion-values.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs\");\n/* harmony import */ var _html_utils_transform_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../html/utils/transform.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/transform.mjs\");\n\n\n\nfunction scrapeMotionValuesFromProps(props, prevProps) {\n    const newValues = (0,_html_utils_scrape_motion_values_mjs__WEBPACK_IMPORTED_MODULE_0__.scrapeMotionValuesFromProps)(props, prevProps);\n    for(const key in props){\n        if ((0,_value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_1__.isMotionValue)(props[key]) || (0,_value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_1__.isMotionValue)(prevProps[key])) {\n            const targetKey = _html_utils_transform_mjs__WEBPACK_IMPORTED_MODULE_2__.transformPropOrder.indexOf(key) !== -1 ? \"attr\" + key.charAt(0).toUpperCase() + key.substring(1) : key;\n            newValues[targetKey] = props[key];\n        }\n    }\n    return newValues;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdXRpbHMvc2NyYXBlLW1vdGlvbi12YWx1ZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBeUU7QUFDZ0Q7QUFDckQ7QUFFcEUsU0FBU0MsNEJBQTRCRyxLQUFLLEVBQUVDLFNBQVM7SUFDakQsTUFBTUMsWUFBWUosaUdBQTZCQSxDQUFDRSxPQUFPQztJQUN2RCxJQUFLLE1BQU1FLE9BQU9ILE1BQU87UUFDckIsSUFBSUosK0VBQWFBLENBQUNJLEtBQUssQ0FBQ0csSUFBSSxLQUFLUCwrRUFBYUEsQ0FBQ0ssU0FBUyxDQUFDRSxJQUFJLEdBQUc7WUFDNUQsTUFBTUMsWUFBWUwseUVBQWtCQSxDQUFDTSxPQUFPLENBQUNGLFNBQVMsQ0FBQyxJQUNqRCxTQUFTQSxJQUFJRyxNQUFNLENBQUMsR0FBR0MsV0FBVyxLQUFLSixJQUFJSyxTQUFTLENBQUMsS0FDckRMO1lBQ05ELFNBQVMsQ0FBQ0UsVUFBVSxHQUFHSixLQUFLLENBQUNHLElBQUk7UUFDckM7SUFDSjtJQUNBLE9BQU9EO0FBQ1g7QUFFdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3N2Zy91dGlscy9zY3JhcGUtbW90aW9uLXZhbHVlcy5tanM/ZjQwYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc01vdGlvblZhbHVlIH0gZnJvbSAnLi4vLi4vLi4vdmFsdWUvdXRpbHMvaXMtbW90aW9uLXZhbHVlLm1qcyc7XG5pbXBvcnQgeyBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMgYXMgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzJDEgfSBmcm9tICcuLi8uLi9odG1sL3V0aWxzL3NjcmFwZS1tb3Rpb24tdmFsdWVzLm1qcyc7XG5pbXBvcnQgeyB0cmFuc2Zvcm1Qcm9wT3JkZXIgfSBmcm9tICcuLi8uLi9odG1sL3V0aWxzL3RyYW5zZm9ybS5tanMnO1xuXG5mdW5jdGlvbiBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMocHJvcHMsIHByZXZQcm9wcykge1xuICAgIGNvbnN0IG5ld1ZhbHVlcyA9IHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyQxKHByb3BzLCBwcmV2UHJvcHMpO1xuICAgIGZvciAoY29uc3Qga2V5IGluIHByb3BzKSB7XG4gICAgICAgIGlmIChpc01vdGlvblZhbHVlKHByb3BzW2tleV0pIHx8IGlzTW90aW9uVmFsdWUocHJldlByb3BzW2tleV0pKSB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXRLZXkgPSB0cmFuc2Zvcm1Qcm9wT3JkZXIuaW5kZXhPZihrZXkpICE9PSAtMVxuICAgICAgICAgICAgICAgID8gXCJhdHRyXCIgKyBrZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBrZXkuc3Vic3RyaW5nKDEpXG4gICAgICAgICAgICAgICAgOiBrZXk7XG4gICAgICAgICAgICBuZXdWYWx1ZXNbdGFyZ2V0S2V5XSA9IHByb3BzW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ld1ZhbHVlcztcbn1cblxuZXhwb3J0IHsgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzIH07XG4iXSwibmFtZXMiOlsiaXNNb3Rpb25WYWx1ZSIsInNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyIsInNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyQxIiwidHJhbnNmb3JtUHJvcE9yZGVyIiwicHJvcHMiLCJwcmV2UHJvcHMiLCJuZXdWYWx1ZXMiLCJrZXkiLCJ0YXJnZXRLZXkiLCJpbmRleE9mIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzdWJzdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calcSVGTransformOrigin: () => (/* binding */ calcSVGTransformOrigin)\n/* harmony export */ });\n/* harmony import */ var _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../value/types/numbers/units.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/numbers/units.mjs\");\n\nfunction calcOrigin(origin, offset, size) {\n    return typeof origin === \"string\" ? origin : _value_types_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_0__.px.transform(offset + size * origin);\n}\n/**\n * The SVG transform origin defaults are different to CSS and is less intuitive,\n * so we use the measured dimensions of the SVG to reconcile these.\n */ function calcSVGTransformOrigin(dimensions, originX, originY) {\n    const pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);\n    const pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);\n    return `${pxOriginX} ${pxOriginY}`;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdXRpbHMvdHJhbnNmb3JtLW9yaWdpbi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNEQ7QUFFNUQsU0FBU0MsV0FBV0MsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLElBQUk7SUFDcEMsT0FBTyxPQUFPRixXQUFXLFdBQ25CQSxTQUNBRiw4REFBRUEsQ0FBQ0ssU0FBUyxDQUFDRixTQUFTQyxPQUFPRjtBQUN2QztBQUNBOzs7Q0FHQyxHQUNELFNBQVNJLHVCQUF1QkMsVUFBVSxFQUFFQyxPQUFPLEVBQUVDLE9BQU87SUFDeEQsTUFBTUMsWUFBWVQsV0FBV08sU0FBU0QsV0FBV0ksQ0FBQyxFQUFFSixXQUFXSyxLQUFLO0lBQ3BFLE1BQU1DLFlBQVlaLFdBQVdRLFNBQVNGLFdBQVdPLENBQUMsRUFBRVAsV0FBV1EsTUFBTTtJQUNyRSxPQUFPLENBQUMsRUFBRUwsVUFBVSxDQUFDLEVBQUVHLFVBQVUsQ0FBQztBQUN0QztBQUVrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvc3ZnL3V0aWxzL3RyYW5zZm9ybS1vcmlnaW4ubWpzPzVlZTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHggfSBmcm9tICcuLi8uLi8uLi92YWx1ZS90eXBlcy9udW1iZXJzL3VuaXRzLm1qcyc7XG5cbmZ1bmN0aW9uIGNhbGNPcmlnaW4ob3JpZ2luLCBvZmZzZXQsIHNpemUpIHtcbiAgICByZXR1cm4gdHlwZW9mIG9yaWdpbiA9PT0gXCJzdHJpbmdcIlxuICAgICAgICA/IG9yaWdpblxuICAgICAgICA6IHB4LnRyYW5zZm9ybShvZmZzZXQgKyBzaXplICogb3JpZ2luKTtcbn1cbi8qKlxuICogVGhlIFNWRyB0cmFuc2Zvcm0gb3JpZ2luIGRlZmF1bHRzIGFyZSBkaWZmZXJlbnQgdG8gQ1NTIGFuZCBpcyBsZXNzIGludHVpdGl2ZSxcbiAqIHNvIHdlIHVzZSB0aGUgbWVhc3VyZWQgZGltZW5zaW9ucyBvZiB0aGUgU1ZHIHRvIHJlY29uY2lsZSB0aGVzZS5cbiAqL1xuZnVuY3Rpb24gY2FsY1NWR1RyYW5zZm9ybU9yaWdpbihkaW1lbnNpb25zLCBvcmlnaW5YLCBvcmlnaW5ZKSB7XG4gICAgY29uc3QgcHhPcmlnaW5YID0gY2FsY09yaWdpbihvcmlnaW5YLCBkaW1lbnNpb25zLngsIGRpbWVuc2lvbnMud2lkdGgpO1xuICAgIGNvbnN0IHB4T3JpZ2luWSA9IGNhbGNPcmlnaW4ob3JpZ2luWSwgZGltZW5zaW9ucy55LCBkaW1lbnNpb25zLmhlaWdodCk7XG4gICAgcmV0dXJuIGAke3B4T3JpZ2luWH0gJHtweE9yaWdpbll9YDtcbn1cblxuZXhwb3J0IHsgY2FsY1NWR1RyYW5zZm9ybU9yaWdpbiB9O1xuIl0sIm5hbWVzIjpbInB4IiwiY2FsY09yaWdpbiIsIm9yaWdpbiIsIm9mZnNldCIsInNpemUiLCJ0cmFuc2Zvcm0iLCJjYWxjU1ZHVHJhbnNmb3JtT3JpZ2luIiwiZGltZW5zaW9ucyIsIm9yaWdpblgiLCJvcmlnaW5ZIiwicHhPcmlnaW5YIiwieCIsIndpZHRoIiwicHhPcmlnaW5ZIiwieSIsImhlaWdodCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/utils/animation-state.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/utils/animation-state.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkVariantsDidChange: () => (/* binding */ checkVariantsDidChange),\n/* harmony export */   createAnimationState: () => (/* binding */ createAnimationState)\n/* harmony export */ });\n/* harmony import */ var _animation_utils_is_animation_controls_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../animation/utils/is-animation-controls.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs\");\n/* harmony import */ var _animation_utils_is_keyframes_target_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../animation/utils/is-keyframes-target.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs\");\n/* harmony import */ var _utils_shallow_compare_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/shallow-compare.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/shallow-compare.mjs\");\n/* harmony import */ var _is_variant_label_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./is-variant-label.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs\");\n/* harmony import */ var _resolve_dynamic_variants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./resolve-dynamic-variants.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs\");\n/* harmony import */ var _variant_props_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./variant-props.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/variant-props.mjs\");\n/* harmony import */ var _animation_interfaces_visual_element_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../animation/interfaces/visual-element.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs\");\n\n\n\n\n\n\n\nconst reversePriorityOrder = [\n    ..._variant_props_mjs__WEBPACK_IMPORTED_MODULE_0__.variantPriorityOrder\n].reverse();\nconst numAnimationTypes = _variant_props_mjs__WEBPACK_IMPORTED_MODULE_0__.variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return (animations)=>Promise.all(animations.map(({ animation, options })=>(0,_animation_interfaces_visual_element_mjs__WEBPACK_IMPORTED_MODULE_1__.animateVisualElement)(visualElement, animation, options)));\n}\nfunction createAnimationState(visualElement) {\n    let animate = animateList(visualElement);\n    const state = createState();\n    let isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */ const buildResolvedTypeValues = (acc, definition)=>{\n        const resolved = (0,_resolve_dynamic_variants_mjs__WEBPACK_IMPORTED_MODULE_2__.resolveVariant)(visualElement, definition);\n        if (resolved) {\n            const { transition, transitionEnd, ...target } = resolved;\n            acc = {\n                ...acc,\n                ...target,\n                ...transitionEnd\n            };\n        }\n        return acc;\n    };\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */ function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */ function animateChanges(options, changedActiveType) {\n        const props = visualElement.getProps();\n        const context = visualElement.getVariantContext(true) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */ const animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */ const removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */ let encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */ let removedVariantIndex = Infinity;\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */ for(let i = 0; i < numAnimationTypes; i++){\n            const type = reversePriorityOrder[i];\n            const typeState = state[type];\n            const prop = props[type] !== undefined ? props[type] : context[type];\n            const propIsVariant = (0,_is_variant_label_mjs__WEBPACK_IMPORTED_MODULE_3__.isVariantLabel)(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */ const activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false) removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */ let isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n            /**\n             *\n             */ if (isInherited && isInitialRender && visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */ typeState.protectedKeys = {\n                ...encounteredKeys\n            };\n            // Check if we can skip analysing this prop early\n            if (// If it isn't active and hasn't *just* been set as inactive\n            !typeState.isActive && activeDelta === null || // If we didn't and don't have any defined prop for this animation type\n            !prop && !typeState.prevProp || // Or if the prop doesn't define an animation\n            (0,_animation_utils_is_animation_controls_mjs__WEBPACK_IMPORTED_MODULE_4__.isAnimationControls)(prop) || typeof prop === \"boolean\") {\n                continue;\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */ const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            let shouldAnimateType = variantDidChange || // If we're making this variant active, we want to always make it active\n            type === changedActiveType && typeState.isActive && !isInherited && propIsVariant || // If we removed a higher-priority variant (i is in reverse order)\n            i > removedVariantIndex && propIsVariant;\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */ const definitionList = Array.isArray(prop) ? prop : [\n                prop\n            ];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */ let resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n            if (activeDelta === false) resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */ const { prevResolvedValues = {} } = typeState;\n            const allKeys = {\n                ...prevResolvedValues,\n                ...resolvedValues\n            };\n            const markToAnimate = (key)=>{\n                shouldAnimateType = true;\n                removedKeys.delete(key);\n                typeState.needsAnimating[key] = true;\n            };\n            for(const key in allKeys){\n                const next = resolvedValues[key];\n                const prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key)) continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */ if (next !== prev) {\n                    /**\n                     * If both values are keyframes, we need to shallow compare them to\n                     * detect whether any value has changed. If it has, we animate it.\n                     */ if ((0,_animation_utils_is_keyframes_target_mjs__WEBPACK_IMPORTED_MODULE_5__.isKeyframesTarget)(next) && (0,_animation_utils_is_keyframes_target_mjs__WEBPACK_IMPORTED_MODULE_5__.isKeyframesTarget)(prev)) {\n                        if (!(0,_utils_shallow_compare_mjs__WEBPACK_IMPORTED_MODULE_6__.shallowCompare)(next, prev) || variantDidChange) {\n                            markToAnimate(key);\n                        } else {\n                            /**\n                             * If it hasn't changed, we want to ensure it doesn't animate by\n                             * adding it to the list of protected keys.\n                             */ typeState.protectedKeys[key] = true;\n                        }\n                    } else if (next !== undefined) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    } else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                } else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */ markToAnimate(key);\n                } else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */ typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */ typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */ if (typeState.isActive) {\n                encounteredKeys = {\n                    ...encounteredKeys,\n                    ...resolvedValues\n                };\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to hard-block animations\n             * TODO: Test as this should probably still handle animations triggered\n             * by removed values?\n             */ if (shouldAnimateType && !isInherited) {\n                animations.push(...definitionList.map((animation)=>({\n                        animation: animation,\n                        options: {\n                            type,\n                            ...options\n                        }\n                    })));\n            }\n        }\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */ if (removedKeys.size) {\n            const fallbackAnimation = {};\n            removedKeys.forEach((key)=>{\n                const fallbackTarget = visualElement.getBaseTarget(key);\n                if (fallbackTarget !== undefined) {\n                    fallbackAnimation[key] = fallbackTarget;\n                }\n            });\n            animations.push({\n                animation: fallbackAnimation\n            });\n        }\n        let shouldAnimate = Boolean(animations.length);\n        if (isInitialRender && (props.initial === false || props.initial === props.animate) && !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */ function setActive(type, isActive, options) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive) return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child)=>{\n            var _a;\n            return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive);\n        });\n        state[type].isActive = isActive;\n        const animations = animateChanges(options, type);\n        for(const key in state){\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        animateChanges,\n        setActive,\n        setAnimateFunction,\n        getState: ()=>state\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    } else if (Array.isArray(next)) {\n        return !(0,_utils_shallow_compare_mjs__WEBPACK_IMPORTED_MODULE_6__.shallowCompare)(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive = false) {\n    return {\n        isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {}\n    };\n}\nfunction createState() {\n    return {\n        animate: createTypeState(true),\n        whileInView: createTypeState(),\n        whileHover: createTypeState(),\n        whileTap: createTypeState(),\n        whileDrag: createTypeState(),\n        whileFocus: createTypeState(),\n        exit: createTypeState()\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/utils/animation-state.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compareByDepth: () => (/* binding */ compareByDepth)\n/* harmony export */ });\nconst compareByDepth = (a, b)=>a.depth - b.depth;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy9jb21wYXJlLWJ5LWRlcHRoLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsaUJBQWlCLENBQUNDLEdBQUdDLElBQU1ELEVBQUVFLEtBQUssR0FBR0QsRUFBRUMsS0FBSztBQUV4QiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvdXRpbHMvY29tcGFyZS1ieS1kZXB0aC5tanM/OTliMyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjb21wYXJlQnlEZXB0aCA9IChhLCBiKSA9PiBhLmRlcHRoIC0gYi5kZXB0aDtcblxuZXhwb3J0IHsgY29tcGFyZUJ5RGVwdGggfTtcbiJdLCJuYW1lcyI6WyJjb21wYXJlQnlEZXB0aCIsImEiLCJiIiwiZGVwdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FlatTree: () => (/* binding */ FlatTree)\n/* harmony export */ });\n/* harmony import */ var _utils_array_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/array.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/array.mjs\");\n/* harmony import */ var _compare_by_depth_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./compare-by-depth.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs\");\n\n\nclass FlatTree {\n    constructor(){\n        this.children = [];\n        this.isDirty = false;\n    }\n    add(child) {\n        (0,_utils_array_mjs__WEBPACK_IMPORTED_MODULE_0__.addUniqueItem)(this.children, child);\n        this.isDirty = true;\n    }\n    remove(child) {\n        (0,_utils_array_mjs__WEBPACK_IMPORTED_MODULE_0__.removeItem)(this.children, child);\n        this.isDirty = true;\n    }\n    forEach(callback) {\n        this.isDirty && this.children.sort(_compare_by_depth_mjs__WEBPACK_IMPORTED_MODULE_1__.compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy9mbGF0LXRyZWUubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFrRTtBQUNWO0FBRXhELE1BQU1HO0lBQ0ZDLGFBQWM7UUFDVixJQUFJLENBQUNDLFFBQVEsR0FBRyxFQUFFO1FBQ2xCLElBQUksQ0FBQ0MsT0FBTyxHQUFHO0lBQ25CO0lBQ0FDLElBQUlDLEtBQUssRUFBRTtRQUNQUiwrREFBYUEsQ0FBQyxJQUFJLENBQUNLLFFBQVEsRUFBRUc7UUFDN0IsSUFBSSxDQUFDRixPQUFPLEdBQUc7SUFDbkI7SUFDQUcsT0FBT0QsS0FBSyxFQUFFO1FBQ1ZQLDREQUFVQSxDQUFDLElBQUksQ0FBQ0ksUUFBUSxFQUFFRztRQUMxQixJQUFJLENBQUNGLE9BQU8sR0FBRztJQUNuQjtJQUNBSSxRQUFRQyxRQUFRLEVBQUU7UUFDZCxJQUFJLENBQUNMLE9BQU8sSUFBSSxJQUFJLENBQUNELFFBQVEsQ0FBQ08sSUFBSSxDQUFDVixpRUFBY0E7UUFDakQsSUFBSSxDQUFDSSxPQUFPLEdBQUc7UUFDZixJQUFJLENBQUNELFFBQVEsQ0FBQ0ssT0FBTyxDQUFDQztJQUMxQjtBQUNKO0FBRW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy9mbGF0LXRyZWUubWpzPzExYzQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYWRkVW5pcXVlSXRlbSwgcmVtb3ZlSXRlbSB9IGZyb20gJy4uLy4uL3V0aWxzL2FycmF5Lm1qcyc7XG5pbXBvcnQgeyBjb21wYXJlQnlEZXB0aCB9IGZyb20gJy4vY29tcGFyZS1ieS1kZXB0aC5tanMnO1xuXG5jbGFzcyBGbGF0VHJlZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgdGhpcy5pc0RpcnR5ID0gZmFsc2U7XG4gICAgfVxuICAgIGFkZChjaGlsZCkge1xuICAgICAgICBhZGRVbmlxdWVJdGVtKHRoaXMuY2hpbGRyZW4sIGNoaWxkKTtcbiAgICAgICAgdGhpcy5pc0RpcnR5ID0gdHJ1ZTtcbiAgICB9XG4gICAgcmVtb3ZlKGNoaWxkKSB7XG4gICAgICAgIHJlbW92ZUl0ZW0odGhpcy5jaGlsZHJlbiwgY2hpbGQpO1xuICAgICAgICB0aGlzLmlzRGlydHkgPSB0cnVlO1xuICAgIH1cbiAgICBmb3JFYWNoKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuaXNEaXJ0eSAmJiB0aGlzLmNoaWxkcmVuLnNvcnQoY29tcGFyZUJ5RGVwdGgpO1xuICAgICAgICB0aGlzLmlzRGlydHkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGNhbGxiYWNrKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IEZsYXRUcmVlIH07XG4iXSwibmFtZXMiOlsiYWRkVW5pcXVlSXRlbSIsInJlbW92ZUl0ZW0iLCJjb21wYXJlQnlEZXB0aCIsIkZsYXRUcmVlIiwiY29uc3RydWN0b3IiLCJjaGlsZHJlbiIsImlzRGlydHkiLCJhZGQiLCJjaGlsZCIsInJlbW92ZSIsImZvckVhY2giLCJjYWxsYmFjayIsInNvcnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs":
/*!*************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isControllingVariants: () => (/* binding */ isControllingVariants),\n/* harmony export */   isVariantNode: () => (/* binding */ isVariantNode)\n/* harmony export */ });\n/* harmony import */ var _animation_utils_is_animation_controls_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../animation/utils/is-animation-controls.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs\");\n/* harmony import */ var _is_variant_label_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./is-variant-label.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs\");\n/* harmony import */ var _variant_props_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./variant-props.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/variant-props.mjs\");\n\n\n\nfunction isControllingVariants(props) {\n    return (0,_animation_utils_is_animation_controls_mjs__WEBPACK_IMPORTED_MODULE_0__.isAnimationControls)(props.animate) || _variant_props_mjs__WEBPACK_IMPORTED_MODULE_1__.variantProps.some((name)=>(0,_is_variant_label_mjs__WEBPACK_IMPORTED_MODULE_2__.isVariantLabel)(props[name]));\n}\nfunction isVariantNode(props) {\n    return Boolean(isControllingVariants(props) || props.variants);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy9pcy1jb250cm9sbGluZy12YXJpYW50cy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBc0Y7QUFDOUI7QUFDTDtBQUVuRCxTQUFTRyxzQkFBc0JDLEtBQUs7SUFDaEMsT0FBUUosK0ZBQW1CQSxDQUFDSSxNQUFNQyxPQUFPLEtBQ3JDSCw0REFBWUEsQ0FBQ0ksSUFBSSxDQUFDLENBQUNDLE9BQVNOLHFFQUFjQSxDQUFDRyxLQUFLLENBQUNHLEtBQUs7QUFDOUQ7QUFDQSxTQUFTQyxjQUFjSixLQUFLO0lBQ3hCLE9BQU9LLFFBQVFOLHNCQUFzQkMsVUFBVUEsTUFBTU0sUUFBUTtBQUNqRTtBQUVnRCIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvdXRpbHMvaXMtY29udHJvbGxpbmctdmFyaWFudHMubWpzP2JjNTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNBbmltYXRpb25Db250cm9scyB9IGZyb20gJy4uLy4uL2FuaW1hdGlvbi91dGlscy9pcy1hbmltYXRpb24tY29udHJvbHMubWpzJztcbmltcG9ydCB7IGlzVmFyaWFudExhYmVsIH0gZnJvbSAnLi9pcy12YXJpYW50LWxhYmVsLm1qcyc7XG5pbXBvcnQgeyB2YXJpYW50UHJvcHMgfSBmcm9tICcuL3ZhcmlhbnQtcHJvcHMubWpzJztcblxuZnVuY3Rpb24gaXNDb250cm9sbGluZ1ZhcmlhbnRzKHByb3BzKSB7XG4gICAgcmV0dXJuIChpc0FuaW1hdGlvbkNvbnRyb2xzKHByb3BzLmFuaW1hdGUpIHx8XG4gICAgICAgIHZhcmlhbnRQcm9wcy5zb21lKChuYW1lKSA9PiBpc1ZhcmlhbnRMYWJlbChwcm9wc1tuYW1lXSkpKTtcbn1cbmZ1bmN0aW9uIGlzVmFyaWFudE5vZGUocHJvcHMpIHtcbiAgICByZXR1cm4gQm9vbGVhbihpc0NvbnRyb2xsaW5nVmFyaWFudHMocHJvcHMpIHx8IHByb3BzLnZhcmlhbnRzKTtcbn1cblxuZXhwb3J0IHsgaXNDb250cm9sbGluZ1ZhcmlhbnRzLCBpc1ZhcmlhbnROb2RlIH07XG4iXSwibmFtZXMiOlsiaXNBbmltYXRpb25Db250cm9scyIsImlzVmFyaWFudExhYmVsIiwidmFyaWFudFByb3BzIiwiaXNDb250cm9sbGluZ1ZhcmlhbnRzIiwicHJvcHMiLCJhbmltYXRlIiwic29tZSIsIm5hbWUiLCJpc1ZhcmlhbnROb2RlIiwiQm9vbGVhbiIsInZhcmlhbnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isVariantLabel: () => (/* binding */ isVariantLabel)\n/* harmony export */ });\n/**\n * Decides if the supplied variable is variant label\n */ function isVariantLabel(v) {\n    return typeof v === \"string\" || Array.isArray(v);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy9pcy12YXJpYW50LWxhYmVsLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0NBRUMsR0FDRCxTQUFTQSxlQUFlQyxDQUFDO0lBQ3JCLE9BQU8sT0FBT0EsTUFBTSxZQUFZQyxNQUFNQyxPQUFPLENBQUNGO0FBQ2xEO0FBRTBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy9pcy12YXJpYW50LWxhYmVsLm1qcz85MDY3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRGVjaWRlcyBpZiB0aGUgc3VwcGxpZWQgdmFyaWFibGUgaXMgdmFyaWFudCBsYWJlbFxuICovXG5mdW5jdGlvbiBpc1ZhcmlhbnRMYWJlbCh2KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2ID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkodik7XG59XG5cbmV4cG9ydCB7IGlzVmFyaWFudExhYmVsIH07XG4iXSwibmFtZXMiOlsiaXNWYXJpYW50TGFiZWwiLCJ2IiwiQXJyYXkiLCJpc0FycmF5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/utils/motion-values.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/utils/motion-values.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   updateMotionValuesFromProps: () => (/* binding */ updateMotionValuesFromProps)\n/* harmony export */ });\n/* harmony import */ var _value_use_will_change_is_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../value/use-will-change/is.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/use-will-change/is.mjs\");\n/* harmony import */ var _utils_warn_once_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/warn-once.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/warn-once.mjs\");\n/* harmony import */ var _value_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../value/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/index.mjs\");\n/* harmony import */ var _value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../value/utils/is-motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs\");\n\n\n\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    const { willChange } = next;\n    for(const key in next){\n        const nextValue = next[key];\n        const prevValue = prev[key];\n        if ((0,_value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_0__.isMotionValue)(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */ element.addValue(key, nextValue);\n            if ((0,_value_use_will_change_is_mjs__WEBPACK_IMPORTED_MODULE_1__.isWillChangeMotionValue)(willChange)) {\n                willChange.add(key);\n            }\n            /**\n             * Check the version of the incoming motion value with this version\n             * and warn against mismatches.\n             */ if (true) {\n                (0,_utils_warn_once_mjs__WEBPACK_IMPORTED_MODULE_2__.warnOnce)(nextValue.version === \"10.16.16\", `Attempting to mix Framer Motion versions ${nextValue.version} with 10.16.16 may not work as expected.`);\n            }\n        } else if ((0,_value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_0__.isMotionValue)(prevValue)) {\n            /**\n             * If we're swapping from a motion value to a static value,\n             * create a new motion value from that\n             */ element.addValue(key, (0,_value_index_mjs__WEBPACK_IMPORTED_MODULE_3__.motionValue)(nextValue, {\n                owner: element\n            }));\n            if ((0,_value_use_will_change_is_mjs__WEBPACK_IMPORTED_MODULE_1__.isWillChangeMotionValue)(willChange)) {\n                willChange.remove(key);\n            }\n        } else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */ if (element.hasValue(key)) {\n                const existingValue = element.getValue(key);\n                // TODO: Only update values that aren't being animated or even looked at\n                !existingValue.hasAnimated && existingValue.set(nextValue);\n            } else {\n                const latestValue = element.getStaticValue(key);\n                element.addValue(key, (0,_value_index_mjs__WEBPACK_IMPORTED_MODULE_3__.motionValue)(latestValue !== undefined ? latestValue : nextValue, {\n                    owner: element\n                }));\n            }\n        }\n    }\n    // Handle removed values\n    for(const key in prev){\n        if (next[key] === undefined) element.removeValue(key);\n    }\n    return next;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy9tb3Rpb24tdmFsdWVzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE2RTtBQUN4QjtBQUNEO0FBQ2tCO0FBRXRFLFNBQVNJLDRCQUE0QkMsT0FBTyxFQUFFQyxJQUFJLEVBQUVDLElBQUk7SUFDcEQsTUFBTSxFQUFFQyxVQUFVLEVBQUUsR0FBR0Y7SUFDdkIsSUFBSyxNQUFNRyxPQUFPSCxLQUFNO1FBQ3BCLE1BQU1JLFlBQVlKLElBQUksQ0FBQ0csSUFBSTtRQUMzQixNQUFNRSxZQUFZSixJQUFJLENBQUNFLElBQUk7UUFDM0IsSUFBSU4sK0VBQWFBLENBQUNPLFlBQVk7WUFDMUI7OzthQUdDLEdBQ0RMLFFBQVFPLFFBQVEsQ0FBQ0gsS0FBS0M7WUFDdEIsSUFBSVYsc0ZBQXVCQSxDQUFDUSxhQUFhO2dCQUNyQ0EsV0FBV0ssR0FBRyxDQUFDSjtZQUNuQjtZQUNBOzs7YUFHQyxHQUNELElBQUlLLElBQXNDLEVBQUU7Z0JBQ3hDYiw4REFBUUEsQ0FBQ1MsVUFBVUssT0FBTyxLQUFLLFlBQVksQ0FBQyx5Q0FBeUMsRUFBRUwsVUFBVUssT0FBTyxDQUFDLHdDQUF3QyxDQUFDO1lBQ3RKO1FBQ0osT0FDSyxJQUFJWiwrRUFBYUEsQ0FBQ1EsWUFBWTtZQUMvQjs7O2FBR0MsR0FDRE4sUUFBUU8sUUFBUSxDQUFDSCxLQUFLUCw2REFBV0EsQ0FBQ1EsV0FBVztnQkFBRU0sT0FBT1g7WUFBUTtZQUM5RCxJQUFJTCxzRkFBdUJBLENBQUNRLGFBQWE7Z0JBQ3JDQSxXQUFXUyxNQUFNLENBQUNSO1lBQ3RCO1FBQ0osT0FDSyxJQUFJRSxjQUFjRCxXQUFXO1lBQzlCOzs7O2FBSUMsR0FDRCxJQUFJTCxRQUFRYSxRQUFRLENBQUNULE1BQU07Z0JBQ3ZCLE1BQU1VLGdCQUFnQmQsUUFBUWUsUUFBUSxDQUFDWDtnQkFDdkMsd0VBQXdFO2dCQUN4RSxDQUFDVSxjQUFjRSxXQUFXLElBQUlGLGNBQWNHLEdBQUcsQ0FBQ1o7WUFDcEQsT0FDSztnQkFDRCxNQUFNYSxjQUFjbEIsUUFBUW1CLGNBQWMsQ0FBQ2Y7Z0JBQzNDSixRQUFRTyxRQUFRLENBQUNILEtBQUtQLDZEQUFXQSxDQUFDcUIsZ0JBQWdCRSxZQUFZRixjQUFjYixXQUFXO29CQUFFTSxPQUFPWDtnQkFBUTtZQUM1RztRQUNKO0lBQ0o7SUFDQSx3QkFBd0I7SUFDeEIsSUFBSyxNQUFNSSxPQUFPRixLQUFNO1FBQ3BCLElBQUlELElBQUksQ0FBQ0csSUFBSSxLQUFLZ0IsV0FDZHBCLFFBQVFxQixXQUFXLENBQUNqQjtJQUM1QjtJQUNBLE9BQU9IO0FBQ1g7QUFFdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3V0aWxzL21vdGlvbi12YWx1ZXMubWpzP2U1N2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNXaWxsQ2hhbmdlTW90aW9uVmFsdWUgfSBmcm9tICcuLi8uLi92YWx1ZS91c2Utd2lsbC1jaGFuZ2UvaXMubWpzJztcbmltcG9ydCB7IHdhcm5PbmNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvd2Fybi1vbmNlLm1qcyc7XG5pbXBvcnQgeyBtb3Rpb25WYWx1ZSB9IGZyb20gJy4uLy4uL3ZhbHVlL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBpc01vdGlvblZhbHVlIH0gZnJvbSAnLi4vLi4vdmFsdWUvdXRpbHMvaXMtbW90aW9uLXZhbHVlLm1qcyc7XG5cbmZ1bmN0aW9uIHVwZGF0ZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyhlbGVtZW50LCBuZXh0LCBwcmV2KSB7XG4gICAgY29uc3QgeyB3aWxsQ2hhbmdlIH0gPSBuZXh0O1xuICAgIGZvciAoY29uc3Qga2V5IGluIG5leHQpIHtcbiAgICAgICAgY29uc3QgbmV4dFZhbHVlID0gbmV4dFtrZXldO1xuICAgICAgICBjb25zdCBwcmV2VmFsdWUgPSBwcmV2W2tleV07XG4gICAgICAgIGlmIChpc01vdGlvblZhbHVlKG5leHRWYWx1ZSkpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhpcyBpcyBhIG1vdGlvbiB2YWx1ZSBmb3VuZCBpbiBwcm9wcyBvciBzdHlsZSwgd2Ugd2FudCB0byBhZGQgaXRcbiAgICAgICAgICAgICAqIHRvIG91ciB2aXN1YWwgZWxlbWVudCdzIG1vdGlvbiB2YWx1ZSBtYXAuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGVsZW1lbnQuYWRkVmFsdWUoa2V5LCBuZXh0VmFsdWUpO1xuICAgICAgICAgICAgaWYgKGlzV2lsbENoYW5nZU1vdGlvblZhbHVlKHdpbGxDaGFuZ2UpKSB7XG4gICAgICAgICAgICAgICAgd2lsbENoYW5nZS5hZGQoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2hlY2sgdGhlIHZlcnNpb24gb2YgdGhlIGluY29taW5nIG1vdGlvbiB2YWx1ZSB3aXRoIHRoaXMgdmVyc2lvblxuICAgICAgICAgICAgICogYW5kIHdhcm4gYWdhaW5zdCBtaXNtYXRjaGVzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwiZGV2ZWxvcG1lbnRcIikge1xuICAgICAgICAgICAgICAgIHdhcm5PbmNlKG5leHRWYWx1ZS52ZXJzaW9uID09PSBcIjEwLjE2LjE2XCIsIGBBdHRlbXB0aW5nIHRvIG1peCBGcmFtZXIgTW90aW9uIHZlcnNpb25zICR7bmV4dFZhbHVlLnZlcnNpb259IHdpdGggMTAuMTYuMTYgbWF5IG5vdCB3b3JrIGFzIGV4cGVjdGVkLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzTW90aW9uVmFsdWUocHJldlZhbHVlKSkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB3ZSdyZSBzd2FwcGluZyBmcm9tIGEgbW90aW9uIHZhbHVlIHRvIGEgc3RhdGljIHZhbHVlLFxuICAgICAgICAgICAgICogY3JlYXRlIGEgbmV3IG1vdGlvbiB2YWx1ZSBmcm9tIHRoYXRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZWxlbWVudC5hZGRWYWx1ZShrZXksIG1vdGlvblZhbHVlKG5leHRWYWx1ZSwgeyBvd25lcjogZWxlbWVudCB9KSk7XG4gICAgICAgICAgICBpZiAoaXNXaWxsQ2hhbmdlTW90aW9uVmFsdWUod2lsbENoYW5nZSkpIHtcbiAgICAgICAgICAgICAgICB3aWxsQ2hhbmdlLnJlbW92ZShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHByZXZWYWx1ZSAhPT0gbmV4dFZhbHVlKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoaXMgaXMgYSBmbGF0IHZhbHVlIHRoYXQgaGFzIGNoYW5nZWQsIHVwZGF0ZSB0aGUgbW90aW9uIHZhbHVlXG4gICAgICAgICAgICAgKiBvciBjcmVhdGUgb25lIGlmIGl0IGRvZXNuJ3QgZXhpc3QuIFdlIG9ubHkgd2FudCB0byBkbyB0aGlzIGlmIHdlJ3JlXG4gICAgICAgICAgICAgKiBub3QgaGFuZGxpbmcgdGhlIHZhbHVlIHdpdGggb3VyIGFuaW1hdGlvbiBzdGF0ZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQuaGFzVmFsdWUoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nVmFsdWUgPSBlbGVtZW50LmdldFZhbHVlKGtleSk7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogT25seSB1cGRhdGUgdmFsdWVzIHRoYXQgYXJlbid0IGJlaW5nIGFuaW1hdGVkIG9yIGV2ZW4gbG9va2VkIGF0XG4gICAgICAgICAgICAgICAgIWV4aXN0aW5nVmFsdWUuaGFzQW5pbWF0ZWQgJiYgZXhpc3RpbmdWYWx1ZS5zZXQobmV4dFZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhdGVzdFZhbHVlID0gZWxlbWVudC5nZXRTdGF0aWNWYWx1ZShrZXkpO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkVmFsdWUoa2V5LCBtb3Rpb25WYWx1ZShsYXRlc3RWYWx1ZSAhPT0gdW5kZWZpbmVkID8gbGF0ZXN0VmFsdWUgOiBuZXh0VmFsdWUsIHsgb3duZXI6IGVsZW1lbnQgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEhhbmRsZSByZW1vdmVkIHZhbHVlc1xuICAgIGZvciAoY29uc3Qga2V5IGluIHByZXYpIHtcbiAgICAgICAgaWYgKG5leHRba2V5XSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVWYWx1ZShrZXkpO1xuICAgIH1cbiAgICByZXR1cm4gbmV4dDtcbn1cblxuZXhwb3J0IHsgdXBkYXRlTW90aW9uVmFsdWVzRnJvbVByb3BzIH07XG4iXSwibmFtZXMiOlsiaXNXaWxsQ2hhbmdlTW90aW9uVmFsdWUiLCJ3YXJuT25jZSIsIm1vdGlvblZhbHVlIiwiaXNNb3Rpb25WYWx1ZSIsInVwZGF0ZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyIsImVsZW1lbnQiLCJuZXh0IiwicHJldiIsIndpbGxDaGFuZ2UiLCJrZXkiLCJuZXh0VmFsdWUiLCJwcmV2VmFsdWUiLCJhZGRWYWx1ZSIsImFkZCIsInByb2Nlc3MiLCJ2ZXJzaW9uIiwib3duZXIiLCJyZW1vdmUiLCJoYXNWYWx1ZSIsImV4aXN0aW5nVmFsdWUiLCJnZXRWYWx1ZSIsImhhc0FuaW1hdGVkIiwic2V0IiwibGF0ZXN0VmFsdWUiLCJnZXRTdGF0aWNWYWx1ZSIsInVuZGVmaW5lZCIsInJlbW92ZVZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/utils/motion-values.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs":
/*!**************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resolveVariant: () => (/* binding */ resolveVariant)\n/* harmony export */ });\n/* harmony import */ var _resolve_variants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./resolve-variants.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs\");\n\n/**\n * Creates an object containing the latest state of every MotionValue on a VisualElement\n */ function getCurrent(visualElement) {\n    const current = {};\n    visualElement.values.forEach((value, key)=>current[key] = value.get());\n    return current;\n}\n/**\n * Creates an object containing the latest velocity of every MotionValue on a VisualElement\n */ function getVelocity(visualElement) {\n    const velocity = {};\n    visualElement.values.forEach((value, key)=>velocity[key] = value.getVelocity());\n    return velocity;\n}\nfunction resolveVariant(visualElement, definition, custom) {\n    const props = visualElement.getProps();\n    return (0,_resolve_variants_mjs__WEBPACK_IMPORTED_MODULE_0__.resolveVariantFromProps)(props, definition, custom !== undefined ? custom : props.custom, getCurrent(visualElement), getVelocity(visualElement));\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy9yZXNvbHZlLWR5bmFtaWMtdmFyaWFudHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWlFO0FBRWpFOztDQUVDLEdBQ0QsU0FBU0MsV0FBV0MsYUFBYTtJQUM3QixNQUFNQyxVQUFVLENBQUM7SUFDakJELGNBQWNFLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDLENBQUNDLE9BQU9DLE1BQVNKLE9BQU8sQ0FBQ0ksSUFBSSxHQUFHRCxNQUFNRSxHQUFHO0lBQ3RFLE9BQU9MO0FBQ1g7QUFDQTs7Q0FFQyxHQUNELFNBQVNNLFlBQVlQLGFBQWE7SUFDOUIsTUFBTVEsV0FBVyxDQUFDO0lBQ2xCUixjQUFjRSxNQUFNLENBQUNDLE9BQU8sQ0FBQyxDQUFDQyxPQUFPQyxNQUFTRyxRQUFRLENBQUNILElBQUksR0FBR0QsTUFBTUcsV0FBVztJQUMvRSxPQUFPQztBQUNYO0FBQ0EsU0FBU0MsZUFBZVQsYUFBYSxFQUFFVSxVQUFVLEVBQUVDLE1BQU07SUFDckQsTUFBTUMsUUFBUVosY0FBY2EsUUFBUTtJQUNwQyxPQUFPZiw4RUFBdUJBLENBQUNjLE9BQU9GLFlBQVlDLFdBQVdHLFlBQVlILFNBQVNDLE1BQU1ELE1BQU0sRUFBRVosV0FBV0MsZ0JBQWdCTyxZQUFZUDtBQUMzSTtBQUUwQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvdXRpbHMvcmVzb2x2ZS1keW5hbWljLXZhcmlhbnRzLm1qcz9mYjA1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlc29sdmVWYXJpYW50RnJvbVByb3BzIH0gZnJvbSAnLi9yZXNvbHZlLXZhcmlhbnRzLm1qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgbGF0ZXN0IHN0YXRlIG9mIGV2ZXJ5IE1vdGlvblZhbHVlIG9uIGEgVmlzdWFsRWxlbWVudFxuICovXG5mdW5jdGlvbiBnZXRDdXJyZW50KHZpc3VhbEVsZW1lbnQpIHtcbiAgICBjb25zdCBjdXJyZW50ID0ge307XG4gICAgdmlzdWFsRWxlbWVudC52YWx1ZXMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4gKGN1cnJlbnRba2V5XSA9IHZhbHVlLmdldCgpKSk7XG4gICAgcmV0dXJuIGN1cnJlbnQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGxhdGVzdCB2ZWxvY2l0eSBvZiBldmVyeSBNb3Rpb25WYWx1ZSBvbiBhIFZpc3VhbEVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0VmVsb2NpdHkodmlzdWFsRWxlbWVudCkge1xuICAgIGNvbnN0IHZlbG9jaXR5ID0ge307XG4gICAgdmlzdWFsRWxlbWVudC52YWx1ZXMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4gKHZlbG9jaXR5W2tleV0gPSB2YWx1ZS5nZXRWZWxvY2l0eSgpKSk7XG4gICAgcmV0dXJuIHZlbG9jaXR5O1xufVxuZnVuY3Rpb24gcmVzb2x2ZVZhcmlhbnQodmlzdWFsRWxlbWVudCwgZGVmaW5pdGlvbiwgY3VzdG9tKSB7XG4gICAgY29uc3QgcHJvcHMgPSB2aXN1YWxFbGVtZW50LmdldFByb3BzKCk7XG4gICAgcmV0dXJuIHJlc29sdmVWYXJpYW50RnJvbVByb3BzKHByb3BzLCBkZWZpbml0aW9uLCBjdXN0b20gIT09IHVuZGVmaW5lZCA/IGN1c3RvbSA6IHByb3BzLmN1c3RvbSwgZ2V0Q3VycmVudCh2aXN1YWxFbGVtZW50KSwgZ2V0VmVsb2NpdHkodmlzdWFsRWxlbWVudCkpO1xufVxuXG5leHBvcnQgeyByZXNvbHZlVmFyaWFudCB9O1xuIl0sIm5hbWVzIjpbInJlc29sdmVWYXJpYW50RnJvbVByb3BzIiwiZ2V0Q3VycmVudCIsInZpc3VhbEVsZW1lbnQiLCJjdXJyZW50IiwidmFsdWVzIiwiZm9yRWFjaCIsInZhbHVlIiwia2V5IiwiZ2V0IiwiZ2V0VmVsb2NpdHkiLCJ2ZWxvY2l0eSIsInJlc29sdmVWYXJpYW50IiwiZGVmaW5pdGlvbiIsImN1c3RvbSIsInByb3BzIiwiZ2V0UHJvcHMiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resolveVariantFromProps: () => (/* binding */ resolveVariantFromProps)\n/* harmony export */ });\nfunction resolveVariantFromProps(props, definition, custom, currentValues = {}, currentVelocity = {}) {\n    /**\n     * If the variant definition is a function, resolve.\n     */ if (typeof definition === \"function\") {\n        definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);\n    }\n    /**\n     * If the variant definition is a variant label, or\n     * the function returned a variant label, resolve.\n     */ if (typeof definition === \"string\") {\n        definition = props.variants && props.variants[definition];\n    }\n    /**\n     * At this point we've resolved both functions and variant labels,\n     * but the resolved variant label might itself have been a function.\n     * If so, resolve. This can only have returned a valid target object.\n     */ if (typeof definition === \"function\") {\n        definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);\n    }\n    return definition;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy9yZXNvbHZlLXZhcmlhbnRzLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsU0FBU0Esd0JBQXdCQyxLQUFLLEVBQUVDLFVBQVUsRUFBRUMsTUFBTSxFQUFFQyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQUVDLGtCQUFrQixDQUFDLENBQUM7SUFDaEc7O0tBRUMsR0FDRCxJQUFJLE9BQU9ILGVBQWUsWUFBWTtRQUNsQ0EsYUFBYUEsV0FBV0MsV0FBV0csWUFBWUgsU0FBU0YsTUFBTUUsTUFBTSxFQUFFQyxlQUFlQztJQUN6RjtJQUNBOzs7S0FHQyxHQUNELElBQUksT0FBT0gsZUFBZSxVQUFVO1FBQ2hDQSxhQUFhRCxNQUFNTSxRQUFRLElBQUlOLE1BQU1NLFFBQVEsQ0FBQ0wsV0FBVztJQUM3RDtJQUNBOzs7O0tBSUMsR0FDRCxJQUFJLE9BQU9BLGVBQWUsWUFBWTtRQUNsQ0EsYUFBYUEsV0FBV0MsV0FBV0csWUFBWUgsU0FBU0YsTUFBTUUsTUFBTSxFQUFFQyxlQUFlQztJQUN6RjtJQUNBLE9BQU9IO0FBQ1g7QUFFbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3V0aWxzL3Jlc29sdmUtdmFyaWFudHMubWpzP2U4YmMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gcmVzb2x2ZVZhcmlhbnRGcm9tUHJvcHMocHJvcHMsIGRlZmluaXRpb24sIGN1c3RvbSwgY3VycmVudFZhbHVlcyA9IHt9LCBjdXJyZW50VmVsb2NpdHkgPSB7fSkge1xuICAgIC8qKlxuICAgICAqIElmIHRoZSB2YXJpYW50IGRlZmluaXRpb24gaXMgYSBmdW5jdGlvbiwgcmVzb2x2ZS5cbiAgICAgKi9cbiAgICBpZiAodHlwZW9mIGRlZmluaXRpb24gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBkZWZpbml0aW9uID0gZGVmaW5pdGlvbihjdXN0b20gIT09IHVuZGVmaW5lZCA/IGN1c3RvbSA6IHByb3BzLmN1c3RvbSwgY3VycmVudFZhbHVlcywgY3VycmVudFZlbG9jaXR5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSWYgdGhlIHZhcmlhbnQgZGVmaW5pdGlvbiBpcyBhIHZhcmlhbnQgbGFiZWwsIG9yXG4gICAgICogdGhlIGZ1bmN0aW9uIHJldHVybmVkIGEgdmFyaWFudCBsYWJlbCwgcmVzb2x2ZS5cbiAgICAgKi9cbiAgICBpZiAodHlwZW9mIGRlZmluaXRpb24gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgZGVmaW5pdGlvbiA9IHByb3BzLnZhcmlhbnRzICYmIHByb3BzLnZhcmlhbnRzW2RlZmluaXRpb25dO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBdCB0aGlzIHBvaW50IHdlJ3ZlIHJlc29sdmVkIGJvdGggZnVuY3Rpb25zIGFuZCB2YXJpYW50IGxhYmVscyxcbiAgICAgKiBidXQgdGhlIHJlc29sdmVkIHZhcmlhbnQgbGFiZWwgbWlnaHQgaXRzZWxmIGhhdmUgYmVlbiBhIGZ1bmN0aW9uLlxuICAgICAqIElmIHNvLCByZXNvbHZlLiBUaGlzIGNhbiBvbmx5IGhhdmUgcmV0dXJuZWQgYSB2YWxpZCB0YXJnZXQgb2JqZWN0LlxuICAgICAqL1xuICAgIGlmICh0eXBlb2YgZGVmaW5pdGlvbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGRlZmluaXRpb24gPSBkZWZpbml0aW9uKGN1c3RvbSAhPT0gdW5kZWZpbmVkID8gY3VzdG9tIDogcHJvcHMuY3VzdG9tLCBjdXJyZW50VmFsdWVzLCBjdXJyZW50VmVsb2NpdHkpO1xuICAgIH1cbiAgICByZXR1cm4gZGVmaW5pdGlvbjtcbn1cblxuZXhwb3J0IHsgcmVzb2x2ZVZhcmlhbnRGcm9tUHJvcHMgfTtcbiJdLCJuYW1lcyI6WyJyZXNvbHZlVmFyaWFudEZyb21Qcm9wcyIsInByb3BzIiwiZGVmaW5pdGlvbiIsImN1c3RvbSIsImN1cnJlbnRWYWx1ZXMiLCJjdXJyZW50VmVsb2NpdHkiLCJ1bmRlZmluZWQiLCJ2YXJpYW50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/utils/setters.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/utils/setters.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkTargetForNewValues: () => (/* binding */ checkTargetForNewValues),\n/* harmony export */   getOrigin: () => (/* binding */ getOrigin),\n/* harmony export */   getOriginFromTransition: () => (/* binding */ getOriginFromTransition),\n/* harmony export */   setTarget: () => (/* binding */ setTarget),\n/* harmony export */   setValues: () => (/* binding */ setValues)\n/* harmony export */ });\n/* harmony import */ var _utils_is_numerical_string_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/is-numerical-string.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs\");\n/* harmony import */ var _utils_is_zero_value_string_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/is-zero-value-string.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs\");\n/* harmony import */ var _utils_resolve_value_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/resolve-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/resolve-value.mjs\");\n/* harmony import */ var _value_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../value/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/index.mjs\");\n/* harmony import */ var _value_types_complex_index_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../value/types/complex/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/complex/index.mjs\");\n/* harmony import */ var _dom_value_types_animatable_none_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../dom/value-types/animatable-none.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs\");\n/* harmony import */ var _dom_value_types_find_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../dom/value-types/find.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs\");\n/* harmony import */ var _resolve_dynamic_variants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resolve-dynamic-variants.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs\");\n\n\n\n\n\n\n\n\n/**\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\n * it doesn't exist.\n */ function setMotionValue(visualElement, key, value) {\n    if (visualElement.hasValue(key)) {\n        visualElement.getValue(key).set(value);\n    } else {\n        visualElement.addValue(key, (0,_value_index_mjs__WEBPACK_IMPORTED_MODULE_0__.motionValue)(value));\n    }\n}\nfunction setTarget(visualElement, definition) {\n    const resolved = (0,_resolve_dynamic_variants_mjs__WEBPACK_IMPORTED_MODULE_1__.resolveVariant)(visualElement, definition);\n    let { transitionEnd = {}, transition = {}, ...target } = resolved ? visualElement.makeTargetAnimatable(resolved, false) : {};\n    target = {\n        ...target,\n        ...transitionEnd\n    };\n    for(const key in target){\n        const value = (0,_utils_resolve_value_mjs__WEBPACK_IMPORTED_MODULE_2__.resolveFinalValueInKeyframes)(target[key]);\n        setMotionValue(visualElement, key, value);\n    }\n}\nfunction setVariants(visualElement, variantLabels) {\n    const reversedLabels = [\n        ...variantLabels\n    ].reverse();\n    reversedLabels.forEach((key)=>{\n        const variant = visualElement.getVariant(key);\n        variant && setTarget(visualElement, variant);\n        if (visualElement.variantChildren) {\n            visualElement.variantChildren.forEach((child)=>{\n                setVariants(child, variantLabels);\n            });\n        }\n    });\n}\nfunction setValues(visualElement, definition) {\n    if (Array.isArray(definition)) {\n        return setVariants(visualElement, definition);\n    } else if (typeof definition === \"string\") {\n        return setVariants(visualElement, [\n            definition\n        ]);\n    } else {\n        setTarget(visualElement, definition);\n    }\n}\nfunction checkTargetForNewValues(visualElement, target, origin) {\n    var _a, _b;\n    const newValueKeys = Object.keys(target).filter((key)=>!visualElement.hasValue(key));\n    const numNewValues = newValueKeys.length;\n    if (!numNewValues) return;\n    for(let i = 0; i < numNewValues; i++){\n        const key = newValueKeys[i];\n        const targetValue = target[key];\n        let value = null;\n        /**\n         * If the target is a series of keyframes, we can use the first value\n         * in the array. If this first value is null, we'll still need to read from the DOM.\n         */ if (Array.isArray(targetValue)) {\n            value = targetValue[0];\n        }\n        /**\n         * If the target isn't keyframes, or the first keyframe was null, we need to\n         * first check if an origin value was explicitly defined in the transition as \"from\",\n         * if not read the value from the DOM. As an absolute fallback, take the defined target value.\n         */ if (value === null) {\n            value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement.readValue(key)) !== null && _b !== void 0 ? _b : target[key];\n        }\n        /**\n         * If value is still undefined or null, ignore it. Preferably this would throw,\n         * but this was causing issues in Framer.\n         */ if (value === undefined || value === null) continue;\n        if (typeof value === \"string\" && ((0,_utils_is_numerical_string_mjs__WEBPACK_IMPORTED_MODULE_3__.isNumericalString)(value) || (0,_utils_is_zero_value_string_mjs__WEBPACK_IMPORTED_MODULE_4__.isZeroValueString)(value))) {\n            // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n            value = parseFloat(value);\n        } else if (!(0,_dom_value_types_find_mjs__WEBPACK_IMPORTED_MODULE_5__.findValueType)(value) && _value_types_complex_index_mjs__WEBPACK_IMPORTED_MODULE_6__.complex.test(targetValue)) {\n            value = (0,_dom_value_types_animatable_none_mjs__WEBPACK_IMPORTED_MODULE_7__.getAnimatableNone)(key, targetValue);\n        }\n        visualElement.addValue(key, (0,_value_index_mjs__WEBPACK_IMPORTED_MODULE_0__.motionValue)(value, {\n            owner: visualElement\n        }));\n        if (origin[key] === undefined) {\n            origin[key] = value;\n        }\n        if (value !== null) visualElement.setBaseTarget(key, value);\n    }\n}\nfunction getOriginFromTransition(key, transition) {\n    if (!transition) return;\n    const valueTransition = transition[key] || transition[\"default\"] || transition;\n    return valueTransition.from;\n}\nfunction getOrigin(target, transition, visualElement) {\n    const origin = {};\n    for(const key in target){\n        const transitionOrigin = getOriginFromTransition(key, transition);\n        if (transitionOrigin !== undefined) {\n            origin[key] = transitionOrigin;\n        } else {\n            const value = visualElement.getValue(key);\n            if (value) {\n                origin[key] = value.get();\n            }\n        }\n    }\n    return origin;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/utils/setters.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/utils/variant-props.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/utils/variant-props.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   variantPriorityOrder: () => (/* binding */ variantPriorityOrder),\n/* harmony export */   variantProps: () => (/* binding */ variantProps)\n/* harmony export */ });\nconst variantPriorityOrder = [\n    \"animate\",\n    \"whileInView\",\n    \"whileFocus\",\n    \"whileHover\",\n    \"whileTap\",\n    \"whileDrag\",\n    \"exit\"\n];\nconst variantProps = [\n    \"initial\",\n    ...variantPriorityOrder\n];\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy92YXJpYW50LXByb3BzLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLE1BQU1BLHVCQUF1QjtJQUN6QjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNIO0FBQ0QsTUFBTUMsZUFBZTtJQUFDO09BQWNEO0NBQXFCO0FBRVgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3V0aWxzL3ZhcmlhbnQtcHJvcHMubWpzPzdmNTgiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdmFyaWFudFByaW9yaXR5T3JkZXIgPSBbXG4gICAgXCJhbmltYXRlXCIsXG4gICAgXCJ3aGlsZUluVmlld1wiLFxuICAgIFwid2hpbGVGb2N1c1wiLFxuICAgIFwid2hpbGVIb3ZlclwiLFxuICAgIFwid2hpbGVUYXBcIixcbiAgICBcIndoaWxlRHJhZ1wiLFxuICAgIFwiZXhpdFwiLFxuXTtcbmNvbnN0IHZhcmlhbnRQcm9wcyA9IFtcImluaXRpYWxcIiwgLi4udmFyaWFudFByaW9yaXR5T3JkZXJdO1xuXG5leHBvcnQgeyB2YXJpYW50UHJpb3JpdHlPcmRlciwgdmFyaWFudFByb3BzIH07XG4iXSwibmFtZXMiOlsidmFyaWFudFByaW9yaXR5T3JkZXIiLCJ2YXJpYW50UHJvcHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/utils/variant-props.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/array.mjs":
/*!************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/array.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addUniqueItem: () => (/* binding */ addUniqueItem),\n/* harmony export */   moveItem: () => (/* binding */ moveItem),\n/* harmony export */   removeItem: () => (/* binding */ removeItem)\n/* harmony export */ });\nfunction addUniqueItem(arr, item) {\n    if (arr.indexOf(item) === -1) arr.push(item);\n}\nfunction removeItem(arr, item) {\n    const index = arr.indexOf(item);\n    if (index > -1) arr.splice(index, 1);\n}\n// Adapted from array-move\nfunction moveItem([...arr], fromIndex, toIndex) {\n    const startIndex = fromIndex < 0 ? arr.length + fromIndex : fromIndex;\n    if (startIndex >= 0 && startIndex < arr.length) {\n        const endIndex = toIndex < 0 ? arr.length + toIndex : toIndex;\n        const [item] = arr.splice(fromIndex, 1);\n        arr.splice(endIndex, 0, item);\n    }\n    return arr;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2FycmF5Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxTQUFTQSxjQUFjQyxHQUFHLEVBQUVDLElBQUk7SUFDNUIsSUFBSUQsSUFBSUUsT0FBTyxDQUFDRCxVQUFVLENBQUMsR0FDdkJELElBQUlHLElBQUksQ0FBQ0Y7QUFDakI7QUFDQSxTQUFTRyxXQUFXSixHQUFHLEVBQUVDLElBQUk7SUFDekIsTUFBTUksUUFBUUwsSUFBSUUsT0FBTyxDQUFDRDtJQUMxQixJQUFJSSxRQUFRLENBQUMsR0FDVEwsSUFBSU0sTUFBTSxDQUFDRCxPQUFPO0FBQzFCO0FBQ0EsMEJBQTBCO0FBQzFCLFNBQVNFLFNBQVMsQ0FBQyxHQUFHUCxJQUFJLEVBQUVRLFNBQVMsRUFBRUMsT0FBTztJQUMxQyxNQUFNQyxhQUFhRixZQUFZLElBQUlSLElBQUlXLE1BQU0sR0FBR0gsWUFBWUE7SUFDNUQsSUFBSUUsY0FBYyxLQUFLQSxhQUFhVixJQUFJVyxNQUFNLEVBQUU7UUFDNUMsTUFBTUMsV0FBV0gsVUFBVSxJQUFJVCxJQUFJVyxNQUFNLEdBQUdGLFVBQVVBO1FBQ3RELE1BQU0sQ0FBQ1IsS0FBSyxHQUFHRCxJQUFJTSxNQUFNLENBQUNFLFdBQVc7UUFDckNSLElBQUlNLE1BQU0sQ0FBQ00sVUFBVSxHQUFHWDtJQUM1QjtJQUNBLE9BQU9EO0FBQ1g7QUFFK0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvYXJyYXkubWpzP2I1NDQiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gYWRkVW5pcXVlSXRlbShhcnIsIGl0ZW0pIHtcbiAgICBpZiAoYXJyLmluZGV4T2YoaXRlbSkgPT09IC0xKVxuICAgICAgICBhcnIucHVzaChpdGVtKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZUl0ZW0oYXJyLCBpdGVtKSB7XG4gICAgY29uc3QgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICBpZiAoaW5kZXggPiAtMSlcbiAgICAgICAgYXJyLnNwbGljZShpbmRleCwgMSk7XG59XG4vLyBBZGFwdGVkIGZyb20gYXJyYXktbW92ZVxuZnVuY3Rpb24gbW92ZUl0ZW0oWy4uLmFycl0sIGZyb21JbmRleCwgdG9JbmRleCkge1xuICAgIGNvbnN0IHN0YXJ0SW5kZXggPSBmcm9tSW5kZXggPCAwID8gYXJyLmxlbmd0aCArIGZyb21JbmRleCA6IGZyb21JbmRleDtcbiAgICBpZiAoc3RhcnRJbmRleCA+PSAwICYmIHN0YXJ0SW5kZXggPCBhcnIubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGVuZEluZGV4ID0gdG9JbmRleCA8IDAgPyBhcnIubGVuZ3RoICsgdG9JbmRleCA6IHRvSW5kZXg7XG4gICAgICAgIGNvbnN0IFtpdGVtXSA9IGFyci5zcGxpY2UoZnJvbUluZGV4LCAxKTtcbiAgICAgICAgYXJyLnNwbGljZShlbmRJbmRleCwgMCwgaXRlbSk7XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG59XG5cbmV4cG9ydCB7IGFkZFVuaXF1ZUl0ZW0sIG1vdmVJdGVtLCByZW1vdmVJdGVtIH07XG4iXSwibmFtZXMiOlsiYWRkVW5pcXVlSXRlbSIsImFyciIsIml0ZW0iLCJpbmRleE9mIiwicHVzaCIsInJlbW92ZUl0ZW0iLCJpbmRleCIsInNwbGljZSIsIm1vdmVJdGVtIiwiZnJvbUluZGV4IiwidG9JbmRleCIsInN0YXJ0SW5kZXgiLCJsZW5ndGgiLCJlbmRJbmRleCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/array.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/clamp.mjs":
/*!************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/clamp.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clamp: () => (/* binding */ clamp)\n/* harmony export */ });\nconst clamp = (min, max, v)=>Math.min(Math.max(v, min), max);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2NsYW1wLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsUUFBUSxDQUFDQyxLQUFLQyxLQUFLQyxJQUFNQyxLQUFLSCxHQUFHLENBQUNHLEtBQUtGLEdBQUcsQ0FBQ0MsR0FBR0YsTUFBTUM7QUFFekMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvY2xhbXAubWpzPzY3ZWMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY2xhbXAgPSAobWluLCBtYXgsIHYpID0+IE1hdGgubWluKE1hdGgubWF4KHYsIG1pbiksIG1heCk7XG5cbmV4cG9ydCB7IGNsYW1wIH07XG4iXSwibmFtZXMiOlsiY2xhbXAiLCJtaW4iLCJtYXgiLCJ2IiwiTWF0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/clamp.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/delay.mjs":
/*!************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/delay.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   delay: () => (/* binding */ delay)\n/* harmony export */ });\n/* harmony import */ var _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../frameloop/frame.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/frameloop/frame.mjs\");\n\n/**\n * Timeout defined in ms\n */ function delay(callback, timeout) {\n    const start = performance.now();\n    const checkElapsed = ({ timestamp })=>{\n        const elapsed = timestamp - start;\n        if (elapsed >= timeout) {\n            (0,_frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_0__.cancelFrame)(checkElapsed);\n            callback(elapsed - timeout);\n        }\n    };\n    _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_0__.frame.read(checkElapsed, true);\n    return ()=>(0,_frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_0__.cancelFrame)(checkElapsed);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2RlbGF5Lm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE0RDtBQUU1RDs7Q0FFQyxHQUNELFNBQVNFLE1BQU1DLFFBQVEsRUFBRUMsT0FBTztJQUM1QixNQUFNQyxRQUFRQyxZQUFZQyxHQUFHO0lBQzdCLE1BQU1DLGVBQWUsQ0FBQyxFQUFFQyxTQUFTLEVBQUU7UUFDL0IsTUFBTUMsVUFBVUQsWUFBWUo7UUFDNUIsSUFBSUssV0FBV04sU0FBUztZQUNwQkgsaUVBQVdBLENBQUNPO1lBQ1pMLFNBQVNPLFVBQVVOO1FBQ3ZCO0lBQ0o7SUFDQUosdURBQUtBLENBQUNXLElBQUksQ0FBQ0gsY0FBYztJQUN6QixPQUFPLElBQU1QLGlFQUFXQSxDQUFDTztBQUM3QjtBQUVpQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9kZWxheS5tanM/M2MxMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmcmFtZSwgY2FuY2VsRnJhbWUgfSBmcm9tICcuLi9mcmFtZWxvb3AvZnJhbWUubWpzJztcblxuLyoqXG4gKiBUaW1lb3V0IGRlZmluZWQgaW4gbXNcbiAqL1xuZnVuY3Rpb24gZGVsYXkoY2FsbGJhY2ssIHRpbWVvdXQpIHtcbiAgICBjb25zdCBzdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIGNvbnN0IGNoZWNrRWxhcHNlZCA9ICh7IHRpbWVzdGFtcCB9KSA9PiB7XG4gICAgICAgIGNvbnN0IGVsYXBzZWQgPSB0aW1lc3RhbXAgLSBzdGFydDtcbiAgICAgICAgaWYgKGVsYXBzZWQgPj0gdGltZW91dCkge1xuICAgICAgICAgICAgY2FuY2VsRnJhbWUoY2hlY2tFbGFwc2VkKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVsYXBzZWQgLSB0aW1lb3V0KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgZnJhbWUucmVhZChjaGVja0VsYXBzZWQsIHRydWUpO1xuICAgIHJldHVybiAoKSA9PiBjYW5jZWxGcmFtZShjaGVja0VsYXBzZWQpO1xufVxuXG5leHBvcnQgeyBkZWxheSB9O1xuIl0sIm5hbWVzIjpbImZyYW1lIiwiY2FuY2VsRnJhbWUiLCJkZWxheSIsImNhbGxiYWNrIiwidGltZW91dCIsInN0YXJ0IiwicGVyZm9ybWFuY2UiLCJub3ciLCJjaGVja0VsYXBzZWQiLCJ0aW1lc3RhbXAiLCJlbGFwc2VkIiwicmVhZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/delay.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/distance.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/distance.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   distance: () => (/* binding */ distance),\n/* harmony export */   distance2D: () => (/* binding */ distance2D)\n/* harmony export */ });\nconst distance = (a, b)=>Math.abs(a - b);\nfunction distance2D(a, b) {\n    // Multi-dimensional\n    const xDelta = distance(a.x, b.x);\n    const yDelta = distance(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2Rpc3RhbmNlLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLE1BQU1BLFdBQVcsQ0FBQ0MsR0FBR0MsSUFBTUMsS0FBS0MsR0FBRyxDQUFDSCxJQUFJQztBQUN4QyxTQUFTRyxXQUFXSixDQUFDLEVBQUVDLENBQUM7SUFDcEIsb0JBQW9CO0lBQ3BCLE1BQU1JLFNBQVNOLFNBQVNDLEVBQUVNLENBQUMsRUFBRUwsRUFBRUssQ0FBQztJQUNoQyxNQUFNQyxTQUFTUixTQUFTQyxFQUFFUSxDQUFDLEVBQUVQLEVBQUVPLENBQUM7SUFDaEMsT0FBT04sS0FBS08sSUFBSSxDQUFDSixVQUFVLElBQUlFLFVBQVU7QUFDN0M7QUFFZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvZGlzdGFuY2UubWpzP2MzZjgiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZGlzdGFuY2UgPSAoYSwgYikgPT4gTWF0aC5hYnMoYSAtIGIpO1xuZnVuY3Rpb24gZGlzdGFuY2UyRChhLCBiKSB7XG4gICAgLy8gTXVsdGktZGltZW5zaW9uYWxcbiAgICBjb25zdCB4RGVsdGEgPSBkaXN0YW5jZShhLngsIGIueCk7XG4gICAgY29uc3QgeURlbHRhID0gZGlzdGFuY2UoYS55LCBiLnkpO1xuICAgIHJldHVybiBNYXRoLnNxcnQoeERlbHRhICoqIDIgKyB5RGVsdGEgKiogMik7XG59XG5cbmV4cG9ydCB7IGRpc3RhbmNlLCBkaXN0YW5jZTJEIH07XG4iXSwibmFtZXMiOlsiZGlzdGFuY2UiLCJhIiwiYiIsIk1hdGgiLCJhYnMiLCJkaXN0YW5jZTJEIiwieERlbHRhIiwieCIsInlEZWx0YSIsInkiLCJzcXJ0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/distance.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/errors.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/errors.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   invariant: () => (/* binding */ invariant),\n/* harmony export */   warning: () => (/* binding */ warning)\n/* harmony export */ });\n/* harmony import */ var _noop_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./noop.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/noop.mjs\");\n\nlet warning = _noop_mjs__WEBPACK_IMPORTED_MODULE_0__.noop;\nlet invariant = _noop_mjs__WEBPACK_IMPORTED_MODULE_0__.noop;\nif (true) {\n    warning = (check, message)=>{\n        if (!check && typeof console !== \"undefined\") {\n            console.warn(message);\n        }\n    };\n    invariant = (check, message)=>{\n        if (!check) {\n            throw new Error(message);\n        }\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2Vycm9ycy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWtDO0FBRWxDLElBQUlDLFVBQVVELDJDQUFJQTtBQUNsQixJQUFJRSxZQUFZRiwyQ0FBSUE7QUFDcEIsSUFBSUcsSUFBcUMsRUFBRTtJQUN2Q0YsVUFBVSxDQUFDRyxPQUFPQztRQUNkLElBQUksQ0FBQ0QsU0FBUyxPQUFPRSxZQUFZLGFBQWE7WUFDMUNBLFFBQVFDLElBQUksQ0FBQ0Y7UUFDakI7SUFDSjtJQUNBSCxZQUFZLENBQUNFLE9BQU9DO1FBQ2hCLElBQUksQ0FBQ0QsT0FBTztZQUNSLE1BQU0sSUFBSUksTUFBTUg7UUFDcEI7SUFDSjtBQUNKO0FBRThCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2Vycm9ycy5tanM/ODNkMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBub29wIH0gZnJvbSAnLi9ub29wLm1qcyc7XG5cbmxldCB3YXJuaW5nID0gbm9vcDtcbmxldCBpbnZhcmlhbnQgPSBub29wO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHdhcm5pbmcgPSAoY2hlY2ssIG1lc3NhZ2UpID0+IHtcbiAgICAgICAgaWYgKCFjaGVjayAmJiB0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBpbnZhcmlhbnQgPSAoY2hlY2ssIG1lc3NhZ2UpID0+IHtcbiAgICAgICAgaWYgKCFjaGVjaykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZXhwb3J0IHsgaW52YXJpYW50LCB3YXJuaW5nIH07XG4iXSwibmFtZXMiOlsibm9vcCIsIndhcm5pbmciLCJpbnZhcmlhbnQiLCJwcm9jZXNzIiwiY2hlY2siLCJtZXNzYWdlIiwiY29uc29sZSIsIndhcm4iLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/errors.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/get-context-window.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/get-context-window.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getContextWindow: () => (/* binding */ getContextWindow)\n/* harmony export */ });\n// Fixes https://github.com/framer/motion/issues/2270\nconst getContextWindow = ({ current })=>{\n    return current ? current.ownerDocument.defaultView : null;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2dldC1jb250ZXh0LXdpbmRvdy5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHFEQUFxRDtBQUNyRCxNQUFNQSxtQkFBbUIsQ0FBQyxFQUFFQyxPQUFPLEVBQUU7SUFDakMsT0FBT0EsVUFBVUEsUUFBUUMsYUFBYSxDQUFDQyxXQUFXLEdBQUc7QUFDekQ7QUFFNEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvZ2V0LWNvbnRleHQtd2luZG93Lm1qcz8yYjM3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpeGVzIGh0dHBzOi8vZ2l0aHViLmNvbS9mcmFtZXIvbW90aW9uL2lzc3Vlcy8yMjcwXG5jb25zdCBnZXRDb250ZXh0V2luZG93ID0gKHsgY3VycmVudCB9KSA9PiB7XG4gICAgcmV0dXJuIGN1cnJlbnQgPyBjdXJyZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgOiBudWxsO1xufTtcblxuZXhwb3J0IHsgZ2V0Q29udGV4dFdpbmRvdyB9O1xuIl0sIm5hbWVzIjpbImdldENvbnRleHRXaW5kb3ciLCJjdXJyZW50Iiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/get-context-window.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/hsla-to-rgba.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/hsla-to-rgba.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hslaToRgba: () => (/* binding */ hslaToRgba)\n/* harmony export */ });\n// Adapted from https://gist.github.com/mjackson/5311256\nfunction hueToRgb(p, q, t) {\n    if (t < 0) t += 1;\n    if (t > 1) t -= 1;\n    if (t < 1 / 6) return p + (q - p) * 6 * t;\n    if (t < 1 / 2) return q;\n    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n}\nfunction hslaToRgba({ hue, saturation, lightness, alpha }) {\n    hue /= 360;\n    saturation /= 100;\n    lightness /= 100;\n    let red = 0;\n    let green = 0;\n    let blue = 0;\n    if (!saturation) {\n        red = green = blue = lightness;\n    } else {\n        const q = lightness < 0.5 ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation;\n        const p = 2 * lightness - q;\n        red = hueToRgb(p, q, hue + 1 / 3);\n        green = hueToRgb(p, q, hue);\n        blue = hueToRgb(p, q, hue - 1 / 3);\n    }\n    return {\n        red: Math.round(red * 255),\n        green: Math.round(green * 255),\n        blue: Math.round(blue * 255),\n        alpha\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2hzbGEtdG8tcmdiYS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHdEQUF3RDtBQUN4RCxTQUFTQSxTQUFTQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQztJQUNyQixJQUFJQSxJQUFJLEdBQ0pBLEtBQUs7SUFDVCxJQUFJQSxJQUFJLEdBQ0pBLEtBQUs7SUFDVCxJQUFJQSxJQUFJLElBQUksR0FDUixPQUFPRixJQUFJLENBQUNDLElBQUlELENBQUFBLElBQUssSUFBSUU7SUFDN0IsSUFBSUEsSUFBSSxJQUFJLEdBQ1IsT0FBT0Q7SUFDWCxJQUFJQyxJQUFJLElBQUksR0FDUixPQUFPRixJQUFJLENBQUNDLElBQUlELENBQUFBLElBQU0sS0FBSSxJQUFJRSxDQUFBQSxJQUFLO0lBQ3ZDLE9BQU9GO0FBQ1g7QUFDQSxTQUFTRyxXQUFXLEVBQUVDLEdBQUcsRUFBRUMsVUFBVSxFQUFFQyxTQUFTLEVBQUVDLEtBQUssRUFBRTtJQUNyREgsT0FBTztJQUNQQyxjQUFjO0lBQ2RDLGFBQWE7SUFDYixJQUFJRSxNQUFNO0lBQ1YsSUFBSUMsUUFBUTtJQUNaLElBQUlDLE9BQU87SUFDWCxJQUFJLENBQUNMLFlBQVk7UUFDYkcsTUFBTUMsUUFBUUMsT0FBT0o7SUFDekIsT0FDSztRQUNELE1BQU1MLElBQUlLLFlBQVksTUFDaEJBLFlBQWEsS0FBSUQsVUFBUyxJQUMxQkMsWUFBWUQsYUFBYUMsWUFBWUQ7UUFDM0MsTUFBTUwsSUFBSSxJQUFJTSxZQUFZTDtRQUMxQk8sTUFBTVQsU0FBU0MsR0FBR0MsR0FBR0csTUFBTSxJQUFJO1FBQy9CSyxRQUFRVixTQUFTQyxHQUFHQyxHQUFHRztRQUN2Qk0sT0FBT1gsU0FBU0MsR0FBR0MsR0FBR0csTUFBTSxJQUFJO0lBQ3BDO0lBQ0EsT0FBTztRQUNISSxLQUFLRyxLQUFLQyxLQUFLLENBQUNKLE1BQU07UUFDdEJDLE9BQU9FLEtBQUtDLEtBQUssQ0FBQ0gsUUFBUTtRQUMxQkMsTUFBTUMsS0FBS0MsS0FBSyxDQUFDRixPQUFPO1FBQ3hCSDtJQUNKO0FBQ0o7QUFFc0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvaHNsYS10by1yZ2JhLm1qcz83MDU5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEFkYXB0ZWQgZnJvbSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9tamFja3Nvbi81MzExMjU2XG5mdW5jdGlvbiBodWVUb1JnYihwLCBxLCB0KSB7XG4gICAgaWYgKHQgPCAwKVxuICAgICAgICB0ICs9IDE7XG4gICAgaWYgKHQgPiAxKVxuICAgICAgICB0IC09IDE7XG4gICAgaWYgKHQgPCAxIC8gNilcbiAgICAgICAgcmV0dXJuIHAgKyAocSAtIHApICogNiAqIHQ7XG4gICAgaWYgKHQgPCAxIC8gMilcbiAgICAgICAgcmV0dXJuIHE7XG4gICAgaWYgKHQgPCAyIC8gMylcbiAgICAgICAgcmV0dXJuIHAgKyAocSAtIHApICogKDIgLyAzIC0gdCkgKiA2O1xuICAgIHJldHVybiBwO1xufVxuZnVuY3Rpb24gaHNsYVRvUmdiYSh7IGh1ZSwgc2F0dXJhdGlvbiwgbGlnaHRuZXNzLCBhbHBoYSB9KSB7XG4gICAgaHVlIC89IDM2MDtcbiAgICBzYXR1cmF0aW9uIC89IDEwMDtcbiAgICBsaWdodG5lc3MgLz0gMTAwO1xuICAgIGxldCByZWQgPSAwO1xuICAgIGxldCBncmVlbiA9IDA7XG4gICAgbGV0IGJsdWUgPSAwO1xuICAgIGlmICghc2F0dXJhdGlvbikge1xuICAgICAgICByZWQgPSBncmVlbiA9IGJsdWUgPSBsaWdodG5lc3M7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBxID0gbGlnaHRuZXNzIDwgMC41XG4gICAgICAgICAgICA/IGxpZ2h0bmVzcyAqICgxICsgc2F0dXJhdGlvbilcbiAgICAgICAgICAgIDogbGlnaHRuZXNzICsgc2F0dXJhdGlvbiAtIGxpZ2h0bmVzcyAqIHNhdHVyYXRpb247XG4gICAgICAgIGNvbnN0IHAgPSAyICogbGlnaHRuZXNzIC0gcTtcbiAgICAgICAgcmVkID0gaHVlVG9SZ2IocCwgcSwgaHVlICsgMSAvIDMpO1xuICAgICAgICBncmVlbiA9IGh1ZVRvUmdiKHAsIHEsIGh1ZSk7XG4gICAgICAgIGJsdWUgPSBodWVUb1JnYihwLCBxLCBodWUgLSAxIC8gMyk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHJlZDogTWF0aC5yb3VuZChyZWQgKiAyNTUpLFxuICAgICAgICBncmVlbjogTWF0aC5yb3VuZChncmVlbiAqIDI1NSksXG4gICAgICAgIGJsdWU6IE1hdGgucm91bmQoYmx1ZSAqIDI1NSksXG4gICAgICAgIGFscGhhLFxuICAgIH07XG59XG5cbmV4cG9ydCB7IGhzbGFUb1JnYmEgfTtcbiJdLCJuYW1lcyI6WyJodWVUb1JnYiIsInAiLCJxIiwidCIsImhzbGFUb1JnYmEiLCJodWUiLCJzYXR1cmF0aW9uIiwibGlnaHRuZXNzIiwiYWxwaGEiLCJyZWQiLCJncmVlbiIsImJsdWUiLCJNYXRoIiwicm91bmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/hsla-to-rgba.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/interpolate.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/interpolate.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   interpolate: () => (/* binding */ interpolate)\n/* harmony export */ });\n/* harmony import */ var _errors_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./errors.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/errors.mjs\");\n/* harmony import */ var _value_types_color_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../value/types/color/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/color/index.mjs\");\n/* harmony import */ var _clamp_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./clamp.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/clamp.mjs\");\n/* harmony import */ var _mix_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mix.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/mix.mjs\");\n/* harmony import */ var _mix_color_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mix-color.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/mix-color.mjs\");\n/* harmony import */ var _mix_complex_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mix-complex.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/mix-complex.mjs\");\n/* harmony import */ var _pipe_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./pipe.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/pipe.mjs\");\n/* harmony import */ var _progress_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./progress.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/progress.mjs\");\n/* harmony import */ var _noop_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./noop.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/noop.mjs\");\n\n\n\n\n\n\n\n\n\nconst mixNumber = (from, to)=>(p)=>(0,_mix_mjs__WEBPACK_IMPORTED_MODULE_0__.mix)(from, to, p);\nfunction detectMixerFactory(v) {\n    if (typeof v === \"number\") {\n        return mixNumber;\n    } else if (typeof v === \"string\") {\n        return _value_types_color_index_mjs__WEBPACK_IMPORTED_MODULE_1__.color.test(v) ? _mix_color_mjs__WEBPACK_IMPORTED_MODULE_2__.mixColor : _mix_complex_mjs__WEBPACK_IMPORTED_MODULE_3__.mixComplex;\n    } else if (Array.isArray(v)) {\n        return _mix_complex_mjs__WEBPACK_IMPORTED_MODULE_3__.mixArray;\n    } else if (typeof v === \"object\") {\n        return _mix_complex_mjs__WEBPACK_IMPORTED_MODULE_3__.mixObject;\n    }\n    return mixNumber;\n}\nfunction createMixers(output, ease, customMixer) {\n    const mixers = [];\n    const mixerFactory = customMixer || detectMixerFactory(output[0]);\n    const numMixers = output.length - 1;\n    for(let i = 0; i < numMixers; i++){\n        let mixer = mixerFactory(output[i], output[i + 1]);\n        if (ease) {\n            const easingFunction = Array.isArray(ease) ? ease[i] || _noop_mjs__WEBPACK_IMPORTED_MODULE_4__.noop : ease;\n            mixer = (0,_pipe_mjs__WEBPACK_IMPORTED_MODULE_5__.pipe)(easingFunction, mixer);\n        }\n        mixers.push(mixer);\n    }\n    return mixers;\n}\n/**\n * Create a function that maps from a numerical input array to a generic output array.\n *\n * Accepts:\n *   - Numbers\n *   - Colors (hex, hsl, hsla, rgb, rgba)\n *   - Complex (combinations of one or more numbers or strings)\n *\n * ```jsx\n * const mixColor = interpolate([0, 1], ['#fff', '#000'])\n *\n * mixColor(0.5) // 'rgba(128, 128, 128, 1)'\n * ```\n *\n * TODO Revist this approach once we've moved to data models for values,\n * probably not needed to pregenerate mixer functions.\n *\n * @public\n */ function interpolate(input, output, { clamp: isClamp = true, ease, mixer } = {}) {\n    const inputLength = input.length;\n    (0,_errors_mjs__WEBPACK_IMPORTED_MODULE_6__.invariant)(inputLength === output.length, \"Both input and output ranges must be the same length\");\n    /**\n     * If we're only provided a single input, we can just make a function\n     * that returns the output.\n     */ if (inputLength === 1) return ()=>output[0];\n    // If input runs highest -> lowest, reverse both arrays\n    if (input[0] > input[inputLength - 1]) {\n        input = [\n            ...input\n        ].reverse();\n        output = [\n            ...output\n        ].reverse();\n    }\n    const mixers = createMixers(output, ease, mixer);\n    const numMixers = mixers.length;\n    const interpolator = (v)=>{\n        let i = 0;\n        if (numMixers > 1) {\n            for(; i < input.length - 2; i++){\n                if (v < input[i + 1]) break;\n            }\n        }\n        const progressInRange = (0,_progress_mjs__WEBPACK_IMPORTED_MODULE_7__.progress)(input[i], input[i + 1], v);\n        return mixers[i](progressInRange);\n    };\n    return isClamp ? (v)=>interpolator((0,_clamp_mjs__WEBPACK_IMPORTED_MODULE_8__.clamp)(input[0], input[inputLength - 1], v)) : interpolator;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2ludGVycG9sYXRlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQXlDO0FBQ2M7QUFDbkI7QUFDSjtBQUNXO0FBQ3lCO0FBQ2xDO0FBQ1E7QUFDUjtBQUVsQyxNQUFNVyxZQUFZLENBQUNDLE1BQU1DLEtBQU8sQ0FBQ0MsSUFBTVgsNkNBQUdBLENBQUNTLE1BQU1DLElBQUlDO0FBQ3JELFNBQVNDLG1CQUFtQkMsQ0FBQztJQUN6QixJQUFJLE9BQU9BLE1BQU0sVUFBVTtRQUN2QixPQUFPTDtJQUNYLE9BQ0ssSUFBSSxPQUFPSyxNQUFNLFVBQVU7UUFDNUIsT0FBT2YsK0RBQUtBLENBQUNnQixJQUFJLENBQUNELEtBQUtaLG9EQUFRQSxHQUFHQyx3REFBVUE7SUFDaEQsT0FDSyxJQUFJYSxNQUFNQyxPQUFPLENBQUNILElBQUk7UUFDdkIsT0FBT1Ysc0RBQVFBO0lBQ25CLE9BQ0ssSUFBSSxPQUFPVSxNQUFNLFVBQVU7UUFDNUIsT0FBT1QsdURBQVNBO0lBQ3BCO0lBQ0EsT0FBT0k7QUFDWDtBQUNBLFNBQVNTLGFBQWFDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxXQUFXO0lBQzNDLE1BQU1DLFNBQVMsRUFBRTtJQUNqQixNQUFNQyxlQUFlRixlQUFlUixtQkFBbUJNLE1BQU0sQ0FBQyxFQUFFO0lBQ2hFLE1BQU1LLFlBQVlMLE9BQU9NLE1BQU0sR0FBRztJQUNsQyxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUYsV0FBV0UsSUFBSztRQUNoQyxJQUFJQyxRQUFRSixhQUFhSixNQUFNLENBQUNPLEVBQUUsRUFBRVAsTUFBTSxDQUFDTyxJQUFJLEVBQUU7UUFDakQsSUFBSU4sTUFBTTtZQUNOLE1BQU1RLGlCQUFpQlosTUFBTUMsT0FBTyxDQUFDRyxRQUFRQSxJQUFJLENBQUNNLEVBQUUsSUFBSWxCLDJDQUFJQSxHQUFHWTtZQUMvRE8sUUFBUXJCLCtDQUFJQSxDQUFDc0IsZ0JBQWdCRDtRQUNqQztRQUNBTCxPQUFPTyxJQUFJLENBQUNGO0lBQ2hCO0lBQ0EsT0FBT0w7QUFDWDtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FrQkMsR0FDRCxTQUFTUSxZQUFZQyxLQUFLLEVBQUVaLE1BQU0sRUFBRSxFQUFFbkIsT0FBT2dDLFVBQVUsSUFBSSxFQUFFWixJQUFJLEVBQUVPLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMzRSxNQUFNTSxjQUFjRixNQUFNTixNQUFNO0lBQ2hDM0Isc0RBQVNBLENBQUNtQyxnQkFBZ0JkLE9BQU9NLE1BQU0sRUFBRTtJQUN6Qzs7O0tBR0MsR0FDRCxJQUFJUSxnQkFBZ0IsR0FDaEIsT0FBTyxJQUFNZCxNQUFNLENBQUMsRUFBRTtJQUMxQix1REFBdUQ7SUFDdkQsSUFBSVksS0FBSyxDQUFDLEVBQUUsR0FBR0EsS0FBSyxDQUFDRSxjQUFjLEVBQUUsRUFBRTtRQUNuQ0YsUUFBUTtlQUFJQTtTQUFNLENBQUNHLE9BQU87UUFDMUJmLFNBQVM7ZUFBSUE7U0FBTyxDQUFDZSxPQUFPO0lBQ2hDO0lBQ0EsTUFBTVosU0FBU0osYUFBYUMsUUFBUUMsTUFBTU87SUFDMUMsTUFBTUgsWUFBWUYsT0FBT0csTUFBTTtJQUMvQixNQUFNVSxlQUFlLENBQUNyQjtRQUNsQixJQUFJWSxJQUFJO1FBQ1IsSUFBSUYsWUFBWSxHQUFHO1lBQ2YsTUFBT0UsSUFBSUssTUFBTU4sTUFBTSxHQUFHLEdBQUdDLElBQUs7Z0JBQzlCLElBQUlaLElBQUlpQixLQUFLLENBQUNMLElBQUksRUFBRSxFQUNoQjtZQUNSO1FBQ0o7UUFDQSxNQUFNVSxrQkFBa0I3Qix1REFBUUEsQ0FBQ3dCLEtBQUssQ0FBQ0wsRUFBRSxFQUFFSyxLQUFLLENBQUNMLElBQUksRUFBRSxFQUFFWjtRQUN6RCxPQUFPUSxNQUFNLENBQUNJLEVBQUUsQ0FBQ1U7SUFDckI7SUFDQSxPQUFPSixVQUNELENBQUNsQixJQUFNcUIsYUFBYW5DLGlEQUFLQSxDQUFDK0IsS0FBSyxDQUFDLEVBQUUsRUFBRUEsS0FBSyxDQUFDRSxjQUFjLEVBQUUsRUFBRW5CLE1BQzVEcUI7QUFDVjtBQUV1QiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9pbnRlcnBvbGF0ZS5tanM/ZmQ1NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tICcuL2Vycm9ycy5tanMnO1xuaW1wb3J0IHsgY29sb3IgfSBmcm9tICcuLi92YWx1ZS90eXBlcy9jb2xvci9pbmRleC5tanMnO1xuaW1wb3J0IHsgY2xhbXAgfSBmcm9tICcuL2NsYW1wLm1qcyc7XG5pbXBvcnQgeyBtaXggfSBmcm9tICcuL21peC5tanMnO1xuaW1wb3J0IHsgbWl4Q29sb3IgfSBmcm9tICcuL21peC1jb2xvci5tanMnO1xuaW1wb3J0IHsgbWl4Q29tcGxleCwgbWl4QXJyYXksIG1peE9iamVjdCB9IGZyb20gJy4vbWl4LWNvbXBsZXgubWpzJztcbmltcG9ydCB7IHBpcGUgfSBmcm9tICcuL3BpcGUubWpzJztcbmltcG9ydCB7IHByb2dyZXNzIH0gZnJvbSAnLi9wcm9ncmVzcy5tanMnO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4vbm9vcC5tanMnO1xuXG5jb25zdCBtaXhOdW1iZXIgPSAoZnJvbSwgdG8pID0+IChwKSA9PiBtaXgoZnJvbSwgdG8sIHApO1xuZnVuY3Rpb24gZGV0ZWN0TWl4ZXJGYWN0b3J5KHYpIHtcbiAgICBpZiAodHlwZW9mIHYgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIG1peE51bWJlcjtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHYgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIGNvbG9yLnRlc3QodikgPyBtaXhDb2xvciA6IG1peENvbXBsZXg7XG4gICAgfVxuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodikpIHtcbiAgICAgICAgcmV0dXJuIG1peEFycmF5O1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdiA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICByZXR1cm4gbWl4T2JqZWN0O1xuICAgIH1cbiAgICByZXR1cm4gbWl4TnVtYmVyO1xufVxuZnVuY3Rpb24gY3JlYXRlTWl4ZXJzKG91dHB1dCwgZWFzZSwgY3VzdG9tTWl4ZXIpIHtcbiAgICBjb25zdCBtaXhlcnMgPSBbXTtcbiAgICBjb25zdCBtaXhlckZhY3RvcnkgPSBjdXN0b21NaXhlciB8fCBkZXRlY3RNaXhlckZhY3Rvcnkob3V0cHV0WzBdKTtcbiAgICBjb25zdCBudW1NaXhlcnMgPSBvdXRwdXQubGVuZ3RoIC0gMTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bU1peGVyczsgaSsrKSB7XG4gICAgICAgIGxldCBtaXhlciA9IG1peGVyRmFjdG9yeShvdXRwdXRbaV0sIG91dHB1dFtpICsgMV0pO1xuICAgICAgICBpZiAoZWFzZSkge1xuICAgICAgICAgICAgY29uc3QgZWFzaW5nRnVuY3Rpb24gPSBBcnJheS5pc0FycmF5KGVhc2UpID8gZWFzZVtpXSB8fCBub29wIDogZWFzZTtcbiAgICAgICAgICAgIG1peGVyID0gcGlwZShlYXNpbmdGdW5jdGlvbiwgbWl4ZXIpO1xuICAgICAgICB9XG4gICAgICAgIG1peGVycy5wdXNoKG1peGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIG1peGVycztcbn1cbi8qKlxuICogQ3JlYXRlIGEgZnVuY3Rpb24gdGhhdCBtYXBzIGZyb20gYSBudW1lcmljYWwgaW5wdXQgYXJyYXkgdG8gYSBnZW5lcmljIG91dHB1dCBhcnJheS5cbiAqXG4gKiBBY2NlcHRzOlxuICogICAtIE51bWJlcnNcbiAqICAgLSBDb2xvcnMgKGhleCwgaHNsLCBoc2xhLCByZ2IsIHJnYmEpXG4gKiAgIC0gQ29tcGxleCAoY29tYmluYXRpb25zIG9mIG9uZSBvciBtb3JlIG51bWJlcnMgb3Igc3RyaW5ncylcbiAqXG4gKiBgYGBqc3hcbiAqIGNvbnN0IG1peENvbG9yID0gaW50ZXJwb2xhdGUoWzAsIDFdLCBbJyNmZmYnLCAnIzAwMCddKVxuICpcbiAqIG1peENvbG9yKDAuNSkgLy8gJ3JnYmEoMTI4LCAxMjgsIDEyOCwgMSknXG4gKiBgYGBcbiAqXG4gKiBUT0RPIFJldmlzdCB0aGlzIGFwcHJvYWNoIG9uY2Ugd2UndmUgbW92ZWQgdG8gZGF0YSBtb2RlbHMgZm9yIHZhbHVlcyxcbiAqIHByb2JhYmx5IG5vdCBuZWVkZWQgdG8gcHJlZ2VuZXJhdGUgbWl4ZXIgZnVuY3Rpb25zLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gaW50ZXJwb2xhdGUoaW5wdXQsIG91dHB1dCwgeyBjbGFtcDogaXNDbGFtcCA9IHRydWUsIGVhc2UsIG1peGVyIH0gPSB7fSkge1xuICAgIGNvbnN0IGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuICAgIGludmFyaWFudChpbnB1dExlbmd0aCA9PT0gb3V0cHV0Lmxlbmd0aCwgXCJCb3RoIGlucHV0IGFuZCBvdXRwdXQgcmFuZ2VzIG11c3QgYmUgdGhlIHNhbWUgbGVuZ3RoXCIpO1xuICAgIC8qKlxuICAgICAqIElmIHdlJ3JlIG9ubHkgcHJvdmlkZWQgYSBzaW5nbGUgaW5wdXQsIHdlIGNhbiBqdXN0IG1ha2UgYSBmdW5jdGlvblxuICAgICAqIHRoYXQgcmV0dXJucyB0aGUgb3V0cHV0LlxuICAgICAqL1xuICAgIGlmIChpbnB1dExlbmd0aCA9PT0gMSlcbiAgICAgICAgcmV0dXJuICgpID0+IG91dHB1dFswXTtcbiAgICAvLyBJZiBpbnB1dCBydW5zIGhpZ2hlc3QgLT4gbG93ZXN0LCByZXZlcnNlIGJvdGggYXJyYXlzXG4gICAgaWYgKGlucHV0WzBdID4gaW5wdXRbaW5wdXRMZW5ndGggLSAxXSkge1xuICAgICAgICBpbnB1dCA9IFsuLi5pbnB1dF0ucmV2ZXJzZSgpO1xuICAgICAgICBvdXRwdXQgPSBbLi4ub3V0cHV0XS5yZXZlcnNlKCk7XG4gICAgfVxuICAgIGNvbnN0IG1peGVycyA9IGNyZWF0ZU1peGVycyhvdXRwdXQsIGVhc2UsIG1peGVyKTtcbiAgICBjb25zdCBudW1NaXhlcnMgPSBtaXhlcnMubGVuZ3RoO1xuICAgIGNvbnN0IGludGVycG9sYXRvciA9ICh2KSA9PiB7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgaWYgKG51bU1peGVycyA+IDEpIHtcbiAgICAgICAgICAgIGZvciAoOyBpIDwgaW5wdXQubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHYgPCBpbnB1dFtpICsgMV0pXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByb2dyZXNzSW5SYW5nZSA9IHByb2dyZXNzKGlucHV0W2ldLCBpbnB1dFtpICsgMV0sIHYpO1xuICAgICAgICByZXR1cm4gbWl4ZXJzW2ldKHByb2dyZXNzSW5SYW5nZSk7XG4gICAgfTtcbiAgICByZXR1cm4gaXNDbGFtcFxuICAgICAgICA/ICh2KSA9PiBpbnRlcnBvbGF0b3IoY2xhbXAoaW5wdXRbMF0sIGlucHV0W2lucHV0TGVuZ3RoIC0gMV0sIHYpKVxuICAgICAgICA6IGludGVycG9sYXRvcjtcbn1cblxuZXhwb3J0IHsgaW50ZXJwb2xhdGUgfTtcbiJdLCJuYW1lcyI6WyJpbnZhcmlhbnQiLCJjb2xvciIsImNsYW1wIiwibWl4IiwibWl4Q29sb3IiLCJtaXhDb21wbGV4IiwibWl4QXJyYXkiLCJtaXhPYmplY3QiLCJwaXBlIiwicHJvZ3Jlc3MiLCJub29wIiwibWl4TnVtYmVyIiwiZnJvbSIsInRvIiwicCIsImRldGVjdE1peGVyRmFjdG9yeSIsInYiLCJ0ZXN0IiwiQXJyYXkiLCJpc0FycmF5IiwiY3JlYXRlTWl4ZXJzIiwib3V0cHV0IiwiZWFzZSIsImN1c3RvbU1peGVyIiwibWl4ZXJzIiwibWl4ZXJGYWN0b3J5IiwibnVtTWl4ZXJzIiwibGVuZ3RoIiwiaSIsIm1peGVyIiwiZWFzaW5nRnVuY3Rpb24iLCJwdXNoIiwiaW50ZXJwb2xhdGUiLCJpbnB1dCIsImlzQ2xhbXAiLCJpbnB1dExlbmd0aCIsInJldmVyc2UiLCJpbnRlcnBvbGF0b3IiLCJwcm9ncmVzc0luUmFuZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/interpolate.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/is-browser.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/is-browser.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isBrowser: () => (/* binding */ isBrowser)\n/* harmony export */ });\nconst isBrowser = typeof document !== \"undefined\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2lzLWJyb3dzZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxZQUFZLE9BQU9DLGFBQWE7QUFFakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvaXMtYnJvd3Nlci5tanM/ZDc1YSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBpc0Jyb3dzZXIgPSB0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCI7XG5cbmV4cG9ydCB7IGlzQnJvd3NlciB9O1xuIl0sIm5hbWVzIjpbImlzQnJvd3NlciIsImRvY3VtZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/is-browser.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNumericalString: () => (/* binding */ isNumericalString)\n/* harmony export */ });\n/**\n * Check if value is a numerical string, ie a string that is purely a number eg \"100\" or \"-100.1\"\n */ const isNumericalString = (v)=>/^\\-?\\d*\\.?\\d+$/.test(v);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2lzLW51bWVyaWNhbC1zdHJpbmcubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Q0FFQyxHQUNELE1BQU1BLG9CQUFvQixDQUFDQyxJQUFNLGlCQUFpQkMsSUFBSSxDQUFDRDtBQUUxQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9pcy1udW1lcmljYWwtc3RyaW5nLm1qcz9jZDU2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2hlY2sgaWYgdmFsdWUgaXMgYSBudW1lcmljYWwgc3RyaW5nLCBpZSBhIHN0cmluZyB0aGF0IGlzIHB1cmVseSBhIG51bWJlciBlZyBcIjEwMFwiIG9yIFwiLTEwMC4xXCJcbiAqL1xuY29uc3QgaXNOdW1lcmljYWxTdHJpbmcgPSAodikgPT4gL15cXC0/XFxkKlxcLj9cXGQrJC8udGVzdCh2KTtcblxuZXhwb3J0IHsgaXNOdW1lcmljYWxTdHJpbmcgfTtcbiJdLCJuYW1lcyI6WyJpc051bWVyaWNhbFN0cmluZyIsInYiLCJ0ZXN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/is-ref-object.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/is-ref-object.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isRefObject: () => (/* binding */ isRefObject)\n/* harmony export */ });\nfunction isRefObject(ref) {\n    return typeof ref === \"object\" && Object.prototype.hasOwnProperty.call(ref, \"current\");\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2lzLXJlZi1vYmplY3QubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxTQUFTQSxZQUFZQyxHQUFHO0lBQ3BCLE9BQVEsT0FBT0EsUUFBUSxZQUNuQkMsT0FBT0MsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ0osS0FBSztBQUNsRDtBQUV1QiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9pcy1yZWYtb2JqZWN0Lm1qcz9iNDk2Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGlzUmVmT2JqZWN0KHJlZikge1xuICAgIHJldHVybiAodHlwZW9mIHJlZiA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocmVmLCBcImN1cnJlbnRcIikpO1xufVxuXG5leHBvcnQgeyBpc1JlZk9iamVjdCB9O1xuIl0sIm5hbWVzIjpbImlzUmVmT2JqZWN0IiwicmVmIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/is-ref-object.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isZeroValueString: () => (/* binding */ isZeroValueString)\n/* harmony export */ });\n/**\n * Check if the value is a zero value string like \"0px\" or \"0%\"\n */ const isZeroValueString = (v)=>/^0[^.\\s]+$/.test(v);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2lzLXplcm8tdmFsdWUtc3RyaW5nLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0NBRUMsR0FDRCxNQUFNQSxvQkFBb0IsQ0FBQ0MsSUFBTSxhQUFhQyxJQUFJLENBQUNEO0FBRXRCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2lzLXplcm8tdmFsdWUtc3RyaW5nLm1qcz8yMDUxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2hlY2sgaWYgdGhlIHZhbHVlIGlzIGEgemVybyB2YWx1ZSBzdHJpbmcgbGlrZSBcIjBweFwiIG9yIFwiMCVcIlxuICovXG5jb25zdCBpc1plcm9WYWx1ZVN0cmluZyA9ICh2KSA9PiAvXjBbXi5cXHNdKyQvLnRlc3Qodik7XG5cbmV4cG9ydCB7IGlzWmVyb1ZhbHVlU3RyaW5nIH07XG4iXSwibmFtZXMiOlsiaXNaZXJvVmFsdWVTdHJpbmciLCJ2IiwidGVzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/memo.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/memo.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   memo: () => (/* binding */ memo)\n/* harmony export */ });\nfunction memo(callback) {\n    let result;\n    return ()=>{\n        if (result === undefined) result = callback();\n        return result;\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL21lbW8ubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxTQUFTQSxLQUFLQyxRQUFRO0lBQ2xCLElBQUlDO0lBQ0osT0FBTztRQUNILElBQUlBLFdBQVdDLFdBQ1hELFNBQVNEO1FBQ2IsT0FBT0M7SUFDWDtBQUNKO0FBRWdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL21lbW8ubWpzPzBkZWEiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gbWVtbyhjYWxsYmFjaykge1xuICAgIGxldCByZXN1bHQ7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVzdWx0ID0gY2FsbGJhY2soKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xufVxuXG5leHBvcnQgeyBtZW1vIH07XG4iXSwibmFtZXMiOlsibWVtbyIsImNhbGxiYWNrIiwicmVzdWx0IiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/memo.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/mix-color.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/mix-color.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mixColor: () => (/* binding */ mixColor),\n/* harmony export */   mixLinearColor: () => (/* binding */ mixLinearColor)\n/* harmony export */ });\n/* harmony import */ var _mix_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./mix.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/mix.mjs\");\n/* harmony import */ var _errors_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/errors.mjs\");\n/* harmony import */ var _hsla_to_rgba_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./hsla-to-rgba.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/hsla-to-rgba.mjs\");\n/* harmony import */ var _value_types_color_hex_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../value/types/color/hex.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/color/hex.mjs\");\n/* harmony import */ var _value_types_color_rgba_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../value/types/color/rgba.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/color/rgba.mjs\");\n/* harmony import */ var _value_types_color_hsla_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../value/types/color/hsla.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/color/hsla.mjs\");\n\n\n\n\n\n\n// Linear color space blending\n// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw\n// Demonstrated http://codepen.io/osublake/pen/xGVVaN\nconst mixLinearColor = (from, to, v)=>{\n    const fromExpo = from * from;\n    return Math.sqrt(Math.max(0, v * (to * to - fromExpo) + fromExpo));\n};\nconst colorTypes = [\n    _value_types_color_hex_mjs__WEBPACK_IMPORTED_MODULE_0__.hex,\n    _value_types_color_rgba_mjs__WEBPACK_IMPORTED_MODULE_1__.rgba,\n    _value_types_color_hsla_mjs__WEBPACK_IMPORTED_MODULE_2__.hsla\n];\nconst getColorType = (v)=>colorTypes.find((type)=>type.test(v));\nfunction asRGBA(color) {\n    const type = getColorType(color);\n    (0,_errors_mjs__WEBPACK_IMPORTED_MODULE_3__.invariant)(Boolean(type), `'${color}' is not an animatable color. Use the equivalent color code instead.`);\n    let model = type.parse(color);\n    if (type === _value_types_color_hsla_mjs__WEBPACK_IMPORTED_MODULE_2__.hsla) {\n        // TODO Remove this cast - needed since Framer Motion's stricter typing\n        model = (0,_hsla_to_rgba_mjs__WEBPACK_IMPORTED_MODULE_4__.hslaToRgba)(model);\n    }\n    return model;\n}\nconst mixColor = (from, to)=>{\n    const fromRGBA = asRGBA(from);\n    const toRGBA = asRGBA(to);\n    const blended = {\n        ...fromRGBA\n    };\n    return (v)=>{\n        blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);\n        blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);\n        blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);\n        blended.alpha = (0,_mix_mjs__WEBPACK_IMPORTED_MODULE_5__.mix)(fromRGBA.alpha, toRGBA.alpha, v);\n        return _value_types_color_rgba_mjs__WEBPACK_IMPORTED_MODULE_1__.rgba.transform(blended);\n    };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL21peC1jb2xvci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBZ0M7QUFDUztBQUNPO0FBQ0c7QUFDRTtBQUNBO0FBRXJELDhCQUE4QjtBQUM5Qix3REFBd0Q7QUFDeEQscURBQXFEO0FBQ3JELE1BQU1NLGlCQUFpQixDQUFDQyxNQUFNQyxJQUFJQztJQUM5QixNQUFNQyxXQUFXSCxPQUFPQTtJQUN4QixPQUFPSSxLQUFLQyxJQUFJLENBQUNELEtBQUtFLEdBQUcsQ0FBQyxHQUFHSixJQUFLRCxDQUFBQSxLQUFLQSxLQUFLRSxRQUFPLElBQUtBO0FBQzVEO0FBQ0EsTUFBTUksYUFBYTtJQUFDWCwyREFBR0E7SUFBRUMsNkRBQUlBO0lBQUVDLDZEQUFJQTtDQUFDO0FBQ3BDLE1BQU1VLGVBQWUsQ0FBQ04sSUFBTUssV0FBV0UsSUFBSSxDQUFDLENBQUNDLE9BQVNBLEtBQUtDLElBQUksQ0FBQ1Q7QUFDaEUsU0FBU1UsT0FBT0MsS0FBSztJQUNqQixNQUFNSCxPQUFPRixhQUFhSztJQUMxQm5CLHNEQUFTQSxDQUFDb0IsUUFBUUosT0FBTyxDQUFDLENBQUMsRUFBRUcsTUFBTSxvRUFBb0UsQ0FBQztJQUN4RyxJQUFJRSxRQUFRTCxLQUFLTSxLQUFLLENBQUNIO0lBQ3ZCLElBQUlILFNBQVNaLDZEQUFJQSxFQUFFO1FBQ2YsdUVBQXVFO1FBQ3ZFaUIsUUFBUXBCLDZEQUFVQSxDQUFDb0I7SUFDdkI7SUFDQSxPQUFPQTtBQUNYO0FBQ0EsTUFBTUUsV0FBVyxDQUFDakIsTUFBTUM7SUFDcEIsTUFBTWlCLFdBQVdOLE9BQU9aO0lBQ3hCLE1BQU1tQixTQUFTUCxPQUFPWDtJQUN0QixNQUFNbUIsVUFBVTtRQUFFLEdBQUdGLFFBQVE7SUFBQztJQUM5QixPQUFPLENBQUNoQjtRQUNKa0IsUUFBUUMsR0FBRyxHQUFHdEIsZUFBZW1CLFNBQVNHLEdBQUcsRUFBRUYsT0FBT0UsR0FBRyxFQUFFbkI7UUFDdkRrQixRQUFRRSxLQUFLLEdBQUd2QixlQUFlbUIsU0FBU0ksS0FBSyxFQUFFSCxPQUFPRyxLQUFLLEVBQUVwQjtRQUM3RGtCLFFBQVFHLElBQUksR0FBR3hCLGVBQWVtQixTQUFTSyxJQUFJLEVBQUVKLE9BQU9JLElBQUksRUFBRXJCO1FBQzFEa0IsUUFBUUksS0FBSyxHQUFHL0IsNkNBQUdBLENBQUN5QixTQUFTTSxLQUFLLEVBQUVMLE9BQU9LLEtBQUssRUFBRXRCO1FBQ2xELE9BQU9MLDZEQUFJQSxDQUFDNEIsU0FBUyxDQUFDTDtJQUMxQjtBQUNKO0FBRW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL21peC1jb2xvci5tanM/MTA0MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtaXggfSBmcm9tICcuL21peC5tanMnO1xuaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAnLi9lcnJvcnMubWpzJztcbmltcG9ydCB7IGhzbGFUb1JnYmEgfSBmcm9tICcuL2hzbGEtdG8tcmdiYS5tanMnO1xuaW1wb3J0IHsgaGV4IH0gZnJvbSAnLi4vdmFsdWUvdHlwZXMvY29sb3IvaGV4Lm1qcyc7XG5pbXBvcnQgeyByZ2JhIH0gZnJvbSAnLi4vdmFsdWUvdHlwZXMvY29sb3IvcmdiYS5tanMnO1xuaW1wb3J0IHsgaHNsYSB9IGZyb20gJy4uL3ZhbHVlL3R5cGVzL2NvbG9yL2hzbGEubWpzJztcblxuLy8gTGluZWFyIGNvbG9yIHNwYWNlIGJsZW5kaW5nXG4vLyBFeHBsYWluZWQgaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1MS25xRUNjZzZHd1xuLy8gRGVtb25zdHJhdGVkIGh0dHA6Ly9jb2RlcGVuLmlvL29zdWJsYWtlL3Blbi94R1ZWYU5cbmNvbnN0IG1peExpbmVhckNvbG9yID0gKGZyb20sIHRvLCB2KSA9PiB7XG4gICAgY29uc3QgZnJvbUV4cG8gPSBmcm9tICogZnJvbTtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgubWF4KDAsIHYgKiAodG8gKiB0byAtIGZyb21FeHBvKSArIGZyb21FeHBvKSk7XG59O1xuY29uc3QgY29sb3JUeXBlcyA9IFtoZXgsIHJnYmEsIGhzbGFdO1xuY29uc3QgZ2V0Q29sb3JUeXBlID0gKHYpID0+IGNvbG9yVHlwZXMuZmluZCgodHlwZSkgPT4gdHlwZS50ZXN0KHYpKTtcbmZ1bmN0aW9uIGFzUkdCQShjb2xvcikge1xuICAgIGNvbnN0IHR5cGUgPSBnZXRDb2xvclR5cGUoY29sb3IpO1xuICAgIGludmFyaWFudChCb29sZWFuKHR5cGUpLCBgJyR7Y29sb3J9JyBpcyBub3QgYW4gYW5pbWF0YWJsZSBjb2xvci4gVXNlIHRoZSBlcXVpdmFsZW50IGNvbG9yIGNvZGUgaW5zdGVhZC5gKTtcbiAgICBsZXQgbW9kZWwgPSB0eXBlLnBhcnNlKGNvbG9yKTtcbiAgICBpZiAodHlwZSA9PT0gaHNsYSkge1xuICAgICAgICAvLyBUT0RPIFJlbW92ZSB0aGlzIGNhc3QgLSBuZWVkZWQgc2luY2UgRnJhbWVyIE1vdGlvbidzIHN0cmljdGVyIHR5cGluZ1xuICAgICAgICBtb2RlbCA9IGhzbGFUb1JnYmEobW9kZWwpO1xuICAgIH1cbiAgICByZXR1cm4gbW9kZWw7XG59XG5jb25zdCBtaXhDb2xvciA9IChmcm9tLCB0bykgPT4ge1xuICAgIGNvbnN0IGZyb21SR0JBID0gYXNSR0JBKGZyb20pO1xuICAgIGNvbnN0IHRvUkdCQSA9IGFzUkdCQSh0byk7XG4gICAgY29uc3QgYmxlbmRlZCA9IHsgLi4uZnJvbVJHQkEgfTtcbiAgICByZXR1cm4gKHYpID0+IHtcbiAgICAgICAgYmxlbmRlZC5yZWQgPSBtaXhMaW5lYXJDb2xvcihmcm9tUkdCQS5yZWQsIHRvUkdCQS5yZWQsIHYpO1xuICAgICAgICBibGVuZGVkLmdyZWVuID0gbWl4TGluZWFyQ29sb3IoZnJvbVJHQkEuZ3JlZW4sIHRvUkdCQS5ncmVlbiwgdik7XG4gICAgICAgIGJsZW5kZWQuYmx1ZSA9IG1peExpbmVhckNvbG9yKGZyb21SR0JBLmJsdWUsIHRvUkdCQS5ibHVlLCB2KTtcbiAgICAgICAgYmxlbmRlZC5hbHBoYSA9IG1peChmcm9tUkdCQS5hbHBoYSwgdG9SR0JBLmFscGhhLCB2KTtcbiAgICAgICAgcmV0dXJuIHJnYmEudHJhbnNmb3JtKGJsZW5kZWQpO1xuICAgIH07XG59O1xuXG5leHBvcnQgeyBtaXhDb2xvciwgbWl4TGluZWFyQ29sb3IgfTtcbiJdLCJuYW1lcyI6WyJtaXgiLCJpbnZhcmlhbnQiLCJoc2xhVG9SZ2JhIiwiaGV4IiwicmdiYSIsImhzbGEiLCJtaXhMaW5lYXJDb2xvciIsImZyb20iLCJ0byIsInYiLCJmcm9tRXhwbyIsIk1hdGgiLCJzcXJ0IiwibWF4IiwiY29sb3JUeXBlcyIsImdldENvbG9yVHlwZSIsImZpbmQiLCJ0eXBlIiwidGVzdCIsImFzUkdCQSIsImNvbG9yIiwiQm9vbGVhbiIsIm1vZGVsIiwicGFyc2UiLCJtaXhDb2xvciIsImZyb21SR0JBIiwidG9SR0JBIiwiYmxlbmRlZCIsInJlZCIsImdyZWVuIiwiYmx1ZSIsImFscGhhIiwidHJhbnNmb3JtIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/mix-color.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/mix-complex.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/mix-complex.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mixArray: () => (/* binding */ mixArray),\n/* harmony export */   mixComplex: () => (/* binding */ mixComplex),\n/* harmony export */   mixObject: () => (/* binding */ mixObject)\n/* harmony export */ });\n/* harmony import */ var _mix_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mix.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/mix.mjs\");\n/* harmony import */ var _mix_color_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mix-color.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/mix-color.mjs\");\n/* harmony import */ var _pipe_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pipe.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/pipe.mjs\");\n/* harmony import */ var _errors_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./errors.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/errors.mjs\");\n/* harmony import */ var _value_types_color_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../value/types/color/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/color/index.mjs\");\n/* harmony import */ var _value_types_complex_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../value/types/complex/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/complex/index.mjs\");\n\n\n\n\n\n\nconst mixImmediate = (origin, target)=>(p)=>`${p > 0 ? target : origin}`;\nfunction getMixer(origin, target) {\n    if (typeof origin === \"number\") {\n        return (v)=>(0,_mix_mjs__WEBPACK_IMPORTED_MODULE_0__.mix)(origin, target, v);\n    } else if (_value_types_color_index_mjs__WEBPACK_IMPORTED_MODULE_1__.color.test(origin)) {\n        return (0,_mix_color_mjs__WEBPACK_IMPORTED_MODULE_2__.mixColor)(origin, target);\n    } else {\n        return origin.startsWith(\"var(\") ? mixImmediate(origin, target) : mixComplex(origin, target);\n    }\n}\nconst mixArray = (from, to)=>{\n    const output = [\n        ...from\n    ];\n    const numValues = output.length;\n    const blendValue = from.map((fromThis, i)=>getMixer(fromThis, to[i]));\n    return (v)=>{\n        for(let i = 0; i < numValues; i++){\n            output[i] = blendValue[i](v);\n        }\n        return output;\n    };\n};\nconst mixObject = (origin, target)=>{\n    const output = {\n        ...origin,\n        ...target\n    };\n    const blendValue = {};\n    for(const key in output){\n        if (origin[key] !== undefined && target[key] !== undefined) {\n            blendValue[key] = getMixer(origin[key], target[key]);\n        }\n    }\n    return (v)=>{\n        for(const key in blendValue){\n            output[key] = blendValue[key](v);\n        }\n        return output;\n    };\n};\nconst mixComplex = (origin, target)=>{\n    const template = _value_types_complex_index_mjs__WEBPACK_IMPORTED_MODULE_3__.complex.createTransformer(target);\n    const originStats = (0,_value_types_complex_index_mjs__WEBPACK_IMPORTED_MODULE_3__.analyseComplexValue)(origin);\n    const targetStats = (0,_value_types_complex_index_mjs__WEBPACK_IMPORTED_MODULE_3__.analyseComplexValue)(target);\n    const canInterpolate = originStats.numVars === targetStats.numVars && originStats.numColors === targetStats.numColors && originStats.numNumbers >= targetStats.numNumbers;\n    if (canInterpolate) {\n        return (0,_pipe_mjs__WEBPACK_IMPORTED_MODULE_4__.pipe)(mixArray(originStats.values, targetStats.values), template);\n    } else {\n        (0,_errors_mjs__WEBPACK_IMPORTED_MODULE_5__.warning)(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);\n        return mixImmediate(origin, target);\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL21peC1jb21wbGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBZ0M7QUFDVztBQUNUO0FBQ0s7QUFDZ0I7QUFDeUI7QUFFaEYsTUFBTU8sZUFBZSxDQUFDQyxRQUFRQyxTQUFXLENBQUNDLElBQU0sQ0FBQyxFQUFFQSxJQUFJLElBQUlELFNBQVNELE9BQU8sQ0FBQztBQUM1RSxTQUFTRyxTQUFTSCxNQUFNLEVBQUVDLE1BQU07SUFDNUIsSUFBSSxPQUFPRCxXQUFXLFVBQVU7UUFDNUIsT0FBTyxDQUFDSSxJQUFNWiw2Q0FBR0EsQ0FBQ1EsUUFBUUMsUUFBUUc7SUFDdEMsT0FDSyxJQUFJUiwrREFBS0EsQ0FBQ1MsSUFBSSxDQUFDTCxTQUFTO1FBQ3pCLE9BQU9QLHdEQUFRQSxDQUFDTyxRQUFRQztJQUM1QixPQUNLO1FBQ0QsT0FBT0QsT0FBT00sVUFBVSxDQUFDLFVBQ25CUCxhQUFhQyxRQUFRQyxVQUNyQk0sV0FBV1AsUUFBUUM7SUFDN0I7QUFDSjtBQUNBLE1BQU1PLFdBQVcsQ0FBQ0MsTUFBTUM7SUFDcEIsTUFBTUMsU0FBUztXQUFJRjtLQUFLO0lBQ3hCLE1BQU1HLFlBQVlELE9BQU9FLE1BQU07SUFDL0IsTUFBTUMsYUFBYUwsS0FBS00sR0FBRyxDQUFDLENBQUNDLFVBQVVDLElBQU1kLFNBQVNhLFVBQVVOLEVBQUUsQ0FBQ08sRUFBRTtJQUNyRSxPQUFPLENBQUNiO1FBQ0osSUFBSyxJQUFJYSxJQUFJLEdBQUdBLElBQUlMLFdBQVdLLElBQUs7WUFDaENOLE1BQU0sQ0FBQ00sRUFBRSxHQUFHSCxVQUFVLENBQUNHLEVBQUUsQ0FBQ2I7UUFDOUI7UUFDQSxPQUFPTztJQUNYO0FBQ0o7QUFDQSxNQUFNTyxZQUFZLENBQUNsQixRQUFRQztJQUN2QixNQUFNVSxTQUFTO1FBQUUsR0FBR1gsTUFBTTtRQUFFLEdBQUdDLE1BQU07SUFBQztJQUN0QyxNQUFNYSxhQUFhLENBQUM7SUFDcEIsSUFBSyxNQUFNSyxPQUFPUixPQUFRO1FBQ3RCLElBQUlYLE1BQU0sQ0FBQ21CLElBQUksS0FBS0MsYUFBYW5CLE1BQU0sQ0FBQ2tCLElBQUksS0FBS0MsV0FBVztZQUN4RE4sVUFBVSxDQUFDSyxJQUFJLEdBQUdoQixTQUFTSCxNQUFNLENBQUNtQixJQUFJLEVBQUVsQixNQUFNLENBQUNrQixJQUFJO1FBQ3ZEO0lBQ0o7SUFDQSxPQUFPLENBQUNmO1FBQ0osSUFBSyxNQUFNZSxPQUFPTCxXQUFZO1lBQzFCSCxNQUFNLENBQUNRLElBQUksR0FBR0wsVUFBVSxDQUFDSyxJQUFJLENBQUNmO1FBQ2xDO1FBQ0EsT0FBT087SUFDWDtBQUNKO0FBQ0EsTUFBTUosYUFBYSxDQUFDUCxRQUFRQztJQUN4QixNQUFNb0IsV0FBV3hCLG1FQUFPQSxDQUFDeUIsaUJBQWlCLENBQUNyQjtJQUMzQyxNQUFNc0IsY0FBY3pCLG1GQUFtQkEsQ0FBQ0U7SUFDeEMsTUFBTXdCLGNBQWMxQixtRkFBbUJBLENBQUNHO0lBQ3hDLE1BQU13QixpQkFBaUJGLFlBQVlHLE9BQU8sS0FBS0YsWUFBWUUsT0FBTyxJQUM5REgsWUFBWUksU0FBUyxLQUFLSCxZQUFZRyxTQUFTLElBQy9DSixZQUFZSyxVQUFVLElBQUlKLFlBQVlJLFVBQVU7SUFDcEQsSUFBSUgsZ0JBQWdCO1FBQ2hCLE9BQU8vQiwrQ0FBSUEsQ0FBQ2MsU0FBU2UsWUFBWU0sTUFBTSxFQUFFTCxZQUFZSyxNQUFNLEdBQUdSO0lBQ2xFLE9BQ0s7UUFDRDFCLG9EQUFPQSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRUssT0FBTyxPQUFPLEVBQUVDLE9BQU8sd0tBQXdLLENBQUM7UUFDak8sT0FBT0YsYUFBYUMsUUFBUUM7SUFDaEM7QUFDSjtBQUUyQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9taXgtY29tcGxleC5tanM/ZDdlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtaXggfSBmcm9tICcuL21peC5tanMnO1xuaW1wb3J0IHsgbWl4Q29sb3IgfSBmcm9tICcuL21peC1jb2xvci5tanMnO1xuaW1wb3J0IHsgcGlwZSB9IGZyb20gJy4vcGlwZS5tanMnO1xuaW1wb3J0IHsgd2FybmluZyB9IGZyb20gJy4vZXJyb3JzLm1qcyc7XG5pbXBvcnQgeyBjb2xvciB9IGZyb20gJy4uL3ZhbHVlL3R5cGVzL2NvbG9yL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBjb21wbGV4LCBhbmFseXNlQ29tcGxleFZhbHVlIH0gZnJvbSAnLi4vdmFsdWUvdHlwZXMvY29tcGxleC9pbmRleC5tanMnO1xuXG5jb25zdCBtaXhJbW1lZGlhdGUgPSAob3JpZ2luLCB0YXJnZXQpID0+IChwKSA9PiBgJHtwID4gMCA/IHRhcmdldCA6IG9yaWdpbn1gO1xuZnVuY3Rpb24gZ2V0TWl4ZXIob3JpZ2luLCB0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG9yaWdpbiA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICByZXR1cm4gKHYpID0+IG1peChvcmlnaW4sIHRhcmdldCwgdik7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNvbG9yLnRlc3Qob3JpZ2luKSkge1xuICAgICAgICByZXR1cm4gbWl4Q29sb3Iob3JpZ2luLCB0YXJnZXQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbi5zdGFydHNXaXRoKFwidmFyKFwiKVxuICAgICAgICAgICAgPyBtaXhJbW1lZGlhdGUob3JpZ2luLCB0YXJnZXQpXG4gICAgICAgICAgICA6IG1peENvbXBsZXgob3JpZ2luLCB0YXJnZXQpO1xuICAgIH1cbn1cbmNvbnN0IG1peEFycmF5ID0gKGZyb20sIHRvKSA9PiB7XG4gICAgY29uc3Qgb3V0cHV0ID0gWy4uLmZyb21dO1xuICAgIGNvbnN0IG51bVZhbHVlcyA9IG91dHB1dC5sZW5ndGg7XG4gICAgY29uc3QgYmxlbmRWYWx1ZSA9IGZyb20ubWFwKChmcm9tVGhpcywgaSkgPT4gZ2V0TWl4ZXIoZnJvbVRoaXMsIHRvW2ldKSk7XG4gICAgcmV0dXJuICh2KSA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtVmFsdWVzOyBpKyspIHtcbiAgICAgICAgICAgIG91dHB1dFtpXSA9IGJsZW5kVmFsdWVbaV0odik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9O1xufTtcbmNvbnN0IG1peE9iamVjdCA9IChvcmlnaW4sIHRhcmdldCkgPT4ge1xuICAgIGNvbnN0IG91dHB1dCA9IHsgLi4ub3JpZ2luLCAuLi50YXJnZXQgfTtcbiAgICBjb25zdCBibGVuZFZhbHVlID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gb3V0cHV0KSB7XG4gICAgICAgIGlmIChvcmlnaW5ba2V5XSAhPT0gdW5kZWZpbmVkICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGJsZW5kVmFsdWVba2V5XSA9IGdldE1peGVyKG9yaWdpbltrZXldLCB0YXJnZXRba2V5XSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICh2KSA9PiB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGJsZW5kVmFsdWUpIHtcbiAgICAgICAgICAgIG91dHB1dFtrZXldID0gYmxlbmRWYWx1ZVtrZXldKHYpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfTtcbn07XG5jb25zdCBtaXhDb21wbGV4ID0gKG9yaWdpbiwgdGFyZ2V0KSA9PiB7XG4gICAgY29uc3QgdGVtcGxhdGUgPSBjb21wbGV4LmNyZWF0ZVRyYW5zZm9ybWVyKHRhcmdldCk7XG4gICAgY29uc3Qgb3JpZ2luU3RhdHMgPSBhbmFseXNlQ29tcGxleFZhbHVlKG9yaWdpbik7XG4gICAgY29uc3QgdGFyZ2V0U3RhdHMgPSBhbmFseXNlQ29tcGxleFZhbHVlKHRhcmdldCk7XG4gICAgY29uc3QgY2FuSW50ZXJwb2xhdGUgPSBvcmlnaW5TdGF0cy5udW1WYXJzID09PSB0YXJnZXRTdGF0cy5udW1WYXJzICYmXG4gICAgICAgIG9yaWdpblN0YXRzLm51bUNvbG9ycyA9PT0gdGFyZ2V0U3RhdHMubnVtQ29sb3JzICYmXG4gICAgICAgIG9yaWdpblN0YXRzLm51bU51bWJlcnMgPj0gdGFyZ2V0U3RhdHMubnVtTnVtYmVycztcbiAgICBpZiAoY2FuSW50ZXJwb2xhdGUpIHtcbiAgICAgICAgcmV0dXJuIHBpcGUobWl4QXJyYXkob3JpZ2luU3RhdHMudmFsdWVzLCB0YXJnZXRTdGF0cy52YWx1ZXMpLCB0ZW1wbGF0ZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB3YXJuaW5nKHRydWUsIGBDb21wbGV4IHZhbHVlcyAnJHtvcmlnaW59JyBhbmQgJyR7dGFyZ2V0fScgdG9vIGRpZmZlcmVudCB0byBtaXguIEVuc3VyZSBhbGwgY29sb3JzIGFyZSBvZiB0aGUgc2FtZSB0eXBlLCBhbmQgdGhhdCBlYWNoIGNvbnRhaW5zIHRoZSBzYW1lIHF1YW50aXR5IG9mIG51bWJlciBhbmQgY29sb3IgdmFsdWVzLiBGYWxsaW5nIGJhY2sgdG8gaW5zdGFudCB0cmFuc2l0aW9uLmApO1xuICAgICAgICByZXR1cm4gbWl4SW1tZWRpYXRlKG9yaWdpbiwgdGFyZ2V0KTtcbiAgICB9XG59O1xuXG5leHBvcnQgeyBtaXhBcnJheSwgbWl4Q29tcGxleCwgbWl4T2JqZWN0IH07XG4iXSwibmFtZXMiOlsibWl4IiwibWl4Q29sb3IiLCJwaXBlIiwid2FybmluZyIsImNvbG9yIiwiY29tcGxleCIsImFuYWx5c2VDb21wbGV4VmFsdWUiLCJtaXhJbW1lZGlhdGUiLCJvcmlnaW4iLCJ0YXJnZXQiLCJwIiwiZ2V0TWl4ZXIiLCJ2IiwidGVzdCIsInN0YXJ0c1dpdGgiLCJtaXhDb21wbGV4IiwibWl4QXJyYXkiLCJmcm9tIiwidG8iLCJvdXRwdXQiLCJudW1WYWx1ZXMiLCJsZW5ndGgiLCJibGVuZFZhbHVlIiwibWFwIiwiZnJvbVRoaXMiLCJpIiwibWl4T2JqZWN0Iiwia2V5IiwidW5kZWZpbmVkIiwidGVtcGxhdGUiLCJjcmVhdGVUcmFuc2Zvcm1lciIsIm9yaWdpblN0YXRzIiwidGFyZ2V0U3RhdHMiLCJjYW5JbnRlcnBvbGF0ZSIsIm51bVZhcnMiLCJudW1Db2xvcnMiLCJudW1OdW1iZXJzIiwidmFsdWVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/mix-complex.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/mix.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/mix.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mix: () => (/* binding */ mix)\n/* harmony export */ });\n/*\n  Value in range from progress\n\n  Given a lower limit and an upper limit, we return the value within\n  that range as expressed by progress (usually a number from 0 to 1)\n\n  So progress = 0.5 would change\n\n  from -------- to\n\n  to\n\n  from ---- to\n\n  E.g. from = 10, to = 20, progress = 0.5 => 15\n\n  @param [number]: Lower limit of range\n  @param [number]: Upper limit of range\n  @param [number]: The progress between lower and upper limits expressed 0-1\n  @return [number]: Value as calculated from progress within range (not limited within range)\n*/ const mix = (from, to, progress)=>-progress * from + progress * to + from;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL21peC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW9CQSxHQUNBLE1BQU1BLE1BQU0sQ0FBQ0MsTUFBTUMsSUFBSUMsV0FBYSxDQUFDQSxXQUFXRixPQUFPRSxXQUFXRCxLQUFLRDtBQUV4RCIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9taXgubWpzPzA5OGYiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAgVmFsdWUgaW4gcmFuZ2UgZnJvbSBwcm9ncmVzc1xuXG4gIEdpdmVuIGEgbG93ZXIgbGltaXQgYW5kIGFuIHVwcGVyIGxpbWl0LCB3ZSByZXR1cm4gdGhlIHZhbHVlIHdpdGhpblxuICB0aGF0IHJhbmdlIGFzIGV4cHJlc3NlZCBieSBwcm9ncmVzcyAodXN1YWxseSBhIG51bWJlciBmcm9tIDAgdG8gMSlcblxuICBTbyBwcm9ncmVzcyA9IDAuNSB3b3VsZCBjaGFuZ2VcblxuICBmcm9tIC0tLS0tLS0tIHRvXG5cbiAgdG9cblxuICBmcm9tIC0tLS0gdG9cblxuICBFLmcuIGZyb20gPSAxMCwgdG8gPSAyMCwgcHJvZ3Jlc3MgPSAwLjUgPT4gMTVcblxuICBAcGFyYW0gW251bWJlcl06IExvd2VyIGxpbWl0IG9mIHJhbmdlXG4gIEBwYXJhbSBbbnVtYmVyXTogVXBwZXIgbGltaXQgb2YgcmFuZ2VcbiAgQHBhcmFtIFtudW1iZXJdOiBUaGUgcHJvZ3Jlc3MgYmV0d2VlbiBsb3dlciBhbmQgdXBwZXIgbGltaXRzIGV4cHJlc3NlZCAwLTFcbiAgQHJldHVybiBbbnVtYmVyXTogVmFsdWUgYXMgY2FsY3VsYXRlZCBmcm9tIHByb2dyZXNzIHdpdGhpbiByYW5nZSAobm90IGxpbWl0ZWQgd2l0aGluIHJhbmdlKVxuKi9cbmNvbnN0IG1peCA9IChmcm9tLCB0bywgcHJvZ3Jlc3MpID0+IC1wcm9ncmVzcyAqIGZyb20gKyBwcm9ncmVzcyAqIHRvICsgZnJvbTtcblxuZXhwb3J0IHsgbWl4IH07XG4iXSwibmFtZXMiOlsibWl4IiwiZnJvbSIsInRvIiwicHJvZ3Jlc3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/mix.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/noop.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/noop.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   noop: () => (/* binding */ noop)\n/* harmony export */ });\nconst noop = (any)=>any;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL25vb3AubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxPQUFPLENBQUNDLE1BQVFBO0FBRU4iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvbm9vcC5tanM/OTJlMiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBub29wID0gKGFueSkgPT4gYW55O1xuXG5leHBvcnQgeyBub29wIH07XG4iXSwibmFtZXMiOlsibm9vcCIsImFueSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/noop.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/offsets/default.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/offsets/default.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultOffset: () => (/* binding */ defaultOffset)\n/* harmony export */ });\n/* harmony import */ var _fill_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fill.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/offsets/fill.mjs\");\n\nfunction defaultOffset(arr) {\n    const offset = [\n        0\n    ];\n    (0,_fill_mjs__WEBPACK_IMPORTED_MODULE_0__.fillOffset)(offset, arr.length - 1);\n    return offset;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL29mZnNldHMvZGVmYXVsdC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBd0M7QUFFeEMsU0FBU0MsY0FBY0MsR0FBRztJQUN0QixNQUFNQyxTQUFTO1FBQUM7S0FBRTtJQUNsQkgscURBQVVBLENBQUNHLFFBQVFELElBQUlFLE1BQU0sR0FBRztJQUNoQyxPQUFPRDtBQUNYO0FBRXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL29mZnNldHMvZGVmYXVsdC5tanM/ZDk0MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmaWxsT2Zmc2V0IH0gZnJvbSAnLi9maWxsLm1qcyc7XG5cbmZ1bmN0aW9uIGRlZmF1bHRPZmZzZXQoYXJyKSB7XG4gICAgY29uc3Qgb2Zmc2V0ID0gWzBdO1xuICAgIGZpbGxPZmZzZXQob2Zmc2V0LCBhcnIubGVuZ3RoIC0gMSk7XG4gICAgcmV0dXJuIG9mZnNldDtcbn1cblxuZXhwb3J0IHsgZGVmYXVsdE9mZnNldCB9O1xuIl0sIm5hbWVzIjpbImZpbGxPZmZzZXQiLCJkZWZhdWx0T2Zmc2V0IiwiYXJyIiwib2Zmc2V0IiwibGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/offsets/default.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/offsets/fill.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/offsets/fill.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fillOffset: () => (/* binding */ fillOffset)\n/* harmony export */ });\n/* harmony import */ var _mix_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mix.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/mix.mjs\");\n/* harmony import */ var _progress_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../progress.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/progress.mjs\");\n\n\nfunction fillOffset(offset, remaining) {\n    const min = offset[offset.length - 1];\n    for(let i = 1; i <= remaining; i++){\n        const offsetProgress = (0,_progress_mjs__WEBPACK_IMPORTED_MODULE_0__.progress)(0, remaining, i);\n        offset.push((0,_mix_mjs__WEBPACK_IMPORTED_MODULE_1__.mix)(min, 1, offsetProgress));\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL29mZnNldHMvZmlsbC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ1U7QUFFM0MsU0FBU0UsV0FBV0MsTUFBTSxFQUFFQyxTQUFTO0lBQ2pDLE1BQU1DLE1BQU1GLE1BQU0sQ0FBQ0EsT0FBT0csTUFBTSxHQUFHLEVBQUU7SUFDckMsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLEtBQUtILFdBQVdHLElBQUs7UUFDakMsTUFBTUMsaUJBQWlCUCx1REFBUUEsQ0FBQyxHQUFHRyxXQUFXRztRQUM5Q0osT0FBT00sSUFBSSxDQUFDVCw2Q0FBR0EsQ0FBQ0ssS0FBSyxHQUFHRztJQUM1QjtBQUNKO0FBRXNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL29mZnNldHMvZmlsbC5tanM/ZmUxZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtaXggfSBmcm9tICcuLi9taXgubWpzJztcbmltcG9ydCB7IHByb2dyZXNzIH0gZnJvbSAnLi4vcHJvZ3Jlc3MubWpzJztcblxuZnVuY3Rpb24gZmlsbE9mZnNldChvZmZzZXQsIHJlbWFpbmluZykge1xuICAgIGNvbnN0IG1pbiA9IG9mZnNldFtvZmZzZXQubGVuZ3RoIC0gMV07XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gcmVtYWluaW5nOyBpKyspIHtcbiAgICAgICAgY29uc3Qgb2Zmc2V0UHJvZ3Jlc3MgPSBwcm9ncmVzcygwLCByZW1haW5pbmcsIGkpO1xuICAgICAgICBvZmZzZXQucHVzaChtaXgobWluLCAxLCBvZmZzZXRQcm9ncmVzcykpO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgZmlsbE9mZnNldCB9O1xuIl0sIm5hbWVzIjpbIm1peCIsInByb2dyZXNzIiwiZmlsbE9mZnNldCIsIm9mZnNldCIsInJlbWFpbmluZyIsIm1pbiIsImxlbmd0aCIsImkiLCJvZmZzZXRQcm9ncmVzcyIsInB1c2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/offsets/fill.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/offsets/time.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/offsets/time.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertOffsetToTimes: () => (/* binding */ convertOffsetToTimes)\n/* harmony export */ });\nfunction convertOffsetToTimes(offset, duration) {\n    return offset.map((o)=>o * duration);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL29mZnNldHMvdGltZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBLHFCQUFxQkMsTUFBTSxFQUFFQyxRQUFRO0lBQzFDLE9BQU9ELE9BQU9FLEdBQUcsQ0FBQyxDQUFDQyxJQUFNQSxJQUFJRjtBQUNqQztBQUVnQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9vZmZzZXRzL3RpbWUubWpzP2NmYzIiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gY29udmVydE9mZnNldFRvVGltZXMob2Zmc2V0LCBkdXJhdGlvbikge1xuICAgIHJldHVybiBvZmZzZXQubWFwKChvKSA9PiBvICogZHVyYXRpb24pO1xufVxuXG5leHBvcnQgeyBjb252ZXJ0T2Zmc2V0VG9UaW1lcyB9O1xuIl0sIm5hbWVzIjpbImNvbnZlcnRPZmZzZXRUb1RpbWVzIiwib2Zmc2V0IiwiZHVyYXRpb24iLCJtYXAiLCJvIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/offsets/time.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/pipe.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/pipe.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pipe: () => (/* binding */ pipe)\n/* harmony export */ });\n/**\n * Pipe\n * Compose other transformers to run linearily\n * pipe(min(20), max(40))\n * @param  {...functions} transformers\n * @return {function}\n */ const combineFunctions = (a, b)=>(v)=>b(a(v));\nconst pipe = (...transformers)=>transformers.reduce(combineFunctions);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3BpcGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7O0NBTUMsR0FDRCxNQUFNQSxtQkFBbUIsQ0FBQ0MsR0FBR0MsSUFBTSxDQUFDQyxJQUFNRCxFQUFFRCxFQUFFRTtBQUM5QyxNQUFNQyxPQUFPLENBQUMsR0FBR0MsZUFBaUJBLGFBQWFDLE1BQU0sQ0FBQ047QUFFdEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvcGlwZS5tanM/MGZlOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFBpcGVcbiAqIENvbXBvc2Ugb3RoZXIgdHJhbnNmb3JtZXJzIHRvIHJ1biBsaW5lYXJpbHlcbiAqIHBpcGUobWluKDIwKSwgbWF4KDQwKSlcbiAqIEBwYXJhbSAgey4uLmZ1bmN0aW9uc30gdHJhbnNmb3JtZXJzXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuY29uc3QgY29tYmluZUZ1bmN0aW9ucyA9IChhLCBiKSA9PiAodikgPT4gYihhKHYpKTtcbmNvbnN0IHBpcGUgPSAoLi4udHJhbnNmb3JtZXJzKSA9PiB0cmFuc2Zvcm1lcnMucmVkdWNlKGNvbWJpbmVGdW5jdGlvbnMpO1xuXG5leHBvcnQgeyBwaXBlIH07XG4iXSwibmFtZXMiOlsiY29tYmluZUZ1bmN0aW9ucyIsImEiLCJiIiwidiIsInBpcGUiLCJ0cmFuc2Zvcm1lcnMiLCJyZWR1Y2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/pipe.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/progress.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/progress.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   progress: () => (/* binding */ progress)\n/* harmony export */ });\n/*\n  Progress within given range\n\n  Given a lower limit and an upper limit, we return the progress\n  (expressed as a number 0-1) represented by the given value, and\n  limit that progress to within 0-1.\n\n  @param [number]: Lower limit\n  @param [number]: Upper limit\n  @param [number]: Value to find progress within given range\n  @return [number]: Progress of value within range as expressed 0-1\n*/ const progress = (from, to, value)=>{\n    const toFromDifference = to - from;\n    return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3Byb2dyZXNzLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Ozs7Ozs7O0FBV0EsR0FDQSxNQUFNQSxXQUFXLENBQUNDLE1BQU1DLElBQUlDO0lBQ3hCLE1BQU1DLG1CQUFtQkYsS0FBS0Q7SUFDOUIsT0FBT0cscUJBQXFCLElBQUksSUFBSSxDQUFDRCxRQUFRRixJQUFHLElBQUtHO0FBQ3pEO0FBRW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3Byb2dyZXNzLm1qcz9mY2VmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gIFByb2dyZXNzIHdpdGhpbiBnaXZlbiByYW5nZVxuXG4gIEdpdmVuIGEgbG93ZXIgbGltaXQgYW5kIGFuIHVwcGVyIGxpbWl0LCB3ZSByZXR1cm4gdGhlIHByb2dyZXNzXG4gIChleHByZXNzZWQgYXMgYSBudW1iZXIgMC0xKSByZXByZXNlbnRlZCBieSB0aGUgZ2l2ZW4gdmFsdWUsIGFuZFxuICBsaW1pdCB0aGF0IHByb2dyZXNzIHRvIHdpdGhpbiAwLTEuXG5cbiAgQHBhcmFtIFtudW1iZXJdOiBMb3dlciBsaW1pdFxuICBAcGFyYW0gW251bWJlcl06IFVwcGVyIGxpbWl0XG4gIEBwYXJhbSBbbnVtYmVyXTogVmFsdWUgdG8gZmluZCBwcm9ncmVzcyB3aXRoaW4gZ2l2ZW4gcmFuZ2VcbiAgQHJldHVybiBbbnVtYmVyXTogUHJvZ3Jlc3Mgb2YgdmFsdWUgd2l0aGluIHJhbmdlIGFzIGV4cHJlc3NlZCAwLTFcbiovXG5jb25zdCBwcm9ncmVzcyA9IChmcm9tLCB0bywgdmFsdWUpID0+IHtcbiAgICBjb25zdCB0b0Zyb21EaWZmZXJlbmNlID0gdG8gLSBmcm9tO1xuICAgIHJldHVybiB0b0Zyb21EaWZmZXJlbmNlID09PSAwID8gMSA6ICh2YWx1ZSAtIGZyb20pIC8gdG9Gcm9tRGlmZmVyZW5jZTtcbn07XG5cbmV4cG9ydCB7IHByb2dyZXNzIH07XG4iXSwibmFtZXMiOlsicHJvZ3Jlc3MiLCJmcm9tIiwidG8iLCJ2YWx1ZSIsInRvRnJvbURpZmZlcmVuY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/progress.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initPrefersReducedMotion: () => (/* binding */ initPrefersReducedMotion)\n/* harmony export */ });\n/* harmony import */ var _is_browser_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../is-browser.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/is-browser.mjs\");\n/* harmony import */ var _state_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs\");\n\n\nfunction initPrefersReducedMotion() {\n    _state_mjs__WEBPACK_IMPORTED_MODULE_0__.hasReducedMotionListener.current = true;\n    if (!_is_browser_mjs__WEBPACK_IMPORTED_MODULE_1__.isBrowser) return;\n    if (window.matchMedia) {\n        const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n        const setReducedMotionPreferences = ()=>_state_mjs__WEBPACK_IMPORTED_MODULE_0__.prefersReducedMotion.current = motionMediaQuery.matches;\n        motionMediaQuery.addListener(setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    } else {\n        _state_mjs__WEBPACK_IMPORTED_MODULE_0__.prefersReducedMotion.current = false;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3JlZHVjZWQtbW90aW9uL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBOEM7QUFDK0I7QUFFN0UsU0FBU0c7SUFDTEYsZ0VBQXdCQSxDQUFDRyxPQUFPLEdBQUc7SUFDbkMsSUFBSSxDQUFDSixzREFBU0EsRUFDVjtJQUNKLElBQUlLLE9BQU9DLFVBQVUsRUFBRTtRQUNuQixNQUFNQyxtQkFBbUJGLE9BQU9DLFVBQVUsQ0FBQztRQUMzQyxNQUFNRSw4QkFBOEIsSUFBT04sNERBQW9CQSxDQUFDRSxPQUFPLEdBQUdHLGlCQUFpQkUsT0FBTztRQUNsR0YsaUJBQWlCRyxXQUFXLENBQUNGO1FBQzdCQTtJQUNKLE9BQ0s7UUFDRE4sNERBQW9CQSxDQUFDRSxPQUFPLEdBQUc7SUFDbkM7QUFDSjtBQUVvQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9yZWR1Y2VkLW1vdGlvbi9pbmRleC5tanM/NzVhNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0Jyb3dzZXIgfSBmcm9tICcuLi9pcy1icm93c2VyLm1qcyc7XG5pbXBvcnQgeyBoYXNSZWR1Y2VkTW90aW9uTGlzdGVuZXIsIHByZWZlcnNSZWR1Y2VkTW90aW9uIH0gZnJvbSAnLi9zdGF0ZS5tanMnO1xuXG5mdW5jdGlvbiBpbml0UHJlZmVyc1JlZHVjZWRNb3Rpb24oKSB7XG4gICAgaGFzUmVkdWNlZE1vdGlvbkxpc3RlbmVyLmN1cnJlbnQgPSB0cnVlO1xuICAgIGlmICghaXNCcm93c2VyKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhKSB7XG4gICAgICAgIGNvbnN0IG1vdGlvbk1lZGlhUXVlcnkgPSB3aW5kb3cubWF0Y2hNZWRpYShcIihwcmVmZXJzLXJlZHVjZWQtbW90aW9uKVwiKTtcbiAgICAgICAgY29uc3Qgc2V0UmVkdWNlZE1vdGlvblByZWZlcmVuY2VzID0gKCkgPT4gKHByZWZlcnNSZWR1Y2VkTW90aW9uLmN1cnJlbnQgPSBtb3Rpb25NZWRpYVF1ZXJ5Lm1hdGNoZXMpO1xuICAgICAgICBtb3Rpb25NZWRpYVF1ZXJ5LmFkZExpc3RlbmVyKHNldFJlZHVjZWRNb3Rpb25QcmVmZXJlbmNlcyk7XG4gICAgICAgIHNldFJlZHVjZWRNb3Rpb25QcmVmZXJlbmNlcygpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcHJlZmVyc1JlZHVjZWRNb3Rpb24uY3VycmVudCA9IGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgaW5pdFByZWZlcnNSZWR1Y2VkTW90aW9uIH07XG4iXSwibmFtZXMiOlsiaXNCcm93c2VyIiwiaGFzUmVkdWNlZE1vdGlvbkxpc3RlbmVyIiwicHJlZmVyc1JlZHVjZWRNb3Rpb24iLCJpbml0UHJlZmVyc1JlZHVjZWRNb3Rpb24iLCJjdXJyZW50Iiwid2luZG93IiwibWF0Y2hNZWRpYSIsIm1vdGlvbk1lZGlhUXVlcnkiLCJzZXRSZWR1Y2VkTW90aW9uUHJlZmVyZW5jZXMiLCJtYXRjaGVzIiwiYWRkTGlzdGVuZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hasReducedMotionListener: () => (/* binding */ hasReducedMotionListener),\n/* harmony export */   prefersReducedMotion: () => (/* binding */ prefersReducedMotion)\n/* harmony export */ });\n// Does this device prefer reduced motion? Returns `null` server-side.\nconst prefersReducedMotion = {\n    current: null\n};\nconst hasReducedMotionListener = {\n    current: false\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3JlZHVjZWQtbW90aW9uL3N0YXRlLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHNFQUFzRTtBQUN0RSxNQUFNQSx1QkFBdUI7SUFBRUMsU0FBUztBQUFLO0FBQzdDLE1BQU1DLDJCQUEyQjtJQUFFRCxTQUFTO0FBQU07QUFFUSIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9yZWR1Y2VkLW1vdGlvbi9zdGF0ZS5tanM/OGJhMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBEb2VzIHRoaXMgZGV2aWNlIHByZWZlciByZWR1Y2VkIG1vdGlvbj8gUmV0dXJucyBgbnVsbGAgc2VydmVyLXNpZGUuXG5jb25zdCBwcmVmZXJzUmVkdWNlZE1vdGlvbiA9IHsgY3VycmVudDogbnVsbCB9O1xuY29uc3QgaGFzUmVkdWNlZE1vdGlvbkxpc3RlbmVyID0geyBjdXJyZW50OiBmYWxzZSB9O1xuXG5leHBvcnQgeyBoYXNSZWR1Y2VkTW90aW9uTGlzdGVuZXIsIHByZWZlcnNSZWR1Y2VkTW90aW9uIH07XG4iXSwibmFtZXMiOlsicHJlZmVyc1JlZHVjZWRNb3Rpb24iLCJjdXJyZW50IiwiaGFzUmVkdWNlZE1vdGlvbkxpc3RlbmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/resolve-value.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/resolve-value.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isCustomValue: () => (/* binding */ isCustomValue),\n/* harmony export */   resolveFinalValueInKeyframes: () => (/* binding */ resolveFinalValueInKeyframes)\n/* harmony export */ });\n/* harmony import */ var _animation_utils_is_keyframes_target_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../animation/utils/is-keyframes-target.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs\");\n\nconst isCustomValue = (v)=>{\n    return Boolean(v && typeof v === \"object\" && v.mix && v.toValue);\n};\nconst resolveFinalValueInKeyframes = (v)=>{\n    // TODO maybe throw if v.length - 1 is placeholder token?\n    return (0,_animation_utils_is_keyframes_target_mjs__WEBPACK_IMPORTED_MODULE_0__.isKeyframesTarget)(v) ? v[v.length - 1] || 0 : v;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3Jlc29sdmUtdmFsdWUubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUErRTtBQUUvRSxNQUFNQyxnQkFBZ0IsQ0FBQ0M7SUFDbkIsT0FBT0MsUUFBUUQsS0FBSyxPQUFPQSxNQUFNLFlBQVlBLEVBQUVFLEdBQUcsSUFBSUYsRUFBRUcsT0FBTztBQUNuRTtBQUNBLE1BQU1DLCtCQUErQixDQUFDSjtJQUNsQyx5REFBeUQ7SUFDekQsT0FBT0YsMkZBQWlCQSxDQUFDRSxLQUFLQSxDQUFDLENBQUNBLEVBQUVLLE1BQU0sR0FBRyxFQUFFLElBQUksSUFBSUw7QUFDekQ7QUFFdUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvcmVzb2x2ZS12YWx1ZS5tanM/ZGI1NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0tleWZyYW1lc1RhcmdldCB9IGZyb20gJy4uL2FuaW1hdGlvbi91dGlscy9pcy1rZXlmcmFtZXMtdGFyZ2V0Lm1qcyc7XG5cbmNvbnN0IGlzQ3VzdG9tVmFsdWUgPSAodikgPT4ge1xuICAgIHJldHVybiBCb29sZWFuKHYgJiYgdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdi5taXggJiYgdi50b1ZhbHVlKTtcbn07XG5jb25zdCByZXNvbHZlRmluYWxWYWx1ZUluS2V5ZnJhbWVzID0gKHYpID0+IHtcbiAgICAvLyBUT0RPIG1heWJlIHRocm93IGlmIHYubGVuZ3RoIC0gMSBpcyBwbGFjZWhvbGRlciB0b2tlbj9cbiAgICByZXR1cm4gaXNLZXlmcmFtZXNUYXJnZXQodikgPyB2W3YubGVuZ3RoIC0gMV0gfHwgMCA6IHY7XG59O1xuXG5leHBvcnQgeyBpc0N1c3RvbVZhbHVlLCByZXNvbHZlRmluYWxWYWx1ZUluS2V5ZnJhbWVzIH07XG4iXSwibmFtZXMiOlsiaXNLZXlmcmFtZXNUYXJnZXQiLCJpc0N1c3RvbVZhbHVlIiwidiIsIkJvb2xlYW4iLCJtaXgiLCJ0b1ZhbHVlIiwicmVzb2x2ZUZpbmFsVmFsdWVJbktleWZyYW1lcyIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/resolve-value.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/shallow-compare.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/shallow-compare.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   shallowCompare: () => (/* binding */ shallowCompare)\n/* harmony export */ });\nfunction shallowCompare(next, prev) {\n    if (!Array.isArray(prev)) return false;\n    const prevLength = prev.length;\n    if (prevLength !== next.length) return false;\n    for(let i = 0; i < prevLength; i++){\n        if (prev[i] !== next[i]) return false;\n    }\n    return true;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3NoYWxsb3ctY29tcGFyZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBLGVBQWVDLElBQUksRUFBRUMsSUFBSTtJQUM5QixJQUFJLENBQUNDLE1BQU1DLE9BQU8sQ0FBQ0YsT0FDZixPQUFPO0lBQ1gsTUFBTUcsYUFBYUgsS0FBS0ksTUFBTTtJQUM5QixJQUFJRCxlQUFlSixLQUFLSyxNQUFNLEVBQzFCLE9BQU87SUFDWCxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUYsWUFBWUUsSUFBSztRQUNqQyxJQUFJTCxJQUFJLENBQUNLLEVBQUUsS0FBS04sSUFBSSxDQUFDTSxFQUFFLEVBQ25CLE9BQU87SUFDZjtJQUNBLE9BQU87QUFDWDtBQUUwQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9zaGFsbG93LWNvbXBhcmUubWpzP2E3ZWIiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gc2hhbGxvd0NvbXBhcmUobmV4dCwgcHJldikge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShwcmV2KSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IHByZXZMZW5ndGggPSBwcmV2Lmxlbmd0aDtcbiAgICBpZiAocHJldkxlbmd0aCAhPT0gbmV4dC5sZW5ndGgpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByZXZMZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAocHJldltpXSAhPT0gbmV4dFtpXSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCB7IHNoYWxsb3dDb21wYXJlIH07XG4iXSwibmFtZXMiOlsic2hhbGxvd0NvbXBhcmUiLCJuZXh0IiwicHJldiIsIkFycmF5IiwiaXNBcnJheSIsInByZXZMZW5ndGgiLCJsZW5ndGgiLCJpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/shallow-compare.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/subscription-manager.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/subscription-manager.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SubscriptionManager: () => (/* binding */ SubscriptionManager)\n/* harmony export */ });\n/* harmony import */ var _array_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./array.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/array.mjs\");\n\nclass SubscriptionManager {\n    constructor(){\n        this.subscriptions = [];\n    }\n    add(handler) {\n        (0,_array_mjs__WEBPACK_IMPORTED_MODULE_0__.addUniqueItem)(this.subscriptions, handler);\n        return ()=>(0,_array_mjs__WEBPACK_IMPORTED_MODULE_0__.removeItem)(this.subscriptions, handler);\n    }\n    notify(a, b, c) {\n        const numSubscriptions = this.subscriptions.length;\n        if (!numSubscriptions) return;\n        if (numSubscriptions === 1) {\n            /**\n             * If there's only a single handler we can just call it without invoking a loop.\n             */ this.subscriptions[0](a, b, c);\n        } else {\n            for(let i = 0; i < numSubscriptions; i++){\n                /**\n                 * Check whether the handler exists before firing as it's possible\n                 * the subscriptions were modified during this loop running.\n                 */ const handler = this.subscriptions[i];\n                handler && handler(a, b, c);\n            }\n        }\n    }\n    getSize() {\n        return this.subscriptions.length;\n    }\n    clear() {\n        this.subscriptions.length = 0;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3N1YnNjcmlwdGlvbi1tYW5hZ2VyLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF3RDtBQUV4RCxNQUFNRTtJQUNGQyxhQUFjO1FBQ1YsSUFBSSxDQUFDQyxhQUFhLEdBQUcsRUFBRTtJQUMzQjtJQUNBQyxJQUFJQyxPQUFPLEVBQUU7UUFDVE4seURBQWFBLENBQUMsSUFBSSxDQUFDSSxhQUFhLEVBQUVFO1FBQ2xDLE9BQU8sSUFBTUwsc0RBQVVBLENBQUMsSUFBSSxDQUFDRyxhQUFhLEVBQUVFO0lBQ2hEO0lBQ0FDLE9BQU9DLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUU7UUFDWixNQUFNQyxtQkFBbUIsSUFBSSxDQUFDUCxhQUFhLENBQUNRLE1BQU07UUFDbEQsSUFBSSxDQUFDRCxrQkFDRDtRQUNKLElBQUlBLHFCQUFxQixHQUFHO1lBQ3hCOzthQUVDLEdBQ0QsSUFBSSxDQUFDUCxhQUFhLENBQUMsRUFBRSxDQUFDSSxHQUFHQyxHQUFHQztRQUNoQyxPQUNLO1lBQ0QsSUFBSyxJQUFJRyxJQUFJLEdBQUdBLElBQUlGLGtCQUFrQkUsSUFBSztnQkFDdkM7OztpQkFHQyxHQUNELE1BQU1QLFVBQVUsSUFBSSxDQUFDRixhQUFhLENBQUNTLEVBQUU7Z0JBQ3JDUCxXQUFXQSxRQUFRRSxHQUFHQyxHQUFHQztZQUM3QjtRQUNKO0lBQ0o7SUFDQUksVUFBVTtRQUNOLE9BQU8sSUFBSSxDQUFDVixhQUFhLENBQUNRLE1BQU07SUFDcEM7SUFDQUcsUUFBUTtRQUNKLElBQUksQ0FBQ1gsYUFBYSxDQUFDUSxNQUFNLEdBQUc7SUFDaEM7QUFDSjtBQUUrQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9zdWJzY3JpcHRpb24tbWFuYWdlci5tanM/ZWZjMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhZGRVbmlxdWVJdGVtLCByZW1vdmVJdGVtIH0gZnJvbSAnLi9hcnJheS5tanMnO1xuXG5jbGFzcyBTdWJzY3JpcHRpb25NYW5hZ2VyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zID0gW107XG4gICAgfVxuICAgIGFkZChoYW5kbGVyKSB7XG4gICAgICAgIGFkZFVuaXF1ZUl0ZW0odGhpcy5zdWJzY3JpcHRpb25zLCBoYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHJlbW92ZUl0ZW0odGhpcy5zdWJzY3JpcHRpb25zLCBoYW5kbGVyKTtcbiAgICB9XG4gICAgbm90aWZ5KGEsIGIsIGMpIHtcbiAgICAgICAgY29uc3QgbnVtU3Vic2NyaXB0aW9ucyA9IHRoaXMuc3Vic2NyaXB0aW9ucy5sZW5ndGg7XG4gICAgICAgIGlmICghbnVtU3Vic2NyaXB0aW9ucylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKG51bVN1YnNjcmlwdGlvbnMgPT09IDEpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhlcmUncyBvbmx5IGEgc2luZ2xlIGhhbmRsZXIgd2UgY2FuIGp1c3QgY2FsbCBpdCB3aXRob3V0IGludm9raW5nIGEgbG9vcC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zWzBdKGEsIGIsIGMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1TdWJzY3JpcHRpb25zOyBpKyspIHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBDaGVjayB3aGV0aGVyIHRoZSBoYW5kbGVyIGV4aXN0cyBiZWZvcmUgZmlyaW5nIGFzIGl0J3MgcG9zc2libGVcbiAgICAgICAgICAgICAgICAgKiB0aGUgc3Vic2NyaXB0aW9ucyB3ZXJlIG1vZGlmaWVkIGR1cmluZyB0aGlzIGxvb3AgcnVubmluZy5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBjb25zdCBoYW5kbGVyID0gdGhpcy5zdWJzY3JpcHRpb25zW2ldO1xuICAgICAgICAgICAgICAgIGhhbmRsZXIgJiYgaGFuZGxlcihhLCBiLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdWJzY3JpcHRpb25zLmxlbmd0aDtcbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5sZW5ndGggPSAwO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgU3Vic2NyaXB0aW9uTWFuYWdlciB9O1xuIl0sIm5hbWVzIjpbImFkZFVuaXF1ZUl0ZW0iLCJyZW1vdmVJdGVtIiwiU3Vic2NyaXB0aW9uTWFuYWdlciIsImNvbnN0cnVjdG9yIiwic3Vic2NyaXB0aW9ucyIsImFkZCIsImhhbmRsZXIiLCJub3RpZnkiLCJhIiwiYiIsImMiLCJudW1TdWJzY3JpcHRpb25zIiwibGVuZ3RoIiwiaSIsImdldFNpemUiLCJjbGVhciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/subscription-manager.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/time-conversion.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/time-conversion.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   millisecondsToSeconds: () => (/* binding */ millisecondsToSeconds),\n/* harmony export */   secondsToMilliseconds: () => (/* binding */ secondsToMilliseconds)\n/* harmony export */ });\n/**\n * Converts seconds to milliseconds\n *\n * @param seconds - Time in seconds.\n * @return milliseconds - Converted time in milliseconds.\n */ const secondsToMilliseconds = (seconds)=>seconds * 1000;\nconst millisecondsToSeconds = (milliseconds)=>milliseconds / 1000;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3RpbWUtY29udmVyc2lvbi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Q0FLQyxHQUNELE1BQU1BLHdCQUF3QixDQUFDQyxVQUFZQSxVQUFVO0FBQ3JELE1BQU1DLHdCQUF3QixDQUFDQyxlQUFpQkEsZUFBZTtBQUVQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3RpbWUtY29udmVyc2lvbi5tanM/OWZhNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbnZlcnRzIHNlY29uZHMgdG8gbWlsbGlzZWNvbmRzXG4gKlxuICogQHBhcmFtIHNlY29uZHMgLSBUaW1lIGluIHNlY29uZHMuXG4gKiBAcmV0dXJuIG1pbGxpc2Vjb25kcyAtIENvbnZlcnRlZCB0aW1lIGluIG1pbGxpc2Vjb25kcy5cbiAqL1xuY29uc3Qgc2Vjb25kc1RvTWlsbGlzZWNvbmRzID0gKHNlY29uZHMpID0+IHNlY29uZHMgKiAxMDAwO1xuY29uc3QgbWlsbGlzZWNvbmRzVG9TZWNvbmRzID0gKG1pbGxpc2Vjb25kcykgPT4gbWlsbGlzZWNvbmRzIC8gMTAwMDtcblxuZXhwb3J0IHsgbWlsbGlzZWNvbmRzVG9TZWNvbmRzLCBzZWNvbmRzVG9NaWxsaXNlY29uZHMgfTtcbiJdLCJuYW1lcyI6WyJzZWNvbmRzVG9NaWxsaXNlY29uZHMiLCJzZWNvbmRzIiwibWlsbGlzZWNvbmRzVG9TZWNvbmRzIiwibWlsbGlzZWNvbmRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/time-conversion.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/use-constant.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/use-constant.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useConstant: () => (/* binding */ useConstant)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */ function useConstant(init) {\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    if (ref.current === null) {\n        ref.current = init();\n    }\n    return ref.current;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3VzZS1jb25zdGFudC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0I7QUFFL0I7Ozs7OztDQU1DLEdBQ0QsU0FBU0MsWUFBWUMsSUFBSTtJQUNyQixNQUFNQyxNQUFNSCw2Q0FBTUEsQ0FBQztJQUNuQixJQUFJRyxJQUFJQyxPQUFPLEtBQUssTUFBTTtRQUN0QkQsSUFBSUMsT0FBTyxHQUFHRjtJQUNsQjtJQUNBLE9BQU9DLElBQUlDLE9BQU87QUFDdEI7QUFFdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvdXNlLWNvbnN0YW50Lm1qcz8wOTBiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgY29uc3RhbnQgdmFsdWUgb3ZlciB0aGUgbGlmZWN5Y2xlIG9mIGEgY29tcG9uZW50LlxuICpcbiAqIEV2ZW4gaWYgYHVzZU1lbW9gIGlzIHByb3ZpZGVkIGFuIGVtcHR5IGFycmF5IGFzIGl0cyBmaW5hbCBhcmd1bWVudCwgaXQgZG9lc24ndCBvZmZlclxuICogYSBndWFyYW50ZWUgdGhhdCBpdCB3b24ndCByZS1ydW4gZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMgbGF0ZXIgb24uIEJ5IHVzaW5nIGB1c2VDb25zdGFudGBcbiAqIHlvdSBjYW4gZW5zdXJlIHRoYXQgaW5pdGlhbGlzZXJzIGRvbid0IGV4ZWN1dGUgdHdpY2Ugb3IgbW9yZS5cbiAqL1xuZnVuY3Rpb24gdXNlQ29uc3RhbnQoaW5pdCkge1xuICAgIGNvbnN0IHJlZiA9IHVzZVJlZihudWxsKTtcbiAgICBpZiAocmVmLmN1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgcmVmLmN1cnJlbnQgPSBpbml0KCk7XG4gICAgfVxuICAgIHJldHVybiByZWYuY3VycmVudDtcbn1cblxuZXhwb3J0IHsgdXNlQ29uc3RhbnQgfTtcbiJdLCJuYW1lcyI6WyJ1c2VSZWYiLCJ1c2VDb25zdGFudCIsImluaXQiLCJyZWYiLCJjdXJyZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/use-constant.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/use-force-update.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/use-force-update.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useForceUpdate: () => (/* binding */ useForceUpdate)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _use_is_mounted_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./use-is-mounted.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs\");\n/* harmony import */ var _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../frameloop/frame.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/frameloop/frame.mjs\");\n\n\n\nfunction useForceUpdate() {\n    const isMounted = (0,_use_is_mounted_mjs__WEBPACK_IMPORTED_MODULE_1__.useIsMounted)();\n    const [forcedRenderCount, setForcedRenderCount] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const forceRender = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        isMounted.current && setForcedRenderCount(forcedRenderCount + 1);\n    }, [\n        forcedRenderCount\n    ]);\n    /**\n     * Defer this to the end of the next animation frame in case there are multiple\n     * synchronous calls.\n     */ const deferredForceRender = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>_frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_2__.frame.postRender(forceRender), [\n        forceRender\n    ]);\n    return [\n        deferredForceRender,\n        forcedRenderCount\n    ];\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3VzZS1mb3JjZS11cGRhdGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBOEM7QUFDTTtBQUNMO0FBRS9DLFNBQVNJO0lBQ0wsTUFBTUMsWUFBWUgsaUVBQVlBO0lBQzlCLE1BQU0sQ0FBQ0ksbUJBQW1CQyxxQkFBcUIsR0FBR1AsK0NBQVFBLENBQUM7SUFDM0QsTUFBTVEsY0FBY1Asa0RBQVdBLENBQUM7UUFDNUJJLFVBQVVJLE9BQU8sSUFBSUYscUJBQXFCRCxvQkFBb0I7SUFDbEUsR0FBRztRQUFDQTtLQUFrQjtJQUN0Qjs7O0tBR0MsR0FDRCxNQUFNSSxzQkFBc0JULGtEQUFXQSxDQUFDLElBQU1FLHVEQUFLQSxDQUFDUSxVQUFVLENBQUNILGNBQWM7UUFBQ0E7S0FBWTtJQUMxRixPQUFPO1FBQUNFO1FBQXFCSjtLQUFrQjtBQUNuRDtBQUUwQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy91c2UtZm9yY2UtdXBkYXRlLm1qcz84ZWVmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVN0YXRlLCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUlzTW91bnRlZCB9IGZyb20gJy4vdXNlLWlzLW1vdW50ZWQubWpzJztcbmltcG9ydCB7IGZyYW1lIH0gZnJvbSAnLi4vZnJhbWVsb29wL2ZyYW1lLm1qcyc7XG5cbmZ1bmN0aW9uIHVzZUZvcmNlVXBkYXRlKCkge1xuICAgIGNvbnN0IGlzTW91bnRlZCA9IHVzZUlzTW91bnRlZCgpO1xuICAgIGNvbnN0IFtmb3JjZWRSZW5kZXJDb3VudCwgc2V0Rm9yY2VkUmVuZGVyQ291bnRdID0gdXNlU3RhdGUoMCk7XG4gICAgY29uc3QgZm9yY2VSZW5kZXIgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIGlzTW91bnRlZC5jdXJyZW50ICYmIHNldEZvcmNlZFJlbmRlckNvdW50KGZvcmNlZFJlbmRlckNvdW50ICsgMSk7XG4gICAgfSwgW2ZvcmNlZFJlbmRlckNvdW50XSk7XG4gICAgLyoqXG4gICAgICogRGVmZXIgdGhpcyB0byB0aGUgZW5kIG9mIHRoZSBuZXh0IGFuaW1hdGlvbiBmcmFtZSBpbiBjYXNlIHRoZXJlIGFyZSBtdWx0aXBsZVxuICAgICAqIHN5bmNocm9ub3VzIGNhbGxzLlxuICAgICAqL1xuICAgIGNvbnN0IGRlZmVycmVkRm9yY2VSZW5kZXIgPSB1c2VDYWxsYmFjaygoKSA9PiBmcmFtZS5wb3N0UmVuZGVyKGZvcmNlUmVuZGVyKSwgW2ZvcmNlUmVuZGVyXSk7XG4gICAgcmV0dXJuIFtkZWZlcnJlZEZvcmNlUmVuZGVyLCBmb3JjZWRSZW5kZXJDb3VudF07XG59XG5cbmV4cG9ydCB7IHVzZUZvcmNlVXBkYXRlIH07XG4iXSwibmFtZXMiOlsidXNlU3RhdGUiLCJ1c2VDYWxsYmFjayIsInVzZUlzTW91bnRlZCIsImZyYW1lIiwidXNlRm9yY2VVcGRhdGUiLCJpc01vdW50ZWQiLCJmb3JjZWRSZW5kZXJDb3VudCIsInNldEZvcmNlZFJlbmRlckNvdW50IiwiZm9yY2VSZW5kZXIiLCJjdXJyZW50IiwiZGVmZXJyZWRGb3JjZVJlbmRlciIsInBvc3RSZW5kZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/use-force-update.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   instantAnimationState: () => (/* binding */ instantAnimationState)\n/* harmony export */ });\nconst instantAnimationState = {\n    current: false\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3VzZS1pbnN0YW50LXRyYW5zaXRpb24tc3RhdGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSx3QkFBd0I7SUFDMUJDLFNBQVM7QUFDYjtBQUVpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy91c2UtaW5zdGFudC10cmFuc2l0aW9uLXN0YXRlLm1qcz85OTQyIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGluc3RhbnRBbmltYXRpb25TdGF0ZSA9IHtcbiAgICBjdXJyZW50OiBmYWxzZSxcbn07XG5cbmV4cG9ydCB7IGluc3RhbnRBbmltYXRpb25TdGF0ZSB9O1xuIl0sIm5hbWVzIjpbImluc3RhbnRBbmltYXRpb25TdGF0ZSIsImN1cnJlbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useIsMounted: () => (/* binding */ useIsMounted)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _use_isomorphic_effect_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./use-isomorphic-effect.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs\");\n\n\nfunction useIsMounted() {\n    const isMounted = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    (0,_use_isomorphic_effect_mjs__WEBPACK_IMPORTED_MODULE_1__.useIsomorphicLayoutEffect)(()=>{\n        isMounted.current = true;\n        return ()=>{\n            isMounted.current = false;\n        };\n    }, []);\n    return isMounted;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3VzZS1pcy1tb3VudGVkLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBK0I7QUFDeUM7QUFFeEUsU0FBU0U7SUFDTCxNQUFNQyxZQUFZSCw2Q0FBTUEsQ0FBQztJQUN6QkMscUZBQXlCQSxDQUFDO1FBQ3RCRSxVQUFVQyxPQUFPLEdBQUc7UUFDcEIsT0FBTztZQUNIRCxVQUFVQyxPQUFPLEdBQUc7UUFDeEI7SUFDSixHQUFHLEVBQUU7SUFDTCxPQUFPRDtBQUNYO0FBRXdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3VzZS1pcy1tb3VudGVkLm1qcz9lZDZlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuL3VzZS1pc29tb3JwaGljLWVmZmVjdC5tanMnO1xuXG5mdW5jdGlvbiB1c2VJc01vdW50ZWQoKSB7XG4gICAgY29uc3QgaXNNb3VudGVkID0gdXNlUmVmKGZhbHNlKTtcbiAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9LCBbXSk7XG4gICAgcmV0dXJuIGlzTW91bnRlZDtcbn1cblxuZXhwb3J0IHsgdXNlSXNNb3VudGVkIH07XG4iXSwibmFtZXMiOlsidXNlUmVmIiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsInVzZUlzTW91bnRlZCIsImlzTW91bnRlZCIsImN1cnJlbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useIsomorphicLayoutEffect: () => (/* binding */ useIsomorphicLayoutEffect)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _is_browser_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is-browser.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/is-browser.mjs\");\n\n\nconst useIsomorphicLayoutEffect = _is_browser_mjs__WEBPACK_IMPORTED_MODULE_1__.isBrowser ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3VzZS1pc29tb3JwaGljLWVmZmVjdC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1EO0FBQ047QUFFN0MsTUFBTUcsNEJBQTRCRCxzREFBU0EsR0FBR0Ysa0RBQWVBLEdBQUdDLDRDQUFTQTtBQUVwQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy91c2UtaXNvbW9ycGhpYy1lZmZlY3QubWpzPzMzZDciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlTGF5b3V0RWZmZWN0LCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc0Jyb3dzZXIgfSBmcm9tICcuL2lzLWJyb3dzZXIubWpzJztcblxuY29uc3QgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IGlzQnJvd3NlciA/IHVzZUxheW91dEVmZmVjdCA6IHVzZUVmZmVjdDtcblxuZXhwb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9O1xuIl0sIm5hbWVzIjpbInVzZUxheW91dEVmZmVjdCIsInVzZUVmZmVjdCIsImlzQnJvd3NlciIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/use-unmount-effect.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/use-unmount-effect.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useUnmountEffect: () => (/* binding */ useUnmountEffect)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nfunction useUnmountEffect(callback) {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>()=>callback(), []);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3VzZS11bm1vdW50LWVmZmVjdC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBa0M7QUFFbEMsU0FBU0MsaUJBQWlCQyxRQUFRO0lBQzlCLE9BQU9GLGdEQUFTQSxDQUFDLElBQU0sSUFBTUUsWUFBWSxFQUFFO0FBQy9DO0FBRTRCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3VzZS11bm1vdW50LWVmZmVjdC5tanM/ZjJiZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5cbmZ1bmN0aW9uIHVzZVVubW91bnRFZmZlY3QoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdXNlRWZmZWN0KCgpID0+ICgpID0+IGNhbGxiYWNrKCksIFtdKTtcbn1cblxuZXhwb3J0IHsgdXNlVW5tb3VudEVmZmVjdCB9O1xuIl0sIm5hbWVzIjpbInVzZUVmZmVjdCIsInVzZVVubW91bnRFZmZlY3QiLCJjYWxsYmFjayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/use-unmount-effect.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/velocity-per-second.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/velocity-per-second.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   velocityPerSecond: () => (/* binding */ velocityPerSecond)\n/* harmony export */ });\n/*\n  Convert velocity into velocity per second\n\n  @param [number]: Unit per frame\n  @param [number]: Frame duration in ms\n*/ function velocityPerSecond(velocity, frameDuration) {\n    return frameDuration ? velocity * (1000 / frameDuration) : 0;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3ZlbG9jaXR5LXBlci1zZWNvbmQubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7QUFLQSxHQUNBLFNBQVNBLGtCQUFrQkMsUUFBUSxFQUFFQyxhQUFhO0lBQzlDLE9BQU9BLGdCQUFnQkQsV0FBWSxRQUFPQyxhQUFZLElBQUs7QUFDL0Q7QUFFNkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvdmVsb2NpdHktcGVyLXNlY29uZC5tanM/OGNmOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICBDb252ZXJ0IHZlbG9jaXR5IGludG8gdmVsb2NpdHkgcGVyIHNlY29uZFxuXG4gIEBwYXJhbSBbbnVtYmVyXTogVW5pdCBwZXIgZnJhbWVcbiAgQHBhcmFtIFtudW1iZXJdOiBGcmFtZSBkdXJhdGlvbiBpbiBtc1xuKi9cbmZ1bmN0aW9uIHZlbG9jaXR5UGVyU2Vjb25kKHZlbG9jaXR5LCBmcmFtZUR1cmF0aW9uKSB7XG4gICAgcmV0dXJuIGZyYW1lRHVyYXRpb24gPyB2ZWxvY2l0eSAqICgxMDAwIC8gZnJhbWVEdXJhdGlvbikgOiAwO1xufVxuXG5leHBvcnQgeyB2ZWxvY2l0eVBlclNlY29uZCB9O1xuIl0sIm5hbWVzIjpbInZlbG9jaXR5UGVyU2Vjb25kIiwidmVsb2NpdHkiLCJmcmFtZUR1cmF0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/velocity-per-second.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/warn-once.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/warn-once.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   warnOnce: () => (/* binding */ warnOnce)\n/* harmony export */ });\nconst warned = new Set();\nfunction warnOnce(condition, message, element) {\n    if (condition || warned.has(message)) return;\n    console.warn(message);\n    if (element) console.warn(element);\n    warned.add(message);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3dhcm4tb25jZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLFNBQVMsSUFBSUM7QUFDbkIsU0FBU0MsU0FBU0MsU0FBUyxFQUFFQyxPQUFPLEVBQUVDLE9BQU87SUFDekMsSUFBSUYsYUFBYUgsT0FBT00sR0FBRyxDQUFDRixVQUN4QjtJQUNKRyxRQUFRQyxJQUFJLENBQUNKO0lBQ2IsSUFBSUMsU0FDQUUsUUFBUUMsSUFBSSxDQUFDSDtJQUNqQkwsT0FBT1MsR0FBRyxDQUFDTDtBQUNmO0FBRW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3dhcm4tb25jZS5tanM/NzAwOSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB3YXJuZWQgPSBuZXcgU2V0KCk7XG5mdW5jdGlvbiB3YXJuT25jZShjb25kaXRpb24sIG1lc3NhZ2UsIGVsZW1lbnQpIHtcbiAgICBpZiAoY29uZGl0aW9uIHx8IHdhcm5lZC5oYXMobWVzc2FnZSkpXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgaWYgKGVsZW1lbnQpXG4gICAgICAgIGNvbnNvbGUud2FybihlbGVtZW50KTtcbiAgICB3YXJuZWQuYWRkKG1lc3NhZ2UpO1xufVxuXG5leHBvcnQgeyB3YXJuT25jZSB9O1xuIl0sIm5hbWVzIjpbIndhcm5lZCIsIlNldCIsIndhcm5PbmNlIiwiY29uZGl0aW9uIiwibWVzc2FnZSIsImVsZW1lbnQiLCJoYXMiLCJjb25zb2xlIiwid2FybiIsImFkZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/warn-once.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/value/index.mjs":
/*!************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/value/index.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MotionValue: () => (/* binding */ MotionValue),\n/* harmony export */   collectMotionValues: () => (/* binding */ collectMotionValues),\n/* harmony export */   motionValue: () => (/* binding */ motionValue)\n/* harmony export */ });\n/* harmony import */ var _utils_subscription_manager_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/subscription-manager.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/subscription-manager.mjs\");\n/* harmony import */ var _utils_velocity_per_second_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/velocity-per-second.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/velocity-per-second.mjs\");\n/* harmony import */ var _utils_warn_once_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/warn-once.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/warn-once.mjs\");\n/* harmony import */ var _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../frameloop/frame.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/frameloop/frame.mjs\");\n\n\n\n\nconst isFloat = (value)=>{\n    return !isNaN(parseFloat(value));\n};\nconst collectMotionValues = {\n    current: undefined\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */ class MotionValue {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     *\n     * @internal\n     */ constructor(init, options = {}){\n        /**\n         * This will be replaced by the build step with the latest version number.\n         * When MotionValues are provided to motion components, warn if versions are mixed.\n         */ this.version = \"10.16.16\";\n        /**\n         * Duration, in milliseconds, since last updating frame.\n         *\n         * @internal\n         */ this.timeDelta = 0;\n        /**\n         * Timestamp of the last time this `MotionValue` was updated.\n         *\n         * @internal\n         */ this.lastUpdated = 0;\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */ this.canTrackVelocity = false;\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */ this.events = {};\n        this.updateAndNotify = (v, render = true)=>{\n            this.prev = this.current;\n            this.current = v;\n            // Update timestamp\n            const { delta, timestamp } = _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_0__.frameData;\n            if (this.lastUpdated !== timestamp) {\n                this.timeDelta = delta;\n                this.lastUpdated = timestamp;\n                _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_0__.frame.postRender(this.scheduleVelocityCheck);\n            }\n            // Update update subscribers\n            if (this.prev !== this.current && this.events.change) {\n                this.events.change.notify(this.current);\n            }\n            // Update velocity subscribers\n            if (this.events.velocityChange) {\n                this.events.velocityChange.notify(this.getVelocity());\n            }\n            // Update render subscribers\n            if (render && this.events.renderRequest) {\n                this.events.renderRequest.notify(this.current);\n            }\n        };\n        /**\n         * Schedule a velocity check for the next frame.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */ this.scheduleVelocityCheck = ()=>_frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_0__.frame.postRender(this.velocityCheck);\n        /**\n         * Updates `prev` with `current` if the value hasn't been updated this frame.\n         * This ensures velocity calculations return `0`.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */ this.velocityCheck = ({ timestamp })=>{\n            if (timestamp !== this.lastUpdated) {\n                this.prev = this.current;\n                if (this.events.velocityChange) {\n                    this.events.velocityChange.notify(this.getVelocity());\n                }\n            }\n        };\n        this.hasAnimated = false;\n        this.prev = this.current = init;\n        this.canTrackVelocity = isFloat(this.current);\n        this.owner = options.owner;\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @deprecated\n     */ onChange(subscription) {\n        if (true) {\n            (0,_utils_warn_once_mjs__WEBPACK_IMPORTED_MODULE_1__.warnOnce)(false, `value.onChange(callback) is deprecated. Switch to value.on(\"change\", callback).`);\n        }\n        return this.on(\"change\", subscription);\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new _utils_subscription_manager_mjs__WEBPACK_IMPORTED_MODULE_2__.SubscriptionManager();\n        }\n        const unsubscribe = this.events[eventName].add(callback);\n        if (eventName === \"change\") {\n            return ()=>{\n                unsubscribe();\n                /**\n                 * If we have no more change listeners by the start\n                 * of the next frame, stop active animations.\n                 */ _frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_0__.frame.read(()=>{\n                    if (!this.events.change.getSize()) {\n                        this.stop();\n                    }\n                });\n            };\n        }\n        return unsubscribe;\n    }\n    clearListeners() {\n        for(const eventManagers in this.events){\n            this.events[eventManagers].clear();\n        }\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */ attach(passiveEffect, stopPassiveEffect) {\n        this.passiveEffect = passiveEffect;\n        this.stopPassiveEffect = stopPassiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */ set(v, render = true) {\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        } else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    }\n    setWithVelocity(prev, current, delta) {\n        this.set(current);\n        this.prev = prev;\n        this.timeDelta = delta;\n    }\n    /**\n     * Set the state of the `MotionValue`, stopping any active animations,\n     * effects, and resets velocity to `0`.\n     */ jump(v) {\n        this.updateAndNotify(v);\n        this.prev = v;\n        this.stop();\n        if (this.stopPassiveEffect) this.stopPassiveEffect();\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */ get() {\n        if (collectMotionValues.current) {\n            collectMotionValues.current.push(this);\n        }\n        return this.current;\n    }\n    /**\n     * @public\n     */ getPrevious() {\n        return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */ getVelocity() {\n        // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\n        return this.canTrackVelocity ? (0,_utils_velocity_per_second_mjs__WEBPACK_IMPORTED_MODULE_3__.velocityPerSecond)(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta) : 0;\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */ start(startAnimation) {\n        this.stop();\n        return new Promise((resolve)=>{\n            this.hasAnimated = true;\n            this.animation = startAnimation(resolve);\n            if (this.events.animationStart) {\n                this.events.animationStart.notify();\n            }\n        }).then(()=>{\n            if (this.events.animationComplete) {\n                this.events.animationComplete.notify();\n            }\n            this.clearAnimation();\n        });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */ stop() {\n        if (this.animation) {\n            this.animation.stop();\n            if (this.events.animationCancel) {\n                this.events.animationCancel.notify();\n            }\n        }\n        this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */ isAnimating() {\n        return !!this.animation;\n    }\n    clearAnimation() {\n        delete this.animation;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */ destroy() {\n        this.clearListeners();\n        this.stop();\n        if (this.stopPassiveEffect) {\n            this.stopPassiveEffect();\n        }\n    }\n}\nfunction motionValue(init, options) {\n    return new MotionValue(init, options);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/value/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/value/types/color/hex.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/value/types/color/hex.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hex: () => (/* binding */ hex)\n/* harmony export */ });\n/* harmony import */ var _rgba_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rgba.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/color/rgba.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/color/utils.mjs\");\n\n\nfunction parseHex(v) {\n    let r = \"\";\n    let g = \"\";\n    let b = \"\";\n    let a = \"\";\n    // If we have 6 characters, ie #FF0000\n    if (v.length > 5) {\n        r = v.substring(1, 3);\n        g = v.substring(3, 5);\n        b = v.substring(5, 7);\n        a = v.substring(7, 9);\n    // Or we have 3 characters, ie #F00\n    } else {\n        r = v.substring(1, 2);\n        g = v.substring(2, 3);\n        b = v.substring(3, 4);\n        a = v.substring(4, 5);\n        r += r;\n        g += g;\n        b += b;\n        a += a;\n    }\n    return {\n        red: parseInt(r, 16),\n        green: parseInt(g, 16),\n        blue: parseInt(b, 16),\n        alpha: a ? parseInt(a, 16) / 255 : 1\n    };\n}\nconst hex = {\n    test: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.isColorString)(\"#\"),\n    parse: parseHex,\n    transform: _rgba_mjs__WEBPACK_IMPORTED_MODULE_1__.rgba.transform\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3R5cGVzL2NvbG9yL2hleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWtDO0FBQ1U7QUFFNUMsU0FBU0UsU0FBU0MsQ0FBQztJQUNmLElBQUlDLElBQUk7SUFDUixJQUFJQyxJQUFJO0lBQ1IsSUFBSUMsSUFBSTtJQUNSLElBQUlDLElBQUk7SUFDUixzQ0FBc0M7SUFDdEMsSUFBSUosRUFBRUssTUFBTSxHQUFHLEdBQUc7UUFDZEosSUFBSUQsRUFBRU0sU0FBUyxDQUFDLEdBQUc7UUFDbkJKLElBQUlGLEVBQUVNLFNBQVMsQ0FBQyxHQUFHO1FBQ25CSCxJQUFJSCxFQUFFTSxTQUFTLENBQUMsR0FBRztRQUNuQkYsSUFBSUosRUFBRU0sU0FBUyxDQUFDLEdBQUc7SUFDbkIsbUNBQW1DO0lBQ3ZDLE9BQ0s7UUFDREwsSUFBSUQsRUFBRU0sU0FBUyxDQUFDLEdBQUc7UUFDbkJKLElBQUlGLEVBQUVNLFNBQVMsQ0FBQyxHQUFHO1FBQ25CSCxJQUFJSCxFQUFFTSxTQUFTLENBQUMsR0FBRztRQUNuQkYsSUFBSUosRUFBRU0sU0FBUyxDQUFDLEdBQUc7UUFDbkJMLEtBQUtBO1FBQ0xDLEtBQUtBO1FBQ0xDLEtBQUtBO1FBQ0xDLEtBQUtBO0lBQ1Q7SUFDQSxPQUFPO1FBQ0hHLEtBQUtDLFNBQVNQLEdBQUc7UUFDakJRLE9BQU9ELFNBQVNOLEdBQUc7UUFDbkJRLE1BQU1GLFNBQVNMLEdBQUc7UUFDbEJRLE9BQU9QLElBQUlJLFNBQVNKLEdBQUcsTUFBTSxNQUFNO0lBQ3ZDO0FBQ0o7QUFDQSxNQUFNUSxNQUFNO0lBQ1JDLE1BQU1mLHlEQUFhQSxDQUFDO0lBQ3BCZ0IsT0FBT2Y7SUFDUGdCLFdBQVdsQiwyQ0FBSUEsQ0FBQ2tCLFNBQVM7QUFDN0I7QUFFZSIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy92YWx1ZS90eXBlcy9jb2xvci9oZXgubWpzPzM2NjYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmdiYSB9IGZyb20gJy4vcmdiYS5tanMnO1xuaW1wb3J0IHsgaXNDb2xvclN0cmluZyB9IGZyb20gJy4vdXRpbHMubWpzJztcblxuZnVuY3Rpb24gcGFyc2VIZXgodikge1xuICAgIGxldCByID0gXCJcIjtcbiAgICBsZXQgZyA9IFwiXCI7XG4gICAgbGV0IGIgPSBcIlwiO1xuICAgIGxldCBhID0gXCJcIjtcbiAgICAvLyBJZiB3ZSBoYXZlIDYgY2hhcmFjdGVycywgaWUgI0ZGMDAwMFxuICAgIGlmICh2Lmxlbmd0aCA+IDUpIHtcbiAgICAgICAgciA9IHYuc3Vic3RyaW5nKDEsIDMpO1xuICAgICAgICBnID0gdi5zdWJzdHJpbmcoMywgNSk7XG4gICAgICAgIGIgPSB2LnN1YnN0cmluZyg1LCA3KTtcbiAgICAgICAgYSA9IHYuc3Vic3RyaW5nKDcsIDkpO1xuICAgICAgICAvLyBPciB3ZSBoYXZlIDMgY2hhcmFjdGVycywgaWUgI0YwMFxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgciA9IHYuc3Vic3RyaW5nKDEsIDIpO1xuICAgICAgICBnID0gdi5zdWJzdHJpbmcoMiwgMyk7XG4gICAgICAgIGIgPSB2LnN1YnN0cmluZygzLCA0KTtcbiAgICAgICAgYSA9IHYuc3Vic3RyaW5nKDQsIDUpO1xuICAgICAgICByICs9IHI7XG4gICAgICAgIGcgKz0gZztcbiAgICAgICAgYiArPSBiO1xuICAgICAgICBhICs9IGE7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHJlZDogcGFyc2VJbnQociwgMTYpLFxuICAgICAgICBncmVlbjogcGFyc2VJbnQoZywgMTYpLFxuICAgICAgICBibHVlOiBwYXJzZUludChiLCAxNiksXG4gICAgICAgIGFscGhhOiBhID8gcGFyc2VJbnQoYSwgMTYpIC8gMjU1IDogMSxcbiAgICB9O1xufVxuY29uc3QgaGV4ID0ge1xuICAgIHRlc3Q6IGlzQ29sb3JTdHJpbmcoXCIjXCIpLFxuICAgIHBhcnNlOiBwYXJzZUhleCxcbiAgICB0cmFuc2Zvcm06IHJnYmEudHJhbnNmb3JtLFxufTtcblxuZXhwb3J0IHsgaGV4IH07XG4iXSwibmFtZXMiOlsicmdiYSIsImlzQ29sb3JTdHJpbmciLCJwYXJzZUhleCIsInYiLCJyIiwiZyIsImIiLCJhIiwibGVuZ3RoIiwic3Vic3RyaW5nIiwicmVkIiwicGFyc2VJbnQiLCJncmVlbiIsImJsdWUiLCJhbHBoYSIsImhleCIsInRlc3QiLCJwYXJzZSIsInRyYW5zZm9ybSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/value/types/color/hex.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/value/types/color/hsla.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/value/types/color/hsla.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hsla: () => (/* binding */ hsla)\n/* harmony export */ });\n/* harmony import */ var _numbers_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../numbers/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/numbers/index.mjs\");\n/* harmony import */ var _numbers_units_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../numbers/units.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/numbers/units.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/utils.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/color/utils.mjs\");\n\n\n\n\nconst hsla = {\n    test: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.isColorString)(\"hsl\", \"hue\"),\n    parse: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.splitColor)(\"hue\", \"saturation\", \"lightness\"),\n    transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 })=>{\n        return \"hsla(\" + Math.round(hue) + \", \" + _numbers_units_mjs__WEBPACK_IMPORTED_MODULE_1__.percent.transform((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.sanitize)(saturation)) + \", \" + _numbers_units_mjs__WEBPACK_IMPORTED_MODULE_1__.percent.transform((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.sanitize)(lightness)) + \", \" + (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.sanitize)(_numbers_index_mjs__WEBPACK_IMPORTED_MODULE_3__.alpha.transform(alpha$1)) + \")\";\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3R5cGVzL2NvbG9yL2hzbGEubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTZDO0FBQ0U7QUFDUDtBQUNnQjtBQUV4RCxNQUFNSyxPQUFPO0lBQ1RDLE1BQU1ILHlEQUFhQSxDQUFDLE9BQU87SUFDM0JJLE9BQU9ILHNEQUFVQSxDQUFDLE9BQU8sY0FBYztJQUN2Q0ksV0FBVyxDQUFDLEVBQUVDLEdBQUcsRUFBRUMsVUFBVSxFQUFFQyxTQUFTLEVBQUVYLE9BQU9ZLFVBQVUsQ0FBQyxFQUFFO1FBQzFELE9BQVEsVUFDSkMsS0FBS0MsS0FBSyxDQUFDTCxPQUNYLE9BQ0FSLHVEQUFPQSxDQUFDTyxTQUFTLENBQUNOLG9EQUFRQSxDQUFDUSxlQUMzQixPQUNBVCx1REFBT0EsQ0FBQ08sU0FBUyxDQUFDTixvREFBUUEsQ0FBQ1MsY0FDM0IsT0FDQVQsb0RBQVFBLENBQUNGLHFEQUFLQSxDQUFDUSxTQUFTLENBQUNJLFlBQ3pCO0lBQ1I7QUFDSjtBQUVnQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy92YWx1ZS90eXBlcy9jb2xvci9oc2xhLm1qcz85ZWE3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFscGhhIH0gZnJvbSAnLi4vbnVtYmVycy9pbmRleC5tanMnO1xuaW1wb3J0IHsgcGVyY2VudCB9IGZyb20gJy4uL251bWJlcnMvdW5pdHMubWpzJztcbmltcG9ydCB7IHNhbml0aXplIH0gZnJvbSAnLi4vdXRpbHMubWpzJztcbmltcG9ydCB7IGlzQ29sb3JTdHJpbmcsIHNwbGl0Q29sb3IgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5cbmNvbnN0IGhzbGEgPSB7XG4gICAgdGVzdDogaXNDb2xvclN0cmluZyhcImhzbFwiLCBcImh1ZVwiKSxcbiAgICBwYXJzZTogc3BsaXRDb2xvcihcImh1ZVwiLCBcInNhdHVyYXRpb25cIiwgXCJsaWdodG5lc3NcIiksXG4gICAgdHJhbnNmb3JtOiAoeyBodWUsIHNhdHVyYXRpb24sIGxpZ2h0bmVzcywgYWxwaGE6IGFscGhhJDEgPSAxIH0pID0+IHtcbiAgICAgICAgcmV0dXJuIChcImhzbGEoXCIgK1xuICAgICAgICAgICAgTWF0aC5yb3VuZChodWUpICtcbiAgICAgICAgICAgIFwiLCBcIiArXG4gICAgICAgICAgICBwZXJjZW50LnRyYW5zZm9ybShzYW5pdGl6ZShzYXR1cmF0aW9uKSkgK1xuICAgICAgICAgICAgXCIsIFwiICtcbiAgICAgICAgICAgIHBlcmNlbnQudHJhbnNmb3JtKHNhbml0aXplKGxpZ2h0bmVzcykpICtcbiAgICAgICAgICAgIFwiLCBcIiArXG4gICAgICAgICAgICBzYW5pdGl6ZShhbHBoYS50cmFuc2Zvcm0oYWxwaGEkMSkpICtcbiAgICAgICAgICAgIFwiKVwiKTtcbiAgICB9LFxufTtcblxuZXhwb3J0IHsgaHNsYSB9O1xuIl0sIm5hbWVzIjpbImFscGhhIiwicGVyY2VudCIsInNhbml0aXplIiwiaXNDb2xvclN0cmluZyIsInNwbGl0Q29sb3IiLCJoc2xhIiwidGVzdCIsInBhcnNlIiwidHJhbnNmb3JtIiwiaHVlIiwic2F0dXJhdGlvbiIsImxpZ2h0bmVzcyIsImFscGhhJDEiLCJNYXRoIiwicm91bmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/value/types/color/hsla.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/value/types/color/index.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/value/types/color/index.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   color: () => (/* binding */ color)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/utils.mjs\");\n/* harmony import */ var _hex_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hex.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/color/hex.mjs\");\n/* harmony import */ var _hsla_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hsla.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/color/hsla.mjs\");\n/* harmony import */ var _rgba_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rgba.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/color/rgba.mjs\");\n\n\n\n\nconst color = {\n    test: (v)=>_rgba_mjs__WEBPACK_IMPORTED_MODULE_0__.rgba.test(v) || _hex_mjs__WEBPACK_IMPORTED_MODULE_1__.hex.test(v) || _hsla_mjs__WEBPACK_IMPORTED_MODULE_2__.hsla.test(v),\n    parse: (v)=>{\n        if (_rgba_mjs__WEBPACK_IMPORTED_MODULE_0__.rgba.test(v)) {\n            return _rgba_mjs__WEBPACK_IMPORTED_MODULE_0__.rgba.parse(v);\n        } else if (_hsla_mjs__WEBPACK_IMPORTED_MODULE_2__.hsla.test(v)) {\n            return _hsla_mjs__WEBPACK_IMPORTED_MODULE_2__.hsla.parse(v);\n        } else {\n            return _hex_mjs__WEBPACK_IMPORTED_MODULE_1__.hex.parse(v);\n        }\n    },\n    transform: (v)=>{\n        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.isString)(v) ? v : v.hasOwnProperty(\"red\") ? _rgba_mjs__WEBPACK_IMPORTED_MODULE_0__.rgba.transform(v) : _hsla_mjs__WEBPACK_IMPORTED_MODULE_2__.hsla.transform(v);\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3R5cGVzL2NvbG9yL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUF3QztBQUNSO0FBQ0U7QUFDQTtBQUVsQyxNQUFNSSxRQUFRO0lBQ1ZDLE1BQU0sQ0FBQ0MsSUFBTUgsMkNBQUlBLENBQUNFLElBQUksQ0FBQ0MsTUFBTUwseUNBQUdBLENBQUNJLElBQUksQ0FBQ0MsTUFBTUosMkNBQUlBLENBQUNHLElBQUksQ0FBQ0M7SUFDdERDLE9BQU8sQ0FBQ0Q7UUFDSixJQUFJSCwyQ0FBSUEsQ0FBQ0UsSUFBSSxDQUFDQyxJQUFJO1lBQ2QsT0FBT0gsMkNBQUlBLENBQUNJLEtBQUssQ0FBQ0Q7UUFDdEIsT0FDSyxJQUFJSiwyQ0FBSUEsQ0FBQ0csSUFBSSxDQUFDQyxJQUFJO1lBQ25CLE9BQU9KLDJDQUFJQSxDQUFDSyxLQUFLLENBQUNEO1FBQ3RCLE9BQ0s7WUFDRCxPQUFPTCx5Q0FBR0EsQ0FBQ00sS0FBSyxDQUFDRDtRQUNyQjtJQUNKO0lBQ0FFLFdBQVcsQ0FBQ0Y7UUFDUixPQUFPTixvREFBUUEsQ0FBQ00sS0FDVkEsSUFDQUEsRUFBRUcsY0FBYyxDQUFDLFNBQ2JOLDJDQUFJQSxDQUFDSyxTQUFTLENBQUNGLEtBQ2ZKLDJDQUFJQSxDQUFDTSxTQUFTLENBQUNGO0lBQzdCO0FBQ0o7QUFFaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdmFsdWUvdHlwZXMvY29sb3IvaW5kZXgubWpzPzcwMzEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICcuLi91dGlscy5tanMnO1xuaW1wb3J0IHsgaGV4IH0gZnJvbSAnLi9oZXgubWpzJztcbmltcG9ydCB7IGhzbGEgfSBmcm9tICcuL2hzbGEubWpzJztcbmltcG9ydCB7IHJnYmEgfSBmcm9tICcuL3JnYmEubWpzJztcblxuY29uc3QgY29sb3IgPSB7XG4gICAgdGVzdDogKHYpID0+IHJnYmEudGVzdCh2KSB8fCBoZXgudGVzdCh2KSB8fCBoc2xhLnRlc3QodiksXG4gICAgcGFyc2U6ICh2KSA9PiB7XG4gICAgICAgIGlmIChyZ2JhLnRlc3QodikpIHtcbiAgICAgICAgICAgIHJldHVybiByZ2JhLnBhcnNlKHYpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGhzbGEudGVzdCh2KSkge1xuICAgICAgICAgICAgcmV0dXJuIGhzbGEucGFyc2Uodik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaGV4LnBhcnNlKHYpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB0cmFuc2Zvcm06ICh2KSA9PiB7XG4gICAgICAgIHJldHVybiBpc1N0cmluZyh2KVxuICAgICAgICAgICAgPyB2XG4gICAgICAgICAgICA6IHYuaGFzT3duUHJvcGVydHkoXCJyZWRcIilcbiAgICAgICAgICAgICAgICA/IHJnYmEudHJhbnNmb3JtKHYpXG4gICAgICAgICAgICAgICAgOiBoc2xhLnRyYW5zZm9ybSh2KTtcbiAgICB9LFxufTtcblxuZXhwb3J0IHsgY29sb3IgfTtcbiJdLCJuYW1lcyI6WyJpc1N0cmluZyIsImhleCIsImhzbGEiLCJyZ2JhIiwiY29sb3IiLCJ0ZXN0IiwidiIsInBhcnNlIiwidHJhbnNmb3JtIiwiaGFzT3duUHJvcGVydHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/value/types/color/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/value/types/color/rgba.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/value/types/color/rgba.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rgbUnit: () => (/* binding */ rgbUnit),\n/* harmony export */   rgba: () => (/* binding */ rgba)\n/* harmony export */ });\n/* harmony import */ var _utils_clamp_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/clamp.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/clamp.mjs\");\n/* harmony import */ var _numbers_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../numbers/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/numbers/index.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/utils.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/color/utils.mjs\");\n\n\n\n\nconst clampRgbUnit = (v)=>(0,_utils_clamp_mjs__WEBPACK_IMPORTED_MODULE_0__.clamp)(0, 255, v);\nconst rgbUnit = {\n    ..._numbers_index_mjs__WEBPACK_IMPORTED_MODULE_1__.number,\n    transform: (v)=>Math.round(clampRgbUnit(v))\n};\nconst rgba = {\n    test: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.isColorString)(\"rgb\", \"red\"),\n    parse: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.splitColor)(\"red\", \"green\", \"blue\"),\n    transform: ({ red, green, blue, alpha: alpha$1 = 1 })=>\"rgba(\" + rgbUnit.transform(red) + \", \" + rgbUnit.transform(green) + \", \" + rgbUnit.transform(blue) + \", \" + (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.sanitize)(_numbers_index_mjs__WEBPACK_IMPORTED_MODULE_1__.alpha.transform(alpha$1)) + \")\"\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3R5cGVzL2NvbG9yL3JnYmEubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFpRDtBQUNJO0FBQ2I7QUFDZ0I7QUFFeEQsTUFBTU0sZUFBZSxDQUFDQyxJQUFNUCx1REFBS0EsQ0FBQyxHQUFHLEtBQUtPO0FBQzFDLE1BQU1DLFVBQVU7SUFDWixHQUFHUCxzREFBTTtJQUNUUSxXQUFXLENBQUNGLElBQU1HLEtBQUtDLEtBQUssQ0FBQ0wsYUFBYUM7QUFDOUM7QUFDQSxNQUFNSyxPQUFPO0lBQ1RDLE1BQU1ULHlEQUFhQSxDQUFDLE9BQU87SUFDM0JVLE9BQU9ULHNEQUFVQSxDQUFDLE9BQU8sU0FBUztJQUNsQ0ksV0FBVyxDQUFDLEVBQUVNLEdBQUcsRUFBRUMsS0FBSyxFQUFFQyxJQUFJLEVBQUVmLE9BQU9nQixVQUFVLENBQUMsRUFBRSxHQUFLLFVBQ3JEVixRQUFRQyxTQUFTLENBQUNNLE9BQ2xCLE9BQ0FQLFFBQVFDLFNBQVMsQ0FBQ08sU0FDbEIsT0FDQVIsUUFBUUMsU0FBUyxDQUFDUSxRQUNsQixPQUNBZCxvREFBUUEsQ0FBQ0QscURBQUtBLENBQUNPLFNBQVMsQ0FBQ1MsWUFDekI7QUFDUjtBQUV5QiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy92YWx1ZS90eXBlcy9jb2xvci9yZ2JhLm1qcz9mNDE2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNsYW1wIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvY2xhbXAubWpzJztcbmltcG9ydCB7IG51bWJlciwgYWxwaGEgfSBmcm9tICcuLi9udW1iZXJzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBzYW5pdGl6ZSB9IGZyb20gJy4uL3V0aWxzLm1qcyc7XG5pbXBvcnQgeyBpc0NvbG9yU3RyaW5nLCBzcGxpdENvbG9yIH0gZnJvbSAnLi91dGlscy5tanMnO1xuXG5jb25zdCBjbGFtcFJnYlVuaXQgPSAodikgPT4gY2xhbXAoMCwgMjU1LCB2KTtcbmNvbnN0IHJnYlVuaXQgPSB7XG4gICAgLi4ubnVtYmVyLFxuICAgIHRyYW5zZm9ybTogKHYpID0+IE1hdGgucm91bmQoY2xhbXBSZ2JVbml0KHYpKSxcbn07XG5jb25zdCByZ2JhID0ge1xuICAgIHRlc3Q6IGlzQ29sb3JTdHJpbmcoXCJyZ2JcIiwgXCJyZWRcIiksXG4gICAgcGFyc2U6IHNwbGl0Q29sb3IoXCJyZWRcIiwgXCJncmVlblwiLCBcImJsdWVcIiksXG4gICAgdHJhbnNmb3JtOiAoeyByZWQsIGdyZWVuLCBibHVlLCBhbHBoYTogYWxwaGEkMSA9IDEgfSkgPT4gXCJyZ2JhKFwiICtcbiAgICAgICAgcmdiVW5pdC50cmFuc2Zvcm0ocmVkKSArXG4gICAgICAgIFwiLCBcIiArXG4gICAgICAgIHJnYlVuaXQudHJhbnNmb3JtKGdyZWVuKSArXG4gICAgICAgIFwiLCBcIiArXG4gICAgICAgIHJnYlVuaXQudHJhbnNmb3JtKGJsdWUpICtcbiAgICAgICAgXCIsIFwiICtcbiAgICAgICAgc2FuaXRpemUoYWxwaGEudHJhbnNmb3JtKGFscGhhJDEpKSArXG4gICAgICAgIFwiKVwiLFxufTtcblxuZXhwb3J0IHsgcmdiVW5pdCwgcmdiYSB9O1xuIl0sIm5hbWVzIjpbImNsYW1wIiwibnVtYmVyIiwiYWxwaGEiLCJzYW5pdGl6ZSIsImlzQ29sb3JTdHJpbmciLCJzcGxpdENvbG9yIiwiY2xhbXBSZ2JVbml0IiwidiIsInJnYlVuaXQiLCJ0cmFuc2Zvcm0iLCJNYXRoIiwicm91bmQiLCJyZ2JhIiwidGVzdCIsInBhcnNlIiwicmVkIiwiZ3JlZW4iLCJibHVlIiwiYWxwaGEkMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/value/types/color/rgba.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/value/types/color/utils.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/value/types/color/utils.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isColorString: () => (/* binding */ isColorString),\n/* harmony export */   splitColor: () => (/* binding */ splitColor)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/utils.mjs\");\n\n/**\n * Returns true if the provided string is a color, ie rgba(0,0,0,0) or #000,\n * but false if a number or multiple colors\n */ const isColorString = (type, testProp)=>(v)=>{\n        return Boolean((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.isString)(v) && _utils_mjs__WEBPACK_IMPORTED_MODULE_0__.singleColorRegex.test(v) && v.startsWith(type) || testProp && Object.prototype.hasOwnProperty.call(v, testProp));\n    };\nconst splitColor = (aName, bName, cName)=>(v)=>{\n        if (!(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.isString)(v)) return v;\n        const [a, b, c, alpha] = v.match(_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.floatRegex);\n        return {\n            [aName]: parseFloat(a),\n            [bName]: parseFloat(b),\n            [cName]: parseFloat(c),\n            alpha: alpha !== undefined ? parseFloat(alpha) : 1\n        };\n    };\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3R5cGVzL2NvbG9yL3V0aWxzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBc0U7QUFFdEU7OztDQUdDLEdBQ0QsTUFBTUcsZ0JBQWdCLENBQUNDLE1BQU1DLFdBQWEsQ0FBQ0M7UUFDdkMsT0FBT0MsUUFBUSxxREFBVUQsTUFBTUwsd0RBQWdCQSxDQUFDTyxJQUFJLENBQUNGLE1BQU1BLEVBQUVHLFVBQVUsQ0FBQ0wsU0FDbkVDLFlBQVlLLE9BQU9DLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNQLEdBQUdEO0lBQzdEO0FBQ0EsTUFBTVMsYUFBYSxDQUFDQyxPQUFPQyxPQUFPQyxRQUFVLENBQUNYO1FBQ3pDLElBQUksQ0FBQ04sb0RBQVFBLENBQUNNLElBQ1YsT0FBT0E7UUFDWCxNQUFNLENBQUNZLEdBQUdDLEdBQUdDLEdBQUdDLE1BQU0sR0FBR2YsRUFBRWdCLEtBQUssQ0FBQ3BCLGtEQUFVQTtRQUMzQyxPQUFPO1lBQ0gsQ0FBQ2EsTUFBTSxFQUFFUSxXQUFXTDtZQUNwQixDQUFDRixNQUFNLEVBQUVPLFdBQVdKO1lBQ3BCLENBQUNGLE1BQU0sRUFBRU0sV0FBV0g7WUFDcEJDLE9BQU9BLFVBQVVHLFlBQVlELFdBQVdGLFNBQVM7UUFDckQ7SUFDSjtBQUVxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy92YWx1ZS90eXBlcy9jb2xvci91dGlscy5tanM/ZTY2MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1N0cmluZywgc2luZ2xlQ29sb3JSZWdleCwgZmxvYXRSZWdleCB9IGZyb20gJy4uL3V0aWxzLm1qcyc7XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBwcm92aWRlZCBzdHJpbmcgaXMgYSBjb2xvciwgaWUgcmdiYSgwLDAsMCwwKSBvciAjMDAwLFxuICogYnV0IGZhbHNlIGlmIGEgbnVtYmVyIG9yIG11bHRpcGxlIGNvbG9yc1xuICovXG5jb25zdCBpc0NvbG9yU3RyaW5nID0gKHR5cGUsIHRlc3RQcm9wKSA9PiAodikgPT4ge1xuICAgIHJldHVybiBCb29sZWFuKChpc1N0cmluZyh2KSAmJiBzaW5nbGVDb2xvclJlZ2V4LnRlc3QodikgJiYgdi5zdGFydHNXaXRoKHR5cGUpKSB8fFxuICAgICAgICAodGVzdFByb3AgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHYsIHRlc3RQcm9wKSkpO1xufTtcbmNvbnN0IHNwbGl0Q29sb3IgPSAoYU5hbWUsIGJOYW1lLCBjTmFtZSkgPT4gKHYpID0+IHtcbiAgICBpZiAoIWlzU3RyaW5nKHYpKVxuICAgICAgICByZXR1cm4gdjtcbiAgICBjb25zdCBbYSwgYiwgYywgYWxwaGFdID0gdi5tYXRjaChmbG9hdFJlZ2V4KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBbYU5hbWVdOiBwYXJzZUZsb2F0KGEpLFxuICAgICAgICBbYk5hbWVdOiBwYXJzZUZsb2F0KGIpLFxuICAgICAgICBbY05hbWVdOiBwYXJzZUZsb2F0KGMpLFxuICAgICAgICBhbHBoYTogYWxwaGEgIT09IHVuZGVmaW5lZCA/IHBhcnNlRmxvYXQoYWxwaGEpIDogMSxcbiAgICB9O1xufTtcblxuZXhwb3J0IHsgaXNDb2xvclN0cmluZywgc3BsaXRDb2xvciB9O1xuIl0sIm5hbWVzIjpbImlzU3RyaW5nIiwic2luZ2xlQ29sb3JSZWdleCIsImZsb2F0UmVnZXgiLCJpc0NvbG9yU3RyaW5nIiwidHlwZSIsInRlc3RQcm9wIiwidiIsIkJvb2xlYW4iLCJ0ZXN0Iiwic3RhcnRzV2l0aCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInNwbGl0Q29sb3IiLCJhTmFtZSIsImJOYW1lIiwiY05hbWUiLCJhIiwiYiIsImMiLCJhbHBoYSIsIm1hdGNoIiwicGFyc2VGbG9hdCIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/value/types/color/utils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/value/types/complex/filter.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/value/types/complex/filter.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   filter: () => (/* binding */ filter)\n/* harmony export */ });\n/* harmony import */ var _index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/complex/index.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/utils.mjs\");\n\n\n/**\n * Properties that should default to 1 or 100%\n */ const maxDefaults = new Set([\n    \"brightness\",\n    \"contrast\",\n    \"saturate\",\n    \"opacity\"\n]);\nfunction applyDefaultFilter(v) {\n    const [name, value] = v.slice(0, -1).split(\"(\");\n    if (name === \"drop-shadow\") return v;\n    const [number] = value.match(_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.floatRegex) || [];\n    if (!number) return v;\n    const unit = value.replace(number, \"\");\n    let defaultValue = maxDefaults.has(name) ? 1 : 0;\n    if (number !== value) defaultValue *= 100;\n    return name + \"(\" + defaultValue + unit + \")\";\n}\nconst functionRegex = /([a-z-]*)\\(.*?\\)/g;\nconst filter = {\n    ..._index_mjs__WEBPACK_IMPORTED_MODULE_1__.complex,\n    getAnimatableNone: (v)=>{\n        const functions = v.match(functionRegex);\n        return functions ? functions.map(applyDefaultFilter).join(\" \") : v;\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3R5cGVzL2NvbXBsZXgvZmlsdGVyLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBc0M7QUFDSTtBQUUxQzs7Q0FFQyxHQUNELE1BQU1FLGNBQWMsSUFBSUMsSUFBSTtJQUFDO0lBQWM7SUFBWTtJQUFZO0NBQVU7QUFDN0UsU0FBU0MsbUJBQW1CQyxDQUFDO0lBQ3pCLE1BQU0sQ0FBQ0MsTUFBTUMsTUFBTSxHQUFHRixFQUFFRyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUdDLEtBQUssQ0FBQztJQUMzQyxJQUFJSCxTQUFTLGVBQ1QsT0FBT0Q7SUFDWCxNQUFNLENBQUNLLE9BQU8sR0FBR0gsTUFBTUksS0FBSyxDQUFDVixrREFBVUEsS0FBSyxFQUFFO0lBQzlDLElBQUksQ0FBQ1MsUUFDRCxPQUFPTDtJQUNYLE1BQU1PLE9BQU9MLE1BQU1NLE9BQU8sQ0FBQ0gsUUFBUTtJQUNuQyxJQUFJSSxlQUFlWixZQUFZYSxHQUFHLENBQUNULFFBQVEsSUFBSTtJQUMvQyxJQUFJSSxXQUFXSCxPQUNYTyxnQkFBZ0I7SUFDcEIsT0FBT1IsT0FBTyxNQUFNUSxlQUFlRixPQUFPO0FBQzlDO0FBQ0EsTUFBTUksZ0JBQWdCO0FBQ3RCLE1BQU1DLFNBQVM7SUFDWCxHQUFHakIsK0NBQU87SUFDVmtCLG1CQUFtQixDQUFDYjtRQUNoQixNQUFNYyxZQUFZZCxFQUFFTSxLQUFLLENBQUNLO1FBQzFCLE9BQU9HLFlBQVlBLFVBQVVDLEdBQUcsQ0FBQ2hCLG9CQUFvQmlCLElBQUksQ0FBQyxPQUFPaEI7SUFDckU7QUFDSjtBQUVrQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy92YWx1ZS90eXBlcy9jb21wbGV4L2ZpbHRlci5tanM/Yjk0NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb21wbGV4IH0gZnJvbSAnLi9pbmRleC5tanMnO1xuaW1wb3J0IHsgZmxvYXRSZWdleCB9IGZyb20gJy4uL3V0aWxzLm1qcyc7XG5cbi8qKlxuICogUHJvcGVydGllcyB0aGF0IHNob3VsZCBkZWZhdWx0IHRvIDEgb3IgMTAwJVxuICovXG5jb25zdCBtYXhEZWZhdWx0cyA9IG5ldyBTZXQoW1wiYnJpZ2h0bmVzc1wiLCBcImNvbnRyYXN0XCIsIFwic2F0dXJhdGVcIiwgXCJvcGFjaXR5XCJdKTtcbmZ1bmN0aW9uIGFwcGx5RGVmYXVsdEZpbHRlcih2KSB7XG4gICAgY29uc3QgW25hbWUsIHZhbHVlXSA9IHYuc2xpY2UoMCwgLTEpLnNwbGl0KFwiKFwiKTtcbiAgICBpZiAobmFtZSA9PT0gXCJkcm9wLXNoYWRvd1wiKVxuICAgICAgICByZXR1cm4gdjtcbiAgICBjb25zdCBbbnVtYmVyXSA9IHZhbHVlLm1hdGNoKGZsb2F0UmVnZXgpIHx8IFtdO1xuICAgIGlmICghbnVtYmVyKVxuICAgICAgICByZXR1cm4gdjtcbiAgICBjb25zdCB1bml0ID0gdmFsdWUucmVwbGFjZShudW1iZXIsIFwiXCIpO1xuICAgIGxldCBkZWZhdWx0VmFsdWUgPSBtYXhEZWZhdWx0cy5oYXMobmFtZSkgPyAxIDogMDtcbiAgICBpZiAobnVtYmVyICE9PSB2YWx1ZSlcbiAgICAgICAgZGVmYXVsdFZhbHVlICo9IDEwMDtcbiAgICByZXR1cm4gbmFtZSArIFwiKFwiICsgZGVmYXVsdFZhbHVlICsgdW5pdCArIFwiKVwiO1xufVxuY29uc3QgZnVuY3Rpb25SZWdleCA9IC8oW2Etei1dKilcXCguKj9cXCkvZztcbmNvbnN0IGZpbHRlciA9IHtcbiAgICAuLi5jb21wbGV4LFxuICAgIGdldEFuaW1hdGFibGVOb25lOiAodikgPT4ge1xuICAgICAgICBjb25zdCBmdW5jdGlvbnMgPSB2Lm1hdGNoKGZ1bmN0aW9uUmVnZXgpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb25zID8gZnVuY3Rpb25zLm1hcChhcHBseURlZmF1bHRGaWx0ZXIpLmpvaW4oXCIgXCIpIDogdjtcbiAgICB9LFxufTtcblxuZXhwb3J0IHsgZmlsdGVyIH07XG4iXSwibmFtZXMiOlsiY29tcGxleCIsImZsb2F0UmVnZXgiLCJtYXhEZWZhdWx0cyIsIlNldCIsImFwcGx5RGVmYXVsdEZpbHRlciIsInYiLCJuYW1lIiwidmFsdWUiLCJzbGljZSIsInNwbGl0IiwibnVtYmVyIiwibWF0Y2giLCJ1bml0IiwicmVwbGFjZSIsImRlZmF1bHRWYWx1ZSIsImhhcyIsImZ1bmN0aW9uUmVnZXgiLCJmaWx0ZXIiLCJnZXRBbmltYXRhYmxlTm9uZSIsImZ1bmN0aW9ucyIsIm1hcCIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/value/types/complex/filter.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/value/types/complex/index.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/value/types/complex/index.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyseComplexValue: () => (/* binding */ analyseComplexValue),\n/* harmony export */   complex: () => (/* binding */ complex)\n/* harmony export */ });\n/* harmony import */ var _render_dom_utils_is_css_variable_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../render/dom/utils/is-css-variable.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs\");\n/* harmony import */ var _utils_noop_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/noop.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/noop.mjs\");\n/* harmony import */ var _color_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../color/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/color/index.mjs\");\n/* harmony import */ var _numbers_index_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../numbers/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/numbers/index.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/utils.mjs\");\n\n\n\n\n\nfunction test(v) {\n    var _a, _b;\n    return isNaN(v) && (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.isString)(v) && (((_a = v.match(_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) + (((_b = v.match(_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) > 0;\n}\nconst cssVarTokeniser = {\n    regex: _render_dom_utils_is_css_variable_mjs__WEBPACK_IMPORTED_MODULE_1__.cssVariableRegex,\n    countKey: \"Vars\",\n    token: \"${v}\",\n    parse: _utils_noop_mjs__WEBPACK_IMPORTED_MODULE_2__.noop\n};\nconst colorTokeniser = {\n    regex: _utils_mjs__WEBPACK_IMPORTED_MODULE_0__.colorRegex,\n    countKey: \"Colors\",\n    token: \"${c}\",\n    parse: _color_index_mjs__WEBPACK_IMPORTED_MODULE_3__.color.parse\n};\nconst numberTokeniser = {\n    regex: _utils_mjs__WEBPACK_IMPORTED_MODULE_0__.floatRegex,\n    countKey: \"Numbers\",\n    token: \"${n}\",\n    parse: _numbers_index_mjs__WEBPACK_IMPORTED_MODULE_4__.number.parse\n};\nfunction tokenise(info, { regex, countKey, token, parse }) {\n    const matches = info.tokenised.match(regex);\n    if (!matches) return;\n    info[\"num\" + countKey] = matches.length;\n    info.tokenised = info.tokenised.replace(regex, token);\n    info.values.push(...matches.map(parse));\n}\nfunction analyseComplexValue(value) {\n    const originalValue = value.toString();\n    const info = {\n        value: originalValue,\n        tokenised: originalValue,\n        values: [],\n        numVars: 0,\n        numColors: 0,\n        numNumbers: 0\n    };\n    if (info.value.includes(\"var(--\")) tokenise(info, cssVarTokeniser);\n    tokenise(info, colorTokeniser);\n    tokenise(info, numberTokeniser);\n    return info;\n}\nfunction parseComplexValue(v) {\n    return analyseComplexValue(v).values;\n}\nfunction createTransformer(source) {\n    const { values, numColors, numVars, tokenised } = analyseComplexValue(source);\n    const numValues = values.length;\n    return (v)=>{\n        let output = tokenised;\n        for(let i = 0; i < numValues; i++){\n            if (i < numVars) {\n                output = output.replace(cssVarTokeniser.token, v[i]);\n            } else if (i < numVars + numColors) {\n                output = output.replace(colorTokeniser.token, _color_index_mjs__WEBPACK_IMPORTED_MODULE_3__.color.transform(v[i]));\n            } else {\n                output = output.replace(numberTokeniser.token, (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.sanitize)(v[i]));\n            }\n        }\n        return output;\n    };\n}\nconst convertNumbersToZero = (v)=>typeof v === \"number\" ? 0 : v;\nfunction getAnimatableNone(v) {\n    const parsed = parseComplexValue(v);\n    const transformer = createTransformer(v);\n    return transformer(parsed.map(convertNumbersToZero));\n}\nconst complex = {\n    test,\n    parse: parseComplexValue,\n    createTransformer,\n    getAnimatableNone\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3R5cGVzL2NvbXBsZXgvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBaUY7QUFDbEM7QUFDSjtBQUNHO0FBQzRCO0FBRTFFLFNBQVNRLEtBQUtDLENBQUM7SUFDWCxJQUFJQyxJQUFJQztJQUNSLE9BQVFDLE1BQU1ILE1BQ1ZILG9EQUFRQSxDQUFDRyxNQUNULENBQUMsQ0FBQyxDQUFDQyxLQUFLRCxFQUFFSSxLQUFLLENBQUNSLGtEQUFVQSxDQUFBLE1BQU8sUUFBUUssT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHSSxNQUFNLEtBQUssS0FDM0UsRUFBQyxDQUFDSCxLQUFLRixFQUFFSSxLQUFLLENBQUNULGtEQUFVQSxDQUFBLE1BQU8sUUFBUU8sT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHRyxNQUFNLEtBQUssS0FDaEY7QUFDWjtBQUNBLE1BQU1DLGtCQUFrQjtJQUNwQkMsT0FBT2hCLG1GQUFnQkE7SUFDdkJpQixVQUFVO0lBQ1ZDLE9BQU87SUFDUEMsT0FBT2xCLGlEQUFJQTtBQUNmO0FBQ0EsTUFBTW1CLGlCQUFpQjtJQUNuQkosT0FBT1osa0RBQVVBO0lBQ2pCYSxVQUFVO0lBQ1ZDLE9BQU87SUFDUEMsT0FBT2pCLG1EQUFLQSxDQUFDaUIsS0FBSztBQUN0QjtBQUNBLE1BQU1FLGtCQUFrQjtJQUNwQkwsT0FBT1gsa0RBQVVBO0lBQ2pCWSxVQUFVO0lBQ1ZDLE9BQU87SUFDUEMsT0FBT2hCLHNEQUFNQSxDQUFDZ0IsS0FBSztBQUN2QjtBQUNBLFNBQVNHLFNBQVNDLElBQUksRUFBRSxFQUFFUCxLQUFLLEVBQUVDLFFBQVEsRUFBRUMsS0FBSyxFQUFFQyxLQUFLLEVBQUU7SUFDckQsTUFBTUssVUFBVUQsS0FBS0UsU0FBUyxDQUFDWixLQUFLLENBQUNHO0lBQ3JDLElBQUksQ0FBQ1EsU0FDRDtJQUNKRCxJQUFJLENBQUMsUUFBUU4sU0FBUyxHQUFHTyxRQUFRVixNQUFNO0lBQ3ZDUyxLQUFLRSxTQUFTLEdBQUdGLEtBQUtFLFNBQVMsQ0FBQ0MsT0FBTyxDQUFDVixPQUFPRTtJQUMvQ0ssS0FBS0ksTUFBTSxDQUFDQyxJQUFJLElBQUlKLFFBQVFLLEdBQUcsQ0FBQ1Y7QUFDcEM7QUFDQSxTQUFTVyxvQkFBb0JDLEtBQUs7SUFDOUIsTUFBTUMsZ0JBQWdCRCxNQUFNRSxRQUFRO0lBQ3BDLE1BQU1WLE9BQU87UUFDVFEsT0FBT0M7UUFDUFAsV0FBV087UUFDWEwsUUFBUSxFQUFFO1FBQ1ZPLFNBQVM7UUFDVEMsV0FBVztRQUNYQyxZQUFZO0lBQ2hCO0lBQ0EsSUFBSWIsS0FBS1EsS0FBSyxDQUFDTSxRQUFRLENBQUMsV0FDcEJmLFNBQVNDLE1BQU1SO0lBQ25CTyxTQUFTQyxNQUFNSDtJQUNmRSxTQUFTQyxNQUFNRjtJQUNmLE9BQU9FO0FBQ1g7QUFDQSxTQUFTZSxrQkFBa0I3QixDQUFDO0lBQ3hCLE9BQU9xQixvQkFBb0JyQixHQUFHa0IsTUFBTTtBQUN4QztBQUNBLFNBQVNZLGtCQUFrQkMsTUFBTTtJQUM3QixNQUFNLEVBQUViLE1BQU0sRUFBRVEsU0FBUyxFQUFFRCxPQUFPLEVBQUVULFNBQVMsRUFBRSxHQUFHSyxvQkFBb0JVO0lBQ3RFLE1BQU1DLFlBQVlkLE9BQU9iLE1BQU07SUFDL0IsT0FBTyxDQUFDTDtRQUNKLElBQUlpQyxTQUFTakI7UUFDYixJQUFLLElBQUlrQixJQUFJLEdBQUdBLElBQUlGLFdBQVdFLElBQUs7WUFDaEMsSUFBSUEsSUFBSVQsU0FBUztnQkFDYlEsU0FBU0EsT0FBT2hCLE9BQU8sQ0FBQ1gsZ0JBQWdCRyxLQUFLLEVBQUVULENBQUMsQ0FBQ2tDLEVBQUU7WUFDdkQsT0FDSyxJQUFJQSxJQUFJVCxVQUFVQyxXQUFXO2dCQUM5Qk8sU0FBU0EsT0FBT2hCLE9BQU8sQ0FBQ04sZUFBZUYsS0FBSyxFQUFFaEIsbURBQUtBLENBQUMwQyxTQUFTLENBQUNuQyxDQUFDLENBQUNrQyxFQUFFO1lBQ3RFLE9BQ0s7Z0JBQ0RELFNBQVNBLE9BQU9oQixPQUFPLENBQUNMLGdCQUFnQkgsS0FBSyxFQUFFWCxvREFBUUEsQ0FBQ0UsQ0FBQyxDQUFDa0MsRUFBRTtZQUNoRTtRQUNKO1FBQ0EsT0FBT0Q7SUFDWDtBQUNKO0FBQ0EsTUFBTUcsdUJBQXVCLENBQUNwQyxJQUFNLE9BQU9BLE1BQU0sV0FBVyxJQUFJQTtBQUNoRSxTQUFTcUMsa0JBQWtCckMsQ0FBQztJQUN4QixNQUFNc0MsU0FBU1Qsa0JBQWtCN0I7SUFDakMsTUFBTXVDLGNBQWNULGtCQUFrQjlCO0lBQ3RDLE9BQU91QyxZQUFZRCxPQUFPbEIsR0FBRyxDQUFDZ0I7QUFDbEM7QUFDQSxNQUFNSSxVQUFVO0lBQ1p6QztJQUNBVyxPQUFPbUI7SUFDUEM7SUFDQU87QUFDSjtBQUV3QyIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy92YWx1ZS90eXBlcy9jb21wbGV4L2luZGV4Lm1qcz9iNmMwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNzc1ZhcmlhYmxlUmVnZXggfSBmcm9tICcuLi8uLi8uLi9yZW5kZXIvZG9tL3V0aWxzL2lzLWNzcy12YXJpYWJsZS5tanMnO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL25vb3AubWpzJztcbmltcG9ydCB7IGNvbG9yIH0gZnJvbSAnLi4vY29sb3IvaW5kZXgubWpzJztcbmltcG9ydCB7IG51bWJlciB9IGZyb20gJy4uL251bWJlcnMvaW5kZXgubWpzJztcbmltcG9ydCB7IGNvbG9yUmVnZXgsIGZsb2F0UmVnZXgsIGlzU3RyaW5nLCBzYW5pdGl6ZSB9IGZyb20gJy4uL3V0aWxzLm1qcyc7XG5cbmZ1bmN0aW9uIHRlc3Qodikge1xuICAgIHZhciBfYSwgX2I7XG4gICAgcmV0dXJuIChpc05hTih2KSAmJlxuICAgICAgICBpc1N0cmluZyh2KSAmJlxuICAgICAgICAoKChfYSA9IHYubWF0Y2goZmxvYXRSZWdleCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sZW5ndGgpIHx8IDApICtcbiAgICAgICAgICAgICgoKF9iID0gdi5tYXRjaChjb2xvclJlZ2V4KSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmxlbmd0aCkgfHwgMCkgPlxuICAgICAgICAgICAgMCk7XG59XG5jb25zdCBjc3NWYXJUb2tlbmlzZXIgPSB7XG4gICAgcmVnZXg6IGNzc1ZhcmlhYmxlUmVnZXgsXG4gICAgY291bnRLZXk6IFwiVmFyc1wiLFxuICAgIHRva2VuOiBcIiR7dn1cIixcbiAgICBwYXJzZTogbm9vcCxcbn07XG5jb25zdCBjb2xvclRva2VuaXNlciA9IHtcbiAgICByZWdleDogY29sb3JSZWdleCxcbiAgICBjb3VudEtleTogXCJDb2xvcnNcIixcbiAgICB0b2tlbjogXCIke2N9XCIsXG4gICAgcGFyc2U6IGNvbG9yLnBhcnNlLFxufTtcbmNvbnN0IG51bWJlclRva2VuaXNlciA9IHtcbiAgICByZWdleDogZmxvYXRSZWdleCxcbiAgICBjb3VudEtleTogXCJOdW1iZXJzXCIsXG4gICAgdG9rZW46IFwiJHtufVwiLFxuICAgIHBhcnNlOiBudW1iZXIucGFyc2UsXG59O1xuZnVuY3Rpb24gdG9rZW5pc2UoaW5mbywgeyByZWdleCwgY291bnRLZXksIHRva2VuLCBwYXJzZSB9KSB7XG4gICAgY29uc3QgbWF0Y2hlcyA9IGluZm8udG9rZW5pc2VkLm1hdGNoKHJlZ2V4KTtcbiAgICBpZiAoIW1hdGNoZXMpXG4gICAgICAgIHJldHVybjtcbiAgICBpbmZvW1wibnVtXCIgKyBjb3VudEtleV0gPSBtYXRjaGVzLmxlbmd0aDtcbiAgICBpbmZvLnRva2VuaXNlZCA9IGluZm8udG9rZW5pc2VkLnJlcGxhY2UocmVnZXgsIHRva2VuKTtcbiAgICBpbmZvLnZhbHVlcy5wdXNoKC4uLm1hdGNoZXMubWFwKHBhcnNlKSk7XG59XG5mdW5jdGlvbiBhbmFseXNlQ29tcGxleFZhbHVlKHZhbHVlKSB7XG4gICAgY29uc3Qgb3JpZ2luYWxWYWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgY29uc3QgaW5mbyA9IHtcbiAgICAgICAgdmFsdWU6IG9yaWdpbmFsVmFsdWUsXG4gICAgICAgIHRva2VuaXNlZDogb3JpZ2luYWxWYWx1ZSxcbiAgICAgICAgdmFsdWVzOiBbXSxcbiAgICAgICAgbnVtVmFyczogMCxcbiAgICAgICAgbnVtQ29sb3JzOiAwLFxuICAgICAgICBudW1OdW1iZXJzOiAwLFxuICAgIH07XG4gICAgaWYgKGluZm8udmFsdWUuaW5jbHVkZXMoXCJ2YXIoLS1cIikpXG4gICAgICAgIHRva2VuaXNlKGluZm8sIGNzc1ZhclRva2VuaXNlcik7XG4gICAgdG9rZW5pc2UoaW5mbywgY29sb3JUb2tlbmlzZXIpO1xuICAgIHRva2VuaXNlKGluZm8sIG51bWJlclRva2VuaXNlcik7XG4gICAgcmV0dXJuIGluZm87XG59XG5mdW5jdGlvbiBwYXJzZUNvbXBsZXhWYWx1ZSh2KSB7XG4gICAgcmV0dXJuIGFuYWx5c2VDb21wbGV4VmFsdWUodikudmFsdWVzO1xufVxuZnVuY3Rpb24gY3JlYXRlVHJhbnNmb3JtZXIoc291cmNlKSB7XG4gICAgY29uc3QgeyB2YWx1ZXMsIG51bUNvbG9ycywgbnVtVmFycywgdG9rZW5pc2VkIH0gPSBhbmFseXNlQ29tcGxleFZhbHVlKHNvdXJjZSk7XG4gICAgY29uc3QgbnVtVmFsdWVzID0gdmFsdWVzLmxlbmd0aDtcbiAgICByZXR1cm4gKHYpID0+IHtcbiAgICAgICAgbGV0IG91dHB1dCA9IHRva2VuaXNlZDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1WYWx1ZXM7IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgPCBudW1WYXJzKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0LnJlcGxhY2UoY3NzVmFyVG9rZW5pc2VyLnRva2VuLCB2W2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGkgPCBudW1WYXJzICsgbnVtQ29sb3JzKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0LnJlcGxhY2UoY29sb3JUb2tlbmlzZXIudG9rZW4sIGNvbG9yLnRyYW5zZm9ybSh2W2ldKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQucmVwbGFjZShudW1iZXJUb2tlbmlzZXIudG9rZW4sIHNhbml0aXplKHZbaV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH07XG59XG5jb25zdCBjb252ZXJ0TnVtYmVyc1RvWmVybyA9ICh2KSA9PiB0eXBlb2YgdiA9PT0gXCJudW1iZXJcIiA/IDAgOiB2O1xuZnVuY3Rpb24gZ2V0QW5pbWF0YWJsZU5vbmUodikge1xuICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlQ29tcGxleFZhbHVlKHYpO1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVHJhbnNmb3JtZXIodik7XG4gICAgcmV0dXJuIHRyYW5zZm9ybWVyKHBhcnNlZC5tYXAoY29udmVydE51bWJlcnNUb1plcm8pKTtcbn1cbmNvbnN0IGNvbXBsZXggPSB7XG4gICAgdGVzdCxcbiAgICBwYXJzZTogcGFyc2VDb21wbGV4VmFsdWUsXG4gICAgY3JlYXRlVHJhbnNmb3JtZXIsXG4gICAgZ2V0QW5pbWF0YWJsZU5vbmUsXG59O1xuXG5leHBvcnQgeyBhbmFseXNlQ29tcGxleFZhbHVlLCBjb21wbGV4IH07XG4iXSwibmFtZXMiOlsiY3NzVmFyaWFibGVSZWdleCIsIm5vb3AiLCJjb2xvciIsIm51bWJlciIsImNvbG9yUmVnZXgiLCJmbG9hdFJlZ2V4IiwiaXNTdHJpbmciLCJzYW5pdGl6ZSIsInRlc3QiLCJ2IiwiX2EiLCJfYiIsImlzTmFOIiwibWF0Y2giLCJsZW5ndGgiLCJjc3NWYXJUb2tlbmlzZXIiLCJyZWdleCIsImNvdW50S2V5IiwidG9rZW4iLCJwYXJzZSIsImNvbG9yVG9rZW5pc2VyIiwibnVtYmVyVG9rZW5pc2VyIiwidG9rZW5pc2UiLCJpbmZvIiwibWF0Y2hlcyIsInRva2VuaXNlZCIsInJlcGxhY2UiLCJ2YWx1ZXMiLCJwdXNoIiwibWFwIiwiYW5hbHlzZUNvbXBsZXhWYWx1ZSIsInZhbHVlIiwib3JpZ2luYWxWYWx1ZSIsInRvU3RyaW5nIiwibnVtVmFycyIsIm51bUNvbG9ycyIsIm51bU51bWJlcnMiLCJpbmNsdWRlcyIsInBhcnNlQ29tcGxleFZhbHVlIiwiY3JlYXRlVHJhbnNmb3JtZXIiLCJzb3VyY2UiLCJudW1WYWx1ZXMiLCJvdXRwdXQiLCJpIiwidHJhbnNmb3JtIiwiY29udmVydE51bWJlcnNUb1plcm8iLCJnZXRBbmltYXRhYmxlTm9uZSIsInBhcnNlZCIsInRyYW5zZm9ybWVyIiwiY29tcGxleCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/value/types/complex/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/value/types/numbers/index.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/value/types/numbers/index.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   alpha: () => (/* binding */ alpha),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   scale: () => (/* binding */ scale)\n/* harmony export */ });\n/* harmony import */ var _utils_clamp_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/clamp.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/clamp.mjs\");\n\nconst number = {\n    test: (v)=>typeof v === \"number\",\n    parse: parseFloat,\n    transform: (v)=>v\n};\nconst alpha = {\n    ...number,\n    transform: (v)=>(0,_utils_clamp_mjs__WEBPACK_IMPORTED_MODULE_0__.clamp)(0, 1, v)\n};\nconst scale = {\n    ...number,\n    default: 1\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3R5cGVzL251bWJlcnMvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBaUQ7QUFFakQsTUFBTUMsU0FBUztJQUNYQyxNQUFNLENBQUNDLElBQU0sT0FBT0EsTUFBTTtJQUMxQkMsT0FBT0M7SUFDUEMsV0FBVyxDQUFDSCxJQUFNQTtBQUN0QjtBQUNBLE1BQU1JLFFBQVE7SUFDVixHQUFHTixNQUFNO0lBQ1RLLFdBQVcsQ0FBQ0gsSUFBTUgsdURBQUtBLENBQUMsR0FBRyxHQUFHRztBQUNsQztBQUNBLE1BQU1LLFFBQVE7SUFDVixHQUFHUCxNQUFNO0lBQ1RRLFNBQVM7QUFDYjtBQUVnQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RheWZvbGlvLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy92YWx1ZS90eXBlcy9udW1iZXJzL2luZGV4Lm1qcz85ZmIxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNsYW1wIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvY2xhbXAubWpzJztcblxuY29uc3QgbnVtYmVyID0ge1xuICAgIHRlc3Q6ICh2KSA9PiB0eXBlb2YgdiA9PT0gXCJudW1iZXJcIixcbiAgICBwYXJzZTogcGFyc2VGbG9hdCxcbiAgICB0cmFuc2Zvcm06ICh2KSA9PiB2LFxufTtcbmNvbnN0IGFscGhhID0ge1xuICAgIC4uLm51bWJlcixcbiAgICB0cmFuc2Zvcm06ICh2KSA9PiBjbGFtcCgwLCAxLCB2KSxcbn07XG5jb25zdCBzY2FsZSA9IHtcbiAgICAuLi5udW1iZXIsXG4gICAgZGVmYXVsdDogMSxcbn07XG5cbmV4cG9ydCB7IGFscGhhLCBudW1iZXIsIHNjYWxlIH07XG4iXSwibmFtZXMiOlsiY2xhbXAiLCJudW1iZXIiLCJ0ZXN0IiwidiIsInBhcnNlIiwicGFyc2VGbG9hdCIsInRyYW5zZm9ybSIsImFscGhhIiwic2NhbGUiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/value/types/numbers/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/value/types/numbers/units.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/value/types/numbers/units.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   degrees: () => (/* binding */ degrees),\n/* harmony export */   percent: () => (/* binding */ percent),\n/* harmony export */   progressPercentage: () => (/* binding */ progressPercentage),\n/* harmony export */   px: () => (/* binding */ px),\n/* harmony export */   vh: () => (/* binding */ vh),\n/* harmony export */   vw: () => (/* binding */ vw)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/types/utils.mjs\");\n\nconst createUnitType = (unit)=>({\n        test: (v)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.isString)(v) && v.endsWith(unit) && v.split(\" \").length === 1,\n        parse: parseFloat,\n        transform: (v)=>`${v}${unit}`\n    });\nconst degrees = createUnitType(\"deg\");\nconst percent = createUnitType(\"%\");\nconst px = createUnitType(\"px\");\nconst vh = createUnitType(\"vh\");\nconst vw = createUnitType(\"vw\");\nconst progressPercentage = {\n    ...percent,\n    parse: (v)=>percent.parse(v) / 100,\n    transform: (v)=>percent.transform(v * 100)\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3R5cGVzL251bWJlcnMvdW5pdHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBd0M7QUFFeEMsTUFBTUMsaUJBQWlCLENBQUNDLE9BQVU7UUFDOUJDLE1BQU0sQ0FBQ0MsSUFBTUosb0RBQVFBLENBQUNJLE1BQU1BLEVBQUVDLFFBQVEsQ0FBQ0gsU0FBU0UsRUFBRUUsS0FBSyxDQUFDLEtBQUtDLE1BQU0sS0FBSztRQUN4RUMsT0FBT0M7UUFDUEMsV0FBVyxDQUFDTixJQUFNLENBQUMsRUFBRUEsRUFBRSxFQUFFRixLQUFLLENBQUM7SUFDbkM7QUFDQSxNQUFNUyxVQUFVVixlQUFlO0FBQy9CLE1BQU1XLFVBQVVYLGVBQWU7QUFDL0IsTUFBTVksS0FBS1osZUFBZTtBQUMxQixNQUFNYSxLQUFLYixlQUFlO0FBQzFCLE1BQU1jLEtBQUtkLGVBQWU7QUFDMUIsTUFBTWUscUJBQXFCO0lBQ3ZCLEdBQUdKLE9BQU87SUFDVkosT0FBTyxDQUFDSixJQUFNUSxRQUFRSixLQUFLLENBQUNKLEtBQUs7SUFDakNNLFdBQVcsQ0FBQ04sSUFBTVEsUUFBUUYsU0FBUyxDQUFDTixJQUFJO0FBQzVDO0FBRTREIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3R5cGVzL251bWJlcnMvdW5pdHMubWpzPzlmZDIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICcuLi91dGlscy5tanMnO1xuXG5jb25zdCBjcmVhdGVVbml0VHlwZSA9ICh1bml0KSA9PiAoe1xuICAgIHRlc3Q6ICh2KSA9PiBpc1N0cmluZyh2KSAmJiB2LmVuZHNXaXRoKHVuaXQpICYmIHYuc3BsaXQoXCIgXCIpLmxlbmd0aCA9PT0gMSxcbiAgICBwYXJzZTogcGFyc2VGbG9hdCxcbiAgICB0cmFuc2Zvcm06ICh2KSA9PiBgJHt2fSR7dW5pdH1gLFxufSk7XG5jb25zdCBkZWdyZWVzID0gY3JlYXRlVW5pdFR5cGUoXCJkZWdcIik7XG5jb25zdCBwZXJjZW50ID0gY3JlYXRlVW5pdFR5cGUoXCIlXCIpO1xuY29uc3QgcHggPSBjcmVhdGVVbml0VHlwZShcInB4XCIpO1xuY29uc3QgdmggPSBjcmVhdGVVbml0VHlwZShcInZoXCIpO1xuY29uc3QgdncgPSBjcmVhdGVVbml0VHlwZShcInZ3XCIpO1xuY29uc3QgcHJvZ3Jlc3NQZXJjZW50YWdlID0ge1xuICAgIC4uLnBlcmNlbnQsXG4gICAgcGFyc2U6ICh2KSA9PiBwZXJjZW50LnBhcnNlKHYpIC8gMTAwLFxuICAgIHRyYW5zZm9ybTogKHYpID0+IHBlcmNlbnQudHJhbnNmb3JtKHYgKiAxMDApLFxufTtcblxuZXhwb3J0IHsgZGVncmVlcywgcGVyY2VudCwgcHJvZ3Jlc3NQZXJjZW50YWdlLCBweCwgdmgsIHZ3IH07XG4iXSwibmFtZXMiOlsiaXNTdHJpbmciLCJjcmVhdGVVbml0VHlwZSIsInVuaXQiLCJ0ZXN0IiwidiIsImVuZHNXaXRoIiwic3BsaXQiLCJsZW5ndGgiLCJwYXJzZSIsInBhcnNlRmxvYXQiLCJ0cmFuc2Zvcm0iLCJkZWdyZWVzIiwicGVyY2VudCIsInB4IiwidmgiLCJ2dyIsInByb2dyZXNzUGVyY2VudGFnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/value/types/numbers/units.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/value/types/utils.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/value/types/utils.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   colorRegex: () => (/* binding */ colorRegex),\n/* harmony export */   floatRegex: () => (/* binding */ floatRegex),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   sanitize: () => (/* binding */ sanitize),\n/* harmony export */   singleColorRegex: () => (/* binding */ singleColorRegex)\n/* harmony export */ });\n/**\n * TODO: When we move from string as a source of truth to data models\n * everything in this folder should probably be referred to as models vs types\n */ // If this number is a decimal, make it just five decimal places\n// to avoid exponents\nconst sanitize = (v)=>Math.round(v * 100000) / 100000;\nconst floatRegex = /(-)?([\\d]*\\.?[\\d])+/g;\nconst colorRegex = /(#[0-9a-f]{3,8}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2}(-?[\\d\\.]+%?)\\s*[\\,\\/]?\\s*[\\d\\.]*%?\\))/gi;\nconst singleColorRegex = /^(#[0-9a-f]{3,8}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2}(-?[\\d\\.]+%?)\\s*[\\,\\/]?\\s*[\\d\\.]*%?\\))$/i;\nfunction isString(v) {\n    return typeof v === \"string\";\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3R5cGVzL3V0aWxzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7Q0FHQyxHQUNELGdFQUFnRTtBQUNoRSxxQkFBcUI7QUFDckIsTUFBTUEsV0FBVyxDQUFDQyxJQUFNQyxLQUFLQyxLQUFLLENBQUNGLElBQUksVUFBVTtBQUNqRCxNQUFNRyxhQUFhO0FBQ25CLE1BQU1DLGFBQWE7QUFDbkIsTUFBTUMsbUJBQW1CO0FBQ3pCLFNBQVNDLFNBQVNOLENBQUM7SUFDZixPQUFPLE9BQU9BLE1BQU07QUFDeEI7QUFFd0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXlmb2xpby8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdmFsdWUvdHlwZXMvdXRpbHMubWpzPzhmZjMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUT0RPOiBXaGVuIHdlIG1vdmUgZnJvbSBzdHJpbmcgYXMgYSBzb3VyY2Ugb2YgdHJ1dGggdG8gZGF0YSBtb2RlbHNcbiAqIGV2ZXJ5dGhpbmcgaW4gdGhpcyBmb2xkZXIgc2hvdWxkIHByb2JhYmx5IGJlIHJlZmVycmVkIHRvIGFzIG1vZGVscyB2cyB0eXBlc1xuICovXG4vLyBJZiB0aGlzIG51bWJlciBpcyBhIGRlY2ltYWwsIG1ha2UgaXQganVzdCBmaXZlIGRlY2ltYWwgcGxhY2VzXG4vLyB0byBhdm9pZCBleHBvbmVudHNcbmNvbnN0IHNhbml0aXplID0gKHYpID0+IE1hdGgucm91bmQodiAqIDEwMDAwMCkgLyAxMDAwMDA7XG5jb25zdCBmbG9hdFJlZ2V4ID0gLygtKT8oW1xcZF0qXFwuP1tcXGRdKSsvZztcbmNvbnN0IGNvbG9yUmVnZXggPSAvKCNbMC05YS1mXXszLDh9fChyZ2J8aHNsKWE/XFwoKC0/W1xcZFxcLl0rJT9bLFxcc10rKXsyfSgtP1tcXGRcXC5dKyU/KVxccypbXFwsXFwvXT9cXHMqW1xcZFxcLl0qJT9cXCkpL2dpO1xuY29uc3Qgc2luZ2xlQ29sb3JSZWdleCA9IC9eKCNbMC05YS1mXXszLDh9fChyZ2J8aHNsKWE/XFwoKC0/W1xcZFxcLl0rJT9bLFxcc10rKXsyfSgtP1tcXGRcXC5dKyU/KVxccypbXFwsXFwvXT9cXHMqW1xcZFxcLl0qJT9cXCkpJC9pO1xuZnVuY3Rpb24gaXNTdHJpbmcodikge1xuICAgIHJldHVybiB0eXBlb2YgdiA9PT0gXCJzdHJpbmdcIjtcbn1cblxuZXhwb3J0IHsgY29sb3JSZWdleCwgZmxvYXRSZWdleCwgaXNTdHJpbmcsIHNhbml0aXplLCBzaW5nbGVDb2xvclJlZ2V4IH07XG4iXSwibmFtZXMiOlsic2FuaXRpemUiLCJ2IiwiTWF0aCIsInJvdW5kIiwiZmxvYXRSZWdleCIsImNvbG9yUmVnZXgiLCJzaW5nbGVDb2xvclJlZ2V4IiwiaXNTdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/value/types/utils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/value/use-will-change/is.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/value/use-will-change/is.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isWillChangeMotionValue: () => (/* binding */ isWillChangeMotionValue)\n/* harmony export */ });\n/* harmony import */ var _utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/is-motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs\");\n\nfunction isWillChangeMotionValue(value) {\n    return Boolean((0,_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_0__.isMotionValue)(value) && value.add);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3VzZS13aWxsLWNoYW5nZS9pcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNkQ7QUFFN0QsU0FBU0Msd0JBQXdCQyxLQUFLO0lBQ2xDLE9BQU9DLFFBQVFILHlFQUFhQSxDQUFDRSxVQUFVQSxNQUFNRSxHQUFHO0FBQ3BEO0FBRW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3VzZS13aWxsLWNoYW5nZS9pcy5tanM/YWM3MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc01vdGlvblZhbHVlIH0gZnJvbSAnLi4vdXRpbHMvaXMtbW90aW9uLXZhbHVlLm1qcyc7XG5cbmZ1bmN0aW9uIGlzV2lsbENoYW5nZU1vdGlvblZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4oaXNNb3Rpb25WYWx1ZSh2YWx1ZSkgJiYgdmFsdWUuYWRkKTtcbn1cblxuZXhwb3J0IHsgaXNXaWxsQ2hhbmdlTW90aW9uVmFsdWUgfTtcbiJdLCJuYW1lcyI6WyJpc01vdGlvblZhbHVlIiwiaXNXaWxsQ2hhbmdlTW90aW9uVmFsdWUiLCJ2YWx1ZSIsIkJvb2xlYW4iLCJhZGQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/value/use-will-change/is.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isMotionValue: () => (/* binding */ isMotionValue)\n/* harmony export */ });\nconst isMotionValue = (value)=>Boolean(value && value.getVelocity);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3V0aWxzL2lzLW1vdGlvbi12YWx1ZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLGdCQUFnQixDQUFDQyxRQUFVQyxRQUFRRCxTQUFTQSxNQUFNRSxXQUFXO0FBRTFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3V0aWxzL2lzLW1vdGlvbi12YWx1ZS5tanM/ZDViNCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBpc01vdGlvblZhbHVlID0gKHZhbHVlKSA9PiBCb29sZWFuKHZhbHVlICYmIHZhbHVlLmdldFZlbG9jaXR5KTtcblxuZXhwb3J0IHsgaXNNb3Rpb25WYWx1ZSB9O1xuIl0sIm5hbWVzIjpbImlzTW90aW9uVmFsdWUiLCJ2YWx1ZSIsIkJvb2xlYW4iLCJnZXRWZWxvY2l0eSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resolveMotionValue: () => (/* binding */ resolveMotionValue)\n/* harmony export */ });\n/* harmony import */ var _utils_resolve_value_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/resolve-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/resolve-value.mjs\");\n/* harmony import */ var _is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is-motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs\");\n\n\n/**\n * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself\n *\n * TODO: Remove and move to library\n */ function resolveMotionValue(value) {\n    const unwrappedValue = (0,_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_0__.isMotionValue)(value) ? value.get() : value;\n    return (0,_utils_resolve_value_mjs__WEBPACK_IMPORTED_MODULE_1__.isCustomValue)(unwrappedValue) ? unwrappedValue.toValue() : unwrappedValue;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3V0aWxzL3Jlc29sdmUtbW90aW9uLXZhbHVlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBOEQ7QUFDUjtBQUV0RDs7OztDQUlDLEdBQ0QsU0FBU0UsbUJBQW1CQyxLQUFLO0lBQzdCLE1BQU1DLGlCQUFpQkgsbUVBQWFBLENBQUNFLFNBQVNBLE1BQU1FLEdBQUcsS0FBS0Y7SUFDNUQsT0FBT0gsdUVBQWFBLENBQUNJLGtCQUNmQSxlQUFlRSxPQUFPLEtBQ3RCRjtBQUNWO0FBRThCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGF5Zm9saW8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3V0aWxzL3Jlc29sdmUtbW90aW9uLXZhbHVlLm1qcz9jZWMxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzQ3VzdG9tVmFsdWUgfSBmcm9tICcuLi8uLi91dGlscy9yZXNvbHZlLXZhbHVlLm1qcyc7XG5pbXBvcnQgeyBpc01vdGlvblZhbHVlIH0gZnJvbSAnLi9pcy1tb3Rpb24tdmFsdWUubWpzJztcblxuLyoqXG4gKiBJZiB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgYSBNb3Rpb25WYWx1ZSwgdGhpcyByZXR1cm5zIHRoZSBhY3R1YWwgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHRoZSB2YWx1ZSBpdHNlbGZcbiAqXG4gKiBUT0RPOiBSZW1vdmUgYW5kIG1vdmUgdG8gbGlicmFyeVxuICovXG5mdW5jdGlvbiByZXNvbHZlTW90aW9uVmFsdWUodmFsdWUpIHtcbiAgICBjb25zdCB1bndyYXBwZWRWYWx1ZSA9IGlzTW90aW9uVmFsdWUodmFsdWUpID8gdmFsdWUuZ2V0KCkgOiB2YWx1ZTtcbiAgICByZXR1cm4gaXNDdXN0b21WYWx1ZSh1bndyYXBwZWRWYWx1ZSlcbiAgICAgICAgPyB1bndyYXBwZWRWYWx1ZS50b1ZhbHVlKClcbiAgICAgICAgOiB1bndyYXBwZWRWYWx1ZTtcbn1cblxuZXhwb3J0IHsgcmVzb2x2ZU1vdGlvblZhbHVlIH07XG4iXSwibmFtZXMiOlsiaXNDdXN0b21WYWx1ZSIsImlzTW90aW9uVmFsdWUiLCJyZXNvbHZlTW90aW9uVmFsdWUiLCJ2YWx1ZSIsInVud3JhcHBlZFZhbHVlIiwiZ2V0IiwidG9WYWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs\n");

/***/ })

};
;